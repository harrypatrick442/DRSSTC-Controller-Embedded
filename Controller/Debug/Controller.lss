
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000320  00800100  00002bb0  00002c64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bb0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000149  00800420  00800420  00002f84  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00002f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000024  00000000  00000000  00002f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000001e  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  00002fca  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003028  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000698  00000000  00000000  00003068  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b88f  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000037b6  00000000  00000000  0000ef8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000342a  00000000  00000000  00012745  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000119c  00000000  00000000  00015b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030b3  00000000  00000000  00016d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004afd  00000000  00000000  00019dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c8  00000000  00000000  0001e8bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__dtors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_14>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	cf 05       	cpc	r28, r15
      6a:	6b 07       	cpc	r22, r27
      6c:	c9 07       	cpc	r28, r25
      6e:	ab 0b       	sbc	r26, r27
      70:	09 0c       	add	r0, r9
      72:	22 11       	cpse	r18, r2

00000074 <__ctors_end>:
      74:	1a 0c       	add	r1, r10

00000076 <__dtors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf ef       	ldi	r28, 0xFF	; 255
      7c:	d8 e0       	ldi	r29, 0x08	; 8
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
      82:	14 e0       	ldi	r17, 0x04	; 4
      84:	a0 e0       	ldi	r26, 0x00	; 0
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	e0 eb       	ldi	r30, 0xB0	; 176
      8a:	fb e2       	ldi	r31, 0x2B	; 43
      8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
      8e:	05 90       	lpm	r0, Z+
      90:	0d 92       	st	X+, r0
      92:	a0 32       	cpi	r26, 0x20	; 32
      94:	b1 07       	cpc	r27, r17
      96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
      98:	25 e0       	ldi	r18, 0x05	; 5
      9a:	a0 e2       	ldi	r26, 0x20	; 32
      9c:	b4 e0       	ldi	r27, 0x04	; 4
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	a9 36       	cpi	r26, 0x69	; 105
      a4:	b2 07       	cpc	r27, r18
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>

000000a8 <__do_global_ctors>:
      a8:	10 e0       	ldi	r17, 0x00	; 0
      aa:	ca e3       	ldi	r28, 0x3A	; 58
      ac:	d0 e0       	ldi	r29, 0x00	; 0
      ae:	04 c0       	rjmp	.+8      	; 0xb8 <__do_global_ctors+0x10>
      b0:	21 97       	sbiw	r28, 0x01	; 1
      b2:	fe 01       	movw	r30, r28
      b4:	0e 94 2d 11 	call	0x225a	; 0x225a <__tablejump2__>
      b8:	c4 33       	cpi	r28, 0x34	; 52
      ba:	d1 07       	cpc	r29, r17
      bc:	c9 f7       	brne	.-14     	; 0xb0 <__do_global_ctors+0x8>
      be:	0e 94 37 01 	call	0x26e	; 0x26e <main>
      c2:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__do_global_dtors>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <i2c_delay_T2>:
	...
nop
nop
nop
nop
nop
nop
     10e:	00 00       	nop
	ret          ; 3   "
     110:	08 95       	ret

00000112 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     112:	3d 98       	cbi	0x07, 5	; 7
	cbi SCL_DDR,SCL		;release SCL
     114:	3c 98       	cbi	0x07, 4	; 7
	cbi SDA_OUT,SDA
     116:	45 98       	cbi	0x08, 5	; 8
	cbi SCL_OUT,SCL
     118:	44 98       	cbi	0x08, 4	; 8
	ret
     11a:	08 95       	ret

0000011c <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     11c:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     11e:	d5 df       	rcall	.-86     	; 0xca <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     120:	1d d0       	rcall	.+58     	; 0x15c <i2c_write>
	ret
     122:	08 95       	ret

00000124 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     124:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     126:	d1 df       	rcall	.-94     	; 0xca <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     128:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     12a:	cf df       	rcall	.-98     	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     12c:	3c 98       	cbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     12e:	cd df       	rcall	.-102    	; 0xca <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     130:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay	T/2
     132:	cb df       	rcall	.-106    	; 0xca <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     134:	13 d0       	rcall	.+38     	; 0x15c <i2c_write>
	ret
     136:	08 95       	ret

00000138 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     138:	08 2e       	mov	r0, r24

0000013a <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     13a:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     13c:	c6 df       	rcall	.-116    	; 0xca <i2c_delay_T2>
	mov	r24,__tmp_reg__
     13e:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     140:	0d d0       	rcall	.+26     	; 0x15c <i2c_write>
	tst	r24		;if device not busy -> done
     142:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     144:	11 f0       	breq	.+4      	; 0x14a <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     146:	02 d0       	rcall	.+4      	; 0x14c <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     148:	f8 cf       	rjmp	.-16     	; 0x13a <i2c_start_wait1>

0000014a <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     14a:	08 95       	ret

0000014c <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     14c:	3c 9a       	sbi	0x07, 4	; 7
	sbi	SDA_DDR,SDA	;force SDA low
     14e:	3d 9a       	sbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     150:	bc df       	rcall	.-136    	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     152:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     154:	ba df       	rcall	.-140    	; 0xca <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     156:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     158:	b8 df       	rcall	.-144    	; 0xca <i2c_delay_T2>
	ret
     15a:	08 95       	ret

0000015c <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     15c:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     15e:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     160:	01 c0       	rjmp	.+2      	; 0x164 <i2c_write_first>

00000162 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     162:	88 0f       	add	r24, r24

00000164 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     164:	59 f0       	breq	.+22     	; 0x17c <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     166:	3c 9a       	sbi	0x07, 4	; 7
	brcc	i2c_write_low
     168:	18 f4       	brcc	.+6      	; 0x170 <i2c_write_low>
	nop
     16a:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     16c:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16e:	02 c0       	rjmp	.+4      	; 0x174 <i2c_write_high>

00000170 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     170:	3d 9a       	sbi	0x07, 5	; 7
	rjmp	i2c_write_high
     172:	00 c0       	rjmp	.+0      	; 0x174 <i2c_write_high>

00000174 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     174:	aa df       	rcall	.-172    	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     176:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     178:	a8 df       	rcall	.-176    	; 0xca <i2c_delay_T2>
	rjmp	i2c_write_bit
     17a:	f3 cf       	rjmp	.-26     	; 0x162 <i2c_write_bit>

0000017c <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     17c:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA
     17e:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     180:	a4 df       	rcall	.-184    	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     182:	3c 98       	cbi	0x07, 4	; 7

00000184 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     184:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_ack_wait
     186:	fe cf       	rjmp	.-4      	; 0x184 <i2c_ack_wait>
	
	clr	r24		;return 0
     188:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     18a:	35 99       	sbic	0x06, 5	; 6
	ldi	r24,1
     18c:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     18e:	9d df       	rcall	.-198    	; 0xca <i2c_delay_T2>
	clr	r25
     190:	99 27       	eor	r25, r25
	ret
     192:	08 95       	ret

00000194 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     194:	88 27       	eor	r24, r24
	rjmp	i2c_read
     196:	01 c0       	rjmp	.+2      	; 0x19a <i2c_read>

00000198 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     198:	81 e0       	ldi	r24, 0x01	; 1

0000019a <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     19a:	71 e0       	ldi	r23, 0x01	; 1

0000019c <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     19c:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     19e:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     1a0:	94 df       	rcall	.-216    	; 0xca <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     1a2:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     1a4:	92 df       	rcall	.-220    	; 0xca <i2c_delay_T2>

000001a6 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     1a6:	34 9b       	sbis	0x06, 4	; 6
    rjmp	i2c_read_stretch
     1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <i2c_read_stretch>
    	
	clc			;clear carry flag
     1aa:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     1ac:	35 99       	sbic	0x06, 5	; 6
	sec			;  set carry flag
     1ae:	08 94       	sec
	
	rol	r23		;store bit
     1b0:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     1b2:	a0 f7       	brcc	.-24     	; 0x19c <i2c_read_bit>

000001b4 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     1b4:	3c 9a       	sbi	0x07, 4	; 7
	cpi	r24,1
     1b6:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     1b8:	11 f0       	breq	.+4      	; 0x1be <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     1ba:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_put_ack_high
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <i2c_put_ack_high>

000001be <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     1be:	3d 9a       	sbi	0x07, 5	; 7

000001c0 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     1c0:	84 df       	rcall	.-248    	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     1c2:	3c 98       	cbi	0x07, 4	; 7

000001c4 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     1c4:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_put_ack_wait
     1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     1c8:	80 df       	rcall	.-256    	; 0xca <i2c_delay_T2>
	mov	r24,r23
     1ca:	87 2f       	mov	r24, r23
	clr	r25
     1cc:	99 27       	eor	r25, r25
	ret
     1ce:	08 95       	ret

000001d0 <_ZN22CommunicationException8ToStringEv>:

CommunicationException::~CommunicationException()
{
	if(message!=NULL) delete message;
}
const char* CommunicationException::ToString(){
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	ec 01       	movw	r28, r24

	if(message==NULL){
     1de:	8e 81       	ldd	r24, Y+6	; 0x06
     1e0:	9f 81       	ldd	r25, Y+7	; 0x07
     1e2:	89 2b       	or	r24, r25
     1e4:	41 f5       	brne	.+80     	; 0x236 <_ZN22CommunicationException8ToStringEv+0x66>
		size_t totalLength = strlen(deviceName)+27;
     1e6:	fc 80       	ldd	r15, Y+4	; 0x04
     1e8:	ed 80       	ldd	r14, Y+5	; 0x05
     1ea:	ef 2d       	mov	r30, r15
     1ec:	fe 2d       	mov	r31, r14
     1ee:	df 01       	movw	r26, r30
     1f0:	0d 90       	ld	r0, X+
     1f2:	00 20       	and	r0, r0
     1f4:	e9 f7       	brne	.-6      	; 0x1f0 <_ZN22CommunicationException8ToStringEv+0x20>
     1f6:	8d 01       	movw	r16, r26
     1f8:	0e 1b       	sub	r16, r30
     1fa:	1f 0b       	sbc	r17, r31
     1fc:	06 5e       	subi	r16, 0xE6	; 230
     1fe:	1f 4f       	sbci	r17, 0xFF	; 255
		message=(char*)malloc(sizeof(char)*totalLength);
     200:	c8 01       	movw	r24, r16
     202:	0e 94 33 11 	call	0x2266	; 0x2266 <malloc>
     206:	9f 83       	std	Y+7, r25	; 0x07
     208:	8e 83       	std	Y+6, r24	; 0x06
		if(message!=NULL){
     20a:	00 97       	sbiw	r24, 0x00	; 0
     20c:	a1 f0       	breq	.+40     	; 0x236 <_ZN22CommunicationException8ToStringEv+0x66>
			snprintf(message,totalLength, "Communication with %s failed", deviceName);
     20e:	ef 92       	push	r14
     210:	ff 92       	push	r15
     212:	26 e0       	ldi	r18, 0x06	; 6
     214:	31 e0       	ldi	r19, 0x01	; 1
     216:	3f 93       	push	r19
     218:	2f 93       	push	r18
     21a:	1f 93       	push	r17
     21c:	0f 93       	push	r16
     21e:	9f 93       	push	r25
     220:	8f 93       	push	r24
     222:	0e 94 a2 12 	call	0x2544	; 0x2544 <snprintf>
     226:	8d b7       	in	r24, 0x3d	; 61
     228:	9e b7       	in	r25, 0x3e	; 62
     22a:	08 96       	adiw	r24, 0x08	; 8
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	f8 94       	cli
     230:	9e bf       	out	0x3e, r25	; 62
     232:	0f be       	out	0x3f, r0	; 63
     234:	8d bf       	out	0x3d, r24	; 61
		}
	}
	return message;
     236:	8e 81       	ldd	r24, Y+6	; 0x06
     238:	9f 81       	ldd	r25, Y+7	; 0x07
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	08 95       	ret

00000248 <_ZN22CommunicationExceptionC1EPKc>:
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "CommunicationException.h"

CommunicationException::CommunicationException(const char* deviceName):deviceName(deviceName)
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	ec 01       	movw	r28, r24
     252:	8b 01       	movw	r16, r22
     254:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN9ExceptionC1Ev>
     258:	87 e2       	ldi	r24, 0x27	; 39
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	99 83       	std	Y+1, r25	; 0x01
     25e:	88 83       	st	Y, r24
     260:	1d 83       	std	Y+5, r17	; 0x05
     262:	0c 83       	std	Y+4, r16	; 0x04
{
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	08 95       	ret

0000026e <main>:
#include "TC654.h"
#include "Fans.h"
#include "SystemCheck.h"
using namespace std;
int main(void)
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	c2 54       	subi	r28, 0x42	; 66
     278:	d1 09       	sbc	r29, r1
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	a8 95       	wdr
     28a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     28e:	88 61       	ori	r24, 0x18	; 24
     290:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     294:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     298:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	i2c_init();
     29a:	0e 94 89 00 	call	0x112	; 0x112 <i2c_init>
	Outputs::Initialize();
     29e:	0e 94 b4 06 	call	0xd68	; 0xd68 <_ZN7Outputs10InitializeEv>
	//Stopwatch stopWatch = Stopwatch();
	UART& uart = UART::GetInstance();
     2a2:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN4UART11GetInstanceEv>
     2a6:	2c 01       	movw	r4, r24
	Settings& settings=Settings::GetInstance();
     2a8:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN8Settings11GetInstanceEv>
     2ac:	8c 01       	movw	r16, r24
	TC654 tc654 = TC654(0x01, 0x01);
     2ae:	41 e0       	ldi	r20, 0x01	; 1
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	ce 01       	movw	r24, r28
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN5TC654C1Ecc>
	IGetFanInfo* iGetFanInfos[]={tc654.GetIGetFan1Info(), tc654.GetIGetFan2Info()};
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 9f 0a 	call	0x153e	; 0x153e <_ZN5TC65415GetIGetFan1InfoEv>
     2c2:	9c af       	std	Y+60, r25	; 0x3c
     2c4:	8b af       	std	Y+59, r24	; 0x3b
     2c6:	ce 01       	movw	r24, r28
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_ZN5TC65415GetIGetFan2InfoEv>
     2ce:	9e af       	std	Y+62, r25	; 0x3e
     2d0:	8d af       	std	Y+61, r24	; 0x3d
	Fans& fans = Fans::GetInstance();
     2d2:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN4Fans11GetInstanceEv>
     2d6:	3c 01       	movw	r6, r24
	fans.SetInterfaces(iGetFanInfos, 0x02, &settings);
     2d8:	98 01       	movw	r18, r16
     2da:	28 5f       	subi	r18, 0xF8	; 248
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	42 e0       	ldi	r20, 0x02	; 2
     2e0:	be 01       	movw	r22, r28
     2e2:	65 5c       	subi	r22, 0xC5	; 197
     2e4:	7f 4f       	sbci	r23, 0xFF	; 255
     2e6:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>
	LM75* lm75_7= new LM75(0x07, "lm75_7");
     2ea:	8c e0       	ldi	r24, 0x0C	; 12
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
     2f2:	4c 01       	movw	r8, r24
     2f4:	49 e2       	ldi	r20, 0x29	; 41
     2f6:	51 e0       	ldi	r21, 0x01	; 1
     2f8:	67 e0       	ldi	r22, 0x07	; 7
     2fa:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN4LM75C1EcPc>
	LM75* lm75_6= new LM75(0x06, "lm75_6");
     2fe:	8c e0       	ldi	r24, 0x0C	; 12
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
     306:	5c 01       	movw	r10, r24
     308:	40 e3       	ldi	r20, 0x30	; 48
     30a:	51 e0       	ldi	r21, 0x01	; 1
     30c:	66 e0       	ldi	r22, 0x06	; 6
     30e:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN4LM75C1EcPc>
	IGetTemperatureInfo* lm75s[] = {lm75_7, lm75_6};
     312:	21 96       	adiw	r28, 0x01	; 1
     314:	9f ae       	std	Y+63, r9	; 0x3f
     316:	8e ae       	std	Y+62, r8	; 0x3e
     318:	21 97       	sbiw	r28, 0x01	; 1
     31a:	23 96       	adiw	r28, 0x03	; 3
     31c:	bf ae       	std	Y+63, r11	; 0x3f
     31e:	ae ae       	std	Y+62, r10	; 0x3e
     320:	23 97       	sbiw	r28, 0x03	; 3
	Temperatures& temperatures=Temperatures::GetInstance();
     322:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN12Temperatures11GetInstanceEv>
     326:	5c 01       	movw	r10, r24
	temperatures.SetInterfaces(lm75s, 0x2);
     328:	42 e0       	ldi	r20, 0x02	; 2
     32a:	be 01       	movw	r22, r28
     32c:	61 5c       	subi	r22, 0xC1	; 193
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>
	SystemCheck& systemCheck = SystemCheck::GetInstance();
     334:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN11SystemCheck11GetInstanceEv>
     338:	4c 01       	movw	r8, r24
	systemCheck.SetInterfaces(&temperatures, &settings, &fans);
     33a:	93 01       	movw	r18, r6
     33c:	a8 01       	movw	r20, r16
     33e:	b5 01       	movw	r22, r10
     340:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN11SystemCheck13SetInterfacesEP13ITemperaturesP18IGetTemperatureMaxP5IFans>
	Leds::Main::SetGreen();		
     344:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN4Leds4Main8SetGreenEv>
	Endpoint* endpoint = new Endpoint(&uart, &uart, &settings, &settings, &settings, &settings, &temperatures, &systemCheck);
     348:	80 e1       	ldi	r24, 0x10	; 16
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
     350:	3c 01       	movw	r6, r24
     352:	68 01       	movw	r12, r16
     354:	84 e0       	ldi	r24, 0x04	; 4
     356:	c8 0e       	add	r12, r24
     358:	d1 1c       	adc	r13, r1
     35a:	78 01       	movw	r14, r16
     35c:	86 e0       	ldi	r24, 0x06	; 6
     35e:	e8 0e       	add	r14, r24
     360:	f1 1c       	adc	r15, r1
     362:	98 01       	movw	r18, r16
     364:	2e 5f       	subi	r18, 0xFE	; 254
     366:	3f 4f       	sbci	r19, 0xFF	; 255
     368:	b2 01       	movw	r22, r4
     36a:	6e 5f       	subi	r22, 0xFE	; 254
     36c:	7f 4f       	sbci	r23, 0xFF	; 255
     36e:	a2 01       	movw	r20, r4
     370:	c3 01       	movw	r24, r6
     372:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperaturesP12ISystemCheck>
	while(1)
	{
	    endpoint->Run();
     376:	c3 01       	movw	r24, r6
     378:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN8Endpoint3RunEv>
     37c:	fc cf       	rjmp	.-8      	; 0x376 <main+0x108>

0000037e <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperaturesP12ISystemCheck>:
#include "Leds.h"
#include "Endpoint.h"
#include "UART.h"
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures, ISystemCheck* iSystemCheck):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures), iSystemCheck(iSystemCheck){
     37e:	8f 92       	push	r8
     380:	9f 92       	push	r9
     382:	af 92       	push	r10
     384:	bf 92       	push	r11
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	fc 01       	movw	r30, r24
     39c:	71 83       	std	Z+1, r23	; 0x01
     39e:	60 83       	st	Z, r22
     3a0:	53 83       	std	Z+3, r21	; 0x03
     3a2:	42 83       	std	Z+2, r20	; 0x02
     3a4:	35 83       	std	Z+5, r19	; 0x05
     3a6:	24 83       	std	Z+4, r18	; 0x04
     3a8:	17 83       	std	Z+7, r17	; 0x07
     3aa:	06 83       	std	Z+6, r16	; 0x06
     3ac:	f1 86       	std	Z+9, r15	; 0x09
     3ae:	e0 86       	std	Z+8, r14	; 0x08
     3b0:	d3 86       	std	Z+11, r13	; 0x0b
     3b2:	c2 86       	std	Z+10, r12	; 0x0a
     3b4:	b5 86       	std	Z+13, r11	; 0x0d
     3b6:	a4 86       	std	Z+12, r10	; 0x0c
     3b8:	97 86       	std	Z+15, r9	; 0x0f
     3ba:	86 86       	std	Z+14, r8	; 0x0e
	
}
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	bf 90       	pop	r11
     3ce:	af 90       	pop	r10
     3d0:	9f 90       	pop	r9
     3d2:	8f 90       	pop	r8
     3d4:	08 95       	ret

000003d6 <_ZN8Endpoint8GetPowerEv>:
		}
		delete messages;
	}
}

void Endpoint::GetPower(){
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	6f 97       	sbiw	r28, 0x1f	; 31
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	7c 01       	movw	r14, r24
	uint16_t power = iGetPower->GetPower();
     3f4:	dc 01       	movw	r26, r24
     3f6:	1a 96       	adiw	r26, 0x0a	; 10
     3f8:	8d 91       	ld	r24, X+
     3fa:	9c 91       	ld	r25, X
     3fc:	1b 97       	sbiw	r26, 0x0b	; 11
     3fe:	dc 01       	movw	r26, r24
     400:	ed 91       	ld	r30, X+
     402:	fc 91       	ld	r31, X
     404:	01 90       	ld	r0, Z+
     406:	f0 81       	ld	r31, Z
     408:	e0 2d       	mov	r30, r0
     40a:	09 95       	icall
	char buf[31];
	snprintf(buf,31,"{\"type\":\"power\",\"power\":%04d}\n",power);
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	87 e3       	ldi	r24, 0x37	; 55
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	1f 92       	push	r1
     41a:	8f e1       	ldi	r24, 0x1F	; 31
     41c:	8f 93       	push	r24
     41e:	8e 01       	movw	r16, r28
     420:	0f 5f       	subi	r16, 0xFF	; 255
     422:	1f 4f       	sbci	r17, 0xFF	; 255
     424:	1f 93       	push	r17
     426:	0f 93       	push	r16
     428:	0e 94 a2 12 	call	0x2544	; 0x2544 <snprintf>
	iSendMessage->SendMessage(buf, 30);
     42c:	f7 01       	movw	r30, r14
     42e:	82 81       	ldd	r24, Z+2	; 0x02
     430:	93 81       	ldd	r25, Z+3	; 0x03
     432:	dc 01       	movw	r26, r24
     434:	ed 91       	ld	r30, X+
     436:	fc 91       	ld	r31, X
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	4e e1       	ldi	r20, 0x1E	; 30
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	b8 01       	movw	r22, r16
     444:	09 95       	icall
}
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	6f 96       	adiw	r28, 0x1f	; 31
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	08 95       	ret

0000046a <_ZN8Endpoint17GetTemperatureMaxEv>:
void Endpoint::GetTemperatureMax(){
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	e2 97       	sbiw	r28, 0x32	; 50
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	7c 01       	movw	r14, r24
	uint8_t temperatureMax = iGetTemperatureMax->GetTemperatureMax();
     488:	dc 01       	movw	r26, r24
     48a:	16 96       	adiw	r26, 0x06	; 6
     48c:	8d 91       	ld	r24, X+
     48e:	9c 91       	ld	r25, X
     490:	17 97       	sbiw	r26, 0x07	; 7
     492:	dc 01       	movw	r26, r24
     494:	ed 91       	ld	r30, X+
     496:	fc 91       	ld	r31, X
     498:	01 90       	ld	r0, Z+
     49a:	f0 81       	ld	r31, Z
     49c:	e0 2d       	mov	r30, r0
     49e:	09 95       	icall
	char buf[50];
	snprintf(buf,50,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}\n",temperatureMax);
     4a0:	1f 92       	push	r1
     4a2:	8f 93       	push	r24
     4a4:	86 e5       	ldi	r24, 0x56	; 86
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	1f 92       	push	r1
     4ae:	82 e3       	ldi	r24, 0x32	; 50
     4b0:	8f 93       	push	r24
     4b2:	8e 01       	movw	r16, r28
     4b4:	0f 5f       	subi	r16, 0xFF	; 255
     4b6:	1f 4f       	sbci	r17, 0xFF	; 255
     4b8:	1f 93       	push	r17
     4ba:	0f 93       	push	r16
     4bc:	0e 94 a2 12 	call	0x2544	; 0x2544 <snprintf>
iSendMessage->SendMessage(buf, 49);}
     4c0:	f7 01       	movw	r30, r14
     4c2:	82 81       	ldd	r24, Z+2	; 0x02
     4c4:	93 81       	ldd	r25, Z+3	; 0x03
     4c6:	dc 01       	movw	r26, r24
     4c8:	ed 91       	ld	r30, X+
     4ca:	fc 91       	ld	r31, X
     4cc:	01 90       	ld	r0, Z+
     4ce:	f0 81       	ld	r31, Z
     4d0:	e0 2d       	mov	r30, r0
     4d2:	41 e3       	ldi	r20, 0x31	; 49
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	b8 01       	movw	r22, r16
     4d8:	09 95       	icall
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
     4e4:	e2 96       	adiw	r28, 0x32	; 50
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	08 95       	ret

000004fe <_ZN8Endpoint13SendExceptionEP9Exception>:
		snprintf(buf,46,"{\"type\":\"max_temperature\",\"temperature\":%03d}\n",temperature);
	iSendMessage->SendMessage(buf, 45);}
	else
	SendExceptions(&exceptions);
	}
	void Endpoint::SendException(Exception* exception){
     4fe:	af 92       	push	r10
     500:	bf 92       	push	r11
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	7c 01       	movw	r14, r24
     514:	cb 01       	movw	r24, r22
	const char* message = exception->ToString();
     516:	db 01       	movw	r26, r22
     518:	ed 91       	ld	r30, X+
     51a:	fc 91       	ld	r31, X
     51c:	01 90       	ld	r0, Z+
     51e:	f0 81       	ld	r31, Z
     520:	e0 2d       	mov	r30, r0
     522:	09 95       	icall
     524:	b8 2e       	mov	r11, r24
     526:	a9 2e       	mov	r10, r25
		unsigned int length = strlen(message) + 35;
     528:	e8 2f       	mov	r30, r24
     52a:	f9 2f       	mov	r31, r25
     52c:	df 01       	movw	r26, r30
     52e:	0d 90       	ld	r0, X+
     530:	00 20       	and	r0, r0
     532:	e9 f7       	brne	.-6      	; 0x52e <_ZN8Endpoint13SendExceptionEP9Exception+0x30>
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	8d 01       	movw	r16, r26
     538:	0e 1b       	sub	r16, r30
     53a:	1f 0b       	sbc	r17, r31
     53c:	68 01       	movw	r12, r16
     53e:	b3 e2       	ldi	r27, 0x23	; 35
     540:	cb 0e       	add	r12, r27
     542:	d1 1c       	adc	r13, r1
		char* buf  = (char*) malloc(length);
     544:	c6 01       	movw	r24, r12
     546:	0e 94 33 11 	call	0x2266	; 0x2266 <malloc>
     54a:	d8 2f       	mov	r29, r24
     54c:	c9 2f       	mov	r28, r25
		snprintf(buf,length,"{\"type\":\"exception\",\"message\":\"%s\"}\n",message);
     54e:	af 92       	push	r10
     550:	bf 92       	push	r11
     552:	89 e8       	ldi	r24, 0x89	; 137
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	df 92       	push	r13
     55c:	cf 92       	push	r12
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	0e 94 a2 12 	call	0x2544	; 0x2544 <snprintf>
		iSendMessage->SendMessage(buf, length-1);
     566:	f7 01       	movw	r30, r14
     568:	82 81       	ldd	r24, Z+2	; 0x02
     56a:	93 81       	ldd	r25, Z+3	; 0x03
     56c:	a8 01       	movw	r20, r16
     56e:	4e 5d       	subi	r20, 0xDE	; 222
     570:	5f 4f       	sbci	r21, 0xFF	; 255
     572:	dc 01       	movw	r26, r24
     574:	ed 91       	ld	r30, X+
     576:	fc 91       	ld	r31, X
     578:	01 90       	ld	r0, Z+
     57a:	f0 81       	ld	r31, Z
     57c:	e0 2d       	mov	r30, r0
     57e:	6d 2f       	mov	r22, r29
     580:	7c 2f       	mov	r23, r28
     582:	09 95       	icall
		free(buf);
     584:	8d 2f       	mov	r24, r29
     586:	9c 2f       	mov	r25, r28
     588:	0e 94 cb 11 	call	0x2396	; 0x2396 <free>
	}
     58c:	ed b7       	in	r30, 0x3d	; 61
     58e:	fe b7       	in	r31, 0x3e	; 62
     590:	38 96       	adiw	r30, 0x08	; 8
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	fe bf       	out	0x3e, r31	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	ed bf       	out	0x3d, r30	; 61
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	bf 90       	pop	r11
     5ae:	af 90       	pop	r10
     5b0:	08 95       	ret

000005b2 <_ZN8Endpoint14SendExceptionsEP10Exceptions>:
	    void Endpoint::SendExceptions(Exceptions* exceptions){
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	7c 01       	movw	r14, r24
     5c0:	8b 01       	movw	r16, r22
		for(unsigned int i=0; i<exceptions->Count(); i++){
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
     5c4:	d0 e0       	ldi	r29, 0x00	; 0
     5c6:	c8 01       	movw	r24, r16
     5c8:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN10Exceptions5CountEv>
     5cc:	c8 17       	cp	r28, r24
     5ce:	d9 07       	cpc	r29, r25
     5d0:	88 f4       	brcc	.+34     	; 0x5f4 <_ZN8Endpoint14SendExceptionsEP10Exceptions+0x42>
			Exception* exception = exceptions->exceptions[i];
     5d2:	ce 01       	movw	r24, r28
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	d8 01       	movw	r26, r16
     5da:	14 96       	adiw	r26, 0x04	; 4
     5dc:	ed 91       	ld	r30, X+
     5de:	fc 91       	ld	r31, X
     5e0:	15 97       	sbiw	r26, 0x05	; 5
     5e2:	e8 0f       	add	r30, r24
     5e4:	f9 1f       	adc	r31, r25
			SendException(exception);
     5e6:	60 81       	ld	r22, Z
     5e8:	71 81       	ldd	r23, Z+1	; 0x01
     5ea:	c7 01       	movw	r24, r14
     5ec:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN8Endpoint13SendExceptionEP9Exception>
		snprintf(buf,length,"{\"type\":\"exception\",\"message\":\"%s\"}\n",message);
		iSendMessage->SendMessage(buf, length-1);
		free(buf);
	}
	    void Endpoint::SendExceptions(Exceptions* exceptions){
		for(unsigned int i=0; i<exceptions->Count(); i++){
     5f0:	21 96       	adiw	r28, 0x01	; 1
     5f2:	e9 cf       	rjmp	.-46     	; 0x5c6 <_ZN8Endpoint14SendExceptionsEP10Exceptions+0x14>
			Exception* exception = exceptions->exceptions[i];
			SendException(exception);
		}
	}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	08 95       	ret

00000602 <_ZN8Endpoint17GetMaxTemperatureEv>:
	uint8_t temperatureMax = iGetTemperatureMax->GetTemperatureMax();
	char buf[50];
	snprintf(buf,50,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}\n",temperatureMax);
iSendMessage->SendMessage(buf, 49);}

void Endpoint::GetMaxTemperature(){
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	e5 97       	sbiw	r28, 0x35	; 53
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	8c 01       	movw	r16, r24
	bool successful=true;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	89 83       	std	Y+1, r24	; 0x01
	Exceptions exceptions;
     624:	ce 01       	movw	r24, r28
     626:	02 96       	adiw	r24, 0x02	; 2
     628:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN10ExceptionsC1Ev>
	 
	int8_t temperature = iTemperatures->GetMaxTemperature(successful, exceptions);
     62c:	d8 01       	movw	r26, r16
     62e:	1c 96       	adiw	r26, 0x0c	; 12
     630:	8d 91       	ld	r24, X+
     632:	9c 91       	ld	r25, X
     634:	1d 97       	sbiw	r26, 0x0d	; 13
     636:	dc 01       	movw	r26, r24
     638:	ed 91       	ld	r30, X+
     63a:	fc 91       	ld	r31, X
     63c:	01 90       	ld	r0, Z+
     63e:	f0 81       	ld	r31, Z
     640:	e0 2d       	mov	r30, r0
     642:	ae 01       	movw	r20, r28
     644:	4e 5f       	subi	r20, 0xFE	; 254
     646:	5f 4f       	sbci	r21, 0xFF	; 255
     648:	be 01       	movw	r22, r28
     64a:	6f 5f       	subi	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	09 95       	icall
     650:	f8 2e       	mov	r15, r24
	if(successful){
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	88 23       	and	r24, r24
     656:	51 f1       	breq	.+84     	; 0x6ac <_ZN8Endpoint17GetMaxTemperatureEv+0xaa>
		Leds::Main::SetRed();
     658:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN4Leds4Main6SetRedEv>
		char buf[46];
		snprintf(buf,46,"{\"type\":\"max_temperature\",\"temperature\":%03d}\n",temperature);
     65c:	8f 2d       	mov	r24, r15
     65e:	0f 2c       	mov	r0, r15
     660:	00 0c       	add	r0, r0
     662:	99 0b       	sbc	r25, r25
     664:	9f 93       	push	r25
     666:	ff 92       	push	r15
     668:	8e ea       	ldi	r24, 0xAE	; 174
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	1f 92       	push	r1
     672:	8e e2       	ldi	r24, 0x2E	; 46
     674:	8f 93       	push	r24
     676:	7e 01       	movw	r14, r28
     678:	b8 e0       	ldi	r27, 0x08	; 8
     67a:	eb 0e       	add	r14, r27
     67c:	f1 1c       	adc	r15, r1
     67e:	ff 92       	push	r15
     680:	ef 92       	push	r14
     682:	0e 94 a2 12 	call	0x2544	; 0x2544 <snprintf>
	iSendMessage->SendMessage(buf, 45);}
     686:	f8 01       	movw	r30, r16
     688:	82 81       	ldd	r24, Z+2	; 0x02
     68a:	93 81       	ldd	r25, Z+3	; 0x03
     68c:	dc 01       	movw	r26, r24
     68e:	ed 91       	ld	r30, X+
     690:	fc 91       	ld	r31, X
     692:	01 90       	ld	r0, Z+
     694:	f0 81       	ld	r31, Z
     696:	e0 2d       	mov	r30, r0
     698:	4d e2       	ldi	r20, 0x2D	; 45
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	b7 01       	movw	r22, r14
     69e:	09 95       	icall
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <_ZN8Endpoint17GetMaxTemperatureEv+0xb6>
	else
	SendExceptions(&exceptions);
     6ac:	be 01       	movw	r22, r28
     6ae:	6e 5f       	subi	r22, 0xFE	; 254
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	c8 01       	movw	r24, r16
     6b4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN8Endpoint14SendExceptionsEP10Exceptions>
	snprintf(buf,50,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}\n",temperatureMax);
iSendMessage->SendMessage(buf, 49);}

void Endpoint::GetMaxTemperature(){
	bool successful=true;
	Exceptions exceptions;
     6b8:	ce 01       	movw	r24, r28
     6ba:	02 96       	adiw	r24, 0x02	; 2
     6bc:	0e 94 3c 05 	call	0xa78	; 0xa78 <_ZN10ExceptionsD1Ev>
		char buf[46];
		snprintf(buf,46,"{\"type\":\"max_temperature\",\"temperature\":%03d}\n",temperature);
	iSendMessage->SendMessage(buf, 45);}
	else
	SendExceptions(&exceptions);
	}
     6c0:	e5 96       	adiw	r28, 0x35	; 53
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	08 95       	ret

000006da <_ZN8Endpoint3RunEv>:
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures, ISystemCheck* iSystemCheck):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures), iSystemCheck(iSystemCheck){
	
}
void Endpoint::Run(){
     6da:	7f 92       	push	r7
     6dc:	8f 92       	push	r8
     6de:	9f 92       	push	r9
     6e0:	af 92       	push	r10
     6e2:	bf 92       	push	r11
     6e4:	cf 92       	push	r12
     6e6:	df 92       	push	r13
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	c7 5c       	subi	r28, 0xC7	; 199
     6fa:	d1 40       	sbci	r29, 0x01	; 1
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	6c 01       	movw	r12, r24
	Messages* messages = iGetMessages->GetMessages();
     708:	dc 01       	movw	r26, r24
     70a:	8d 91       	ld	r24, X+
     70c:	9c 91       	ld	r25, X
     70e:	dc 01       	movw	r26, r24
     710:	ed 91       	ld	r30, X+
     712:	fc 91       	ld	r31, X
     714:	01 90       	ld	r0, Z+
     716:	f0 81       	ld	r31, Z
     718:	e0 2d       	mov	r30, r0
     71a:	09 95       	icall
     71c:	7c 01       	movw	r14, r24
	if(messages!=NULL){
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	09 f4       	brne	.+2      	; 0x724 <_ZN8Endpoint3RunEv+0x4a>
     722:	24 c1       	rjmp	.+584    	; 0x96c <__stack+0x6d>
		if(messages->length>0)
     724:	fc 01       	movw	r30, r24
     726:	82 81       	ldd	r24, Z+2	; 0x02
     728:	93 81       	ldd	r25, Z+3	; 0x03
     72a:	18 16       	cp	r1, r24
     72c:	19 06       	cpc	r1, r25
     72e:	0c f0       	brlt	.+2      	; 0x732 <_ZN8Endpoint3RunEv+0x58>
     730:	17 c1       	rjmp	.+558    	; 0x960 <__stack+0x61>
		{
			Leds::Main::SetGreen();
     732:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN4Leds4Main8SetGreenEv>
			for(int i=0; i<messages->length; i++){
     736:	d7 01       	movw	r26, r14
     738:	12 96       	adiw	r26, 0x02	; 2
     73a:	8d 91       	ld	r24, X+
     73c:	9c 91       	ld	r25, X
     73e:	13 97       	sbiw	r26, 0x03	; 3
     740:	18 16       	cp	r1, r24
     742:	19 06       	cpc	r1, r25
     744:	0c f0       	brlt	.+2      	; 0x748 <_ZN8Endpoint3RunEv+0x6e>
     746:	0c c1       	rjmp	.+536    	; 0x960 <__stack+0x61>
     748:	00 e0       	ldi	r16, 0x00	; 0
     74a:	10 e0       	ldi	r17, 0x00	; 0
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
					if(strcmp(type, "system_check")==0){
					Exceptions exceptions;
						  bool successful=true;
     74c:	77 24       	eor	r7, r7
     74e:	73 94       	inc	r7
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetGreen();
			for(int i=0; i<messages->length; i++){
				Message* message = messages->messages[i];
     750:	d7 01       	movw	r26, r14
     752:	ed 91       	ld	r30, X+
     754:	fc 91       	ld	r31, X
     756:	c8 01       	movw	r24, r16
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	e8 0f       	add	r30, r24
     75e:	f9 1f       	adc	r31, r25
     760:	01 90       	ld	r0, Z+
     762:	f0 81       	ld	r31, Z
     764:	e0 2d       	mov	r30, r0
				json_t pool[64];
				json_t const* root = json_create( (char*)message->buffer, pool, message->length );
     766:	42 81       	ldd	r20, Z+2	; 0x02
     768:	53 81       	ldd	r21, Z+3	; 0x03
     76a:	be 01       	movw	r22, r28
     76c:	6f 5f       	subi	r22, 0xFF	; 255
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <json_create>
     778:	5c 01       	movw	r10, r24
				json_t const* jObjectType = json_getProperty( root, "type" );
     77a:	6d ed       	ldi	r22, 0xDD	; 221
     77c:	71 e0       	ldi	r23, 0x01	; 1
     77e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <json_getProperty>
				if ( jObjectType && JSON_TEXT == json_getType(  jObjectType ) ) {
     782:	00 97       	sbiw	r24, 0x00	; 0
     784:	09 f4       	brne	.+2      	; 0x788 <_ZN8Endpoint3RunEv+0xae>
     786:	e1 c0       	rjmp	.+450    	; 0x94a <__stack+0x4b>
     788:	fc 01       	movw	r30, r24
     78a:	26 81       	ldd	r18, Z+6	; 0x06
     78c:	22 30       	cpi	r18, 0x02	; 2
     78e:	09 f0       	breq	.+2      	; 0x792 <_ZN8Endpoint3RunEv+0xb8>
     790:	dc c0       	rjmp	.+440    	; 0x94a <__stack+0x4b>
/** Get the value of a json property.
  * The type of property cannot be JSON_OBJ or JSON_ARRAY.
  * @param json A valid handler of a json property.
  * @return Pointer to null-terminated string with the value. */
static inline char const* json_getValue( json_t const* property ) {
    return property->u.value;
     792:	84 80       	ldd	r8, Z+4	; 0x04
     794:	95 80       	ldd	r9, Z+5	; 0x05
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
     796:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN4UART11GetInstanceEv>
     79a:	f4 01       	movw	r30, r8
     79c:	01 90       	ld	r0, Z+
     79e:	00 20       	and	r0, r0
     7a0:	e9 f7       	brne	.-6      	; 0x79c <_ZN8Endpoint3RunEv+0xc2>
     7a2:	31 97       	sbiw	r30, 0x01	; 1
     7a4:	af 01       	movw	r20, r30
     7a6:	48 19       	sub	r20, r8
     7a8:	59 09       	sbc	r21, r9
     7aa:	dc 01       	movw	r26, r24
     7ac:	ed 91       	ld	r30, X+
     7ae:	fc 91       	ld	r31, X
     7b0:	01 90       	ld	r0, Z+
     7b2:	f0 81       	ld	r31, Z
     7b4:	e0 2d       	mov	r30, r0
     7b6:	b4 01       	movw	r22, r8
     7b8:	09 95       	icall
					if(strcmp(type, "system_check")==0){
     7ba:	62 ee       	ldi	r22, 0xE2	; 226
     7bc:	71 e0       	ldi	r23, 0x01	; 1
     7be:	c4 01       	movw	r24, r8
     7c0:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
     7c4:	89 2b       	or	r24, r25
     7c6:	09 f0       	breq	.+2      	; 0x7ca <_ZN8Endpoint3RunEv+0xf0>
     7c8:	4a c0       	rjmp	.+148    	; 0x85e <_ZN8Endpoint3RunEv+0x184>
					Exceptions exceptions;
     7ca:	ce 01       	movw	r24, r28
     7cc:	8f 53       	subi	r24, 0x3F	; 63
     7ce:	9e 4f       	sbci	r25, 0xFE	; 254
     7d0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN10ExceptionsC1Ev>
						  bool successful=true;
     7d4:	c9 53       	subi	r28, 0x39	; 57
     7d6:	de 4f       	sbci	r29, 0xFE	; 254
     7d8:	78 82       	st	Y, r7
     7da:	c7 5c       	subi	r28, 0xC7	; 199
     7dc:	d1 40       	sbci	r29, 0x01	; 1
						   iSystemCheck->Check(successful, exceptions);
     7de:	f6 01       	movw	r30, r12
     7e0:	86 85       	ldd	r24, Z+14	; 0x0e
     7e2:	97 85       	ldd	r25, Z+15	; 0x0f
     7e4:	dc 01       	movw	r26, r24
     7e6:	ed 91       	ld	r30, X+
     7e8:	fc 91       	ld	r31, X
     7ea:	01 90       	ld	r0, Z+
     7ec:	f0 81       	ld	r31, Z
     7ee:	e0 2d       	mov	r30, r0
     7f0:	ae 01       	movw	r20, r28
     7f2:	4f 53       	subi	r20, 0x3F	; 63
     7f4:	5e 4f       	sbci	r21, 0xFE	; 254
     7f6:	be 01       	movw	r22, r28
     7f8:	69 53       	subi	r22, 0x39	; 57
     7fa:	7e 4f       	sbci	r23, 0xFE	; 254
     7fc:	09 95       	icall
						   if(successful){
     7fe:	c9 53       	subi	r28, 0x39	; 57
     800:	de 4f       	sbci	r29, 0xFE	; 254
     802:	88 81       	ld	r24, Y
     804:	c7 5c       	subi	r28, 0xC7	; 199
     806:	d1 40       	sbci	r29, 0x01	; 1
     808:	88 23       	and	r24, r24
     80a:	79 f0       	breq	.+30     	; 0x82a <_ZN8Endpoint3RunEv+0x150>
						   iSendMessage->SendMessage("{\"type\":\"system_check\",\"passed\":true}\n", 38);
     80c:	f6 01       	movw	r30, r12
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	93 81       	ldd	r25, Z+3	; 0x03
     812:	dc 01       	movw	r26, r24
     814:	ed 91       	ld	r30, X+
     816:	fc 91       	ld	r31, X
     818:	01 90       	ld	r0, Z+
     81a:	f0 81       	ld	r31, Z
     81c:	e0 2d       	mov	r30, r0
     81e:	46 e2       	ldi	r20, 0x26	; 38
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	6f ee       	ldi	r22, 0xEF	; 239
     824:	71 e0       	ldi	r23, 0x01	; 1
     826:	09 95       	icall
     828:	14 c0       	rjmp	.+40     	; 0x852 <_ZN8Endpoint3RunEv+0x178>
						   }
						   else{
						   SendExceptions(&exceptions);
     82a:	be 01       	movw	r22, r28
     82c:	6f 53       	subi	r22, 0x3F	; 63
     82e:	7e 4f       	sbci	r23, 0xFE	; 254
     830:	c6 01       	movw	r24, r12
     832:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN8Endpoint14SendExceptionsEP10Exceptions>
						   iSendMessage->SendMessage("{\"type\":\"system_check\",\"passed\":false}\n", 39);
     836:	f6 01       	movw	r30, r12
     838:	82 81       	ldd	r24, Z+2	; 0x02
     83a:	93 81       	ldd	r25, Z+3	; 0x03
     83c:	dc 01       	movw	r26, r24
     83e:	ed 91       	ld	r30, X+
     840:	fc 91       	ld	r31, X
     842:	01 90       	ld	r0, Z+
     844:	f0 81       	ld	r31, Z
     846:	e0 2d       	mov	r30, r0
     848:	47 e2       	ldi	r20, 0x27	; 39
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	66 e1       	ldi	r22, 0x16	; 22
     84e:	72 e0       	ldi	r23, 0x02	; 2
     850:	09 95       	icall
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
					if(strcmp(type, "system_check")==0){
					Exceptions exceptions;
     852:	ce 01       	movw	r24, r28
     854:	8f 53       	subi	r24, 0x3F	; 63
     856:	9e 4f       	sbci	r25, 0xFE	; 254
     858:	0e 94 3c 05 	call	0xa78	; 0xa78 <_ZN10ExceptionsD1Ev>
     85c:	76 c0       	rjmp	.+236    	; 0x94a <__stack+0x4b>
						   else{
						   SendExceptions(&exceptions);
						   iSendMessage->SendMessage("{\"type\":\"system_check\",\"passed\":false}\n", 39);
						   }
						}else{
						if(strcmp(type,"run")==0){
     85e:	6e e3       	ldi	r22, 0x3E	; 62
     860:	72 e0       	ldi	r23, 0x02	; 2
     862:	c4 01       	movw	r24, r8
     864:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
     868:	89 2b       	or	r24, r25
     86a:	09 f4       	brne	.+2      	; 0x86e <_ZN8Endpoint3RunEv+0x194>
     86c:	6e c0       	rjmp	.+220    	; 0x94a <__stack+0x4b>
							
							}else{
							if(strcmp(type,"set_temperature_max")==0){
     86e:	62 e4       	ldi	r22, 0x42	; 66
     870:	72 e0       	ldi	r23, 0x02	; 2
     872:	c4 01       	movw	r24, r8
     874:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
     878:	89 2b       	or	r24, r25
     87a:	f1 f4       	brne	.+60     	; 0x8b8 <_ZN8Endpoint3RunEv+0x1de>
								json_t const* jObjectTemperatureMax = json_getProperty( root, "temperature_max" );
     87c:	6a e5       	ldi	r22, 0x5A	; 90
     87e:	72 e0       	ldi	r23, 0x02	; 2
     880:	c5 01       	movw	r24, r10
     882:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <json_getProperty>
								if ( jObjectTemperatureMax!=NULL && JSON_INTEGER == json_getType(  jObjectTemperatureMax ) ) {
     886:	00 97       	sbiw	r24, 0x00	; 0
     888:	09 f4       	brne	.+2      	; 0x88c <_ZN8Endpoint3RunEv+0x1b2>
     88a:	5f c0       	rjmp	.+190    	; 0x94a <__stack+0x4b>
     88c:	fc 01       	movw	r30, r24
     88e:	26 81       	ldd	r18, Z+6	; 0x06
     890:	24 30       	cpi	r18, 0x04	; 4
     892:	09 f0       	breq	.+2      	; 0x896 <_ZN8Endpoint3RunEv+0x1bc>
     894:	5a c0       	rjmp	.+180    	; 0x94a <__stack+0x4b>

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
    return (int64_t)atol( property->u.value );
     896:	84 81       	ldd	r24, Z+4	; 0x04
     898:	95 81       	ldd	r25, Z+5	; 0x05
     89a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <atol>
									int temperatureMax = json_getInteger(jObjectTemperatureMax);
									iSetTemperatureMax->SetTemperatureMax(temperatureMax);
     89e:	d6 01       	movw	r26, r12
     8a0:	14 96       	adiw	r26, 0x04	; 4
     8a2:	8d 91       	ld	r24, X+
     8a4:	9c 91       	ld	r25, X
     8a6:	15 97       	sbiw	r26, 0x05	; 5
     8a8:	dc 01       	movw	r26, r24
     8aa:	ed 91       	ld	r30, X+
     8ac:	fc 91       	ld	r31, X
     8ae:	01 90       	ld	r0, Z+
     8b0:	f0 81       	ld	r31, Z
     8b2:	e0 2d       	mov	r30, r0
     8b4:	09 95       	icall
     8b6:	49 c0       	rjmp	.+146    	; 0x94a <__stack+0x4b>
								}
								}else{
								if(strcmp(type,"get_temperature_max")==0){
     8b8:	66 e5       	ldi	r22, 0x56	; 86
     8ba:	72 e0       	ldi	r23, 0x02	; 2
     8bc:	c4 01       	movw	r24, r8
     8be:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
     8c2:	89 2b       	or	r24, r25
     8c4:	21 f4       	brne	.+8      	; 0x8ce <_ZN8Endpoint3RunEv+0x1f4>
									GetTemperatureMax();
     8c6:	c6 01       	movw	r24, r12
     8c8:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN8Endpoint17GetTemperatureMaxEv>
     8cc:	3e c0       	rjmp	.+124    	; 0x94a <__stack+0x4b>
									}else{
									if(strcmp(type,"set_power"  )==0){
     8ce:	6a e6       	ldi	r22, 0x6A	; 106
     8d0:	72 e0       	ldi	r23, 0x02	; 2
     8d2:	c4 01       	movw	r24, r8
     8d4:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
     8d8:	89 2b       	or	r24, r25
     8da:	d9 f4       	brne	.+54     	; 0x912 <__stack+0x13>
										json_t const* jObjectPower = json_getProperty( root, "power" );
     8dc:	68 e7       	ldi	r22, 0x78	; 120
     8de:	72 e0       	ldi	r23, 0x02	; 2
     8e0:	c5 01       	movw	r24, r10
     8e2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <json_getProperty>
										if ( jObjectPower && JSON_INTEGER == json_getType(  jObjectPower ) ) {
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	81 f1       	breq	.+96     	; 0x94a <__stack+0x4b>
     8ea:	fc 01       	movw	r30, r24
     8ec:	26 81       	ldd	r18, Z+6	; 0x06
     8ee:	24 30       	cpi	r18, 0x04	; 4
     8f0:	61 f5       	brne	.+88     	; 0x94a <__stack+0x4b>
     8f2:	84 81       	ldd	r24, Z+4	; 0x04
     8f4:	95 81       	ldd	r25, Z+5	; 0x05
     8f6:	0e 94 54 12 	call	0x24a8	; 0x24a8 <atol>
											int Power = json_getInteger(jObjectPower);
											iSetPower->SetPower(Power);
     8fa:	f6 01       	movw	r30, r12
     8fc:	a0 85       	ldd	r26, Z+8	; 0x08
     8fe:	b1 85       	ldd	r27, Z+9	; 0x09
     900:	ed 91       	ld	r30, X+
     902:	fc 91       	ld	r31, X
     904:	11 97       	sbiw	r26, 0x01	; 1
     906:	01 90       	ld	r0, Z+
     908:	f0 81       	ld	r31, Z
     90a:	e0 2d       	mov	r30, r0
     90c:	cd 01       	movw	r24, r26
     90e:	09 95       	icall
     910:	1c c0       	rjmp	.+56     	; 0x94a <__stack+0x4b>
										}
										}else{
										if(strcmp(type,"get_power")==0){
     912:	64 e7       	ldi	r22, 0x74	; 116
     914:	72 e0       	ldi	r23, 0x02	; 2
     916:	c4 01       	movw	r24, r8
     918:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
     91c:	89 2b       	or	r24, r25
     91e:	21 f4       	brne	.+8      	; 0x928 <__stack+0x29>
											GetPower();
     920:	c6 01       	movw	r24, r12
     922:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_ZN8Endpoint8GetPowerEv>
     926:	11 c0       	rjmp	.+34     	; 0x94a <__stack+0x4b>
											}else{
											if(strcmp(type,"set_info_rate")==0){
     928:	6e e7       	ldi	r22, 0x7E	; 126
     92a:	72 e0       	ldi	r23, 0x02	; 2
     92c:	c4 01       	movw	r24, r8
     92e:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
     932:	89 2b       	or	r24, r25
     934:	51 f0       	breq	.+20     	; 0x94a <__stack+0x4b>

												}else{
												if(strcmp(type, "get_max_temperature")==0 ){
     936:	6c e8       	ldi	r22, 0x8C	; 140
     938:	72 e0       	ldi	r23, 0x02	; 2
     93a:	c4 01       	movw	r24, r8
     93c:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
     940:	89 2b       	or	r24, r25
     942:	19 f4       	brne	.+6      	; 0x94a <__stack+0x4b>
													GetMaxTemperature();
     944:	c6 01       	movw	r24, r12
     946:	0e 94 01 03 	call	0x602	; 0x602 <_ZN8Endpoint17GetMaxTemperatureEv>
	Messages* messages = iGetMessages->GetMessages();
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetGreen();
			for(int i=0; i<messages->length; i++){
     94a:	0f 5f       	subi	r16, 0xFF	; 255
     94c:	1f 4f       	sbci	r17, 0xFF	; 255
     94e:	d7 01       	movw	r26, r14
     950:	12 96       	adiw	r26, 0x02	; 2
     952:	8d 91       	ld	r24, X+
     954:	9c 91       	ld	r25, X
     956:	13 97       	sbiw	r26, 0x03	; 3
     958:	08 17       	cp	r16, r24
     95a:	19 07       	cpc	r17, r25
     95c:	0c f4       	brge	.+2      	; 0x960 <__stack+0x61>
     95e:	f8 ce       	rjmp	.-528    	; 0x750 <_ZN8Endpoint3RunEv+0x76>
						}
					}
				}
			}
		}
		delete messages;
     960:	c7 01       	movw	r24, r14
     962:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN8MessagesD1Ev>
     966:	c7 01       	movw	r24, r14
     968:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZdlPv>
	}
}
     96c:	c9 53       	subi	r28, 0x39	; 57
     96e:	de 4f       	sbci	r29, 0xFE	; 254
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	bf 90       	pop	r11
     98c:	af 90       	pop	r10
     98e:	9f 90       	pop	r9
     990:	8f 90       	pop	r8
     992:	7f 90       	pop	r7
     994:	08 95       	ret

00000996 <_ZN9Exception8ToStringEv>:
}
} //~Fans

const char* Exception::ToString(){

}
     996:	08 95       	ret

00000998 <_ZN9ExceptionC1Ev>:

#include <stdlib.h>
#include "Exception.h"

// default constructor
Exception::Exception()
     998:	24 ea       	ldi	r18, 0xA4	; 164
     99a:	32 e0       	ldi	r19, 0x02	; 2
     99c:	fc 01       	movw	r30, r24
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	20 83       	st	Z, r18
     9a2:	08 95       	ret

000009a4 <_ZN9ExceptionC1EPKc>:
{
} //Outputs
Exception::Exception(const char* message):message(message)
     9a4:	24 ea       	ldi	r18, 0xA4	; 164
     9a6:	32 e0       	ldi	r19, 0x02	; 2
     9a8:	fc 01       	movw	r30, r24
     9aa:	31 83       	std	Z+1, r19	; 0x01
     9ac:	20 83       	st	Z, r18
     9ae:	73 83       	std	Z+3, r23	; 0x03
     9b0:	62 83       	std	Z+2, r22	; 0x02
     9b2:	08 95       	ret

000009b4 <_ZN9ExceptionD1Ev>:
{
} //Outputs

// default destructor
Exception::~Exception()
     9b4:	24 ea       	ldi	r18, 0xA4	; 164
     9b6:	32 e0       	ldi	r19, 0x02	; 2
     9b8:	fc 01       	movw	r30, r24
     9ba:	31 83       	std	Z+1, r19	; 0x01
     9bc:	20 83       	st	Z, r18
{
if(message!=NULL){
     9be:	82 81       	ldd	r24, Z+2	; 0x02
     9c0:	93 81       	ldd	r25, Z+3	; 0x03
     9c2:	00 97       	sbiw	r24, 0x00	; 0
     9c4:	11 f0       	breq	.+4      	; 0x9ca <_ZN9ExceptionD1Ev+0x16>
delete message;
     9c6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZdlPv>
     9ca:	08 95       	ret

000009cc <_ZN10ExceptionsC1Ev>:


#include "Exceptions.h"
#include <stdlib.h>
// default constructor
Exceptions::Exceptions(){
     9cc:	fc 01       	movw	r30, r24
		for(size_t i=0; i<d_size; i++){
			if(d==d_data[i])return true;
		}
		return false;
	}
	   simple_vector() : d_size(0), d_capacity(0), d_data(0) {
     9ce:	11 82       	std	Z+1, r1	; 0x01
     9d0:	10 82       	st	Z, r1
     9d2:	13 82       	std	Z+3, r1	; 0x03
     9d4:	12 82       	std	Z+2, r1	; 0x02
     9d6:	15 82       	std	Z+5, r1	; 0x05
     9d8:	14 82       	std	Z+4, r1	; 0x04
     9da:	08 95       	ret

000009dc <_ZN10Exceptions3AddEP9Exception>:
		this->exceptions.push_back(exception);
		exceptions->exceptions[i]=NULL;
	}
	delete exceptions;
}
void Exceptions::Add(Exception* exception){
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
     9f2:	7b 01       	movw	r14, r22
	   simple_vector(   simple_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) {
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
	   simple_vector &operator=(   simple_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x)  { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
     9f4:	0a 81       	ldd	r16, Y+2	; 0x02
     9f6:	1b 81       	ldd	r17, Y+3	; 0x03
     9f8:	88 81       	ld	r24, Y
     9fa:	99 81       	ldd	r25, Y+1	; 0x01
     9fc:	08 17       	cp	r16, r24
     9fe:	19 07       	cpc	r17, r25
     a00:	e9 f4       	brne	.+58     	; 0xa3c <_ZN10Exceptions3AddEP9Exception+0x60>
	size_t size()  const { return d_size; }; // Size getter
	Data const &operator[](size_t idx) const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx) { return d_data[idx]; }; // Changeable getter
	private:
	void resize()  { d_capacity = d_capacity ? d_capacity*2 : 1; Data *newdata = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(newdata, d_data, d_size * sizeof(Data)); free(d_data); d_data = newdata; };// Allocates double the old space
     a02:	01 15       	cp	r16, r1
     a04:	11 05       	cpc	r17, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <_ZN10Exceptions3AddEP9Exception+0x34>
     a08:	c8 01       	movw	r24, r16
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <_ZN10Exceptions3AddEP9Exception+0x38>
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	9b 83       	std	Y+3, r25	; 0x03
     a16:	8a 83       	std	Y+2, r24	; 0x02
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	0e 94 33 11 	call	0x2266	; 0x2266 <malloc>
     a20:	6c 01       	movw	r12, r24
     a22:	ac 80       	ldd	r10, Y+4	; 0x04
     a24:	bd 80       	ldd	r11, Y+5	; 0x05
     a26:	a8 01       	movw	r20, r16
     a28:	44 0f       	add	r20, r20
     a2a:	55 1f       	adc	r21, r21
     a2c:	b5 01       	movw	r22, r10
     a2e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <memcpy>
     a32:	c5 01       	movw	r24, r10
     a34:	0e 94 cb 11 	call	0x2396	; 0x2396 <free>
     a38:	dd 82       	std	Y+5, r13	; 0x05
     a3a:	cc 82       	std	Y+4, r12	; 0x04
	   simple_vector(   simple_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) {
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
	   simple_vector &operator=(   simple_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x)  { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
     a3c:	ec 81       	ldd	r30, Y+4	; 0x04
     a3e:	fd 81       	ldd	r31, Y+5	; 0x05
     a40:	88 81       	ld	r24, Y
     a42:	99 81       	ldd	r25, Y+1	; 0x01
     a44:	9c 01       	movw	r18, r24
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	39 83       	std	Y+1, r19	; 0x01
     a4c:	28 83       	st	Y, r18
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	e8 0f       	add	r30, r24
     a54:	f9 1f       	adc	r31, r25
     a56:	f1 82       	std	Z+1, r15	; 0x01
     a58:	e0 82       	st	Z, r14
exceptions.push_back(exception);}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	df 90       	pop	r13
     a68:	cf 90       	pop	r12
     a6a:	bf 90       	pop	r11
     a6c:	af 90       	pop	r10
     a6e:	08 95       	ret

00000a70 <_ZN10Exceptions5CountEv>:
unsigned int Exceptions::Count(){
	return exceptions.size();
}
     a70:	fc 01       	movw	r30, r24
     a72:	80 81       	ld	r24, Z
     a74:	91 81       	ldd	r25, Z+1	; 0x01
     a76:	08 95       	ret

00000a78 <_ZN10ExceptionsD1Ev>:
// default destructor
Exceptions::~Exceptions()
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	8c 01       	movw	r16, r24
	size_t size()  const { return d_size; }; // Size getter
     a8a:	dc 01       	movw	r26, r24
     a8c:	ed 90       	ld	r14, X+
     a8e:	fc 90       	ld	r15, X
{
	unsigned int size = exceptions.size();
	for(unsigned int i=0; i<size; i++){
     a90:	e1 14       	cp	r14, r1
     a92:	f1 04       	cpc	r15, r1
     a94:	d9 f0       	breq	.+54     	; 0xacc <_ZN10ExceptionsD1Ev+0x54>
     a96:	c0 e0       	ldi	r28, 0x00	; 0
     a98:	d0 e0       	ldi	r29, 0x00	; 0
		if(exceptions[i]!=NULL)
     a9a:	d8 01       	movw	r26, r16
     a9c:	14 96       	adiw	r26, 0x04	; 4
     a9e:	ed 91       	ld	r30, X+
     aa0:	fc 91       	ld	r31, X
     aa2:	15 97       	sbiw	r26, 0x05	; 5
     aa4:	ce 01       	movw	r24, r28
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	e8 0f       	add	r30, r24
     aac:	f9 1f       	adc	r31, r25
     aae:	c0 80       	ld	r12, Z
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
		delete exceptions[i];
     ab2:	c1 14       	cp	r12, r1
     ab4:	d1 04       	cpc	r13, r1
     ab6:	31 f0       	breq	.+12     	; 0xac4 <_ZN10ExceptionsD1Ev+0x4c>
     ab8:	c6 01       	movw	r24, r12
     aba:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN9ExceptionD1Ev>
     abe:	c6 01       	movw	r24, r12
     ac0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZdlPv>
}
// default destructor
Exceptions::~Exceptions()
{
	unsigned int size = exceptions.size();
	for(unsigned int i=0; i<size; i++){
     ac4:	21 96       	adiw	r28, 0x01	; 1
     ac6:	ec 16       	cp	r14, r28
     ac8:	fd 06       	cpc	r15, r29
     aca:	39 f7       	brne	.-50     	; 0xa9a <_ZN10ExceptionsD1Ev+0x22>

	}; // Default constructor
	   simple_vector(   simple_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) {
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
     acc:	f8 01       	movw	r30, r16
     ace:	84 81       	ldd	r24, Z+4	; 0x04
     ad0:	95 81       	ldd	r25, Z+5	; 0x05
     ad2:	0e 94 cb 11 	call	0x2396	; 0x2396 <free>
		if(exceptions[i]!=NULL)
		delete exceptions[i];
	}
} //~Exceptions
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	08 95       	ret

00000ae8 <_ZN4Fans23GetFansWorkingCorrectlyERbR10Exceptions>:
	this->iGetFanInfos=iGetFanInfos;
	this->nIGetFanInfos=nIGetFanInfos;
	this->iGetFanSpeedMin = iGetFanSpeedMin;

}
void Fans::GetFansWorkingCorrectly(bool& successful, Exceptions& exceptions){
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	ec 01       	movw	r28, r24
     af6:	8b 01       	movw	r16, r22
     af8:	7a 01       	movw	r14, r20
if(nIGetFanInfos<=0){
     afa:	8e 81       	ldd	r24, Y+6	; 0x06
     afc:	81 11       	cpse	r24, r1
     afe:	10 c0       	rjmp	.+32     	; 0xb20 <_ZN4Fans23GetFansWorkingCorrectlyERbR10Exceptions+0x38>
	exceptions.Add(new Exception("There are no fans"));
     b00:	84 e0       	ldi	r24, 0x04	; 4
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
     b08:	ec 01       	movw	r28, r24
     b0a:	66 ea       	ldi	r22, 0xA6	; 166
     b0c:	72 e0       	ldi	r23, 0x02	; 2
     b0e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <_ZN9ExceptionC1EPKc>
     b12:	be 01       	movw	r22, r28
     b14:	c7 01       	movw	r24, r14
     b16:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
successful= false;
     b1a:	d8 01       	movw	r26, r16
     b1c:	1c 92       	st	X, r1
return;
     b1e:	27 c0       	rjmp	.+78     	; 0xb6e <_ZN4Fans23GetFansWorkingCorrectlyERbR10Exceptions+0x86>
}
	uint16_t minSpeed = iGetFanSpeedMin->GetFanSpeedMin();
     b20:	8f 81       	ldd	r24, Y+7	; 0x07
     b22:	98 85       	ldd	r25, Y+8	; 0x08
     b24:	dc 01       	movw	r26, r24
     b26:	ed 91       	ld	r30, X+
     b28:	fc 91       	ld	r31, X
     b2a:	01 90       	ld	r0, Z+
     b2c:	f0 81       	ld	r31, Z
     b2e:	e0 2d       	mov	r30, r0
     b30:	09 95       	icall
	for(char i=0; i<nIGetFanInfos; i++    ){
     b32:	8e 81       	ldd	r24, Y+6	; 0x06
     b34:	88 23       	and	r24, r24
     b36:	d9 f0       	breq	.+54     	; 0xb6e <_ZN4Fans23GetFansWorkingCorrectlyERbR10Exceptions+0x86>
		IGetFanInfo* iGetFanInfo = iGetFanInfos[i];
     b38:	ec 81       	ldd	r30, Y+4	; 0x04
     b3a:	fd 81       	ldd	r31, Y+5	; 0x05
     b3c:	c0 81       	ld	r28, Z
     b3e:	d1 81       	ldd	r29, Z+1	; 0x01
		iGetFanInfo->Check(successful, exceptions);
     b40:	ec 81       	ldd	r30, Y+4	; 0x04
     b42:	fd 81       	ldd	r31, Y+5	; 0x05
     b44:	01 90       	ld	r0, Z+
     b46:	f0 81       	ld	r31, Z
     b48:	e0 2d       	mov	r30, r0
     b4a:	a7 01       	movw	r20, r14
     b4c:	b8 01       	movw	r22, r16
     b4e:	ce 01       	movw	r24, r28
     b50:	04 96       	adiw	r24, 0x04	; 4
     b52:	09 95       	icall
		if(successful){
     b54:	f8 01       	movw	r30, r16
     b56:	80 81       	ld	r24, Z
     b58:	88 23       	and	r24, r24
     b5a:	49 f0       	breq	.+18     	; 0xb6e <_ZN4Fans23GetFansWorkingCorrectlyERbR10Exceptions+0x86>
			uint16_t speed = iGetFanInfo->GetFanSpeed(successful, exceptions);
     b5c:	e8 81       	ld	r30, Y
     b5e:	f9 81       	ldd	r31, Y+1	; 0x01
     b60:	01 90       	ld	r0, Z+
     b62:	f0 81       	ld	r31, Z
     b64:	e0 2d       	mov	r30, r0
     b66:	a7 01       	movw	r20, r14
     b68:	b8 01       	movw	r22, r16
     b6a:	ce 01       	movw	r24, r28
     b6c:	09 95       	icall
			
			return;}
	}
	else break;
	}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	08 95       	ret

00000b7c <_ZN4Fans11GetInstanceEv>:
#include "UART.h"

Fans Fans:: _Singleton;
Fans& Fans::GetInstance(){
	static bool initialized=false;
	if(!initialized)
     b7c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <__data_end>
     b80:	81 11       	cpse	r24, r1
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <_ZN4Fans11GetInstanceEv+0xe>
	{
		initialized=true;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__data_end>
	}
	return _Singleton;
}
     b8a:	81 e2       	ldi	r24, 0x21	; 33
     b8c:	94 e0       	ldi	r25, 0x04	; 4
     b8e:	08 95       	ret

00000b90 <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>:
 void Fans::SetInterfaces(IGetFanInfo** iGetFanInfos, unsigned char nIGetFanInfos, IGetFanSpeedMin*iGetFanSpeedMin)
{
     b90:	fc 01       	movw	r30, r24
	this->iGetFanInfos=iGetFanInfos;
     b92:	75 83       	std	Z+5, r23	; 0x05
     b94:	64 83       	std	Z+4, r22	; 0x04
	this->nIGetFanInfos=nIGetFanInfos;
     b96:	46 83       	std	Z+6, r20	; 0x06
	this->iGetFanSpeedMin = iGetFanSpeedMin;
     b98:	30 87       	std	Z+8, r19	; 0x08
     b9a:	27 83       	std	Z+7, r18	; 0x07
     b9c:	08 95       	ret

00000b9e <_GLOBAL__sub_I__ZN4Fans10_SingletonE>:
#include "IGetFanInfo.h"
#include "IFans.h"
#include "IGetExceptions.h"
#include "IGetFanSpeedMin.h"
#include "Exceptions.h"
class Fans:
     b9e:	8c eb       	ldi	r24, 0xBC	; 188
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <_ZN4Fans10_SingletonE+0x1>
     ba6:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZN4Fans10_SingletonE>
     baa:	08 95       	ret

00000bac <_ZN4Leds4Main6SetRedEv>:
#include "Outputs.h"



void Leds::Main::SetRed(){
	Outputs::PD::_2::SetLow();
     bac:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetLow();
     bb0:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetHigh();
     bb4:	0e 94 be 06 	call	0xd7c	; 0xd7c <_ZN7Outputs2PD2_47SetHighEv>
     bb8:	08 95       	ret

00000bba <_ZN4Leds4Main8SetGreenEv>:
}
void Leds::Main::SetGreen(){
	Outputs::PD::_2::SetLow();
     bba:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetHigh();
     bbe:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZN7Outputs2PD2_37SetHighEv>
	Outputs::PD::_4::SetLow();
     bc2:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN7Outputs2PD2_46SetLowEv>
     bc6:	08 95       	ret

00000bc8 <_ZN4LM757GetNameEv>:
	addressWrite =0x90|(shifted&0x0e);
	addressRead =0x91|(shifted&0x0e);
} //LM75
const char* LM75::GetName(){
	return name;
}
     bc8:	fc 01       	movw	r30, r24
     bca:	80 85       	ldd	r24, Z+8	; 0x08
     bcc:	91 85       	ldd	r25, Z+9	; 0x09
     bce:	08 95       	ret

00000bd0 <_ZN4LM7514GetTemperatureERbR10Exceptions>:
	int8_t LM75::GetTemperature(bool& successful, Exceptions& exceptions){
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	ec 01       	movw	r28, r24
     bde:	7a 01       	movw	r14, r20
	i2c_start_wait(addressWrite);
     be0:	8b 85       	ldd	r24, Y+11	; 0x0b
     be2:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_start_wait>
	char r=i2c_write(TEMPERATURE_ADDRESS);
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
     be8:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
     bec:	18 2f       	mov	r17, r24
	i2c_stop();
     bee:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
	if(r!=0){
     bf2:	11 23       	and	r17, r17
     bf4:	79 f0       	breq	.+30     	; 0xc14 <_ZN4LM7514GetTemperatureERbR10Exceptions+0x44>
	exceptions.Add(new CommunicationException(name));
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
     bfe:	8c 01       	movw	r16, r24
     c00:	68 85       	ldd	r22, Y+8	; 0x08
     c02:	79 85       	ldd	r23, Y+9	; 0x09
     c04:	0e 94 24 01 	call	0x248	; 0x248 <_ZN22CommunicationExceptionC1EPKc>
     c08:	b8 01       	movw	r22, r16
     c0a:	c7 01       	movw	r24, r14
     c0c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
	return 0;
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0c c0       	rjmp	.+24     	; 0xc2c <_ZN4LM7514GetTemperatureERbR10Exceptions+0x5c>
	}
	i2c_start_wait(addressRead);
     c14:	8a 85       	ldd	r24, Y+10	; 0x0a
     c16:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_start_wait>
	char most = i2c_readAck();
     c1a:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
     c1e:	c8 2f       	mov	r28, r24
	char least = i2c_readAck();
     c20:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
	sei();
     c24:	78 94       	sei
	i2c_stop();
     c26:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
	return static_cast<int8_t>(most);
     c2a:	8c 2f       	mov	r24, r28
}
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	08 95       	ret

00000c3a <_ZThn2_N4LM757GetNameEv>:
     c3a:	fc 01       	movw	r30, r24
     c3c:	86 81       	ldd	r24, Z+6	; 0x06
     c3e:	97 81       	ldd	r25, Z+7	; 0x07
     c40:	08 95       	ret

00000c42 <_ZN4LM75C1EcPc>:
#include "i2cmaster.h"
#include "LM75.h"
#include "CommunicationException.h"
#include <avr/interrupt.h>
// default constructor
LM75::LM75(char address, char* name):name(name)
     c42:	fc 01       	movw	r30, r24
     c44:	82 ec       	ldi	r24, 0xC2	; 194
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	80 83       	st	Z, r24
     c4c:	8a ec       	ldi	r24, 0xCA	; 202
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	93 83       	std	Z+3, r25	; 0x03
     c52:	82 83       	std	Z+2, r24	; 0x02
     c54:	14 82       	std	Z+4, r1	; 0x04
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	85 83       	std	Z+5, r24	; 0x05
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	86 83       	std	Z+6, r24	; 0x06
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	87 83       	std	Z+7, r24	; 0x07
     c62:	51 87       	std	Z+9, r21	; 0x09
     c64:	40 87       	std	Z+8, r20	; 0x08
{
	char shifted = (address<<1);
	addressWrite =0x90|(shifted&0x0e);
     c66:	66 0f       	add	r22, r22
     c68:	6e 70       	andi	r22, 0x0E	; 14
     c6a:	86 2f       	mov	r24, r22
     c6c:	80 69       	ori	r24, 0x90	; 144
     c6e:	83 87       	std	Z+11, r24	; 0x0b
	addressRead =0x91|(shifted&0x0e);
     c70:	61 69       	ori	r22, 0x91	; 145
     c72:	62 87       	std	Z+10, r22	; 0x0a
     c74:	08 95       	ret

00000c76 <_ZN7MessageC1EPKcj>:
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include <stdlib.h>
#include "Message.h"
Message::Message(const char* bufferIn, unsigned int lengthIn):length(lengthIn), buffer(bufferIn){
     c76:	fc 01       	movw	r30, r24
     c78:	71 83       	std	Z+1, r23	; 0x01
     c7a:	60 83       	st	Z, r22
     c7c:	53 83       	std	Z+3, r21	; 0x03
     c7e:	42 83       	std	Z+2, r20	; 0x02
     c80:	08 95       	ret

00000c82 <_ZN7MessageD1Ev>:
	
}
Message::~Message(){
	delete[] this->buffer;
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	11 f0       	breq	.+4      	; 0xc90 <_ZN7MessageD1Ev+0xe>
     c8c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_ZdaPv>
     c90:	08 95       	ret

00000c92 <_ZN8MessagesC1EPP7Messagec>:
*
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	ec 01       	movw	r28, r24
     c9e:	f6 2e       	mov	r15, r22
     ca0:	07 2f       	mov	r16, r23
     ca2:	14 2f       	mov	r17, r20
     ca4:	84 2f       	mov	r24, r20
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	8a 83       	std	Y+2, r24	; 0x02
	messages = new Message*[lengthIn];
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	0e 94 b5 0b 	call	0x176a	; 0x176a <_Znaj>
     cb4:	99 83       	std	Y+1, r25	; 0x01
     cb6:	88 83       	st	Y, r24
	for(char i=0; i<lengthIn; i++)
     cb8:	11 23       	and	r17, r17
     cba:	b9 f0       	breq	.+46     	; 0xcea <_ZN8MessagesC1EPP7Messagec+0x58>
     cbc:	af 2d       	mov	r26, r15
     cbe:	b0 2f       	mov	r27, r16
     cc0:	11 50       	subi	r17, 0x01	; 1
     cc2:	21 2f       	mov	r18, r17
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	2f 5f       	subi	r18, 0xFF	; 255
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
	messages[i]= messagesIn[i];
     cd2:	4d 91       	ld	r20, X+
     cd4:	5d 91       	ld	r21, X+
     cd6:	e8 81       	ld	r30, Y
     cd8:	f9 81       	ldd	r31, Y+1	; 0x01
     cda:	e8 0f       	add	r30, r24
     cdc:	f9 1f       	adc	r31, r25
     cde:	51 83       	std	Z+1, r21	; 0x01
     ce0:	40 83       	st	Z, r20
     ce2:	02 96       	adiw	r24, 0x02	; 2
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
	messages = new Message*[lengthIn];
	for(char i=0; i<lengthIn; i++)
     ce4:	82 17       	cp	r24, r18
     ce6:	93 07       	cpc	r25, r19
     ce8:	a1 f7       	brne	.-24     	; 0xcd2 <_ZN8MessagesC1EPP7Messagec+0x40>
	messages[i]= messagesIn[i];
}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	08 95       	ret

00000cf6 <_ZN8MessagesD1Ev>:
Messages::~Messages(){
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	7c 01       	movw	r14, r24

	for(char i=0; i<length; i++)
     d02:	dc 01       	movw	r26, r24
     d04:	12 96       	adiw	r26, 0x02	; 2
     d06:	8d 91       	ld	r24, X+
     d08:	9c 91       	ld	r25, X
     d0a:	13 97       	sbiw	r26, 0x03	; 3
     d0c:	18 16       	cp	r1, r24
     d0e:	19 06       	cpc	r1, r25
     d10:	f4 f4       	brge	.+60     	; 0xd4e <_ZN8MessagesD1Ev+0x58>
     d12:	c0 e0       	ldi	r28, 0x00	; 0
	{
		delete messages[i];
     d14:	ec 2f       	mov	r30, r28
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	ee 0f       	add	r30, r30
     d1a:	ff 1f       	adc	r31, r31
     d1c:	d7 01       	movw	r26, r14
     d1e:	8d 91       	ld	r24, X+
     d20:	9c 91       	ld	r25, X
     d22:	e8 0f       	add	r30, r24
     d24:	f9 1f       	adc	r31, r25
     d26:	00 81       	ld	r16, Z
     d28:	11 81       	ldd	r17, Z+1	; 0x01
     d2a:	01 15       	cp	r16, r1
     d2c:	11 05       	cpc	r17, r1
     d2e:	31 f0       	breq	.+12     	; 0xd3c <_ZN8MessagesD1Ev+0x46>
     d30:	c8 01       	movw	r24, r16
     d32:	0e 94 41 06 	call	0xc82	; 0xc82 <_ZN7MessageD1Ev>
     d36:	c8 01       	movw	r24, r16
     d38:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZdlPv>
	for(char i=0; i<lengthIn; i++)
	messages[i]= messagesIn[i];
}
Messages::~Messages(){

	for(char i=0; i<length; i++)
     d3c:	cf 5f       	subi	r28, 0xFF	; 255
     d3e:	2c 2f       	mov	r18, r28
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	f7 01       	movw	r30, r14
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	1c f3       	brlt	.-58     	; 0xd14 <_ZN8MessagesD1Ev+0x1e>
	{
		delete messages[i];
	}
	delete[] messages;
     d4e:	d7 01       	movw	r26, r14
     d50:	8d 91       	ld	r24, X+
     d52:	9c 91       	ld	r25, X
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	11 f0       	breq	.+4      	; 0xd5c <_ZN8MessagesD1Ev+0x66>
     d58:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_ZdaPv>
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	08 95       	ret

00000d68 <_ZN7Outputs10InitializeEv>:
}
void Outputs::PB::_5::SetLow(){
	PORTB= PORTB&0xFB;
}
void Outputs::PD::_2::SetHigh(){
	PORTD = PORTD|0x04;
     d68:	8a b1       	in	r24, 0x0a	; 10
     d6a:	8c 61       	ori	r24, 0x1C	; 28
     d6c:	8a b9       	out	0x0a, r24	; 10
     d6e:	08 95       	ret

00000d70 <_ZN7Outputs2PD2_26SetLowEv>:
}
void Outputs::PD::_2::SetLow(){
	PORTD= PORTD&0xFB;
     d70:	5a 98       	cbi	0x0b, 2	; 11
     d72:	08 95       	ret

00000d74 <_ZN7Outputs2PD2_37SetHighEv>:
}
void Outputs::PD::_3::SetHigh(){
	PORTD = PORTD|0x08;
     d74:	5b 9a       	sbi	0x0b, 3	; 11
     d76:	08 95       	ret

00000d78 <_ZN7Outputs2PD2_36SetLowEv>:
}
void Outputs::PD::_3::SetLow(){
	PORTD= PORTD&0xF7;
     d78:	5b 98       	cbi	0x0b, 3	; 11
     d7a:	08 95       	ret

00000d7c <_ZN7Outputs2PD2_47SetHighEv>:
}
void Outputs::PD::_4::SetHigh(){
	PORTD = PORTD|0x10;
     d7c:	5c 9a       	sbi	0x0b, 4	; 11
     d7e:	08 95       	ret

00000d80 <_ZN7Outputs2PD2_46SetLowEv>:
}
void Outputs::PD::_4::SetLow(){
	PORTD= PORTD&0xEF;
     d80:	5c 98       	cbi	0x0b, 4	; 11
     d82:	08 95       	ret

00000d84 <_ZN8Settings17GetTemperatureMaxEv>:
		if(a<POWER_MIN)
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
     d84:	fc 01       	movw	r30, r24
     d86:	82 85       	ldd	r24, Z+10	; 0x0a
     d88:	08 95       	ret

00000d8a <_ZN8Settings8GetPowerEv>:
	temperatureMax=a;
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
}
uint16_t Settings::GetPower(){
	return power;
}
     d8a:	fc 01       	movw	r30, r24
     d8c:	83 85       	ldd	r24, Z+11	; 0x0b
     d8e:	94 85       	ldd	r25, Z+12	; 0x0c
     d90:	08 95       	ret

00000d92 <_ZN8Settings14GetFanSpeedMinEv>:
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
     d92:	fc 01       	movw	r30, r24
     d94:	85 85       	ldd	r24, Z+13	; 0x0d
     d96:	96 85       	ldd	r25, Z+14	; 0x0e
     d98:	08 95       	ret

00000d9a <_ZThn8_N8Settings14GetFanSpeedMinEv>:
     d9a:	fc 01       	movw	r30, r24
     d9c:	85 81       	ldd	r24, Z+5	; 0x05
     d9e:	96 81       	ldd	r25, Z+6	; 0x06
     da0:	08 95       	ret

00000da2 <_ZThn4_N8Settings8GetPowerEv>:
     da2:	fc 01       	movw	r30, r24
     da4:	87 81       	ldd	r24, Z+7	; 0x07
     da6:	90 85       	ldd	r25, Z+8	; 0x08
     da8:	08 95       	ret

00000daa <_ZN8Settings17CapTemperatureMaxERh>:
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
	CapPower(a);
	power=a;
}
void Settings::CapTemperatureMax(uint8_t& a){
	if(a>TEMPERATURE_MAX_MAX)
     daa:	fb 01       	movw	r30, r22
     dac:	80 81       	ld	r24, Z
     dae:	8e 37       	cpi	r24, 0x7E	; 126
     db0:	18 f0       	brcs	.+6      	; 0xdb8 <_ZN8Settings17CapTemperatureMaxERh+0xe>
		a=TEMPERATURE_MAX_MAX;
     db2:	8d e7       	ldi	r24, 0x7D	; 125
     db4:	80 83       	st	Z, r24
     db6:	08 95       	ret
	else
		if(a<TEMPERTURE_MAX_MIN)
     db8:	88 32       	cpi	r24, 0x28	; 40
     dba:	18 f4       	brcc	.+6      	; 0xdc2 <_ZN8Settings17CapTemperatureMaxERh+0x18>
			a=TEMPERTURE_MAX_MIN;
     dbc:	88 e2       	ldi	r24, 0x28	; 40
     dbe:	fb 01       	movw	r30, r22
     dc0:	80 83       	st	Z, r24
     dc2:	08 95       	ret

00000dc4 <_ZN8Settings17SetTemperatureMaxEh>:
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
void Settings::SetTemperatureMax(uint8_t a){
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	8c 01       	movw	r16, r24
     dd4:	69 83       	std	Y+1, r22	; 0x01
	CapTemperatureMax(a);
     dd6:	be 01       	movw	r22, r28
     dd8:	6f 5f       	subi	r22, 0xFF	; 255
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN8Settings17CapTemperatureMaxERh>
	temperatureMax=a;
     de0:	69 81       	ldd	r22, Y+1	; 0x01
     de2:	f8 01       	movw	r30, r16
     de4:	62 87       	std	Z+10, r22	; 0x0a
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <eeprom_write_byte>
}
     dee:	0f 90       	pop	r0
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	08 95       	ret

00000dfa <_ZThn2_N8Settings17SetTemperatureMaxEh>:
     dfa:	02 97       	sbiw	r24, 0x02	; 2
     dfc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN8Settings17SetTemperatureMaxEh>
     e00:	08 95       	ret

00000e02 <_ZN8Settings8CapPowerERj>:
		if(a<TEMPERTURE_MAX_MIN)
			a=TEMPERTURE_MAX_MIN;
}	
void Settings::CapPower(uint16_t& a){
	
	if(a>POWER_MAX)
     e02:	fb 01       	movw	r30, r22
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	8d 3d       	cpi	r24, 0xDD	; 221
     e0a:	f5 e0       	ldi	r31, 0x05	; 5
     e0c:	9f 07       	cpc	r25, r31
     e0e:	30 f0       	brcs	.+12     	; 0xe1c <_ZN8Settings8CapPowerERj+0x1a>
		a=POWER_MAX;
     e10:	8c ed       	ldi	r24, 0xDC	; 220
     e12:	95 e0       	ldi	r25, 0x05	; 5
     e14:	fb 01       	movw	r30, r22
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	80 83       	st	Z, r24
     e1a:	08 95       	ret
	else
		if(a<POWER_MIN)
     e1c:	4e 97       	sbiw	r24, 0x1e	; 30
     e1e:	28 f4       	brcc	.+10     	; 0xe2a <_ZN8Settings8CapPowerERj+0x28>
			a=POWER_MIN;
     e20:	8e e1       	ldi	r24, 0x1E	; 30
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	fb 01       	movw	r30, r22
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
     e2a:	08 95       	ret

00000e2c <_ZN8Settings10InitializeEv>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void Settings::Initialize(){
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	00 d0       	rcall	.+0      	; 0xe36 <_ZN8Settings10InitializeEv+0xa>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	8c 01       	movw	r16, r24
	temperatureMax= eeprom_read_byte(&ADDRESS_TEMPERATURE_MAX);
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <eeprom_read_byte>
     e44:	f8 01       	movw	r30, r16
     e46:	82 87       	std	Z+10, r24	; 0x0a
	CapTemperatureMax(temperatureMax);
     e48:	b8 01       	movw	r22, r16
     e4a:	66 5f       	subi	r22, 0xF6	; 246
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	c8 01       	movw	r24, r16
     e50:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN8Settings17CapTemperatureMaxERh>
	
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <eeprom_read_word>
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
	CapPower(a);
     e60:	be 01       	movw	r22, r28
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	c8 01       	movw	r24, r16
     e68:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZN8Settings8CapPowerERj>
	power=a;
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	9a 81       	ldd	r25, Y+2	; 0x02
     e70:	f8 01       	movw	r30, r16
     e72:	94 87       	std	Z+12, r25	; 0x0c
     e74:	83 87       	std	Z+11, r24	; 0x0b
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <_ZN8Settings11GetInstanceEv>:
uint8_t EEMEM  ADDRESS_TEMPERATURE_MAX;
uint16_t EEMEM  ADDRESS_POWER;
Settings Settings:: _Singleton;
Settings& Settings::GetInstance(){
	static bool initialized=false;
	if(!initialized)
     e84:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <_ZZN8Settings11GetInstanceEvE11initialized>
     e88:	81 11       	cpse	r24, r1
     e8a:	07 c0       	rjmp	.+14     	; 0xe9a <_ZN8Settings11GetInstanceEv+0x16>
	{
		_Singleton.Initialize();
     e8c:	8b e2       	ldi	r24, 0x2B	; 43
     e8e:	94 e0       	ldi	r25, 0x04	; 4
     e90:	0e 94 16 07 	call	0xe2c	; 0xe2c <_ZN8Settings10InitializeEv>
		initialized=true;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_ZZN8Settings11GetInstanceEvE11initialized>
	}
	return _Singleton;
}
     e9a:	8b e2       	ldi	r24, 0x2B	; 43
     e9c:	94 e0       	ldi	r25, 0x04	; 4
     e9e:	08 95       	ret

00000ea0 <_ZN8Settings8SetPowerEj>:
	return power;
}
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
void Settings::SetPower(uint16_t a){
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <_ZN8Settings8SetPowerEj+0x6>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	7a 83       	std	Y+2, r23	; 0x02
     eac:	69 83       	std	Y+1, r22	; 0x01
	CapPower(a);
     eae:	be 01       	movw	r22, r28
     eb0:	6f 5f       	subi	r22, 0xFF	; 255
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZN8Settings8CapPowerERj>
	eeprom_write_word(&ADDRESS_POWER, a);
     eb8:	69 81       	ldd	r22, Y+1	; 0x01
     eba:	7a 81       	ldd	r23, Y+2	; 0x02
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 7f 15 	call	0x2afe	; 0x2afe <eeprom_write_word>
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <_ZThn6_N8Settings8SetPowerEj>:
     ece:	06 97       	sbiw	r24, 0x06	; 6
     ed0:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN8Settings8SetPowerEj>
     ed4:	08 95       	ret

00000ed6 <_GLOBAL__sub_I_ADDRESS_TEMPERATURE_MAX>:
#include "IGetFanSpeedMin.h"
#define TEMPERATURE_MAX_MAX 125
#define TEMPERTURE_MAX_MIN 40
#define POWER_MIN 30
#define POWER_MAX 1500
class Settings:public  IGetTemperatureMax, public  ISetTemperatureMax, public  IGetPower, public  ISetPower, public IGetFanSpeedMin
     ed6:	eb e2       	ldi	r30, 0x2B	; 43
     ed8:	f4 e0       	ldi	r31, 0x04	; 4
     eda:	80 ed       	ldi	r24, 0xD0	; 208
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	8e ed       	ldi	r24, 0xDE	; 222
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	93 83       	std	Z+3, r25	; 0x03
     ee8:	82 83       	std	Z+2, r24	; 0x02
     eea:	84 ee       	ldi	r24, 0xE4	; 228
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	95 83       	std	Z+5, r25	; 0x05
     ef0:	84 83       	std	Z+4, r24	; 0x04
     ef2:	8a ee       	ldi	r24, 0xEA	; 234
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	97 83       	std	Z+7, r25	; 0x07
     ef8:	86 83       	std	Z+6, r24	; 0x06
     efa:	80 ef       	ldi	r24, 0xF0	; 240
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	91 87       	std	Z+9, r25	; 0x09
     f00:	80 87       	std	Z+8, r24	; 0x08
     f02:	87 e7       	ldi	r24, 0x77	; 119
     f04:	82 87       	std	Z+10, r24	; 0x0a
     f06:	8a e0       	ldi	r24, 0x0A	; 10
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	94 87       	std	Z+12, r25	; 0x0c
     f0c:	83 87       	std	Z+11, r24	; 0x0b
     f0e:	88 ee       	ldi	r24, 0xE8	; 232
     f10:	93 e0       	ldi	r25, 0x03	; 3
     f12:	96 87       	std	Z+14, r25	; 0x0e
     f14:	85 87       	std	Z+13, r24	; 0x0d
     f16:	08 95       	ret

00000f18 <_ZN11SystemCheck5CheckERbR10Exceptions>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void SystemCheck::Initialize(){
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	7c 01       	movw	r14, r24
     f26:	eb 01       	movw	r28, r22
     f28:	8a 01       	movw	r16, r20
     f2a:	dc 01       	movw	r26, r24
     f2c:	12 96       	adiw	r26, 0x02	; 2
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	13 97       	sbiw	r26, 0x03	; 3
     f34:	dc 01       	movw	r26, r24
     f36:	ed 91       	ld	r30, X+
     f38:	fc 91       	ld	r31, X
     f3a:	01 90       	ld	r0, Z+
     f3c:	f0 81       	ld	r31, Z
     f3e:	e0 2d       	mov	r30, r0
     f40:	09 95       	icall
     f42:	88 81       	ld	r24, Y
     f44:	88 23       	and	r24, r24
     f46:	61 f0       	breq	.+24     	; 0xf60 <_ZN11SystemCheck5CheckERbR10Exceptions+0x48>
     f48:	f7 01       	movw	r30, r14
     f4a:	86 81       	ldd	r24, Z+6	; 0x06
     f4c:	97 81       	ldd	r25, Z+7	; 0x07
     f4e:	dc 01       	movw	r26, r24
     f50:	ed 91       	ld	r30, X+
     f52:	fc 91       	ld	r31, X
     f54:	01 90       	ld	r0, Z+
     f56:	f0 81       	ld	r31, Z
     f58:	e0 2d       	mov	r30, r0
     f5a:	a8 01       	movw	r20, r16
     f5c:	be 01       	movw	r22, r28
     f5e:	09 95       	icall
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	08 95       	ret

00000f6e <_ZN11SystemCheck11GetInstanceEv>:
     f6e:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_ZZN11SystemCheck11GetInstanceEvE11initialized>
     f72:	81 11       	cpse	r24, r1
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <_ZN11SystemCheck11GetInstanceEv+0xe>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <_ZZN11SystemCheck11GetInstanceEvE11initialized>
     f7c:	8b e3       	ldi	r24, 0x3B	; 59
     f7e:	94 e0       	ldi	r25, 0x04	; 4
     f80:	08 95       	ret

00000f82 <_ZN11SystemCheck13SetInterfacesEP13ITemperaturesP18IGetTemperatureMaxP5IFans>:

}
void SystemCheck::SetInterfaces(ITemperatures* iTemperatures, IGetTemperatureMax *  iGetTemperatureMax, IFans* iFans){
     f82:	fc 01       	movw	r30, r24
	this->iTemperatures=iTemperatures;
     f84:	73 83       	std	Z+3, r23	; 0x03
     f86:	62 83       	std	Z+2, r22	; 0x02
	this->iGetTemperatureMax=iGetTemperatureMax;
     f88:	55 83       	std	Z+5, r21	; 0x05
     f8a:	44 83       	std	Z+4, r20	; 0x04
	this->iFans = iFans;
     f8c:	37 83       	std	Z+7, r19	; 0x07
     f8e:	26 83       	std	Z+6, r18	; 0x06
     f90:	08 95       	ret

00000f92 <_GLOBAL__sub_I__ZN11SystemCheck10_SingletonE>:
#include "ITemperatures.h"
#include "ISystemCheck.h"
#include "IGetTemperatureMax.h"
#include "IFans.h"
#include  "Exceptions.h"	
class SystemCheck:public ISystemCheck
     f92:	86 ef       	ldi	r24, 0xF6	; 246
     f94:	92 e0       	ldi	r25, 0x02	; 2
     f96:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <_ZN11SystemCheck10_SingletonE+0x1>
     f9a:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZN11SystemCheck10_SingletonE>
     f9e:	08 95       	ret

00000fa0 <_ZN5TC6543Fan7GetNameEv>:
}
unsigned char TC654::GetDutyCycle(bool& successful){
	return ReadRegister(successful, DUTY_CYCLE_ADDRESS);
}
void TC654::SetDutyCycle(bool& successful, unsigned char value){
	WriteRegister(successful, DUTY_CYCLE_ADDRESS, value);
     fa0:	fc 01       	movw	r30, r24
     fa2:	86 81       	ldd	r24, Z+6	; 0x06
     fa4:	97 81       	ldd	r25, Z+7	; 0x07
     fa6:	08 95       	ret

00000fa8 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions>:
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	ec 01       	movw	r28, r24
     fb6:	8b 01       	movw	r16, r22
     fb8:	7a 01       	movw	r14, r20
     fba:	8c 89       	ldd	r24, Y+20	; 0x14
     fbc:	9d 89       	ldd	r25, Y+21	; 0x15
     fbe:	80 fd       	sbrc	r24, 0
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x20>
     fc2:	ea 89       	ldd	r30, Y+18	; 0x12
     fc4:	fb 89       	ldd	r31, Y+19	; 0x13
     fc6:	11 c0       	rjmp	.+34     	; 0xfea <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x42>
     fc8:	e8 85       	ldd	r30, Y+8	; 0x08
     fca:	f9 85       	ldd	r31, Y+9	; 0x09
     fcc:	9c 01       	movw	r18, r24
     fce:	35 95       	asr	r19
     fd0:	27 95       	ror	r18
     fd2:	e2 0f       	add	r30, r18
     fd4:	f3 1f       	adc	r31, r19
     fd6:	01 90       	ld	r0, Z+
     fd8:	f0 81       	ld	r31, Z
     fda:	e0 2d       	mov	r30, r0
     fdc:	2a 89       	ldd	r18, Y+18	; 0x12
     fde:	3b 89       	ldd	r19, Y+19	; 0x13
     fe0:	e2 0f       	add	r30, r18
     fe2:	f3 1f       	adc	r31, r19
     fe4:	01 90       	ld	r0, Z+
     fe6:	f0 81       	ld	r31, Z
     fe8:	e0 2d       	mov	r30, r0
     fea:	95 95       	asr	r25
     fec:	87 95       	ror	r24
     fee:	28 85       	ldd	r18, Y+8	; 0x08
     ff0:	39 85       	ldd	r19, Y+9	; 0x09
     ff2:	b8 01       	movw	r22, r16
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	09 95       	icall
     ffa:	f8 01       	movw	r30, r16
     ffc:	80 81       	ld	r24, Z
     ffe:	88 23       	and	r24, r24
    1000:	09 f1       	breq	.+66     	; 0x1044 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x9c>
    1002:	8c 85       	ldd	r24, Y+12	; 0x0c
    1004:	9d 85       	ldd	r25, Y+13	; 0x0d
    1006:	80 fd       	sbrc	r24, 0
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x68>
    100a:	ea 85       	ldd	r30, Y+10	; 0x0a
    100c:	fb 85       	ldd	r31, Y+11	; 0x0b
    100e:	11 c0       	rjmp	.+34     	; 0x1032 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x8a>
    1010:	e8 85       	ldd	r30, Y+8	; 0x08
    1012:	f9 85       	ldd	r31, Y+9	; 0x09
    1014:	9c 01       	movw	r18, r24
    1016:	35 95       	asr	r19
    1018:	27 95       	ror	r18
    101a:	e2 0f       	add	r30, r18
    101c:	f3 1f       	adc	r31, r19
    101e:	01 90       	ld	r0, Z+
    1020:	f0 81       	ld	r31, Z
    1022:	e0 2d       	mov	r30, r0
    1024:	2a 85       	ldd	r18, Y+10	; 0x0a
    1026:	3b 85       	ldd	r19, Y+11	; 0x0b
    1028:	e2 0f       	add	r30, r18
    102a:	f3 1f       	adc	r31, r19
    102c:	01 90       	ld	r0, Z+
    102e:	f0 81       	ld	r31, Z
    1030:	e0 2d       	mov	r30, r0
    1032:	95 95       	asr	r25
    1034:	87 95       	ror	r24
    1036:	28 85       	ldd	r18, Y+8	; 0x08
    1038:	39 85       	ldd	r19, Y+9	; 0x09
    103a:	b8 01       	movw	r22, r16
    103c:	82 0f       	add	r24, r18
    103e:	93 1f       	adc	r25, r19
    1040:	09 95       	icall
    1042:	0e c0       	rjmp	.+28     	; 0x1060 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0xb8>
    1044:	89 e0       	ldi	r24, 0x09	; 9
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    104c:	8c 01       	movw	r16, r24
    104e:	6e 81       	ldd	r22, Y+6	; 0x06
    1050:	7f 81       	ldd	r23, Y+7	; 0x07
    1052:	42 e0       	ldi	r20, 0x02	; 2
    1054:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    1058:	b8 01       	movw	r22, r16
    105a:	c7 01       	movw	r24, r14
    105c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	08 95       	ret

00001072 <_ZN5TC6543Fan5CheckERbR10Exceptions>:
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
    1080:	8b 01       	movw	r16, r22
    1082:	7a 01       	movw	r14, r20
    1084:	8c 89       	ldd	r24, Y+20	; 0x14
    1086:	9d 89       	ldd	r25, Y+21	; 0x15
    1088:	80 fd       	sbrc	r24, 0
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <_ZN5TC6543Fan5CheckERbR10Exceptions+0x20>
    108c:	ea 89       	ldd	r30, Y+18	; 0x12
    108e:	fb 89       	ldd	r31, Y+19	; 0x13
    1090:	11 c0       	rjmp	.+34     	; 0x10b4 <_ZN5TC6543Fan5CheckERbR10Exceptions+0x42>
    1092:	e8 85       	ldd	r30, Y+8	; 0x08
    1094:	f9 85       	ldd	r31, Y+9	; 0x09
    1096:	9c 01       	movw	r18, r24
    1098:	35 95       	asr	r19
    109a:	27 95       	ror	r18
    109c:	e2 0f       	add	r30, r18
    109e:	f3 1f       	adc	r31, r19
    10a0:	01 90       	ld	r0, Z+
    10a2:	f0 81       	ld	r31, Z
    10a4:	e0 2d       	mov	r30, r0
    10a6:	2a 89       	ldd	r18, Y+18	; 0x12
    10a8:	3b 89       	ldd	r19, Y+19	; 0x13
    10aa:	e2 0f       	add	r30, r18
    10ac:	f3 1f       	adc	r31, r19
    10ae:	01 90       	ld	r0, Z+
    10b0:	f0 81       	ld	r31, Z
    10b2:	e0 2d       	mov	r30, r0
    10b4:	95 95       	asr	r25
    10b6:	87 95       	ror	r24
    10b8:	28 85       	ldd	r18, Y+8	; 0x08
    10ba:	39 85       	ldd	r19, Y+9	; 0x09
    10bc:	b8 01       	movw	r22, r16
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	09 95       	icall
    10c4:	f8 01       	movw	r30, r16
    10c6:	80 81       	ld	r24, Z
    10c8:	88 23       	and	r24, r24
    10ca:	21 f1       	breq	.+72     	; 0x1114 <_ZN5TC6543Fan5CheckERbR10Exceptions+0xa2>
    10cc:	88 89       	ldd	r24, Y+16	; 0x10
    10ce:	99 89       	ldd	r25, Y+17	; 0x11
    10d0:	80 fd       	sbrc	r24, 0
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <_ZN5TC6543Fan5CheckERbR10Exceptions+0x68>
    10d4:	ee 85       	ldd	r30, Y+14	; 0x0e
    10d6:	ff 85       	ldd	r31, Y+15	; 0x0f
    10d8:	11 c0       	rjmp	.+34     	; 0x10fc <_ZN5TC6543Fan5CheckERbR10Exceptions+0x8a>
    10da:	e8 85       	ldd	r30, Y+8	; 0x08
    10dc:	f9 85       	ldd	r31, Y+9	; 0x09
    10de:	9c 01       	movw	r18, r24
    10e0:	35 95       	asr	r19
    10e2:	27 95       	ror	r18
    10e4:	e2 0f       	add	r30, r18
    10e6:	f3 1f       	adc	r31, r19
    10e8:	01 90       	ld	r0, Z+
    10ea:	f0 81       	ld	r31, Z
    10ec:	e0 2d       	mov	r30, r0
    10ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    10f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    10f2:	e2 0f       	add	r30, r18
    10f4:	f3 1f       	adc	r31, r19
    10f6:	01 90       	ld	r0, Z+
    10f8:	f0 81       	ld	r31, Z
    10fa:	e0 2d       	mov	r30, r0
    10fc:	2e 81       	ldd	r18, Y+6	; 0x06
    10fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1100:	95 95       	asr	r25
    1102:	87 95       	ror	r24
    1104:	a8 85       	ldd	r26, Y+8	; 0x08
    1106:	b9 85       	ldd	r27, Y+9	; 0x09
    1108:	a7 01       	movw	r20, r14
    110a:	b8 01       	movw	r22, r16
    110c:	8a 0f       	add	r24, r26
    110e:	9b 1f       	adc	r25, r27
    1110:	09 95       	icall
    1112:	0e c0       	rjmp	.+28     	; 0x1130 <_ZN5TC6543Fan5CheckERbR10Exceptions+0xbe>
    1114:	89 e0       	ldi	r24, 0x09	; 9
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    111c:	8c 01       	movw	r16, r24
    111e:	6e 81       	ldd	r22, Y+6	; 0x06
    1120:	7f 81       	ldd	r23, Y+7	; 0x07
    1122:	42 e0       	ldi	r20, 0x02	; 2
    1124:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    1128:	b8 01       	movw	r22, r16
    112a:	c7 01       	movw	r24, r14
    112c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	08 95       	ret

0000113e <_ZThn4_N5TC6543Fan5CheckERbR10Exceptions>:
    113e:	04 97       	sbiw	r24, 0x04	; 4
    1140:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5TC6543Fan5CheckERbR10Exceptions>
    1144:	08 95       	ret

00001146 <_ZThn2_N5TC6543Fan7GetNameEv>:
    1146:	fc 01       	movw	r30, r24
    1148:	84 81       	ldd	r24, Z+4	; 0x04
    114a:	95 81       	ldd	r25, Z+5	; 0x05
    114c:	08 95       	ret

0000114e <_ZN5TC6546Status6GetF2FEv>:
    114e:	fc 01       	movw	r30, r24
    1150:	90 81       	ld	r25, Z
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	91 ff       	sbrs	r25, 1
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	08 95       	ret

0000115a <_ZN5TC6546Status7GetR1COEv>:
    115a:	fc 01       	movw	r30, r24
    115c:	90 81       	ld	r25, Z
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	93 ff       	sbrs	r25, 3
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	08 95       	ret

00001166 <_ZN5TC6546Status7GetR2COEv>:
    1166:	fc 01       	movw	r30, r24
    1168:	90 81       	ld	r25, Z
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	94 ff       	sbrs	r25, 4
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	08 95       	ret

00001172 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_FvS2_R10ExceptionsPKcEMS_FvS2_EPc>:
    1172:	8f 92       	push	r8
    1174:	9f 92       	push	r9
    1176:	af 92       	push	r10
    1178:	bf 92       	push	r11
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	fc 01       	movw	r30, r24
    1190:	8c e0       	ldi	r24, 0x0C	; 12
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	80 83       	st	Z, r24
    1198:	86 e1       	ldi	r24, 0x16	; 22
    119a:	93 e0       	ldi	r25, 0x03	; 3
    119c:	93 83       	std	Z+3, r25	; 0x03
    119e:	82 83       	std	Z+2, r24	; 0x02
    11a0:	8c e1       	ldi	r24, 0x1C	; 28
    11a2:	93 e0       	ldi	r25, 0x03	; 3
    11a4:	95 83       	std	Z+5, r25	; 0x05
    11a6:	84 83       	std	Z+4, r24	; 0x04
    11a8:	97 82       	std	Z+7, r9	; 0x07
    11aa:	86 82       	std	Z+6, r8	; 0x06
    11ac:	71 87       	std	Z+9, r23	; 0x09
    11ae:	60 87       	std	Z+8, r22	; 0x08
    11b0:	e6 86       	std	Z+14, r14	; 0x0e
    11b2:	f7 86       	std	Z+15, r15	; 0x0f
    11b4:	00 8b       	std	Z+16, r16	; 0x10
    11b6:	11 8b       	std	Z+17, r17	; 0x11
    11b8:	a2 8a       	std	Z+18, r10	; 0x12
    11ba:	b3 8a       	std	Z+19, r11	; 0x13
    11bc:	c4 8a       	std	Z+20, r12	; 0x14
    11be:	d5 8a       	std	Z+21, r13	; 0x15
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	08 95       	ret

000011da <_ZN5TC654C1Ecc>:
    11da:	6f 92       	push	r6
    11dc:	7f 92       	push	r7
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    11f8:	76 2e       	mov	r7, r22
    11fa:	64 2e       	mov	r6, r20
    11fc:	86 e3       	ldi	r24, 0x36	; 54
    11fe:	88 83       	st	Y, r24
    1200:	87 e3       	ldi	r24, 0x37	; 55
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	1a 82       	std	Y+2, r1	; 0x02
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	8b 83       	std	Y+3, r24	; 0x03
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	8c 83       	std	Y+4, r24	; 0x04
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	8d 83       	std	Y+5, r24	; 0x05
    1212:	84 e0       	ldi	r24, 0x04	; 4
    1214:	8e 83       	std	Y+6, r24	; 0x06
    1216:	85 e0       	ldi	r24, 0x05	; 5
    1218:	8f 83       	std	Y+7, r24	; 0x07
    121a:	86 e0       	ldi	r24, 0x06	; 6
    121c:	88 87       	std	Y+8, r24	; 0x08
    121e:	87 e0       	ldi	r24, 0x07	; 7
    1220:	89 87       	std	Y+9, r24	; 0x09
    1222:	88 e0       	ldi	r24, 0x08	; 8
    1224:	8a 87       	std	Y+10, r24	; 0x0a
    1226:	1d 86       	std	Y+13, r1	; 0x0d
    1228:	0f 2e       	mov	r0, r31
    122a:	fd ec       	ldi	r31, 0xCD	; 205
    122c:	af 2e       	mov	r10, r31
    122e:	f9 e0       	ldi	r31, 0x09	; 9
    1230:	bf 2e       	mov	r11, r31
    1232:	f0 2d       	mov	r31, r0
    1234:	c1 2c       	mov	r12, r1
    1236:	d1 2c       	mov	r13, r1
    1238:	0f 2e       	mov	r0, r31
    123a:	fe ef       	ldi	r31, 0xFE	; 254
    123c:	ef 2e       	mov	r14, r31
    123e:	f9 e0       	ldi	r31, 0x09	; 9
    1240:	ff 2e       	mov	r15, r31
    1242:	f0 2d       	mov	r31, r0
    1244:	00 e0       	ldi	r16, 0x00	; 0
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	2e eb       	ldi	r18, 0xBE	; 190
    124a:	39 e0       	ldi	r19, 0x09	; 9
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	0f 2e       	mov	r0, r31
    1252:	f8 ef       	ldi	r31, 0xF8	; 248
    1254:	8f 2e       	mov	r8, r31
    1256:	f2 e0       	ldi	r31, 0x02	; 2
    1258:	9f 2e       	mov	r9, r31
    125a:	f0 2d       	mov	r31, r0
    125c:	be 01       	movw	r22, r28
    125e:	ce 01       	movw	r24, r28
    1260:	0e 96       	adiw	r24, 0x0e	; 14
    1262:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_FvS2_R10ExceptionsPKcEMS_FvS2_EPc>
    1266:	0f 2e       	mov	r0, r31
    1268:	fd ec       	ldi	r31, 0xCD	; 205
    126a:	af 2e       	mov	r10, r31
    126c:	f9 e0       	ldi	r31, 0x09	; 9
    126e:	bf 2e       	mov	r11, r31
    1270:	f0 2d       	mov	r31, r0
    1272:	c1 2c       	mov	r12, r1
    1274:	d1 2c       	mov	r13, r1
    1276:	0f 2e       	mov	r0, r31
    1278:	fd e4       	ldi	r31, 0x4D	; 77
    127a:	ef 2e       	mov	r14, r31
    127c:	fa e0       	ldi	r31, 0x0A	; 10
    127e:	ff 2e       	mov	r15, r31
    1280:	f0 2d       	mov	r31, r0
    1282:	00 e0       	ldi	r16, 0x00	; 0
    1284:	10 e0       	ldi	r17, 0x00	; 0
    1286:	23 ec       	ldi	r18, 0xC3	; 195
    1288:	39 e0       	ldi	r19, 0x09	; 9
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	0f 2e       	mov	r0, r31
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8f 2e       	mov	r8, r31
    1294:	f3 e0       	ldi	r31, 0x03	; 3
    1296:	9f 2e       	mov	r9, r31
    1298:	f0 2d       	mov	r31, r0
    129a:	be 01       	movw	r22, r28
    129c:	ce 01       	movw	r24, r28
    129e:	84 96       	adiw	r24, 0x24	; 36
    12a0:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_FvS2_R10ExceptionsPKcEMS_FvS2_EPc>
    12a4:	87 2d       	mov	r24, r7
    12a6:	8f 70       	andi	r24, 0x0F	; 15
    12a8:	78 2e       	mov	r7, r24
    12aa:	77 0c       	add	r7, r7
    12ac:	77 0c       	add	r7, r7
    12ae:	7b 86       	std	Y+11, r7	; 0x0b
    12b0:	66 0c       	add	r6, r6
    12b2:	66 0c       	add	r6, r6
    12b4:	66 0c       	add	r6, r6
    12b6:	66 0c       	add	r6, r6
    12b8:	66 0c       	add	r6, r6
    12ba:	66 0c       	add	r6, r6
    12bc:	6c 86       	std	Y+12, r6	; 0x0c
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	bf 90       	pop	r11
    12d0:	af 90       	pop	r10
    12d2:	9f 90       	pop	r9
    12d4:	8f 90       	pop	r8
    12d6:	7f 90       	pop	r7
    12d8:	6f 90       	pop	r6
    12da:	08 95       	ret

000012dc <_ZN5TC65413WriteRegisterERbcc>:
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	8b 01       	movw	r16, r22
    12e6:	c4 2f       	mov	r28, r20
    12e8:	d2 2f       	mov	r29, r18
    12ea:	fc 01       	movw	r30, r24
    12ec:	80 81       	ld	r24, Z
    12ee:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_start_wait>
    12f2:	8c 2f       	mov	r24, r28
    12f4:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
    12f8:	88 23       	and	r24, r24
    12fa:	29 f0       	breq	.+10     	; 0x1306 <_ZN5TC65413WriteRegisterERbcc+0x2a>
    12fc:	f8 01       	movw	r30, r16
    12fe:	10 82       	st	Z, r1
    1300:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    1304:	0a c0       	rjmp	.+20     	; 0x131a <_ZN5TC65413WriteRegisterERbcc+0x3e>
    1306:	8d 2f       	mov	r24, r29
    1308:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
    130c:	c8 2f       	mov	r28, r24
    130e:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    1312:	cc 23       	and	r28, r28
    1314:	11 f0       	breq	.+4      	; 0x131a <_ZN5TC65413WriteRegisterERbcc+0x3e>
    1316:	f8 01       	movw	r30, r16
    1318:	10 82       	st	Z, r1
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <_ZN5TC65426WriteConfigurationRegisterERbc>:
    1324:	24 2f       	mov	r18, r20
    1326:	fc 01       	movw	r30, r24
    1328:	46 81       	ldd	r20, Z+6	; 0x06
    132a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN5TC65413WriteRegisterERbcc>
    132e:	08 95       	ret

00001330 <_ZN5TC65412ReadRegisterERbc>:
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
    133c:	7b 01       	movw	r14, r22
    133e:	14 2f       	mov	r17, r20
    1340:	88 81       	ld	r24, Y
    1342:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_start_wait>
    1346:	81 2f       	mov	r24, r17
    1348:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
    134c:	18 2f       	mov	r17, r24
    134e:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    1352:	11 23       	and	r17, r17
    1354:	21 f0       	breq	.+8      	; 0x135e <_ZN5TC65412ReadRegisterERbc+0x2e>
    1356:	f7 01       	movw	r30, r14
    1358:	10 82       	st	Z, r1
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <_ZN5TC65412ReadRegisterERbc+0x40>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_start_wait>
    1364:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readNak>
    1368:	c8 2f       	mov	r28, r24
    136a:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    136e:	8c 2f       	mov	r24, r28
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	08 95       	ret

0000137c <_ZN5TC6547GetRPM1ERb>:
    137c:	fc 01       	movw	r30, r24
    137e:	42 81       	ldd	r20, Z+2	; 0x02
    1380:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN5TC65412ReadRegisterERbc>
    1384:	08 95       	ret

00001386 <_ZN5TC6547GetRPM2ERb>:
    1386:	fc 01       	movw	r30, r24
    1388:	43 81       	ldd	r20, Z+3	; 0x03
    138a:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN5TC65412ReadRegisterERbc>
    138e:	08 95       	ret

00001390 <_ZN5TC65425ReadConfigurationRegisterERb>:
    1390:	fc 01       	movw	r30, r24
    1392:	46 81       	ldd	r20, Z+6	; 0x06
    1394:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN5TC65412ReadRegisterERbc>
    1398:	08 95       	ret

0000139a <_ZN5TC65418ConfigureIfNotDoneERb>:
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	fc 01       	movw	r30, r24
    13a6:	25 85       	ldd	r18, Z+13	; 0x0d
    13a8:	21 11       	cpse	r18, r1
    13aa:	1d c0       	rjmp	.+58     	; 0x13e6 <_ZN5TC65418ConfigureIfNotDoneERb+0x4c>
    13ac:	7b 01       	movw	r14, r22
    13ae:	8c 01       	movw	r16, r24
    13b0:	c3 85       	ldd	r28, Z+11	; 0x0b
    13b2:	94 85       	ldd	r25, Z+12	; 0x0c
    13b4:	c9 2b       	or	r28, r25
    13b6:	c0 62       	ori	r28, 0x20	; 32
    13b8:	4c 2f       	mov	r20, r28
    13ba:	cf 01       	movw	r24, r30
    13bc:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN5TC65426WriteConfigurationRegisterERbc>
    13c0:	f7 01       	movw	r30, r14
    13c2:	80 81       	ld	r24, Z
    13c4:	88 23       	and	r24, r24
    13c6:	79 f0       	breq	.+30     	; 0x13e6 <_ZN5TC65418ConfigureIfNotDoneERb+0x4c>
    13c8:	b7 01       	movw	r22, r14
    13ca:	c8 01       	movw	r24, r16
    13cc:	0e 94 c8 09 	call	0x1390	; 0x1390 <_ZN5TC65425ReadConfigurationRegisterERb>
    13d0:	f7 01       	movw	r30, r14
    13d2:	90 81       	ld	r25, Z
    13d4:	99 23       	and	r25, r25
    13d6:	39 f0       	breq	.+14     	; 0x13e6 <_ZN5TC65418ConfigureIfNotDoneERb+0x4c>
    13d8:	c8 17       	cp	r28, r24
    13da:	11 f0       	breq	.+4      	; 0x13e0 <_ZN5TC65418ConfigureIfNotDoneERb+0x46>
    13dc:	10 82       	st	Z, r1
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <_ZN5TC65418ConfigureIfNotDoneERb+0x4c>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	f8 01       	movw	r30, r16
    13e4:	85 87       	std	Z+13, r24	; 0x0d
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	08 95       	ret

000013f2 <_ZN5TC6549GetStatusERb>:
}
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
    13f2:	fc 01       	movw	r30, r24
    13f4:	47 81       	ldd	r20, Z+7	; 0x07
    13f6:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN5TC65412ReadRegisterERbc>
}
    13fa:	08 95       	ret

000013fc <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc>:
	return ReadRegister(successful, RPM1_ADDRESS);
}
unsigned char TC654::GetRPM2(bool& successful){
	return ReadRegister(successful, RPM2_ADDRESS);
}
void  TC654::CheckFan1(bool& successful, Exceptions& exceptions, const char* name){
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	1f 92       	push	r1
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	8b 01       	movw	r16, r22
    1414:	7a 01       	movw	r14, r20
    1416:	69 01       	movw	r12, r18
	Status status = GetStatus(successful);
    1418:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN5TC6549GetStatusERb>
    141c:	89 83       	std	Y+1, r24	; 0x01
	if(!successful)
    141e:	f8 01       	movw	r30, r16
    1420:	80 81       	ld	r24, Z
    1422:	81 11       	cpse	r24, r1
    1424:	0d c0       	rjmp	.+26     	; 0x1440 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x44>
	{
		exceptions.Add(new CommunicationException(name));
    1426:	88 e0       	ldi	r24, 0x08	; 8
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    142e:	8c 01       	movw	r16, r24
    1430:	b6 01       	movw	r22, r12
    1432:	0e 94 24 01 	call	0x248	; 0x248 <_ZN22CommunicationExceptionC1EPKc>
    1436:	b8 01       	movw	r22, r16
    1438:	c7 01       	movw	r24, r14
    143a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
    143e:	23 c0       	rjmp	.+70     	; 0x1486 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x8a>
		return;
	}
	if(status.GetF1F())
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	80 ff       	sbrs	r24, 0
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x64>
	exceptions.Add(new TC654Exception(name, TC654Exception::Fault));
    1446:	89 e0       	ldi	r24, 0x09	; 9
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    144e:	8c 01       	movw	r16, r24
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	b6 01       	movw	r22, r12
    1454:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    1458:	b8 01       	movw	r22, r16
    145a:	c7 01       	movw	r24, r14
    145c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
	if(status.GetR1CO())
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	0e 94 ad 08 	call	0x115a	; 0x115a <_ZN5TC6546Status7GetR1COEv>
    1468:	88 23       	and	r24, r24
    146a:	69 f0       	breq	.+26     	; 0x1486 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x8a>
	exceptions.Add(new TC654Exception(name, TC654Exception::CounterOverflow));
    146c:	89 e0       	ldi	r24, 0x09	; 9
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    1474:	8c 01       	movw	r16, r24
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	b6 01       	movw	r22, r12
    147a:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    147e:	b8 01       	movw	r22, r16
    1480:	c7 01       	movw	r24, r14
    1482:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
}
    1486:	0f 90       	pop	r0
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	08 95       	ret

0000149a <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc>:
void  TC654::CheckFan2(bool& successful, Exceptions& exceptions, const char* name){
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	1f 92       	push	r1
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	8b 01       	movw	r16, r22
    14b2:	7a 01       	movw	r14, r20
    14b4:	69 01       	movw	r12, r18
	Status status = GetStatus(successful);
    14b6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN5TC6549GetStatusERb>
    14ba:	89 83       	std	Y+1, r24	; 0x01
	if(!successful)
    14bc:	f8 01       	movw	r30, r16
    14be:	80 81       	ld	r24, Z
    14c0:	81 11       	cpse	r24, r1
    14c2:	0d c0       	rjmp	.+26     	; 0x14de <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x44>
	{
		exceptions.Add(new CommunicationException(name));
    14c4:	88 e0       	ldi	r24, 0x08	; 8
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    14cc:	8c 01       	movw	r16, r24
    14ce:	b6 01       	movw	r22, r12
    14d0:	0e 94 24 01 	call	0x248	; 0x248 <_ZN22CommunicationExceptionC1EPKc>
    14d4:	b8 01       	movw	r22, r16
    14d6:	c7 01       	movw	r24, r14
    14d8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
    14dc:	26 c0       	rjmp	.+76     	; 0x152a <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x90>
		return;
	}
	if(status.GetF2F())
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 a7 08 	call	0x114e	; 0x114e <_ZN5TC6546Status6GetF2FEv>
    14e6:	88 23       	and	r24, r24
    14e8:	69 f0       	breq	.+26     	; 0x1504 <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x6a>
	exceptions.Add(new TC654Exception(name, TC654Exception::Fault));
    14ea:	89 e0       	ldi	r24, 0x09	; 9
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    14f2:	8c 01       	movw	r16, r24
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	b6 01       	movw	r22, r12
    14f8:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    14fc:	b8 01       	movw	r22, r16
    14fe:	c7 01       	movw	r24, r14
    1500:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
	if(status.GetR2CO())
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN5TC6546Status7GetR2COEv>
    150c:	88 23       	and	r24, r24
    150e:	69 f0       	breq	.+26     	; 0x152a <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x90>
	exceptions.Add(new TC654Exception(name, TC654Exception::CounterOverflow));
    1510:	89 e0       	ldi	r24, 0x09	; 9
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    1518:	8c 01       	movw	r16, r24
    151a:	41 e0       	ldi	r20, 0x01	; 1
    151c:	b6 01       	movw	r22, r12
    151e:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    1522:	b8 01       	movw	r22, r16
    1524:	c7 01       	movw	r24, r14
    1526:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
}
    152a:	0f 90       	pop	r0
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	08 95       	ret

0000153e <_ZN5TC65415GetIGetFan1InfoEv>:
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
}
IGetFanInfo* TC654::GetIGetFan1Info(){
	return &fan1;
}
    153e:	0e 96       	adiw	r24, 0x0e	; 14
    1540:	08 95       	ret

00001542 <_ZN5TC65415GetIGetFan2InfoEv>:
IGetFanInfo* TC654::GetIGetFan2Info(){
	return &fan2;
}
    1542:	84 96       	adiw	r24, 0x24	; 36
    1544:	08 95       	ret

00001546 <_ZN14TC654Exception8ToStringEv>:
{
	if(message!=NULL){
		delete message;
	}
} //~TC654Exception
const char* TC654Exception::ToString(){
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	ec 01       	movw	r28, r24
	if(message==NULL){
    1554:	8f 81       	ldd	r24, Y+7	; 0x07
    1556:	98 85       	ldd	r25, Y+8	; 0x08
    1558:	89 2b       	or	r24, r25
    155a:	09 f0       	breq	.+2      	; 0x155e <_ZN14TC654Exception8ToStringEv+0x18>
    155c:	57 c0       	rjmp	.+174    	; 0x160c <_ZN14TC654Exception8ToStringEv+0xc6>
		size_t totalLength;
		switch(type){
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	88 23       	and	r24, r24
    1562:	19 f0       	breq	.+6      	; 0x156a <_ZN14TC654Exception8ToStringEv+0x24>
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	51 f1       	breq	.+84     	; 0x15bc <_ZN14TC654Exception8ToStringEv+0x76>
    1568:	51 c0       	rjmp	.+162    	; 0x160c <_ZN14TC654Exception8ToStringEv+0xc6>
			case Fault:
			totalLength = strlen(name)+57;
    156a:	fd 80       	ldd	r15, Y+5	; 0x05
    156c:	ee 80       	ldd	r14, Y+6	; 0x06
    156e:	ef 2d       	mov	r30, r15
    1570:	fe 2d       	mov	r31, r14
    1572:	df 01       	movw	r26, r30
    1574:	0d 90       	ld	r0, X+
    1576:	00 20       	and	r0, r0
    1578:	e9 f7       	brne	.-6      	; 0x1574 <_ZN14TC654Exception8ToStringEv+0x2e>
    157a:	8d 01       	movw	r16, r26
    157c:	0e 1b       	sub	r16, r30
    157e:	1f 0b       	sbc	r17, r31
    1580:	08 5c       	subi	r16, 0xC8	; 200
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
			message=(char*)malloc(sizeof(char)*totalLength);
    1584:	c8 01       	movw	r24, r16
    1586:	0e 94 33 11 	call	0x2266	; 0x2266 <malloc>
    158a:	98 87       	std	Y+8, r25	; 0x08
    158c:	8f 83       	std	Y+7, r24	; 0x07
			if(message!=NULL){
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	e9 f1       	breq	.+122    	; 0x160c <_ZN14TC654Exception8ToStringEv+0xc6>
				snprintf(message,totalLength, "%s experienced a fault as indicated by its status register", name);
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	2e e1       	ldi	r18, 0x1E	; 30
    1598:	33 e0       	ldi	r19, 0x03	; 3
    159a:	3f 93       	push	r19
    159c:	2f 93       	push	r18
    159e:	1f 93       	push	r17
    15a0:	0f 93       	push	r16
    15a2:	9f 93       	push	r25
    15a4:	8f 93       	push	r24
    15a6:	0e 94 a2 12 	call	0x2544	; 0x2544 <snprintf>
    15aa:	8d b7       	in	r24, 0x3d	; 61
    15ac:	9e b7       	in	r25, 0x3e	; 62
    15ae:	08 96       	adiw	r24, 0x08	; 8
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	9e bf       	out	0x3e, r25	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	8d bf       	out	0x3d, r24	; 61
    15ba:	28 c0       	rjmp	.+80     	; 0x160c <_ZN14TC654Exception8ToStringEv+0xc6>
			}
			break;
			case CounterOverflow:
			totalLength = strlen(name)+68;
    15bc:	fd 80       	ldd	r15, Y+5	; 0x05
    15be:	ee 80       	ldd	r14, Y+6	; 0x06
    15c0:	ef 2d       	mov	r30, r15
    15c2:	fe 2d       	mov	r31, r14
    15c4:	df 01       	movw	r26, r30
    15c6:	0d 90       	ld	r0, X+
    15c8:	00 20       	and	r0, r0
    15ca:	e9 f7       	brne	.-6      	; 0x15c6 <_ZN14TC654Exception8ToStringEv+0x80>
    15cc:	8d 01       	movw	r16, r26
    15ce:	0e 1b       	sub	r16, r30
    15d0:	1f 0b       	sbc	r17, r31
    15d2:	0d 5b       	subi	r16, 0xBD	; 189
    15d4:	1f 4f       	sbci	r17, 0xFF	; 255
			message=(char*)malloc(sizeof(char)*totalLength);
    15d6:	c8 01       	movw	r24, r16
    15d8:	0e 94 33 11 	call	0x2266	; 0x2266 <malloc>
    15dc:	98 87       	std	Y+8, r25	; 0x08
    15de:	8f 83       	std	Y+7, r24	; 0x07
			if(message!=NULL){
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	a1 f0       	breq	.+40     	; 0x160c <_ZN14TC654Exception8ToStringEv+0xc6>
				snprintf(message,totalLength, "%s experienced a counter overflow as indicated by its status register",name);
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	29 e5       	ldi	r18, 0x59	; 89
    15ea:	33 e0       	ldi	r19, 0x03	; 3
    15ec:	3f 93       	push	r19
    15ee:	2f 93       	push	r18
    15f0:	1f 93       	push	r17
    15f2:	0f 93       	push	r16
    15f4:	9f 93       	push	r25
    15f6:	8f 93       	push	r24
    15f8:	0e 94 a2 12 	call	0x2544	; 0x2544 <snprintf>
    15fc:	8d b7       	in	r24, 0x3d	; 61
    15fe:	9e b7       	in	r25, 0x3e	; 62
    1600:	08 96       	adiw	r24, 0x08	; 8
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	9e bf       	out	0x3e, r25	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	8d bf       	out	0x3d, r24	; 61
			}
			break;
		}
	}
	return message;
    160c:	8f 81       	ldd	r24, Y+7	; 0x07
    160e:	98 85       	ldd	r25, Y+8	; 0x08
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	08 95       	ret

0000161e <_ZN14TC654ExceptionC1EPKcNS_4TypeE>:
#include <stdio.h>
#include <stdlib.h>
#include "TC654Exception.h"

// default constructor
TC654Exception::TC654Exception(const char* name, Type type):name(name), type(type)
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	ec 01       	movw	r28, r24
    162a:	8b 01       	movw	r16, r22
    162c:	f4 2e       	mov	r15, r20
    162e:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN9ExceptionC1Ev>
    1632:	83 ea       	ldi	r24, 0xA3	; 163
    1634:	93 e0       	ldi	r25, 0x03	; 3
    1636:	99 83       	std	Y+1, r25	; 0x01
    1638:	88 83       	st	Y, r24
    163a:	fc 82       	std	Y+4, r15	; 0x04
    163c:	1e 83       	std	Y+6, r17	; 0x06
    163e:	0d 83       	std	Y+5, r16	; 0x05
    1640:	18 86       	std	Y+8, r1	; 0x08
    1642:	1f 82       	std	Y+7, r1	; 0x07
{
	
} //TC654Exception
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	08 95       	ret

00001650 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions>:
}
void Temperatures::SetInterfaces(IGetTemperatureInfo** iGetTemperatureInfos, unsigned char  nIGetTemperatureInfos){
	this->iGetTemperatureInfos=iGetTemperatureInfos;
	this->nIGetTemperatureInfos=nIGetTemperatureInfos;
}
void Temperatures::Initialize(){
    1650:	bf 92       	push	r11
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	8c 01       	movw	r16, r24
    1664:	7b 01       	movw	r14, r22
    1666:	6a 01       	movw	r12, r20
    1668:	dc 01       	movw	r26, r24
    166a:	14 96       	adiw	r26, 0x04	; 4
    166c:	8c 91       	ld	r24, X
    166e:	14 97       	sbiw	r26, 0x04	; 4
    1670:	88 23       	and	r24, r24
    1672:	09 f4       	brne	.+2      	; 0x1676 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x26>
    1674:	41 c0       	rjmp	.+130    	; 0x16f8 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xa8>
    1676:	12 96       	adiw	r26, 0x02	; 2
    1678:	ed 91       	ld	r30, X+
    167a:	fc 91       	ld	r31, X
    167c:	13 97       	sbiw	r26, 0x03	; 3
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	dc 01       	movw	r26, r24
    1684:	ed 91       	ld	r30, X+
    1686:	fc 91       	ld	r31, X
    1688:	01 90       	ld	r0, Z+
    168a:	f0 81       	ld	r31, Z
    168c:	e0 2d       	mov	r30, r0
    168e:	09 95       	icall
    1690:	b8 2e       	mov	r11, r24
    1692:	f7 01       	movw	r30, r14
    1694:	80 81       	ld	r24, Z
    1696:	88 23       	and	r24, r24
    1698:	09 f4       	brne	.+2      	; 0x169c <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x4c>
    169a:	3f c0       	rjmp	.+126    	; 0x171a <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xca>
    169c:	d8 01       	movw	r26, r16
    169e:	14 96       	adiw	r26, 0x04	; 4
    16a0:	8c 91       	ld	r24, X
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 97       	sbiw	r24, 0x02	; 2
    16a6:	dc f1       	brlt	.+118    	; 0x171e <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xce>
    16a8:	c1 e0       	ldi	r28, 0x01	; 1
    16aa:	d0 e0       	ldi	r29, 0x00	; 0
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x6a>
    16ae:	f8 01       	movw	r30, r16
    16b0:	24 81       	ldd	r18, Z+4	; 0x04
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	c2 17       	cp	r28, r18
    16b6:	d3 07       	cpc	r29, r19
    16b8:	a4 f5       	brge	.+104    	; 0x1722 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd2>
    16ba:	d8 01       	movw	r26, r16
    16bc:	12 96       	adiw	r26, 0x02	; 2
    16be:	ed 91       	ld	r30, X+
    16c0:	fc 91       	ld	r31, X
    16c2:	13 97       	sbiw	r26, 0x03	; 3
    16c4:	9e 01       	movw	r18, r28
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	e2 0f       	add	r30, r18
    16cc:	f3 1f       	adc	r31, r19
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	dc 01       	movw	r26, r24
    16d4:	ed 91       	ld	r30, X+
    16d6:	fc 91       	ld	r31, X
    16d8:	01 90       	ld	r0, Z+
    16da:	f0 81       	ld	r31, Z
    16dc:	e0 2d       	mov	r30, r0
    16de:	a6 01       	movw	r20, r12
    16e0:	b7 01       	movw	r22, r14
    16e2:	09 95       	icall
    16e4:	b8 16       	cp	r11, r24
    16e6:	0c f4       	brge	.+2      	; 0x16ea <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x9a>
    16e8:	b8 2e       	mov	r11, r24
    16ea:	21 96       	adiw	r28, 0x01	; 1
    16ec:	f7 01       	movw	r30, r14
    16ee:	80 81       	ld	r24, Z
    16f0:	81 11       	cpse	r24, r1
    16f2:	dd cf       	rjmp	.-70     	; 0x16ae <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x5e>
    16f4:	8b 2d       	mov	r24, r11
    16f6:	16 c0       	rjmp	.+44     	; 0x1724 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    16f8:	88 e0       	ldi	r24, 0x08	; 8
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    1700:	ec 01       	movw	r28, r24
    1702:	65 ea       	ldi	r22, 0xA5	; 165
    1704:	73 e0       	ldi	r23, 0x03	; 3
    1706:	0e 94 24 01 	call	0x248	; 0x248 <_ZN22CommunicationExceptionC1EPKc>
    170a:	be 01       	movw	r22, r28
    170c:	c6 01       	movw	r24, r12
    170e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN10Exceptions3AddEP9Exception>
    1712:	d7 01       	movw	r26, r14
    1714:	1c 92       	st	X, r1
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    171a:	8b 2d       	mov	r24, r11
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    171e:	8b 2d       	mov	r24, r11
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    1722:	8b 2d       	mov	r24, r11
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	bf 90       	pop	r11
    1736:	08 95       	ret

00001738 <_ZN12Temperatures11GetInstanceEv>:
    1738:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    173c:	81 11       	cpse	r24, r1
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <_ZN12Temperatures11GetInstanceEv+0xe>
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    1746:	84 e4       	ldi	r24, 0x44	; 68
    1748:	94 e0       	ldi	r25, 0x04	; 4
    174a:	08 95       	ret

0000174c <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>:
    174c:	fc 01       	movw	r30, r24
    174e:	73 83       	std	Z+3, r23	; 0x03
    1750:	62 83       	std	Z+2, r22	; 0x02
    1752:	44 83       	std	Z+4, r20	; 0x04
    1754:	08 95       	ret

00001756 <_GLOBAL__sub_I__ZN12Temperatures10_SingletonE>:
#ifndef __Temperatures_H__
#define __Temperatures_H__
#include "IGetTemperatureInfo.h"
#include "ITemperatures.h"

class Temperatures:
    1756:	8d eb       	ldi	r24, 0xBD	; 189
    1758:	93 e0       	ldi	r25, 0x03	; 3
    175a:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <_ZN12Temperatures10_SingletonE+0x1>
    175e:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_ZN12Temperatures10_SingletonE>
    1762:	08 95       	ret

00001764 <_Znwj>:
		if(!Ticker::tickerCallbacksMilliseconds.contains(callback)){
		Ticker::tickerCallbacksMilliseconds.push_back(callback);}
	}
	else
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
    1764:	0e 94 33 11 	call	0x2266	; 0x2266 <malloc>
    1768:	08 95       	ret

0000176a <_Znaj>:
    176a:	0e 94 33 11 	call	0x2266	; 0x2266 <malloc>
    176e:	08 95       	ret

00001770 <_ZdlPv>:
    1770:	0e 94 cb 11 	call	0x2396	; 0x2396 <free>
    1774:	08 95       	ret

00001776 <_ZdaPv>:
    1776:	0e 94 cb 11 	call	0x2396	; 0x2396 <free>
    177a:	08 95       	ret

0000177c <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
	cli();
    17a6:	f8 94       	cli
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    17a8:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN6Ticker27tickerCallbacksMillisecondsE>
    17ac:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x1>
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    17b0:	89 2b       	or	r24, r25
    17b2:	c9 f0       	breq	.+50     	; 0x17e6 <__vector_14+0x6a>
    17b4:	c0 e0       	ldi	r28, 0x00	; 0
    17b6:	d0 e0       	ldi	r29, 0x00	; 0
	Data const &operator[](size_t idx)volatile const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx)volatile { return d_data[idx]; }; // Changeable getter
    17b8:	0f e4       	ldi	r16, 0x4F	; 79
    17ba:	14 e0       	ldi	r17, 0x04	; 4
    17bc:	d8 01       	movw	r26, r16
    17be:	14 96       	adiw	r26, 0x04	; 4
    17c0:	ed 91       	ld	r30, X+
    17c2:	fc 91       	ld	r31, X
    17c4:	15 97       	sbiw	r26, 0x05	; 5
	{
		Ticker::tickerCallbacksMilliseconds[i]();
    17c6:	ce 01       	movw	r24, r28
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	e8 0f       	add	r30, r24
    17ce:	f9 1f       	adc	r31, r25
    17d0:	01 90       	ld	r0, Z+
    17d2:	f0 81       	ld	r31, Z
    17d4:	e0 2d       	mov	r30, r0
    17d6:	09 95       	icall
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
ISR(TIMER0_COMPA_vect)
{
	cli();
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    17d8:	21 96       	adiw	r28, 0x01	; 1
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    17da:	f8 01       	movw	r30, r16
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	c8 17       	cp	r28, r24
    17e2:	d9 07       	cpc	r29, r25
    17e4:	58 f3       	brcs	.-42     	; 0x17bc <__vector_14+0x40>
	{
		Ticker::tickerCallbacksMilliseconds[i]();
	}
	sei();
    17e6:	78 94       	sei
}
    17e8:	ff 91       	pop	r31
    17ea:	ef 91       	pop	r30
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	bf 91       	pop	r27
    17f2:	af 91       	pop	r26
    17f4:	9f 91       	pop	r25
    17f6:	8f 91       	pop	r24
    17f8:	7f 91       	pop	r23
    17fa:	6f 91       	pop	r22
    17fc:	5f 91       	pop	r21
    17fe:	4f 91       	pop	r20
    1800:	3f 91       	pop	r19
    1802:	2f 91       	pop	r18
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	0f 90       	pop	r0
    180e:	1f 90       	pop	r1
    1810:	18 95       	reti

00001812 <_GLOBAL__sub_I__Znwj>:
 for(size_t i=0; i<d_size; i++){
	if(d==d_data[i])return true;
 }
 return false;
	}
	volatile_vector() : d_size(0), d_capacity(0), d_data(0) {
    1812:	ef e4       	ldi	r30, 0x4F	; 79
    1814:	f4 e0       	ldi	r31, 0x04	; 4
    1816:	11 82       	std	Z+1, r1	; 0x01
    1818:	10 82       	st	Z, r1
    181a:	13 82       	std	Z+3, r1	; 0x03
    181c:	12 82       	std	Z+2, r1	; 0x02
    181e:	15 82       	std	Z+5, r1	; 0x05
    1820:	14 82       	std	Z+4, r1	; 0x04
    1822:	e9 e4       	ldi	r30, 0x49	; 73
    1824:	f4 e0       	ldi	r31, 0x04	; 4
    1826:	11 82       	std	Z+1, r1	; 0x01
    1828:	10 82       	st	Z, r1
    182a:	13 82       	std	Z+3, r1	; 0x03
    182c:	12 82       	std	Z+2, r1	; 0x02
    182e:	15 82       	std	Z+5, r1	; 0x05
    1830:	14 82       	std	Z+4, r1	; 0x04
    1832:	08 95       	ret

00001834 <_GLOBAL__sub_D__Znwj>:

	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
    1834:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <_ZN6Ticker22tickerCallbacksSecondsE+0x4>
    1838:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <_ZN6Ticker22tickerCallbacksSecondsE+0x5>
    183c:	0e 94 cb 11 	call	0x2396	; 0x2396 <free>
    1840:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x4>
    1844:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x5>
    1848:	0e 94 cb 11 	call	0x2396	; 0x2396 <free>
    184c:	08 95       	ret

0000184e <_ZL11parseStringPc>:
	json_t const* field = json_getProperty( obj, property );
	if ( !field ) return 0;
        jsonType_t type = json_getType( field );
        if ( JSON_ARRAY >= type ) return 0;
	return json_getValue( field );
}
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	ec 01       	movw	r28, r24
    1854:	98 81       	ld	r25, Y
    1856:	90 32       	cpi	r25, 0x20	; 32
    1858:	08 f4       	brcc	.+2      	; 0x185c <_ZL11parseStringPc+0xe>
    185a:	57 c0       	rjmp	.+174    	; 0x190a <_ZL11parseStringPc+0xbc>
    185c:	92 32       	cpi	r25, 0x22	; 34
    185e:	31 f0       	breq	.+12     	; 0x186c <_ZL11parseStringPc+0x1e>
    1860:	de 01       	movw	r26, r28
    1862:	4f e3       	ldi	r20, 0x3F	; 63
    1864:	08 c0       	rjmp	.+16     	; 0x1876 <_ZL11parseStringPc+0x28>
    1866:	92 32       	cpi	r25, 0x22	; 34
    1868:	31 f4       	brne	.+12     	; 0x1876 <_ZL11parseStringPc+0x28>
    186a:	01 c0       	rjmp	.+2      	; 0x186e <_ZL11parseStringPc+0x20>
    186c:	de 01       	movw	r26, r28
    186e:	1c 92       	st	X, r1
    1870:	ce 01       	movw	r24, r28
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	5b c0       	rjmp	.+182    	; 0x192c <_ZL11parseStringPc+0xde>
    1876:	9c 35       	cpi	r25, 0x5C	; 92
    1878:	e1 f5       	brne	.+120    	; 0x18f2 <_ZL11parseStringPc+0xa4>
    187a:	99 81       	ldd	r25, Y+1	; 0x01
    187c:	95 37       	cpi	r25, 0x75	; 117
    187e:	19 f0       	breq	.+6      	; 0x1886 <_ZL11parseStringPc+0x38>
    1880:	92 32       	cpi	r25, 0x22	; 34
    1882:	c9 f4       	brne	.+50     	; 0x18b6 <_ZL11parseStringPc+0x68>
    1884:	20 c0       	rjmp	.+64     	; 0x18c6 <_ZL11parseStringPc+0x78>
    1886:	fe 01       	movw	r30, r28
    1888:	32 96       	adiw	r30, 0x02	; 2
    188a:	9e 01       	movw	r18, r28
    188c:	2a 5f       	subi	r18, 0xFA	; 250
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	81 91       	ld	r24, Z+
    1892:	80 33       	cpi	r24, 0x30	; 48
    1894:	e8 f1       	brcs	.+122    	; 0x1910 <_ZL11parseStringPc+0xc2>
    1896:	8a 33       	cpi	r24, 0x3A	; 58
    1898:	38 f0       	brcs	.+14     	; 0x18a8 <_ZL11parseStringPc+0x5a>
    189a:	81 34       	cpi	r24, 0x41	; 65
    189c:	e0 f1       	brcs	.+120    	; 0x1916 <_ZL11parseStringPc+0xc8>
    189e:	87 34       	cpi	r24, 0x47	; 71
    18a0:	18 f0       	brcs	.+6      	; 0x18a8 <_ZL11parseStringPc+0x5a>
    18a2:	81 56       	subi	r24, 0x61	; 97
    18a4:	86 30       	cpi	r24, 0x06	; 6
    18a6:	d0 f5       	brcc	.+116    	; 0x191c <_ZL11parseStringPc+0xce>
    18a8:	e2 17       	cp	r30, r18
    18aa:	f3 07       	cpc	r31, r19
    18ac:	89 f7       	brne	.-30     	; 0x1890 <_ZL11parseStringPc+0x42>
    18ae:	4c 93       	st	X, r20
    18b0:	fe 01       	movw	r30, r28
    18b2:	35 96       	adiw	r30, 0x05	; 5
    18b4:	20 c0       	rjmp	.+64     	; 0x18f6 <_ZL11parseStringPc+0xa8>
    18b6:	e1 e0       	ldi	r30, 0x01	; 1
    18b8:	f4 e0       	ldi	r31, 0x04	; 4
    18ba:	21 e0       	ldi	r18, 0x01	; 1
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	98 13       	cpse	r25, r24
    18c2:	0c c0       	rjmp	.+24     	; 0x18dc <_ZL11parseStringPc+0x8e>
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <_ZL11parseStringPc+0x7c>
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	22 0f       	add	r18, r18
    18cc:	33 1f       	adc	r19, r19
    18ce:	f9 01       	movw	r30, r18
    18d0:	ef 5f       	subi	r30, 0xFF	; 255
    18d2:	fb 4f       	sbci	r31, 0xFB	; 251
    18d4:	81 81       	ldd	r24, Z+1	; 0x01
    18d6:	81 11       	cpse	r24, r1
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <_ZL11parseStringPc+0x9c>
    18da:	23 c0       	rjmp	.+70     	; 0x1922 <_ZL11parseStringPc+0xd4>
    18dc:	2f 5f       	subi	r18, 0xFF	; 255
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	32 96       	adiw	r30, 0x02	; 2
    18e2:	28 30       	cpi	r18, 0x08	; 8
    18e4:	31 05       	cpc	r19, r1
    18e6:	59 f7       	brne	.-42     	; 0x18be <_ZL11parseStringPc+0x70>
    18e8:	1f c0       	rjmp	.+62     	; 0x1928 <_ZL11parseStringPc+0xda>
    18ea:	fe 01       	movw	r30, r28
    18ec:	31 96       	adiw	r30, 0x01	; 1
    18ee:	8c 93       	st	X, r24
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <_ZL11parseStringPc+0xa8>
    18f2:	9c 93       	st	X, r25
    18f4:	fe 01       	movw	r30, r28
    18f6:	ef 01       	movw	r28, r30
    18f8:	21 96       	adiw	r28, 0x01	; 1
    18fa:	11 96       	adiw	r26, 0x01	; 1
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	90 32       	cpi	r25, 0x20	; 32
    1900:	08 f0       	brcs	.+2      	; 0x1904 <_ZL11parseStringPc+0xb6>
    1902:	b1 cf       	rjmp	.-158    	; 0x1866 <_ZL11parseStringPc+0x18>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	11 c0       	rjmp	.+34     	; 0x192c <_ZL11parseStringPc+0xde>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e c0       	rjmp	.+28     	; 0x192c <_ZL11parseStringPc+0xde>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0b c0       	rjmp	.+22     	; 0x192c <_ZL11parseStringPc+0xde>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	08 c0       	rjmp	.+16     	; 0x192c <_ZL11parseStringPc+0xde>
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	05 c0       	rjmp	.+10     	; 0x192c <_ZL11parseStringPc+0xde>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 c0       	rjmp	.+4      	; 0x192c <_ZL11parseStringPc+0xde>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret

00001932 <_ZL11isOneOfThemcPKc>:
    1932:	fb 01       	movw	r30, r22
    1934:	91 91       	ld	r25, Z+
    1936:	99 23       	and	r25, r25
    1938:	21 f0       	breq	.+8      	; 0x1942 <_ZL11isOneOfThemcPKc+0x10>
    193a:	98 13       	cpse	r25, r24
    193c:	fb cf       	rjmp	.-10     	; 0x1934 <_ZL11isOneOfThemcPKc+0x2>
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	08 95       	ret
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	08 95       	ret

00001946 <_ZL7goWhilePcPKc>:
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	ec 01       	movw	r28, r24
    1950:	8b 01       	movw	r16, r22
    1952:	88 81       	ld	r24, Y
    1954:	88 23       	and	r24, r24
    1956:	59 f0       	breq	.+22     	; 0x196e <_ZL7goWhilePcPKc+0x28>
    1958:	b8 01       	movw	r22, r16
    195a:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZL11isOneOfThemcPKc>
    195e:	88 23       	and	r24, r24
    1960:	49 f0       	breq	.+18     	; 0x1974 <_ZL7goWhilePcPKc+0x2e>
    1962:	21 96       	adiw	r28, 0x01	; 1
    1964:	88 81       	ld	r24, Y
    1966:	81 11       	cpse	r24, r1
    1968:	f7 cf       	rjmp	.-18     	; 0x1958 <_ZL7goWhilePcPKc+0x12>
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <_ZL7goWhilePcPKc+0x32>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <_ZL7goWhilePcPKc+0x32>
    1974:	8c 2f       	mov	r24, r28
    1976:	9d 2f       	mov	r25, r29
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	08 95       	ret

00001982 <_ZL5goNumPc>:
    1982:	fc 01       	movw	r30, r24
    1984:	80 81       	ld	r24, Z
    1986:	88 23       	and	r24, r24
    1988:	81 f0       	breq	.+32     	; 0x19aa <_ZL5goNumPc+0x28>
    198a:	80 53       	subi	r24, 0x30	; 48
    198c:	8a 30       	cpi	r24, 0x0A	; 10
    198e:	80 f4       	brcc	.+32     	; 0x19b0 <_ZL5goNumPc+0x2e>
    1990:	31 96       	adiw	r30, 0x01	; 1
    1992:	03 c0       	rjmp	.+6      	; 0x199a <_ZL5goNumPc+0x18>
    1994:	20 53       	subi	r18, 0x30	; 48
    1996:	2a 30       	cpi	r18, 0x0A	; 10
    1998:	68 f4       	brcc	.+26     	; 0x19b4 <_ZL5goNumPc+0x32>
    199a:	8e 2f       	mov	r24, r30
    199c:	9f 2f       	mov	r25, r31
    199e:	21 91       	ld	r18, Z+
    19a0:	21 11       	cpse	r18, r1
    19a2:	f8 cf       	rjmp	.-16     	; 0x1994 <_ZL5goNumPc+0x12>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	08 95       	ret
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	08 95       	ret
    19b0:	8e 2f       	mov	r24, r30
    19b2:	9f 2f       	mov	r25, r31
    19b4:	08 95       	ret

000019b6 <_ZL16isEndOfPrimitivec>:
    19b6:	cf 93       	push	r28
    19b8:	8c 32       	cpi	r24, 0x2C	; 44
    19ba:	69 f0       	breq	.+26     	; 0x19d6 <_ZL16isEndOfPrimitivec+0x20>
    19bc:	c8 2f       	mov	r28, r24
    19be:	6f eb       	ldi	r22, 0xBF	; 191
    19c0:	73 e0       	ldi	r23, 0x03	; 3
    19c2:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZL11isOneOfThemcPKc>
    19c6:	81 11       	cpse	r24, r1
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <_ZL16isEndOfPrimitivec+0x22>
    19ca:	65 ec       	ldi	r22, 0xC5	; 197
    19cc:	73 e0       	ldi	r23, 0x03	; 3
    19ce:	8c 2f       	mov	r24, r28
    19d0:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZL11isOneOfThemcPKc>
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <_ZL16isEndOfPrimitivec+0x22>
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>:
    19dc:	ff 92       	push	r15
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	8b 01       	movw	r16, r22
    19e8:	f2 2e       	mov	r15, r18
    19ea:	e4 2f       	mov	r30, r20
    19ec:	f5 2f       	mov	r31, r21
    19ee:	ec 01       	movw	r28, r24
    19f0:	21 91       	ld	r18, Z+
    19f2:	22 23       	and	r18, r18
    19f4:	29 f0       	breq	.+10     	; 0x1a00 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x24>
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	38 81       	ld	r19, Y
    19fa:	23 17       	cp	r18, r19
    19fc:	c1 f3       	breq	.-16     	; 0x19ee <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x12>
    19fe:	15 c0       	rjmp	.+42     	; 0x1a2a <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x4e>
    1a00:	89 2b       	or	r24, r25
    1a02:	b1 f0       	breq	.+44     	; 0x1a30 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x54>
    1a04:	88 81       	ld	r24, Y
    1a06:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZL16isEndOfPrimitivec>
    1a0a:	88 23       	and	r24, r24
    1a0c:	a1 f0       	breq	.+40     	; 0x1a36 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5a>
    1a0e:	65 ec       	ldi	r22, 0xC5	; 197
    1a10:	73 e0       	ldi	r23, 0x03	; 3
    1a12:	88 81       	ld	r24, Y
    1a14:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZL11isOneOfThemcPKc>
    1a18:	81 11       	cpse	r24, r1
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x44>
    1a1c:	18 82       	st	Y, r1
    1a1e:	21 96       	adiw	r28, 0x01	; 1
    1a20:	f8 01       	movw	r30, r16
    1a22:	f6 82       	std	Z+6, r15	; 0x06
    1a24:	8c 2f       	mov	r24, r28
    1a26:	9d 2f       	mov	r25, r29
    1a28:	08 c0       	rjmp	.+16     	; 0x1a3a <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	08 95       	ret

00001a46 <json_getProperty>:
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	8b 01       	movw	r16, r22
    1a50:	fc 01       	movw	r30, r24
    1a52:	c4 81       	ldd	r28, Z+4	; 0x04
    1a54:	d5 81       	ldd	r29, Z+5	; 0x05
    1a56:	20 97       	sbiw	r28, 0x00	; 0
    1a58:	89 f0       	breq	.+34     	; 0x1a7c <json_getProperty+0x36>
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	29 f0       	breq	.+10     	; 0x1a6c <json_getProperty+0x26>
    1a62:	b8 01       	movw	r22, r16
    1a64:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
    1a68:	89 2b       	or	r24, r25
    1a6a:	59 f0       	breq	.+22     	; 0x1a82 <json_getProperty+0x3c>
    1a6c:	09 90       	ld	r0, Y+
    1a6e:	d8 81       	ld	r29, Y
    1a70:	c0 2d       	mov	r28, r0
    1a72:	20 97       	sbiw	r28, 0x00	; 0
    1a74:	91 f7       	brne	.-28     	; 0x1a5a <json_getProperty+0x14>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <json_getProperty+0x40>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <json_getProperty+0x40>
    1a82:	8c 2f       	mov	r24, r28
    1a84:	9d 2f       	mov	r25, r29
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <json_create>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    1a90:	2f 92       	push	r2
    1a92:	3f 92       	push	r3
    1a94:	4f 92       	push	r4
    1a96:	5f 92       	push	r5
    1a98:	6f 92       	push	r6
    1a9a:	7f 92       	push	r7
    1a9c:	8f 92       	push	r8
    1a9e:	9f 92       	push	r9
    1aa0:	af 92       	push	r10
    1aa2:	bf 92       	push	r11
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <json_create+0x26>
    1ab6:	1f 92       	push	r1
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	5b 01       	movw	r10, r22
    1abe:	3a 01       	movw	r6, r20

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1ac0:	6f eb       	ldi	r22, 0xBF	; 191
    1ac2:	73 e0       	ldi	r23, 0x03	; 3
    1ac4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZL7goWhilePcPKc>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	09 f4       	brne	.+2      	; 0x1ace <json_create+0x3e>
    1acc:	bb c1       	rjmp	.+886    	; 0x1e44 <json_create+0x3b4>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	2c 91       	ld	r18, X
    1ad2:	2b 37       	cpi	r18, 0x7B	; 123
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <json_create+0x48>
    1ad6:	b9 c1       	rjmp	.+882    	; 0x1e4a <json_create+0x3ba>
    jsonPool_t pool = { .mem = mem, .qty = qty };
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    1ad8:	f5 01       	movw	r30, r10
    1ada:	13 82       	std	Z+3, r1	; 0x03
    1adc:	12 82       	std	Z+2, r1	; 0x02
    obj->sibling = 0;
    1ade:	11 82       	std	Z+1, r1	; 0x01
    1ae0:	10 82       	st	Z, r1
    obj->u.child = 0;
    1ae2:	15 82       	std	Z+5, r1	; 0x05
    1ae4:	14 82       	std	Z+4, r1	; 0x04
  * @param str Pointer to first character.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
    obj->type    = JSON_OBJ;
    1ae6:	16 82       	std	Z+6, r1	; 0x06
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    1ae8:	8c 01       	movw	r16, r24
    1aea:	0f 5f       	subi	r16, 0xFF	; 255
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	75 01       	movw	r14, r10

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
    pool->nextFree = 1;
    1af0:	cc 24       	eor	r12, r12
    1af2:	c3 94       	inc	r12
    1af4:	d1 2c       	mov	r13, r1
    if ( *ptr != '0' ) {
        ptr = goNum( ptr );
        if ( !ptr ) return 0;
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    1af6:	68 94       	set
    1af8:	22 24       	eor	r2, r2
    1afa:	22 f8       	bld	r2, 2
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    ptr = parseString( ++ptr );
    if ( !ptr ) return 0;
    property->type = JSON_TEXT;
    1afc:	68 94       	set
    1afe:	44 24       	eor	r4, r4
    1b00:	41 f8       	bld	r4, 1
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    1b02:	33 24       	eor	r3, r3
    1b04:	33 94       	inc	r3
        if ( !ptr ) return 0;
        if ( *ptr == ',' ) {
            ++ptr;
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    1b06:	0f 2e       	mov	r0, r31
    1b08:	fd e7       	ldi	r31, 0x7D	; 125
    1b0a:	5f 2e       	mov	r5, r31
    1b0c:	f0 2d       	mov	r31, r0

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1b0e:	6f eb       	ldi	r22, 0xBF	; 191
    1b10:	73 e0       	ldi	r23, 0x03	; 3
    1b12:	c8 01       	movw	r24, r16
    1b14:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZL7goWhilePcPKc>
    1b18:	9b 83       	std	Y+3, r25	; 0x03
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    for(;;) {
        ptr = goBlank( ptr );
        if ( !ptr ) return 0;
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <json_create+0x92>
    1b20:	9a c1       	rjmp	.+820    	; 0x1e56 <json_create+0x3c6>
        if ( *ptr == ',' ) {
    1b22:	dc 01       	movw	r26, r24
    1b24:	8c 91       	ld	r24, X
    1b26:	8c 32       	cpi	r24, 0x2C	; 44
    1b28:	21 f4       	brne	.+8      	; 0x1b32 <json_create+0xa2>
            ++ptr;
    1b2a:	8d 01       	movw	r16, r26
    1b2c:	0f 5f       	subi	r16, 0xFF	; 255
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	ee cf       	rjmp	.-36     	; 0x1b0e <json_create+0x7e>
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    1b32:	f7 01       	movw	r30, r14
    1b34:	96 81       	ldd	r25, Z+6	; 0x06
    1b36:	99 23       	and	r25, r25
    1b38:	11 f0       	breq	.+4      	; 0x1b3e <json_create+0xae>
    1b3a:	2d e5       	ldi	r18, 0x5D	; 93
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <json_create+0xb0>
    1b3e:	25 2d       	mov	r18, r5
        if ( *ptr == endchar ) {
    1b40:	82 13       	cpse	r24, r18
    1b42:	16 c0       	rjmp	.+44     	; 0x1b70 <json_create+0xe0>
            *ptr = '\0';
    1b44:	aa 81       	ldd	r26, Y+2	; 0x02
    1b46:	bb 81       	ldd	r27, Y+3	; 0x03
    1b48:	1c 92       	st	X, r1
            json_t* parentObj = obj->sibling;
    1b4a:	f7 01       	movw	r30, r14
    1b4c:	80 81       	ld	r24, Z
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
            if ( !parentObj ) return ++ptr;
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	31 f4       	brne	.+12     	; 0x1b60 <json_create+0xd0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <json_create+0xca>
    1b58:	7b c1       	rjmp	.+758    	; 0x1e50 <json_create+0x3c0>
    return obj;
    1b5a:	8a 2d       	mov	r24, r10
    1b5c:	9b 2d       	mov	r25, r11
    1b5e:	80 c1       	rjmp	.+768    	; 0x1e60 <json_create+0x3d0>
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
    1b60:	11 82       	std	Z+1, r1	; 0x01
    1b62:	10 82       	st	Z, r1
            obj = parentObj;
            ++ptr;
    1b64:	0a 81       	ldd	r16, Y+2	; 0x02
    1b66:	1b 81       	ldd	r17, Y+3	; 0x03
    1b68:	0f 5f       	subi	r16, 0xFF	; 255
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
            obj = parentObj;
    1b6c:	7c 01       	movw	r14, r24
    1b6e:	cf cf       	rjmp	.-98     	; 0x1b0e <json_create+0x7e>
/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    1b70:	c6 14       	cp	r12, r6
    1b72:	d7 04       	cpc	r13, r7
    1b74:	08 f0       	brcs	.+2      	; 0x1b78 <json_create+0xe8>
    1b76:	72 c1       	rjmp	.+740    	; 0x1e5c <json_create+0x3cc>
    return &pool->mem[pool->nextFree++];
    1b78:	46 01       	movw	r8, r12
    1b7a:	bf ef       	ldi	r27, 0xFF	; 255
    1b7c:	8b 1a       	sub	r8, r27
    1b7e:	9b 0a       	sbc	r9, r27
    1b80:	96 01       	movw	r18, r12
    1b82:	22 0f       	add	r18, r18
    1b84:	33 1f       	adc	r19, r19
    1b86:	22 0f       	add	r18, r18
    1b88:	33 1f       	adc	r19, r19
    1b8a:	22 0f       	add	r18, r18
    1b8c:	33 1f       	adc	r19, r19
    1b8e:	f9 01       	movw	r30, r18
    1b90:	ec 19       	sub	r30, r12
    1b92:	fd 09       	sbc	r31, r13
    1b94:	6f 01       	movw	r12, r30
    1b96:	ca 0c       	add	r12, r10
    1b98:	db 1c       	adc	r13, r11
            obj = parentObj;
            ++ptr;
            continue;
        }
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
    1b9a:	c1 14       	cp	r12, r1
    1b9c:	d1 04       	cpc	r13, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <json_create+0x112>
    1ba0:	5a c1       	rjmp	.+692    	; 0x1e56 <json_create+0x3c6>
        if( obj->type != JSON_ARRAY ) {
    1ba2:	91 30       	cpi	r25, 0x01	; 1
    1ba4:	31 f1       	breq	.+76     	; 0x1bf2 <json_create+0x162>
            if ( *ptr != '\"' ) return 0;
    1ba6:	82 32       	cpi	r24, 0x22	; 34
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <json_create+0x11c>
    1baa:	55 c1       	rjmp	.+682    	; 0x1e56 <json_create+0x3c6>
  * @param str Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	d6 01       	movw	r26, r12
    1bb4:	13 96       	adiw	r26, 0x03	; 3
    1bb6:	9c 93       	st	X, r25
    1bb8:	8e 93       	st	-X, r24
    1bba:	12 97       	sbiw	r26, 0x02	; 2
    ptr = parseString( ptr );
    1bbc:	0e 94 27 0c 	call	0x184e	; 0x184e <_ZL11parseStringPc>
    if ( !ptr ) return 0;
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <json_create+0x136>
    1bc4:	4b c1       	rjmp	.+662    	; 0x1e5c <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1bc6:	6f eb       	ldi	r22, 0xBF	; 191
    1bc8:	73 e0       	ldi	r23, 0x03	; 3
    1bca:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZL7goWhilePcPKc>
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    ptr = parseString( ptr );
    if ( !ptr ) return 0;
    ptr = goBlank( ptr );
    if ( !ptr ) return 0;
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <json_create+0x144>
    1bd2:	44 c1       	rjmp	.+648    	; 0x1e5c <json_create+0x3cc>
    if ( *ptr++ != ':' ) return 0;
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	20 81       	ld	r18, Z
    1bd8:	2a 33       	cpi	r18, 0x3A	; 58
    1bda:	09 f0       	breq	.+2      	; 0x1bde <json_create+0x14e>
    1bdc:	3f c1       	rjmp	.+638    	; 0x1e5c <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1bde:	6f eb       	ldi	r22, 0xBF	; 191
    1be0:	73 e0       	ldi	r23, 0x03	; 3
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZL7goWhilePcPKc>
    1be8:	9b 83       	std	Y+3, r25	; 0x03
    1bea:	8a 83       	std	Y+2, r24	; 0x02
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
        if( obj->type != JSON_ARRAY ) {
            if ( *ptr != '\"' ) return 0;
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
    1bec:	89 2b       	or	r24, r25
    1bee:	31 f4       	brne	.+12     	; 0x1bfc <json_create+0x16c>
    1bf0:	32 c1       	rjmp	.+612    	; 0x1e56 <json_create+0x3c6>
        }
        else property->name = 0;
    1bf2:	d6 01       	movw	r26, r12
    1bf4:	13 96       	adiw	r26, 0x03	; 3
    1bf6:	1c 92       	st	X, r1
    1bf8:	1e 92       	st	-X, r1
    1bfa:	12 97       	sbiw	r26, 0x02	; 2

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
    property->sibling = 0;
    1bfc:	f6 01       	movw	r30, r12
    1bfe:	11 82       	std	Z+1, r1	; 0x01
    1c00:	10 82       	st	Z, r1
    if ( !obj->u.child ) obj->u.child = property;
    1c02:	d7 01       	movw	r26, r14
    1c04:	14 96       	adiw	r26, 0x04	; 4
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	15 97       	sbiw	r26, 0x05	; 5
    1c0c:	30 97       	sbiw	r30, 0x00	; 0
    1c0e:	39 f4       	brne	.+14     	; 0x1c1e <json_create+0x18e>
    1c10:	15 96       	adiw	r26, 0x05	; 5
    1c12:	dc 92       	st	X, r13
    1c14:	ce 92       	st	-X, r12
    1c16:	14 97       	sbiw	r26, 0x04	; 4
    1c18:	08 c0       	rjmp	.+16     	; 0x1c2a <json_create+0x19a>
    else {
        json_t* iter;
        for( iter = obj->u.child; iter->sibling; iter = iter->sibling );
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	00 c0       	rjmp	.+0      	; 0x1c1e <json_create+0x18e>
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	d1 f7       	brne	.-12     	; 0x1c1a <json_create+0x18a>
        iter->sibling = property;
    1c26:	d1 82       	std	Z+1, r13	; 0x01
    1c28:	c0 82       	st	Z, r12
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
        }
        else property->name = 0;
        add( obj, property );
        property->u.value = ptr;
    1c2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2e:	d6 01       	movw	r26, r12
    1c30:	15 96       	adiw	r26, 0x05	; 5
    1c32:	fc 93       	st	X, r31
    1c34:	ee 93       	st	-X, r30
    1c36:	14 97       	sbiw	r26, 0x04	; 4
        switch( *ptr ) {
    1c38:	80 81       	ld	r24, Z
    1c3a:	86 36       	cpi	r24, 0x66	; 102
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <json_create+0x1b0>
    1c3e:	46 c0       	rjmp	.+140    	; 0x1ccc <json_create+0x23c>
    1c40:	28 f4       	brcc	.+10     	; 0x1c4c <json_create+0x1bc>
    1c42:	82 32       	cpi	r24, 0x22	; 34
    1c44:	39 f1       	breq	.+78     	; 0x1c94 <json_create+0x204>
    1c46:	8b 35       	cpi	r24, 0x5B	; 91
    1c48:	c9 f0       	breq	.+50     	; 0x1c7c <json_create+0x1ec>
    1c4a:	54 c0       	rjmp	.+168    	; 0x1cf4 <json_create+0x264>
    1c4c:	84 37       	cpi	r24, 0x74	; 116
    1c4e:	a1 f1       	breq	.+104    	; 0x1cb8 <json_create+0x228>
    1c50:	8b 37       	cpi	r24, 0x7B	; 123
    1c52:	21 f0       	breq	.+8      	; 0x1c5c <json_create+0x1cc>
    1c54:	8e 36       	cpi	r24, 0x6E	; 110
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <json_create+0x1ca>
    1c58:	4d c0       	rjmp	.+154    	; 0x1cf4 <json_create+0x264>
    1c5a:	42 c0       	rjmp	.+132    	; 0x1ce0 <json_create+0x250>
            case '{':
                property->type    = JSON_OBJ;
    1c5c:	d6 01       	movw	r26, r12
    1c5e:	16 96       	adiw	r26, 0x06	; 6
    1c60:	1c 92       	st	X, r1
    1c62:	16 97       	sbiw	r26, 0x06	; 6
                property->u.child = 0;
    1c64:	15 96       	adiw	r26, 0x05	; 5
    1c66:	1c 92       	st	X, r1
    1c68:	1e 92       	st	-X, r1
    1c6a:	14 97       	sbiw	r26, 0x04	; 4
                property->sibling = obj;
    1c6c:	ed 92       	st	X+, r14
    1c6e:	fc 92       	st	X, r15
                obj = property;
                ++ptr;
    1c70:	0a 81       	ldd	r16, Y+2	; 0x02
    1c72:	1b 81       	ldd	r17, Y+3	; 0x03
    1c74:	0f 5f       	subi	r16, 0xFF	; 255
    1c76:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1c78:	76 01       	movw	r14, r12
    1c7a:	df c0       	rjmp	.+446    	; 0x1e3a <json_create+0x3aa>
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    1c7c:	f6 01       	movw	r30, r12
    1c7e:	36 82       	std	Z+6, r3	; 0x06
                property->u.child = 0;
    1c80:	15 82       	std	Z+5, r1	; 0x05
    1c82:	14 82       	std	Z+4, r1	; 0x04
                property->sibling = obj;
    1c84:	f1 82       	std	Z+1, r15	; 0x01
    1c86:	e0 82       	st	Z, r14
                obj = property;
                ++ptr;
    1c88:	0a 81       	ldd	r16, Y+2	; 0x02
    1c8a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c8c:	0f 5f       	subi	r16, 0xFF	; 255
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1c90:	76 01       	movw	r14, r12
    1c92:	d3 c0       	rjmp	.+422    	; 0x1e3a <json_create+0x3aa>
  * @param str Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	d6 01       	movw	r26, r12
    1c9c:	15 96       	adiw	r26, 0x05	; 5
    1c9e:	9c 93       	st	X, r25
    1ca0:	8e 93       	st	-X, r24
    1ca2:	14 97       	sbiw	r26, 0x04	; 4
    ptr = parseString( ++ptr );
    1ca4:	0e 94 27 0c 	call	0x184e	; 0x184e <_ZL11parseStringPc>
    1ca8:	8c 01       	movw	r16, r24
    if ( !ptr ) return 0;
    1caa:	89 2b       	or	r24, r25
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <json_create+0x220>
    1cae:	d6 c0       	rjmp	.+428    	; 0x1e5c <json_create+0x3cc>
    property->type = JSON_TEXT;
    1cb0:	f6 01       	movw	r30, r12
    1cb2:	46 82       	std	Z+6, r4	; 0x06
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1cb4:	64 01       	movw	r12, r8
    1cb6:	2b cf       	rjmp	.-426    	; 0x1b0e <json_create+0x7e>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
    1cb8:	23 e0       	ldi	r18, 0x03	; 3
    1cba:	48 ec       	ldi	r20, 0xC8	; 200
    1cbc:	53 e0       	ldi	r21, 0x03	; 3
    1cbe:	b6 01       	movw	r22, r12
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1cc8:	8c 01       	movw	r16, r24
    1cca:	b7 c0       	rjmp	.+366    	; 0x1e3a <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
    1ccc:	23 e0       	ldi	r18, 0x03	; 3
    1cce:	4d ec       	ldi	r20, 0xCD	; 205
    1cd0:	53 e0       	ldi	r21, 0x03	; 3
    1cd2:	b6 01       	movw	r22, r12
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1cdc:	8c 01       	movw	r16, r24
    1cde:	ad c0       	rjmp	.+346    	; 0x1e3a <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "null", JSON_NULL );
    1ce0:	26 e0       	ldi	r18, 0x06	; 6
    1ce2:	43 ed       	ldi	r20, 0xD3	; 211
    1ce4:	53 e0       	ldi	r21, 0x03	; 3
    1ce6:	b6 01       	movw	r22, r12
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	9b 81       	ldd	r25, Y+3	; 0x03
    1cec:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1cf0:	8c 01       	movw	r16, r24
    1cf2:	a3 c0       	rjmp	.+326    	; 0x1e3a <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
    if ( *ptr == '-' ) ++ptr;
    1cf4:	8d 32       	cpi	r24, 0x2D	; 45
    1cf6:	21 f4       	brne	.+8      	; 0x1d00 <json_create+0x270>
    1cf8:	ea 81       	ldd	r30, Y+2	; 0x02
    1cfa:	fb 81       	ldd	r31, Y+3	; 0x03
    1cfc:	31 96       	adiw	r30, 0x01	; 1
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <json_create+0x274>
    1d00:	ea 81       	ldd	r30, Y+2	; 0x02
    1d02:	fb 81       	ldd	r31, Y+3	; 0x03
    if ( !isNum( *ptr ) ) return 0;
    1d04:	80 81       	ld	r24, Z
    1d06:	90 ed       	ldi	r25, 0xD0	; 208
    1d08:	98 0f       	add	r25, r24
    1d0a:	9a 30       	cpi	r25, 0x0A	; 10
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <json_create+0x280>
    1d0e:	a6 c0       	rjmp	.+332    	; 0x1e5c <json_create+0x3cc>
    if ( *ptr != '0' ) {
    1d10:	80 33       	cpi	r24, 0x30	; 48
    1d12:	39 f0       	breq	.+14     	; 0x1d22 <json_create+0x292>
        ptr = goNum( ptr );
    1d14:	cf 01       	movw	r24, r30
    1d16:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZL5goNumPc>
    1d1a:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
    1d1c:	89 2b       	or	r24, r25
    1d1e:	49 f4       	brne	.+18     	; 0x1d32 <json_create+0x2a2>
    1d20:	9d c0       	rjmp	.+314    	; 0x1e5c <json_create+0x3cc>
    }
    else if ( isNum( *++ptr ) ) return 0;
    1d22:	8f 01       	movw	r16, r30
    1d24:	0f 5f       	subi	r16, 0xFF	; 255
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	81 81       	ldd	r24, Z+1	; 0x01
    1d2a:	80 53       	subi	r24, 0x30	; 48
    1d2c:	8a 30       	cpi	r24, 0x0A	; 10
    1d2e:	08 f4       	brcc	.+2      	; 0x1d32 <json_create+0x2a2>
    1d30:	95 c0       	rjmp	.+298    	; 0x1e5c <json_create+0x3cc>
    property->type = JSON_INTEGER;
    1d32:	d6 01       	movw	r26, r12
    1d34:	16 96       	adiw	r26, 0x06	; 6
    1d36:	2c 92       	st	X, r2
    if ( *ptr == '.' ) {
    1d38:	f8 01       	movw	r30, r16
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8e 32       	cpi	r24, 0x2E	; 46
    1d3e:	89 f4       	brne	.+34     	; 0x1d62 <json_create+0x2d2>
/** Analyze the decimal part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
    if ( !isNum( *ptr ) ) return 0;
    1d40:	81 81       	ldd	r24, Z+1	; 0x01
    1d42:	80 53       	subi	r24, 0x30	; 48
    1d44:	8a 30       	cpi	r24, 0x0A	; 10
    1d46:	08 f0       	brcs	.+2      	; 0x1d4a <json_create+0x2ba>
    1d48:	86 c0       	rjmp	.+268    	; 0x1e56 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	02 96       	adiw	r24, 0x02	; 2
    1d4e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZL5goNumPc>
    1d52:	8c 01       	movw	r16, r24
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    if ( *ptr == '.' ) {
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
    1d54:	89 2b       	or	r24, r25
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <json_create+0x2ca>
    1d58:	81 c0       	rjmp	.+258    	; 0x1e5c <json_create+0x3cc>
        property->type = JSON_REAL;
    1d5a:	e5 e0       	ldi	r30, 0x05	; 5
    1d5c:	d6 01       	movw	r26, r12
    1d5e:	16 96       	adiw	r26, 0x06	; 6
    1d60:	ec 93       	st	X, r30
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
    1d62:	d8 01       	movw	r26, r16
    1d64:	8c 91       	ld	r24, X
    1d66:	8f 7d       	andi	r24, 0xDF	; 223
    1d68:	85 34       	cpi	r24, 0x45	; 69
    1d6a:	11 f5       	brne	.+68     	; 0x1db0 <json_create+0x320>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    1d6c:	11 96       	adiw	r26, 0x01	; 1
    1d6e:	8c 91       	ld	r24, X
    1d70:	8d 32       	cpi	r24, 0x2D	; 45
    1d72:	29 f0       	breq	.+10     	; 0x1d7e <json_create+0x2ee>
    1d74:	8b 32       	cpi	r24, 0x2B	; 43
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <json_create+0x2ee>
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
    1d78:	f8 01       	movw	r30, r16
    1d7a:	31 96       	adiw	r30, 0x01	; 1
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <json_create+0x2f2>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    1d7e:	f8 01       	movw	r30, r16
    1d80:	32 96       	adiw	r30, 0x02	; 2
    if ( !isNum( *ptr ) ) return 0;
    1d82:	90 81       	ld	r25, Z
    1d84:	90 53       	subi	r25, 0x30	; 48
    1d86:	9a 30       	cpi	r25, 0x0A	; 10
    1d88:	08 f0       	brcs	.+2      	; 0x1d8c <json_create+0x2fc>
    1d8a:	65 c0       	rjmp	.+202    	; 0x1e56 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    1d8c:	cf 01       	movw	r24, r30
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZL5goNumPc>
    1d94:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
        if ( !ptr ) return 0;
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <json_create+0x30c>
    1d9a:	60 c0       	rjmp	.+192    	; 0x1e5c <json_create+0x3cc>
        property->type = JSON_REAL;
    1d9c:	25 e0       	ldi	r18, 0x05	; 5
    1d9e:	f6 01       	movw	r30, r12
    1da0:	26 83       	std	Z+6, r18	; 0x06
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
    1da2:	dc 01       	movw	r26, r24
    1da4:	8c 91       	ld	r24, X
    1da6:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZL16isEndOfPrimitivec>
    1daa:	81 11       	cpse	r24, r1
    1dac:	3a c0       	rjmp	.+116    	; 0x1e22 <json_create+0x392>
    1dae:	56 c0       	rjmp	.+172    	; 0x1e5c <json_create+0x3cc>
    1db0:	f8 01       	movw	r30, r16
    1db2:	f0 81       	ld	r31, Z
    1db4:	f9 83       	std	Y+1, r31	; 0x01
    1db6:	8f 2f       	mov	r24, r31
    1db8:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZL16isEndOfPrimitivec>
    1dbc:	88 23       	and	r24, r24
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <json_create+0x332>
    1dc0:	4d c0       	rjmp	.+154    	; 0x1e5c <json_create+0x3cc>
    if ( JSON_INTEGER == property->type ) {
    1dc2:	d6 01       	movw	r26, r12
    1dc4:	16 96       	adiw	r26, 0x06	; 6
    1dc6:	8c 91       	ld	r24, X
    1dc8:	84 30       	cpi	r24, 0x04	; 4
    1dca:	59 f5       	brne	.+86     	; 0x1e22 <json_create+0x392>
        char const* value = property->u.value;
        bool const negative = *value == '-';
    1dcc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dce:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd0:	40 81       	ld	r20, Z
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
    1dd2:	4d 32       	cpi	r20, 0x2D	; 45
    1dd4:	19 f0       	breq	.+6      	; 0x1ddc <json_create+0x34c>
    1dd6:	83 e1       	ldi	r24, 0x13	; 19
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <json_create+0x350>
    1ddc:	84 e1       	ldi	r24, 0x14	; 20
    1dde:	90 e0       	ldi	r25, 0x00	; 0
        unsigned int const len = ptr - value;
    1de0:	98 01       	movw	r18, r16
    1de2:	6a 81       	ldd	r22, Y+2	; 0x02
    1de4:	7b 81       	ldd	r23, Y+3	; 0x03
    1de6:	26 1b       	sub	r18, r22
    1de8:	37 0b       	sbc	r19, r23
        if ( len > maxdigits ) return 0;
    1dea:	82 17       	cp	r24, r18
    1dec:	93 07       	cpc	r25, r19
    1dee:	b0 f1       	brcs	.+108    	; 0x1e5c <json_create+0x3cc>
        if ( len == maxdigits ) {
    1df0:	28 17       	cp	r18, r24
    1df2:	39 07       	cpc	r19, r25
    1df4:	b1 f4       	brne	.+44     	; 0x1e22 <json_create+0x392>
            char const tmp = *ptr;
            *ptr = '\0';
    1df6:	d8 01       	movw	r26, r16
    1df8:	1c 92       	st	X, r1
            char const* const threshold = negative ? min: max;
    1dfa:	4d 32       	cpi	r20, 0x2D	; 45
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <json_create+0x378>
    1dfe:	e8 ed       	ldi	r30, 0xD8	; 216
    1e00:	f3 e0       	ldi	r31, 0x03	; 3
    1e02:	8e 2f       	mov	r24, r30
    1e04:	9f 2f       	mov	r25, r31
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <json_create+0x380>
    1e08:	2c ee       	ldi	r18, 0xEC	; 236
    1e0a:	33 e0       	ldi	r19, 0x03	; 3
    1e0c:	82 2f       	mov	r24, r18
    1e0e:	93 2f       	mov	r25, r19
            if ( 0 > strcmp( threshold, value ) ) return 0;
    1e10:	6a 81       	ldd	r22, Y+2	; 0x02
    1e12:	7b 81       	ldd	r23, Y+3	; 0x03
    1e14:	0e 94 84 12 	call	0x2508	; 0x2508 <strcmp>
    1e18:	99 23       	and	r25, r25
    1e1a:	04 f1       	brlt	.+64     	; 0x1e5c <json_create+0x3cc>
            *ptr = tmp;
    1e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1e:	d8 01       	movw	r26, r16
    1e20:	ec 93       	st	X, r30

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
    1e22:	65 ec       	ldi	r22, 0xC5	; 197
    1e24:	73 e0       	ldi	r23, 0x03	; 3
    1e26:	d8 01       	movw	r26, r16
    1e28:	8c 91       	ld	r24, X
    1e2a:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZL11isOneOfThemcPKc>
    1e2e:	81 11       	cpse	r24, r1
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <json_create+0x3aa>
    1e32:	f8 01       	movw	r30, r16
    1e34:	10 82       	st	Z, r1
    1e36:	0f 5f       	subi	r16, 0xFF	; 255
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
            case 't':  ptr = trueValue( ptr, property );  break;
            case 'f':  ptr = falseValue( ptr, property ); break;
            case 'n':  ptr = nullValue( ptr, property );  break;
            default:   ptr = numValue( ptr, property );   break;
        }
        if ( !ptr ) return 0;
    1e3a:	01 15       	cp	r16, r1
    1e3c:	11 05       	cpc	r17, r1
    1e3e:	59 f0       	breq	.+22     	; 0x1e56 <json_create+0x3c6>
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1e40:	64 01       	movw	r12, r8
    1e42:	65 ce       	rjmp	.-822    	; 0x1b0e <json_create+0x7e>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0b c0       	rjmp	.+22     	; 0x1e60 <json_create+0x3d0>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	08 c0       	rjmp	.+16     	; 0x1e60 <json_create+0x3d0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <json_create+0x3d0>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <json_create+0x3d0>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    return obj;
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	ff 90       	pop	r15
    1e70:	ef 90       	pop	r14
    1e72:	df 90       	pop	r13
    1e74:	cf 90       	pop	r12
    1e76:	bf 90       	pop	r11
    1e78:	af 90       	pop	r10
    1e7a:	9f 90       	pop	r9
    1e7c:	8f 90       	pop	r8
    1e7e:	7f 90       	pop	r7
    1e80:	6f 90       	pop	r6
    1e82:	5f 90       	pop	r5
    1e84:	4f 90       	pop	r4
    1e86:	3f 90       	pop	r3
    1e88:	2f 90       	pop	r2
    1e8a:	08 95       	ret

00001e8c <_ZN4UART11GetMessagesEv>:
					bufferIndexes[nBuffer]=bufferIndex+1;
				}
			}
		}
	}
	Messages* UART::GetMessages(){
    1e8c:	3f 92       	push	r3
    1e8e:	4f 92       	push	r4
    1e90:	5f 92       	push	r5
    1e92:	6f 92       	push	r6
    1e94:	7f 92       	push	r7
    1e96:	8f 92       	push	r8
    1e98:	9f 92       	push	r9
    1e9a:	af 92       	push	r10
    1e9c:	bf 92       	push	r11
    1e9e:	cf 92       	push	r12
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	2a 97       	sbiw	r28, 0x0a	; 10
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	5c 01       	movw	r10, r24
    1ec0:	e1 2c       	mov	r14, r1
    1ec2:	f1 2c       	mov	r15, r1
		char tempMessagesIndex=0;
    1ec4:	31 2c       	mov	r3, r1
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1ec6:	2c 01       	movw	r4, r24
    1ec8:	84 ef       	ldi	r24, 0xF4	; 244
    1eca:	48 1a       	sub	r4, r24
    1ecc:	8e ef       	ldi	r24, 0xFE	; 254
    1ece:	58 0a       	sbc	r5, r24
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
					tempMessages[tempMessagesIndex]=new Message(buf, length);
					tempMessagesIndex++;
					bufferIndexes[i]=0;
					overflowedBuffers=false;
    1ed0:	f5 01       	movw	r30, r10
    1ed2:	e2 5f       	subi	r30, 0xF2	; 242
    1ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed6:	fa 87       	std	Y+10, r31	; 0x0a
    1ed8:	e9 87       	std	Y+9, r30	; 0x09
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1eda:	f2 01       	movw	r30, r4
    1edc:	80 81       	ld	r24, Z
    1ede:	8e 15       	cp	r24, r14
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <_ZN4UART11GetMessagesEv+0x58>
    1ee2:	4f c0       	rjmp	.+158    	; 0x1f82 <_ZN4UART11GetMessagesEv+0xf6>
				if(bufferIndexes[i]>0){
    1ee4:	47 01       	movw	r8, r14
    1ee6:	67 01       	movw	r12, r14
    1ee8:	cc 0c       	add	r12, r12
    1eea:	dd 1c       	adc	r13, r13
    1eec:	ca 0c       	add	r12, r10
    1eee:	db 1c       	adc	r13, r11
    1ef0:	f6 01       	movw	r30, r12
    1ef2:	84 81       	ldd	r24, Z+4	; 0x04
    1ef4:	95 81       	ldd	r25, Z+5	; 0x05
    1ef6:	18 16       	cp	r1, r24
    1ef8:	19 06       	cpc	r1, r25
    1efa:	0c f0       	brlt	.+2      	; 0x1efe <_ZN4UART11GetMessagesEv+0x72>
    1efc:	42 c0       	rjmp	.+132    	; 0x1f82 <_ZN4UART11GetMessagesEv+0xf6>

				unsigned int length = bufferIndexes[i];
    1efe:	04 81       	ldd	r16, Z+4	; 0x04
    1f00:	15 81       	ldd	r17, Z+5	; 0x05
					char* buf = new char[ length+1];
    1f02:	c8 01       	movw	r24, r16
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	0e 94 b5 0b 	call	0x176a	; 0x176a <_Znaj>
    1f0a:	3c 01       	movw	r6, r24
					for (int j = 0; j < length; j++)
    1f0c:	01 15       	cp	r16, r1
    1f0e:	11 05       	cpc	r17, r1
    1f10:	c1 f0       	breq	.+48     	; 0x1f42 <_ZN4UART11GetMessagesEv+0xb6>
    1f12:	fc 01       	movw	r30, r24
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
					buf[j] = (char)buffer[i][j];
    1f18:	00 24       	eor	r0, r0
    1f1a:	96 94       	lsr	r9
    1f1c:	87 94       	ror	r8
    1f1e:	07 94       	ror	r0
    1f20:	96 94       	lsr	r9
    1f22:	87 94       	ror	r8
    1f24:	07 94       	ror	r0
    1f26:	98 2c       	mov	r9, r8
    1f28:	80 2c       	mov	r8, r0
    1f2a:	8a 0c       	add	r8, r10
    1f2c:	9b 1c       	adc	r9, r11
    1f2e:	d4 01       	movw	r26, r8
    1f30:	a8 0f       	add	r26, r24
    1f32:	b9 1f       	adc	r27, r25
    1f34:	1c 96       	adiw	r26, 0x0c	; 12
    1f36:	2c 91       	ld	r18, X
    1f38:	21 93       	st	Z+, r18
			if(i!=nBuffer){
				if(bufferIndexes[i]>0){

				unsigned int length = bufferIndexes[i];
					char* buf = new char[ length+1];
					for (int j = 0; j < length; j++)
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	08 17       	cp	r16, r24
    1f3e:	19 07       	cpc	r17, r25
    1f40:	b1 f7       	brne	.-20     	; 0x1f2e <_ZN4UART11GetMessagesEv+0xa2>
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
    1f42:	f3 01       	movw	r30, r6
    1f44:	e0 0f       	add	r30, r16
    1f46:	f1 1f       	adc	r31, r17
    1f48:	10 82       	st	Z, r1
					tempMessages[tempMessagesIndex]=new Message(buf, length);
    1f4a:	84 e0       	ldi	r24, 0x04	; 4
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    1f52:	4c 01       	movw	r8, r24
    1f54:	a8 01       	movw	r20, r16
    1f56:	b3 01       	movw	r22, r6
    1f58:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN7MessageC1EPKcj>
    1f5c:	e3 2d       	mov	r30, r3
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	ee 0f       	add	r30, r30
    1f62:	ff 1f       	adc	r31, r31
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	8c 0f       	add	r24, r28
    1f6a:	9d 1f       	adc	r25, r29
    1f6c:	e8 0f       	add	r30, r24
    1f6e:	f9 1f       	adc	r31, r25
    1f70:	91 82       	std	Z+1, r9	; 0x01
    1f72:	80 82       	st	Z, r8
					tempMessagesIndex++;
    1f74:	33 94       	inc	r3
					bufferIndexes[i]=0;
    1f76:	f6 01       	movw	r30, r12
    1f78:	15 82       	std	Z+5, r1	; 0x05
    1f7a:	14 82       	std	Z+4, r1	; 0x04
					overflowedBuffers=false;
    1f7c:	e9 85       	ldd	r30, Y+9	; 0x09
    1f7e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f80:	10 82       	st	Z, r1
    1f82:	ff ef       	ldi	r31, 0xFF	; 255
    1f84:	ef 1a       	sub	r14, r31
    1f86:	ff 0a       	sbc	r15, r31
		}
	}
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
    1f88:	84 e0       	ldi	r24, 0x04	; 4
    1f8a:	e8 16       	cp	r14, r24
    1f8c:	f1 04       	cpc	r15, r1
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <_ZN4UART11GetMessagesEv+0x106>
    1f90:	a4 cf       	rjmp	.-184    	; 0x1eda <_ZN4UART11GetMessagesEv+0x4e>
					bufferIndexes[i]=0;
					overflowedBuffers=false;
				}
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
    1f92:	33 20       	and	r3, r3
    1f94:	61 f0       	breq	.+24     	; 0x1fae <_ZN4UART11GetMessagesEv+0x122>
    1f96:	84 e0       	ldi	r24, 0x04	; 4
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_Znwj>
    1f9e:	8c 01       	movw	r16, r24
    1fa0:	43 2d       	mov	r20, r3
    1fa2:	be 01       	movw	r22, r28
    1fa4:	6f 5f       	subi	r22, 0xFF	; 255
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	0e 94 49 06 	call	0xc92	; 0xc92 <_ZN8MessagesC1EPP7Messagec>
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <_ZN4UART11GetMessagesEv+0x126>
    1fae:	00 e0       	ldi	r16, 0x00	; 0
    1fb0:	10 e0       	ldi	r17, 0x00	; 0
		return m;
}
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	2a 96       	adiw	r28, 0x0a	; 10
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	ff 90       	pop	r15
    1fca:	ef 90       	pop	r14
    1fcc:	df 90       	pop	r13
    1fce:	cf 90       	pop	r12
    1fd0:	bf 90       	pop	r11
    1fd2:	af 90       	pop	r10
    1fd4:	9f 90       	pop	r9
    1fd6:	8f 90       	pop	r8
    1fd8:	7f 90       	pop	r7
    1fda:	6f 90       	pop	r6
    1fdc:	5f 90       	pop	r5
    1fde:	4f 90       	pop	r4
    1fe0:	3f 90       	pop	r3
    1fe2:	08 95       	ret

00001fe4 <_ZThn2_N4UART11GetMessagesEv>:
    1fe4:	02 97       	sbiw	r24, 0x02	; 2
    1fe6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <_ZN4UART11GetMessagesEv>
    1fea:	08 95       	ret

00001fec <_ZN4UART10InitializeEv>:
 initialized=true;
 }
	return _Singleton;
}
 void UART::Initialize ()
{
    1fec:	fc 01       	movw	r30, r24
	//volatile int bufferIndexes[UART_N_BUFFERS];
	//volatile char buffer[UART_N_BUFFERS][UART_BUFFER_SIZE] ;
	
	nBuffer=0;
    1fee:	dc 01       	movw	r26, r24
    1ff0:	a4 5f       	subi	r26, 0xF4	; 244
    1ff2:	be 4f       	sbci	r27, 0xFE	; 254
    1ff4:	1c 92       	st	X, r1
	overflowedCurrentBuffer=false;
    1ff6:	11 96       	adiw	r26, 0x01	; 1
    1ff8:	1c 92       	st	X, r1
	overflowedBuffers=false;
    1ffa:	11 96       	adiw	r26, 0x01	; 1
    1ffc:	1c 92       	st	X, r1
	DDRD =DDRD&0xFE;
    1ffe:	50 98       	cbi	0x0a, 0	; 10
	DDRD = DDRD | 0x2;
    2000:	51 9a       	sbi	0x0a, 1	; 10
//PORTD=PORTD&0x1;
	for(char i=0; i<UART_N_BUFFERS; i++)
	{
		bufferIndexes[i]=0;
    2002:	15 82       	std	Z+5, r1	; 0x05
    2004:	14 82       	std	Z+4, r1	; 0x04
    2006:	17 82       	std	Z+7, r1	; 0x07
    2008:	16 82       	std	Z+6, r1	; 0x06
    200a:	11 86       	std	Z+9, r1	; 0x09
    200c:	10 86       	std	Z+8, r1	; 0x08
    200e:	13 86       	std	Z+11, r1	; 0x0b
    2010:	12 86       	std	Z+10, r1	; 0x0a
	}
	UBRR0H = UBRRH_VALUE;
    2012:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    2016:	83 e3       	ldi	r24, 0x33	; 51
    2018:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#if USE_U2X
	UCSR0A |= (1<<U2X0);
	#else
	UCSR0A &= ~(1<<U2X0);
    201c:	e0 ec       	ldi	r30, 0xC0	; 192
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	8d 7f       	andi	r24, 0xFD	; 253
    2024:	80 83       	st	Z, r24
	#endif
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|( 1<<RXCIE0);
    2026:	88 e9       	ldi	r24, 0x98	; 152
    2028:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    202c:	e2 ec       	ldi	r30, 0xC2	; 194
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	86 60       	ori	r24, 0x06	; 6
    2034:	80 83       	st	Z, r24

	sei();
    2036:	78 94       	sei
    2038:	08 95       	ret

0000203a <_ZN4UART11GetInstanceEv>:
#include <util/setbaud.h>

 UART UART:: _Singleton;
  UART& UART::GetInstance(){
 static bool initialized=false;
 if(!initialized)
    203a:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_ZZN4UART11GetInstanceEvE11initialized>
    203e:	81 11       	cpse	r24, r1
    2040:	07 c0       	rjmp	.+14     	; 0x2050 <_ZN4UART11GetInstanceEv+0x16>
 {
 _Singleton.Initialize();
    2042:	86 e5       	ldi	r24, 0x56	; 86
    2044:	94 e0       	ldi	r25, 0x04	; 4
    2046:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN4UART10InitializeEv>
 initialized=true;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <_ZZN4UART11GetInstanceEvE11initialized>
 }
	return _Singleton;
}
    2050:	86 e5       	ldi	r24, 0x56	; 86
    2052:	94 e0       	ldi	r25, 0x04	; 4
    2054:	08 95       	ret

00002056 <_ZN4UART8IncomingEv>:

	sei();
}

void UART::Incoming(){
	unsigned char data = UDR0;
    2056:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(    data==13||data==10   )
    205a:	2d 30       	cpi	r18, 0x0D	; 13
    205c:	19 f0       	breq	.+6      	; 0x2064 <_ZN4UART8IncomingEv+0xe>
    205e:	2a 30       	cpi	r18, 0x0A	; 10
    2060:	09 f0       	breq	.+2      	; 0x2064 <_ZN4UART8IncomingEv+0xe>
    2062:	67 c0       	rjmp	.+206    	; 0x2132 <_ZN4UART8IncomingEv+0xdc>
	{
		if(bufferIndexes[nBuffer]!=0)
    2064:	fc 01       	movw	r30, r24
    2066:	e4 5f       	subi	r30, 0xF4	; 244
    2068:	fe 4f       	sbci	r31, 0xFE	; 254
    206a:	e0 81       	ld	r30, Z
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	32 96       	adiw	r30, 0x02	; 2
    2070:	ee 0f       	add	r30, r30
    2072:	ff 1f       	adc	r31, r31
    2074:	e8 0f       	add	r30, r24
    2076:	f9 1f       	adc	r31, r25
    2078:	20 81       	ld	r18, Z
    207a:	31 81       	ldd	r19, Z+1	; 0x01
    207c:	23 2b       	or	r18, r19
    207e:	09 f4       	brne	.+2      	; 0x2082 <_ZN4UART8IncomingEv+0x2c>
    2080:	94 c0       	rjmp	.+296    	; 0x21aa <_ZN4UART8IncomingEv+0x154>
		{
			if(!overflowedCurrentBuffer)
    2082:	fc 01       	movw	r30, r24
    2084:	e3 5f       	subi	r30, 0xF3	; 243
    2086:	fe 4f       	sbci	r31, 0xFE	; 254
    2088:	20 81       	ld	r18, Z
    208a:	21 11       	cpse	r18, r1
    208c:	41 c0       	rjmp	.+130    	; 0x2110 <_ZN4UART8IncomingEv+0xba>
			{
				if(nBuffer<UART_N_BUFFERS-1)
    208e:	31 97       	sbiw	r30, 0x01	; 1
    2090:	20 81       	ld	r18, Z
    2092:	23 30       	cpi	r18, 0x03	; 3
    2094:	30 f0       	brcs	.+12     	; 0x20a2 <_ZN4UART8IncomingEv+0x4c>
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    2096:	fc 01       	movw	r30, r24
    2098:	24 81       	ldd	r18, Z+4	; 0x04
    209a:	35 81       	ldd	r19, Z+5	; 0x05
    209c:	23 2b       	or	r18, r19
    209e:	a9 f4       	brne	.+42     	; 0x20ca <_ZN4UART8IncomingEv+0x74>
    20a0:	27 c0       	rjmp	.+78     	; 0x20f0 <_ZN4UART8IncomingEv+0x9a>
		{
			if(!overflowedCurrentBuffer)
			{
				if(nBuffer<UART_N_BUFFERS-1)
				{
					nBuffer++;
    20a2:	fc 01       	movw	r30, r24
    20a4:	e4 5f       	subi	r30, 0xF4	; 244
    20a6:	fe 4f       	sbci	r31, 0xFE	; 254
    20a8:	20 81       	ld	r18, Z
    20aa:	2f 5f       	subi	r18, 0xFF	; 255
    20ac:	20 83       	st	Z, r18
					bufferIndexes[nBuffer]=0;
    20ae:	e0 81       	ld	r30, Z
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	32 96       	adiw	r30, 0x02	; 2
    20b4:	ee 0f       	add	r30, r30
    20b6:	ff 1f       	adc	r31, r31
    20b8:	e8 0f       	add	r30, r24
    20ba:	f9 1f       	adc	r31, r25
    20bc:	11 82       	std	Z+1, r1	; 0x01
    20be:	10 82       	st	Z, r1
					overflowedCurrentBuffer=false;
    20c0:	fc 01       	movw	r30, r24
    20c2:	e3 5f       	subi	r30, 0xF3	; 243
    20c4:	fe 4f       	sbci	r31, 0xFE	; 254
    20c6:	10 82       	st	Z, r1
    20c8:	08 95       	ret
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    20ca:	fc 01       	movw	r30, r24
    20cc:	26 81       	ldd	r18, Z+6	; 0x06
    20ce:	37 81       	ldd	r19, Z+7	; 0x07
    20d0:	23 2b       	or	r18, r19
    20d2:	51 f0       	breq	.+20     	; 0x20e8 <_ZN4UART8IncomingEv+0x92>
    20d4:	20 85       	ldd	r18, Z+8	; 0x08
    20d6:	31 85       	ldd	r19, Z+9	; 0x09
    20d8:	23 2b       	or	r18, r19
    20da:	41 f0       	breq	.+16     	; 0x20ec <_ZN4UART8IncomingEv+0x96>
    20dc:	22 85       	ldd	r18, Z+10	; 0x0a
    20de:	33 85       	ldd	r19, Z+11	; 0x0b
    20e0:	23 2b       	or	r18, r19
    20e2:	81 f4       	brne	.+32     	; 0x2104 <_ZN4UART8IncomingEv+0xae>
					overflowedCurrentBuffer=false;

				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
    20e4:	23 e0       	ldi	r18, 0x03	; 3
    20e6:	05 c0       	rjmp	.+10     	; 0x20f2 <_ZN4UART8IncomingEv+0x9c>
    20e8:	21 e0       	ldi	r18, 0x01	; 1
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <_ZN4UART8IncomingEv+0x9c>
    20ec:	22 e0       	ldi	r18, 0x02	; 2
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <_ZN4UART8IncomingEv+0x9c>
					{
						if(bufferIndexes[i]==0)
    20f0:	20 e0       	ldi	r18, 0x00	; 0
						{
							nBuffer=i;
    20f2:	fc 01       	movw	r30, r24
    20f4:	e4 5f       	subi	r30, 0xF4	; 244
    20f6:	fe 4f       	sbci	r31, 0xFE	; 254
    20f8:	20 83       	st	Z, r18
							overflowedCurrentBuffer=false;
    20fa:	31 96       	adiw	r30, 0x01	; 1
    20fc:	10 82       	st	Z, r1
							overflowedBuffers=false;
    20fe:	31 96       	adiw	r30, 0x01	; 1
    2100:	10 82       	st	Z, r1
							return;
    2102:	08 95       	ret
						}
					}
					overflowedBuffers=true;
    2104:	fc 01       	movw	r30, r24
    2106:	e2 5f       	subi	r30, 0xF2	; 242
    2108:	fe 4f       	sbci	r31, 0xFE	; 254
    210a:	21 e0       	ldi	r18, 0x01	; 1
    210c:	20 83       	st	Z, r18
    210e:	08 95       	ret
				}
			}
			else
			{
				overflowedCurrentBuffer=false;
    2110:	fc 01       	movw	r30, r24
    2112:	e3 5f       	subi	r30, 0xF3	; 243
    2114:	fe 4f       	sbci	r31, 0xFE	; 254
    2116:	10 82       	st	Z, r1
				bufferIndexes[nBuffer]=0;
    2118:	31 97       	sbiw	r30, 0x01	; 1
    211a:	20 81       	ld	r18, Z
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	2e 5f       	subi	r18, 0xFE	; 254
    2120:	3f 4f       	sbci	r19, 0xFF	; 255
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	fc 01       	movw	r30, r24
    2128:	e2 0f       	add	r30, r18
    212a:	f3 1f       	adc	r31, r19
    212c:	11 82       	std	Z+1, r1	; 0x01
    212e:	10 82       	st	Z, r1
    2130:	08 95       	ret
			}
		}
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
    2132:	fc 01       	movw	r30, r24
    2134:	e3 5f       	subi	r30, 0xF3	; 243
    2136:	fe 4f       	sbci	r31, 0xFE	; 254
    2138:	30 81       	ld	r19, Z
    213a:	31 11       	cpse	r19, r1
    213c:	36 c0       	rjmp	.+108    	; 0x21aa <_ZN4UART8IncomingEv+0x154>
    213e:	31 96       	adiw	r30, 0x01	; 1
    2140:	30 81       	ld	r19, Z
    2142:	31 11       	cpse	r19, r1
    2144:	32 c0       	rjmp	.+100    	; 0x21aa <_ZN4UART8IncomingEv+0x154>
    2146:	21 c0       	rjmp	.+66     	; 0x218a <_ZN4UART8IncomingEv+0x134>
		{
			int bufferIndex=bufferIndexes[nBuffer];
			if(bufferIndex>=UART_BUFFER_SIZE)
			{
				overflowedCurrentBuffer=true;
    2148:	fc 01       	movw	r30, r24
    214a:	e3 5f       	subi	r30, 0xF3	; 243
    214c:	fe 4f       	sbci	r31, 0xFE	; 254
    214e:	21 e0       	ldi	r18, 0x01	; 1
    2150:	20 83       	st	Z, r18
    2152:	08 95       	ret
			}
			else{
					buffer[nBuffer][bufferIndex]=data;
    2154:	dc 01       	movw	r26, r24
    2156:	a4 5f       	subi	r26, 0xF4	; 244
    2158:	be 4f       	sbci	r27, 0xFE	; 254
    215a:	3c 91       	ld	r19, X
    215c:	fc 01       	movw	r30, r24
    215e:	60 e4       	ldi	r22, 0x40	; 64
    2160:	36 9f       	mul	r19, r22
    2162:	e0 0d       	add	r30, r0
    2164:	f1 1d       	adc	r31, r1
    2166:	11 24       	eor	r1, r1
    2168:	e4 0f       	add	r30, r20
    216a:	f5 1f       	adc	r31, r21
    216c:	24 87       	std	Z+12, r18	; 0x0c
					bufferIndexes[nBuffer]=bufferIndex+1;
    216e:	2c 91       	ld	r18, X
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4f 5f       	subi	r20, 0xFF	; 255
    2174:	5f 4f       	sbci	r21, 0xFF	; 255
    2176:	2e 5f       	subi	r18, 0xFE	; 254
    2178:	3f 4f       	sbci	r19, 0xFF	; 255
    217a:	22 0f       	add	r18, r18
    217c:	33 1f       	adc	r19, r19
    217e:	fc 01       	movw	r30, r24
    2180:	e2 0f       	add	r30, r18
    2182:	f3 1f       	adc	r31, r19
    2184:	51 83       	std	Z+1, r21	; 0x01
    2186:	40 83       	st	Z, r20
    2188:	08 95       	ret
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
		{
			int bufferIndex=bufferIndexes[nBuffer];
    218a:	fc 01       	movw	r30, r24
    218c:	e4 5f       	subi	r30, 0xF4	; 244
    218e:	fe 4f       	sbci	r31, 0xFE	; 254
    2190:	e0 81       	ld	r30, Z
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	32 96       	adiw	r30, 0x02	; 2
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	e8 0f       	add	r30, r24
    219c:	f9 1f       	adc	r31, r25
    219e:	40 81       	ld	r20, Z
    21a0:	51 81       	ldd	r21, Z+1	; 0x01
			if(bufferIndex>=UART_BUFFER_SIZE)
    21a2:	40 34       	cpi	r20, 0x40	; 64
    21a4:	51 05       	cpc	r21, r1
    21a6:	b4 f2       	brlt	.-84     	; 0x2154 <_ZN4UART8IncomingEv+0xfe>
    21a8:	cf cf       	rjmp	.-98     	; 0x2148 <_ZN4UART8IncomingEv+0xf2>
    21aa:	08 95       	ret

000021ac <__vector_18>:
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
		return m;
}
	ISR(USART_RX_vect){
    21ac:	1f 92       	push	r1
    21ae:	0f 92       	push	r0
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	0f 92       	push	r0
    21b4:	11 24       	eor	r1, r1
    21b6:	2f 93       	push	r18
    21b8:	3f 93       	push	r19
    21ba:	4f 93       	push	r20
    21bc:	5f 93       	push	r21
    21be:	6f 93       	push	r22
    21c0:	7f 93       	push	r23
    21c2:	8f 93       	push	r24
    21c4:	9f 93       	push	r25
    21c6:	af 93       	push	r26
    21c8:	bf 93       	push	r27
    21ca:	ef 93       	push	r30
    21cc:	ff 93       	push	r31
		cli();
    21ce:	f8 94       	cli
		UART::GetInstance().Incoming();
    21d0:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN4UART11GetInstanceEv>
    21d4:	0e 94 2b 10 	call	0x2056	; 0x2056 <_ZN4UART8IncomingEv>
		sei();
    21d8:	78 94       	sei
	}
    21da:	ff 91       	pop	r31
    21dc:	ef 91       	pop	r30
    21de:	bf 91       	pop	r27
    21e0:	af 91       	pop	r26
    21e2:	9f 91       	pop	r25
    21e4:	8f 91       	pop	r24
    21e6:	7f 91       	pop	r23
    21e8:	6f 91       	pop	r22
    21ea:	5f 91       	pop	r21
    21ec:	4f 91       	pop	r20
    21ee:	3f 91       	pop	r19
    21f0:	2f 91       	pop	r18
    21f2:	0f 90       	pop	r0
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	0f 90       	pop	r0
    21f8:	1f 90       	pop	r1
    21fa:	18 95       	reti

000021fc <_ZN4UART4SendEc>:
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
    21fc:	e0 ec       	ldi	r30, 0xC0	; 192
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	85 ff       	sbrs	r24, 5
    2204:	fd cf       	rjmp	.-6      	; 0x2200 <_ZN4UART4SendEc+0x4>
		UDR0=message;
    2206:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    220a:	08 95       	ret

0000220c <_ZN4UART11SendMessageEPKcj>:
	}
	void UART::SendMessage(const char* message, unsigned int length){
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
		for(unsigned int i=0; i<length; i++)
    2218:	41 15       	cp	r20, r1
    221a:	51 05       	cpc	r21, r1
    221c:	61 f0       	breq	.+24     	; 0x2236 <_ZN4UART11SendMessageEPKcj+0x2a>
    221e:	8b 01       	movw	r16, r22
    2220:	7c 01       	movw	r14, r24
    2222:	eb 01       	movw	r28, r22
    2224:	04 0f       	add	r16, r20
    2226:	15 1f       	adc	r17, r21
		Send(*(message+i));
    2228:	69 91       	ld	r22, Y+
    222a:	c7 01       	movw	r24, r14
    222c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_ZN4UART4SendEc>
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
		UDR0=message;
	}
	void UART::SendMessage(const char* message, unsigned int length){
		for(unsigned int i=0; i<length; i++)
    2230:	c0 17       	cp	r28, r16
    2232:	d1 07       	cpc	r29, r17
    2234:	c9 f7       	brne	.-14     	; 0x2228 <_ZN4UART11SendMessageEPKcj+0x1c>
		Send(*(message+i));
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	ff 90       	pop	r15
    2240:	ef 90       	pop	r14
    2242:	08 95       	ret

00002244 <_GLOBAL__sub_I__ZN4UART10_SingletonE>:
void operator=(UART const&) = delete; // Don't implement
protected:
public:

private:
UART(){}
    2244:	e6 e5       	ldi	r30, 0x56	; 86
    2246:	f4 e0       	ldi	r31, 0x04	; 4
    2248:	85 e1       	ldi	r24, 0x15	; 21
    224a:	94 e0       	ldi	r25, 0x04	; 4
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	80 83       	st	Z, r24
    2250:	8d e1       	ldi	r24, 0x1D	; 29
    2252:	94 e0       	ldi	r25, 0x04	; 4
    2254:	93 83       	std	Z+3, r25	; 0x03
    2256:	82 83       	std	Z+2, r24	; 0x02
    2258:	08 95       	ret

0000225a <__tablejump2__>:
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	05 90       	lpm	r0, Z+
    2260:	f4 91       	lpm	r31, Z
    2262:	e0 2d       	mov	r30, r0
    2264:	09 94       	ijmp

00002266 <malloc>:
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	91 05       	cpc	r25, r1
    2272:	10 f4       	brcc	.+4      	; 0x2278 <malloc+0x12>
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <__flp>
    227c:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <__flp+0x1>
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	a0 e0       	ldi	r26, 0x00	; 0
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	30 97       	sbiw	r30, 0x00	; 0
    228a:	19 f1       	breq	.+70     	; 0x22d2 <malloc+0x6c>
    228c:	40 81       	ld	r20, Z
    228e:	51 81       	ldd	r21, Z+1	; 0x01
    2290:	02 81       	ldd	r16, Z+2	; 0x02
    2292:	13 81       	ldd	r17, Z+3	; 0x03
    2294:	48 17       	cp	r20, r24
    2296:	59 07       	cpc	r21, r25
    2298:	c8 f0       	brcs	.+50     	; 0x22cc <malloc+0x66>
    229a:	84 17       	cp	r24, r20
    229c:	95 07       	cpc	r25, r21
    229e:	69 f4       	brne	.+26     	; 0x22ba <malloc+0x54>
    22a0:	10 97       	sbiw	r26, 0x00	; 0
    22a2:	31 f0       	breq	.+12     	; 0x22b0 <malloc+0x4a>
    22a4:	12 96       	adiw	r26, 0x02	; 2
    22a6:	0c 93       	st	X, r16
    22a8:	12 97       	sbiw	r26, 0x02	; 2
    22aa:	13 96       	adiw	r26, 0x03	; 3
    22ac:	1c 93       	st	X, r17
    22ae:	27 c0       	rjmp	.+78     	; 0x22fe <malloc+0x98>
    22b0:	00 93 67 05 	sts	0x0567, r16	; 0x800567 <__flp>
    22b4:	10 93 68 05 	sts	0x0568, r17	; 0x800568 <__flp+0x1>
    22b8:	22 c0       	rjmp	.+68     	; 0x22fe <malloc+0x98>
    22ba:	21 15       	cp	r18, r1
    22bc:	31 05       	cpc	r19, r1
    22be:	19 f0       	breq	.+6      	; 0x22c6 <malloc+0x60>
    22c0:	42 17       	cp	r20, r18
    22c2:	53 07       	cpc	r21, r19
    22c4:	18 f4       	brcc	.+6      	; 0x22cc <malloc+0x66>
    22c6:	9a 01       	movw	r18, r20
    22c8:	bd 01       	movw	r22, r26
    22ca:	ef 01       	movw	r28, r30
    22cc:	df 01       	movw	r26, r30
    22ce:	f8 01       	movw	r30, r16
    22d0:	db cf       	rjmp	.-74     	; 0x2288 <malloc+0x22>
    22d2:	21 15       	cp	r18, r1
    22d4:	31 05       	cpc	r19, r1
    22d6:	f9 f0       	breq	.+62     	; 0x2316 <malloc+0xb0>
    22d8:	28 1b       	sub	r18, r24
    22da:	39 0b       	sbc	r19, r25
    22dc:	24 30       	cpi	r18, 0x04	; 4
    22de:	31 05       	cpc	r19, r1
    22e0:	80 f4       	brcc	.+32     	; 0x2302 <malloc+0x9c>
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	9b 81       	ldd	r25, Y+3	; 0x03
    22e6:	61 15       	cp	r22, r1
    22e8:	71 05       	cpc	r23, r1
    22ea:	21 f0       	breq	.+8      	; 0x22f4 <malloc+0x8e>
    22ec:	fb 01       	movw	r30, r22
    22ee:	93 83       	std	Z+3, r25	; 0x03
    22f0:	82 83       	std	Z+2, r24	; 0x02
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <malloc+0x96>
    22f4:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <__flp+0x1>
    22f8:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <__flp>
    22fc:	fe 01       	movw	r30, r28
    22fe:	32 96       	adiw	r30, 0x02	; 2
    2300:	44 c0       	rjmp	.+136    	; 0x238a <malloc+0x124>
    2302:	fe 01       	movw	r30, r28
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	81 93       	st	Z+, r24
    230a:	91 93       	st	Z+, r25
    230c:	22 50       	subi	r18, 0x02	; 2
    230e:	31 09       	sbc	r19, r1
    2310:	39 83       	std	Y+1, r19	; 0x01
    2312:	28 83       	st	Y, r18
    2314:	3a c0       	rjmp	.+116    	; 0x238a <malloc+0x124>
    2316:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <__brkval>
    231a:	30 91 66 05 	lds	r19, 0x0566	; 0x800566 <__brkval+0x1>
    231e:	23 2b       	or	r18, r19
    2320:	41 f4       	brne	.+16     	; 0x2332 <malloc+0xcc>
    2322:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2326:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    232a:	30 93 66 05 	sts	0x0566, r19	; 0x800566 <__brkval+0x1>
    232e:	20 93 65 05 	sts	0x0565, r18	; 0x800565 <__brkval>
    2332:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2336:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    233a:	21 15       	cp	r18, r1
    233c:	31 05       	cpc	r19, r1
    233e:	41 f4       	brne	.+16     	; 0x2350 <malloc+0xea>
    2340:	2d b7       	in	r18, 0x3d	; 61
    2342:	3e b7       	in	r19, 0x3e	; 62
    2344:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2348:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    234c:	24 1b       	sub	r18, r20
    234e:	35 0b       	sbc	r19, r21
    2350:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <__brkval>
    2354:	f0 91 66 05 	lds	r31, 0x0566	; 0x800566 <__brkval+0x1>
    2358:	e2 17       	cp	r30, r18
    235a:	f3 07       	cpc	r31, r19
    235c:	a0 f4       	brcc	.+40     	; 0x2386 <malloc+0x120>
    235e:	2e 1b       	sub	r18, r30
    2360:	3f 0b       	sbc	r19, r31
    2362:	28 17       	cp	r18, r24
    2364:	39 07       	cpc	r19, r25
    2366:	78 f0       	brcs	.+30     	; 0x2386 <malloc+0x120>
    2368:	ac 01       	movw	r20, r24
    236a:	4e 5f       	subi	r20, 0xFE	; 254
    236c:	5f 4f       	sbci	r21, 0xFF	; 255
    236e:	24 17       	cp	r18, r20
    2370:	35 07       	cpc	r19, r21
    2372:	48 f0       	brcs	.+18     	; 0x2386 <malloc+0x120>
    2374:	4e 0f       	add	r20, r30
    2376:	5f 1f       	adc	r21, r31
    2378:	50 93 66 05 	sts	0x0566, r21	; 0x800566 <__brkval+0x1>
    237c:	40 93 65 05 	sts	0x0565, r20	; 0x800565 <__brkval>
    2380:	81 93       	st	Z+, r24
    2382:	91 93       	st	Z+, r25
    2384:	02 c0       	rjmp	.+4      	; 0x238a <malloc+0x124>
    2386:	e0 e0       	ldi	r30, 0x00	; 0
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	cf 01       	movw	r24, r30
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	08 95       	ret

00002396 <free>:
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	09 f4       	brne	.+2      	; 0x23a0 <free+0xa>
    239e:	81 c0       	rjmp	.+258    	; 0x24a2 <free+0x10c>
    23a0:	fc 01       	movw	r30, r24
    23a2:	32 97       	sbiw	r30, 0x02	; 2
    23a4:	13 82       	std	Z+3, r1	; 0x03
    23a6:	12 82       	std	Z+2, r1	; 0x02
    23a8:	a0 91 67 05 	lds	r26, 0x0567	; 0x800567 <__flp>
    23ac:	b0 91 68 05 	lds	r27, 0x0568	; 0x800568 <__flp+0x1>
    23b0:	10 97       	sbiw	r26, 0x00	; 0
    23b2:	81 f4       	brne	.+32     	; 0x23d4 <free+0x3e>
    23b4:	20 81       	ld	r18, Z
    23b6:	31 81       	ldd	r19, Z+1	; 0x01
    23b8:	82 0f       	add	r24, r18
    23ba:	93 1f       	adc	r25, r19
    23bc:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <__brkval>
    23c0:	30 91 66 05 	lds	r19, 0x0566	; 0x800566 <__brkval+0x1>
    23c4:	28 17       	cp	r18, r24
    23c6:	39 07       	cpc	r19, r25
    23c8:	51 f5       	brne	.+84     	; 0x241e <free+0x88>
    23ca:	f0 93 66 05 	sts	0x0566, r31	; 0x800566 <__brkval+0x1>
    23ce:	e0 93 65 05 	sts	0x0565, r30	; 0x800565 <__brkval>
    23d2:	67 c0       	rjmp	.+206    	; 0x24a2 <free+0x10c>
    23d4:	ed 01       	movw	r28, r26
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	ce 17       	cp	r28, r30
    23dc:	df 07       	cpc	r29, r31
    23de:	40 f4       	brcc	.+16     	; 0x23f0 <free+0x5a>
    23e0:	4a 81       	ldd	r20, Y+2	; 0x02
    23e2:	5b 81       	ldd	r21, Y+3	; 0x03
    23e4:	9e 01       	movw	r18, r28
    23e6:	41 15       	cp	r20, r1
    23e8:	51 05       	cpc	r21, r1
    23ea:	f1 f0       	breq	.+60     	; 0x2428 <free+0x92>
    23ec:	ea 01       	movw	r28, r20
    23ee:	f5 cf       	rjmp	.-22     	; 0x23da <free+0x44>
    23f0:	d3 83       	std	Z+3, r29	; 0x03
    23f2:	c2 83       	std	Z+2, r28	; 0x02
    23f4:	40 81       	ld	r20, Z
    23f6:	51 81       	ldd	r21, Z+1	; 0x01
    23f8:	84 0f       	add	r24, r20
    23fa:	95 1f       	adc	r25, r21
    23fc:	c8 17       	cp	r28, r24
    23fe:	d9 07       	cpc	r29, r25
    2400:	59 f4       	brne	.+22     	; 0x2418 <free+0x82>
    2402:	88 81       	ld	r24, Y
    2404:	99 81       	ldd	r25, Y+1	; 0x01
    2406:	84 0f       	add	r24, r20
    2408:	95 1f       	adc	r25, r21
    240a:	02 96       	adiw	r24, 0x02	; 2
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	9b 81       	ldd	r25, Y+3	; 0x03
    2414:	93 83       	std	Z+3, r25	; 0x03
    2416:	82 83       	std	Z+2, r24	; 0x02
    2418:	21 15       	cp	r18, r1
    241a:	31 05       	cpc	r19, r1
    241c:	29 f4       	brne	.+10     	; 0x2428 <free+0x92>
    241e:	f0 93 68 05 	sts	0x0568, r31	; 0x800568 <__flp+0x1>
    2422:	e0 93 67 05 	sts	0x0567, r30	; 0x800567 <__flp>
    2426:	3d c0       	rjmp	.+122    	; 0x24a2 <free+0x10c>
    2428:	e9 01       	movw	r28, r18
    242a:	fb 83       	std	Y+3, r31	; 0x03
    242c:	ea 83       	std	Y+2, r30	; 0x02
    242e:	49 91       	ld	r20, Y+
    2430:	59 91       	ld	r21, Y+
    2432:	c4 0f       	add	r28, r20
    2434:	d5 1f       	adc	r29, r21
    2436:	ec 17       	cp	r30, r28
    2438:	fd 07       	cpc	r31, r29
    243a:	61 f4       	brne	.+24     	; 0x2454 <free+0xbe>
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	84 0f       	add	r24, r20
    2442:	95 1f       	adc	r25, r21
    2444:	02 96       	adiw	r24, 0x02	; 2
    2446:	e9 01       	movw	r28, r18
    2448:	99 83       	std	Y+1, r25	; 0x01
    244a:	88 83       	st	Y, r24
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	9b 83       	std	Y+3, r25	; 0x03
    2452:	8a 83       	std	Y+2, r24	; 0x02
    2454:	e0 e0       	ldi	r30, 0x00	; 0
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	12 96       	adiw	r26, 0x02	; 2
    245a:	8d 91       	ld	r24, X+
    245c:	9c 91       	ld	r25, X
    245e:	13 97       	sbiw	r26, 0x03	; 3
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	19 f0       	breq	.+6      	; 0x246a <free+0xd4>
    2464:	fd 01       	movw	r30, r26
    2466:	dc 01       	movw	r26, r24
    2468:	f7 cf       	rjmp	.-18     	; 0x2458 <free+0xc2>
    246a:	8d 91       	ld	r24, X+
    246c:	9c 91       	ld	r25, X
    246e:	11 97       	sbiw	r26, 0x01	; 1
    2470:	9d 01       	movw	r18, r26
    2472:	2e 5f       	subi	r18, 0xFE	; 254
    2474:	3f 4f       	sbci	r19, 0xFF	; 255
    2476:	82 0f       	add	r24, r18
    2478:	93 1f       	adc	r25, r19
    247a:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <__brkval>
    247e:	30 91 66 05 	lds	r19, 0x0566	; 0x800566 <__brkval+0x1>
    2482:	28 17       	cp	r18, r24
    2484:	39 07       	cpc	r19, r25
    2486:	69 f4       	brne	.+26     	; 0x24a2 <free+0x10c>
    2488:	30 97       	sbiw	r30, 0x00	; 0
    248a:	29 f4       	brne	.+10     	; 0x2496 <free+0x100>
    248c:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <__flp+0x1>
    2490:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <__flp>
    2494:	02 c0       	rjmp	.+4      	; 0x249a <free+0x104>
    2496:	13 82       	std	Z+3, r1	; 0x03
    2498:	12 82       	std	Z+2, r1	; 0x02
    249a:	b0 93 66 05 	sts	0x0566, r27	; 0x800566 <__brkval+0x1>
    249e:	a0 93 65 05 	sts	0x0565, r26	; 0x800565 <__brkval>
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	08 95       	ret

000024a8 <atol>:
    24a8:	1f 93       	push	r17
    24aa:	fc 01       	movw	r30, r24
    24ac:	99 27       	eor	r25, r25
    24ae:	88 27       	eor	r24, r24
    24b0:	bc 01       	movw	r22, r24
    24b2:	e8 94       	clt
    24b4:	11 91       	ld	r17, Z+
    24b6:	10 32       	cpi	r17, 0x20	; 32
    24b8:	e9 f3       	breq	.-6      	; 0x24b4 <atol+0xc>
    24ba:	19 30       	cpi	r17, 0x09	; 9
    24bc:	10 f0       	brcs	.+4      	; 0x24c2 <atol+0x1a>
    24be:	1e 30       	cpi	r17, 0x0E	; 14
    24c0:	c8 f3       	brcs	.-14     	; 0x24b4 <atol+0xc>
    24c2:	1b 32       	cpi	r17, 0x2B	; 43
    24c4:	51 f0       	breq	.+20     	; 0x24da <atol+0x32>
    24c6:	1d 32       	cpi	r17, 0x2D	; 45
    24c8:	49 f4       	brne	.+18     	; 0x24dc <atol+0x34>
    24ca:	68 94       	set
    24cc:	06 c0       	rjmp	.+12     	; 0x24da <atol+0x32>
    24ce:	0e 94 8d 12 	call	0x251a	; 0x251a <__mulsi_const_10>
    24d2:	61 0f       	add	r22, r17
    24d4:	71 1d       	adc	r23, r1
    24d6:	81 1d       	adc	r24, r1
    24d8:	91 1d       	adc	r25, r1
    24da:	11 91       	ld	r17, Z+
    24dc:	10 53       	subi	r17, 0x30	; 48
    24de:	1a 30       	cpi	r17, 0x0A	; 10
    24e0:	b0 f3       	brcs	.-20     	; 0x24ce <atol+0x26>
    24e2:	3e f4       	brtc	.+14     	; 0x24f2 <atol+0x4a>
    24e4:	90 95       	com	r25
    24e6:	80 95       	com	r24
    24e8:	70 95       	com	r23
    24ea:	61 95       	neg	r22
    24ec:	7f 4f       	sbci	r23, 0xFF	; 255
    24ee:	8f 4f       	sbci	r24, 0xFF	; 255
    24f0:	9f 4f       	sbci	r25, 0xFF	; 255
    24f2:	1f 91       	pop	r17
    24f4:	08 95       	ret

000024f6 <memcpy>:
    24f6:	fb 01       	movw	r30, r22
    24f8:	dc 01       	movw	r26, r24
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <memcpy+0xa>
    24fc:	01 90       	ld	r0, Z+
    24fe:	0d 92       	st	X+, r0
    2500:	41 50       	subi	r20, 0x01	; 1
    2502:	50 40       	sbci	r21, 0x00	; 0
    2504:	d8 f7       	brcc	.-10     	; 0x24fc <memcpy+0x6>
    2506:	08 95       	ret

00002508 <strcmp>:
    2508:	fb 01       	movw	r30, r22
    250a:	dc 01       	movw	r26, r24
    250c:	8d 91       	ld	r24, X+
    250e:	01 90       	ld	r0, Z+
    2510:	80 19       	sub	r24, r0
    2512:	01 10       	cpse	r0, r1
    2514:	d9 f3       	breq	.-10     	; 0x250c <strcmp+0x4>
    2516:	99 0b       	sbc	r25, r25
    2518:	08 95       	ret

0000251a <__mulsi_const_10>:
    251a:	59 2f       	mov	r21, r25
    251c:	48 2f       	mov	r20, r24
    251e:	37 2f       	mov	r19, r23
    2520:	26 2f       	mov	r18, r22
    2522:	66 0f       	add	r22, r22
    2524:	77 1f       	adc	r23, r23
    2526:	88 1f       	adc	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	66 0f       	add	r22, r22
    252c:	77 1f       	adc	r23, r23
    252e:	88 1f       	adc	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	62 0f       	add	r22, r18
    2534:	73 1f       	adc	r23, r19
    2536:	84 1f       	adc	r24, r20
    2538:	95 1f       	adc	r25, r21
    253a:	66 0f       	add	r22, r22
    253c:	77 1f       	adc	r23, r23
    253e:	88 1f       	adc	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	08 95       	ret

00002544 <snprintf>:
    2544:	ae e0       	ldi	r26, 0x0E	; 14
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e8 ea       	ldi	r30, 0xA8	; 168
    254a:	f2 e1       	ldi	r31, 0x12	; 18
    254c:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__prologue_saves__+0x1c>
    2550:	0d 89       	ldd	r16, Y+21	; 0x15
    2552:	1e 89       	ldd	r17, Y+22	; 0x16
    2554:	8f 89       	ldd	r24, Y+23	; 0x17
    2556:	98 8d       	ldd	r25, Y+24	; 0x18
    2558:	26 e0       	ldi	r18, 0x06	; 6
    255a:	2c 83       	std	Y+4, r18	; 0x04
    255c:	1a 83       	std	Y+2, r17	; 0x02
    255e:	09 83       	std	Y+1, r16	; 0x01
    2560:	97 ff       	sbrs	r25, 7
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <snprintf+0x24>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e8       	ldi	r25, 0x80	; 128
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	ae 01       	movw	r20, r28
    2570:	45 5e       	subi	r20, 0xE5	; 229
    2572:	5f 4f       	sbci	r21, 0xFF	; 255
    2574:	69 8d       	ldd	r22, Y+25	; 0x19
    2576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2578:	ce 01       	movw	r24, r28
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <vfprintf>
    2580:	4d 81       	ldd	r20, Y+5	; 0x05
    2582:	5e 81       	ldd	r21, Y+6	; 0x06
    2584:	57 fd       	sbrc	r21, 7
    2586:	0a c0       	rjmp	.+20     	; 0x259c <snprintf+0x58>
    2588:	2f 81       	ldd	r18, Y+7	; 0x07
    258a:	38 85       	ldd	r19, Y+8	; 0x08
    258c:	42 17       	cp	r20, r18
    258e:	53 07       	cpc	r21, r19
    2590:	0c f4       	brge	.+2      	; 0x2594 <snprintf+0x50>
    2592:	9a 01       	movw	r18, r20
    2594:	f8 01       	movw	r30, r16
    2596:	e2 0f       	add	r30, r18
    2598:	f3 1f       	adc	r31, r19
    259a:	10 82       	st	Z, r1
    259c:	2e 96       	adiw	r28, 0x0e	; 14
    259e:	e4 e0       	ldi	r30, 0x04	; 4
    25a0:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__epilogue_restores__+0x1c>

000025a4 <vfprintf>:
    25a4:	ab e0       	ldi	r26, 0x0B	; 11
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e8 ed       	ldi	r30, 0xD8	; 216
    25aa:	f2 e1       	ldi	r31, 0x12	; 18
    25ac:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__prologue_saves__>
    25b0:	6c 01       	movw	r12, r24
    25b2:	7b 01       	movw	r14, r22
    25b4:	8a 01       	movw	r16, r20
    25b6:	fc 01       	movw	r30, r24
    25b8:	17 82       	std	Z+7, r1	; 0x07
    25ba:	16 82       	std	Z+6, r1	; 0x06
    25bc:	83 81       	ldd	r24, Z+3	; 0x03
    25be:	81 ff       	sbrs	r24, 1
    25c0:	cc c1       	rjmp	.+920    	; 0x295a <vfprintf+0x3b6>
    25c2:	ce 01       	movw	r24, r28
    25c4:	01 96       	adiw	r24, 0x01	; 1
    25c6:	3c 01       	movw	r6, r24
    25c8:	f6 01       	movw	r30, r12
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	f7 01       	movw	r30, r14
    25ce:	93 fd       	sbrc	r25, 3
    25d0:	85 91       	lpm	r24, Z+
    25d2:	93 ff       	sbrs	r25, 3
    25d4:	81 91       	ld	r24, Z+
    25d6:	7f 01       	movw	r14, r30
    25d8:	88 23       	and	r24, r24
    25da:	09 f4       	brne	.+2      	; 0x25de <vfprintf+0x3a>
    25dc:	ba c1       	rjmp	.+884    	; 0x2952 <vfprintf+0x3ae>
    25de:	85 32       	cpi	r24, 0x25	; 37
    25e0:	39 f4       	brne	.+14     	; 0x25f0 <vfprintf+0x4c>
    25e2:	93 fd       	sbrc	r25, 3
    25e4:	85 91       	lpm	r24, Z+
    25e6:	93 ff       	sbrs	r25, 3
    25e8:	81 91       	ld	r24, Z+
    25ea:	7f 01       	movw	r14, r30
    25ec:	85 32       	cpi	r24, 0x25	; 37
    25ee:	29 f4       	brne	.+10     	; 0x25fa <vfprintf+0x56>
    25f0:	b6 01       	movw	r22, r12
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	0e 94 c9 14 	call	0x2992	; 0x2992 <fputc>
    25f8:	e7 cf       	rjmp	.-50     	; 0x25c8 <vfprintf+0x24>
    25fa:	91 2c       	mov	r9, r1
    25fc:	21 2c       	mov	r2, r1
    25fe:	31 2c       	mov	r3, r1
    2600:	ff e1       	ldi	r31, 0x1F	; 31
    2602:	f3 15       	cp	r31, r3
    2604:	d8 f0       	brcs	.+54     	; 0x263c <vfprintf+0x98>
    2606:	8b 32       	cpi	r24, 0x2B	; 43
    2608:	79 f0       	breq	.+30     	; 0x2628 <vfprintf+0x84>
    260a:	38 f4       	brcc	.+14     	; 0x261a <vfprintf+0x76>
    260c:	80 32       	cpi	r24, 0x20	; 32
    260e:	79 f0       	breq	.+30     	; 0x262e <vfprintf+0x8a>
    2610:	83 32       	cpi	r24, 0x23	; 35
    2612:	a1 f4       	brne	.+40     	; 0x263c <vfprintf+0x98>
    2614:	23 2d       	mov	r18, r3
    2616:	20 61       	ori	r18, 0x10	; 16
    2618:	1d c0       	rjmp	.+58     	; 0x2654 <vfprintf+0xb0>
    261a:	8d 32       	cpi	r24, 0x2D	; 45
    261c:	61 f0       	breq	.+24     	; 0x2636 <vfprintf+0x92>
    261e:	80 33       	cpi	r24, 0x30	; 48
    2620:	69 f4       	brne	.+26     	; 0x263c <vfprintf+0x98>
    2622:	23 2d       	mov	r18, r3
    2624:	21 60       	ori	r18, 0x01	; 1
    2626:	16 c0       	rjmp	.+44     	; 0x2654 <vfprintf+0xb0>
    2628:	83 2d       	mov	r24, r3
    262a:	82 60       	ori	r24, 0x02	; 2
    262c:	38 2e       	mov	r3, r24
    262e:	e3 2d       	mov	r30, r3
    2630:	e4 60       	ori	r30, 0x04	; 4
    2632:	3e 2e       	mov	r3, r30
    2634:	2a c0       	rjmp	.+84     	; 0x268a <vfprintf+0xe6>
    2636:	f3 2d       	mov	r31, r3
    2638:	f8 60       	ori	r31, 0x08	; 8
    263a:	1d c0       	rjmp	.+58     	; 0x2676 <vfprintf+0xd2>
    263c:	37 fc       	sbrc	r3, 7
    263e:	2d c0       	rjmp	.+90     	; 0x269a <vfprintf+0xf6>
    2640:	20 ed       	ldi	r18, 0xD0	; 208
    2642:	28 0f       	add	r18, r24
    2644:	2a 30       	cpi	r18, 0x0A	; 10
    2646:	40 f0       	brcs	.+16     	; 0x2658 <vfprintf+0xb4>
    2648:	8e 32       	cpi	r24, 0x2E	; 46
    264a:	b9 f4       	brne	.+46     	; 0x267a <vfprintf+0xd6>
    264c:	36 fc       	sbrc	r3, 6
    264e:	81 c1       	rjmp	.+770    	; 0x2952 <vfprintf+0x3ae>
    2650:	23 2d       	mov	r18, r3
    2652:	20 64       	ori	r18, 0x40	; 64
    2654:	32 2e       	mov	r3, r18
    2656:	19 c0       	rjmp	.+50     	; 0x268a <vfprintf+0xe6>
    2658:	36 fe       	sbrs	r3, 6
    265a:	06 c0       	rjmp	.+12     	; 0x2668 <vfprintf+0xc4>
    265c:	8a e0       	ldi	r24, 0x0A	; 10
    265e:	98 9e       	mul	r9, r24
    2660:	20 0d       	add	r18, r0
    2662:	11 24       	eor	r1, r1
    2664:	92 2e       	mov	r9, r18
    2666:	11 c0       	rjmp	.+34     	; 0x268a <vfprintf+0xe6>
    2668:	ea e0       	ldi	r30, 0x0A	; 10
    266a:	2e 9e       	mul	r2, r30
    266c:	20 0d       	add	r18, r0
    266e:	11 24       	eor	r1, r1
    2670:	22 2e       	mov	r2, r18
    2672:	f3 2d       	mov	r31, r3
    2674:	f0 62       	ori	r31, 0x20	; 32
    2676:	3f 2e       	mov	r3, r31
    2678:	08 c0       	rjmp	.+16     	; 0x268a <vfprintf+0xe6>
    267a:	8c 36       	cpi	r24, 0x6C	; 108
    267c:	21 f4       	brne	.+8      	; 0x2686 <vfprintf+0xe2>
    267e:	83 2d       	mov	r24, r3
    2680:	80 68       	ori	r24, 0x80	; 128
    2682:	38 2e       	mov	r3, r24
    2684:	02 c0       	rjmp	.+4      	; 0x268a <vfprintf+0xe6>
    2686:	88 36       	cpi	r24, 0x68	; 104
    2688:	41 f4       	brne	.+16     	; 0x269a <vfprintf+0xf6>
    268a:	f7 01       	movw	r30, r14
    268c:	93 fd       	sbrc	r25, 3
    268e:	85 91       	lpm	r24, Z+
    2690:	93 ff       	sbrs	r25, 3
    2692:	81 91       	ld	r24, Z+
    2694:	7f 01       	movw	r14, r30
    2696:	81 11       	cpse	r24, r1
    2698:	b3 cf       	rjmp	.-154    	; 0x2600 <vfprintf+0x5c>
    269a:	98 2f       	mov	r25, r24
    269c:	9f 7d       	andi	r25, 0xDF	; 223
    269e:	95 54       	subi	r25, 0x45	; 69
    26a0:	93 30       	cpi	r25, 0x03	; 3
    26a2:	28 f4       	brcc	.+10     	; 0x26ae <vfprintf+0x10a>
    26a4:	0c 5f       	subi	r16, 0xFC	; 252
    26a6:	1f 4f       	sbci	r17, 0xFF	; 255
    26a8:	9f e3       	ldi	r25, 0x3F	; 63
    26aa:	99 83       	std	Y+1, r25	; 0x01
    26ac:	0d c0       	rjmp	.+26     	; 0x26c8 <vfprintf+0x124>
    26ae:	83 36       	cpi	r24, 0x63	; 99
    26b0:	31 f0       	breq	.+12     	; 0x26be <vfprintf+0x11a>
    26b2:	83 37       	cpi	r24, 0x73	; 115
    26b4:	71 f0       	breq	.+28     	; 0x26d2 <vfprintf+0x12e>
    26b6:	83 35       	cpi	r24, 0x53	; 83
    26b8:	09 f0       	breq	.+2      	; 0x26bc <vfprintf+0x118>
    26ba:	59 c0       	rjmp	.+178    	; 0x276e <vfprintf+0x1ca>
    26bc:	21 c0       	rjmp	.+66     	; 0x2700 <vfprintf+0x15c>
    26be:	f8 01       	movw	r30, r16
    26c0:	80 81       	ld	r24, Z
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	0e 5f       	subi	r16, 0xFE	; 254
    26c6:	1f 4f       	sbci	r17, 0xFF	; 255
    26c8:	88 24       	eor	r8, r8
    26ca:	83 94       	inc	r8
    26cc:	91 2c       	mov	r9, r1
    26ce:	53 01       	movw	r10, r6
    26d0:	13 c0       	rjmp	.+38     	; 0x26f8 <vfprintf+0x154>
    26d2:	28 01       	movw	r4, r16
    26d4:	f2 e0       	ldi	r31, 0x02	; 2
    26d6:	4f 0e       	add	r4, r31
    26d8:	51 1c       	adc	r5, r1
    26da:	f8 01       	movw	r30, r16
    26dc:	a0 80       	ld	r10, Z
    26de:	b1 80       	ldd	r11, Z+1	; 0x01
    26e0:	36 fe       	sbrs	r3, 6
    26e2:	03 c0       	rjmp	.+6      	; 0x26ea <vfprintf+0x146>
    26e4:	69 2d       	mov	r22, r9
    26e6:	70 e0       	ldi	r23, 0x00	; 0
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <vfprintf+0x14a>
    26ea:	6f ef       	ldi	r22, 0xFF	; 255
    26ec:	7f ef       	ldi	r23, 0xFF	; 255
    26ee:	c5 01       	movw	r24, r10
    26f0:	0e 94 be 14 	call	0x297c	; 0x297c <strnlen>
    26f4:	4c 01       	movw	r8, r24
    26f6:	82 01       	movw	r16, r4
    26f8:	f3 2d       	mov	r31, r3
    26fa:	ff 77       	andi	r31, 0x7F	; 127
    26fc:	3f 2e       	mov	r3, r31
    26fe:	16 c0       	rjmp	.+44     	; 0x272c <vfprintf+0x188>
    2700:	28 01       	movw	r4, r16
    2702:	22 e0       	ldi	r18, 0x02	; 2
    2704:	42 0e       	add	r4, r18
    2706:	51 1c       	adc	r5, r1
    2708:	f8 01       	movw	r30, r16
    270a:	a0 80       	ld	r10, Z
    270c:	b1 80       	ldd	r11, Z+1	; 0x01
    270e:	36 fe       	sbrs	r3, 6
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <vfprintf+0x174>
    2712:	69 2d       	mov	r22, r9
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	02 c0       	rjmp	.+4      	; 0x271c <vfprintf+0x178>
    2718:	6f ef       	ldi	r22, 0xFF	; 255
    271a:	7f ef       	ldi	r23, 0xFF	; 255
    271c:	c5 01       	movw	r24, r10
    271e:	0e 94 b3 14 	call	0x2966	; 0x2966 <strnlen_P>
    2722:	4c 01       	movw	r8, r24
    2724:	f3 2d       	mov	r31, r3
    2726:	f0 68       	ori	r31, 0x80	; 128
    2728:	3f 2e       	mov	r3, r31
    272a:	82 01       	movw	r16, r4
    272c:	33 fc       	sbrc	r3, 3
    272e:	1b c0       	rjmp	.+54     	; 0x2766 <vfprintf+0x1c2>
    2730:	82 2d       	mov	r24, r2
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	88 16       	cp	r8, r24
    2736:	99 06       	cpc	r9, r25
    2738:	b0 f4       	brcc	.+44     	; 0x2766 <vfprintf+0x1c2>
    273a:	b6 01       	movw	r22, r12
    273c:	80 e2       	ldi	r24, 0x20	; 32
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 c9 14 	call	0x2992	; 0x2992 <fputc>
    2744:	2a 94       	dec	r2
    2746:	f4 cf       	rjmp	.-24     	; 0x2730 <vfprintf+0x18c>
    2748:	f5 01       	movw	r30, r10
    274a:	37 fc       	sbrc	r3, 7
    274c:	85 91       	lpm	r24, Z+
    274e:	37 fe       	sbrs	r3, 7
    2750:	81 91       	ld	r24, Z+
    2752:	5f 01       	movw	r10, r30
    2754:	b6 01       	movw	r22, r12
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 c9 14 	call	0x2992	; 0x2992 <fputc>
    275c:	21 10       	cpse	r2, r1
    275e:	2a 94       	dec	r2
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	82 1a       	sub	r8, r18
    2764:	91 08       	sbc	r9, r1
    2766:	81 14       	cp	r8, r1
    2768:	91 04       	cpc	r9, r1
    276a:	71 f7       	brne	.-36     	; 0x2748 <vfprintf+0x1a4>
    276c:	e8 c0       	rjmp	.+464    	; 0x293e <vfprintf+0x39a>
    276e:	84 36       	cpi	r24, 0x64	; 100
    2770:	11 f0       	breq	.+4      	; 0x2776 <vfprintf+0x1d2>
    2772:	89 36       	cpi	r24, 0x69	; 105
    2774:	41 f5       	brne	.+80     	; 0x27c6 <vfprintf+0x222>
    2776:	f8 01       	movw	r30, r16
    2778:	37 fe       	sbrs	r3, 7
    277a:	07 c0       	rjmp	.+14     	; 0x278a <vfprintf+0x1e6>
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	0c 5f       	subi	r16, 0xFC	; 252
    2786:	1f 4f       	sbci	r17, 0xFF	; 255
    2788:	08 c0       	rjmp	.+16     	; 0x279a <vfprintf+0x1f6>
    278a:	60 81       	ld	r22, Z
    278c:	71 81       	ldd	r23, Z+1	; 0x01
    278e:	07 2e       	mov	r0, r23
    2790:	00 0c       	add	r0, r0
    2792:	88 0b       	sbc	r24, r24
    2794:	99 0b       	sbc	r25, r25
    2796:	0e 5f       	subi	r16, 0xFE	; 254
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	f3 2d       	mov	r31, r3
    279c:	ff 76       	andi	r31, 0x6F	; 111
    279e:	3f 2e       	mov	r3, r31
    27a0:	97 ff       	sbrs	r25, 7
    27a2:	09 c0       	rjmp	.+18     	; 0x27b6 <vfprintf+0x212>
    27a4:	90 95       	com	r25
    27a6:	80 95       	com	r24
    27a8:	70 95       	com	r23
    27aa:	61 95       	neg	r22
    27ac:	7f 4f       	sbci	r23, 0xFF	; 255
    27ae:	8f 4f       	sbci	r24, 0xFF	; 255
    27b0:	9f 4f       	sbci	r25, 0xFF	; 255
    27b2:	f0 68       	ori	r31, 0x80	; 128
    27b4:	3f 2e       	mov	r3, r31
    27b6:	2a e0       	ldi	r18, 0x0A	; 10
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	a3 01       	movw	r20, r6
    27bc:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__ultoa_invert>
    27c0:	88 2e       	mov	r8, r24
    27c2:	86 18       	sub	r8, r6
    27c4:	45 c0       	rjmp	.+138    	; 0x2850 <vfprintf+0x2ac>
    27c6:	85 37       	cpi	r24, 0x75	; 117
    27c8:	31 f4       	brne	.+12     	; 0x27d6 <vfprintf+0x232>
    27ca:	23 2d       	mov	r18, r3
    27cc:	2f 7e       	andi	r18, 0xEF	; 239
    27ce:	b2 2e       	mov	r11, r18
    27d0:	2a e0       	ldi	r18, 0x0A	; 10
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	25 c0       	rjmp	.+74     	; 0x2820 <vfprintf+0x27c>
    27d6:	93 2d       	mov	r25, r3
    27d8:	99 7f       	andi	r25, 0xF9	; 249
    27da:	b9 2e       	mov	r11, r25
    27dc:	8f 36       	cpi	r24, 0x6F	; 111
    27de:	c1 f0       	breq	.+48     	; 0x2810 <vfprintf+0x26c>
    27e0:	18 f4       	brcc	.+6      	; 0x27e8 <vfprintf+0x244>
    27e2:	88 35       	cpi	r24, 0x58	; 88
    27e4:	79 f0       	breq	.+30     	; 0x2804 <vfprintf+0x260>
    27e6:	b5 c0       	rjmp	.+362    	; 0x2952 <vfprintf+0x3ae>
    27e8:	80 37       	cpi	r24, 0x70	; 112
    27ea:	19 f0       	breq	.+6      	; 0x27f2 <vfprintf+0x24e>
    27ec:	88 37       	cpi	r24, 0x78	; 120
    27ee:	21 f0       	breq	.+8      	; 0x27f8 <vfprintf+0x254>
    27f0:	b0 c0       	rjmp	.+352    	; 0x2952 <vfprintf+0x3ae>
    27f2:	e9 2f       	mov	r30, r25
    27f4:	e0 61       	ori	r30, 0x10	; 16
    27f6:	be 2e       	mov	r11, r30
    27f8:	b4 fe       	sbrs	r11, 4
    27fa:	0d c0       	rjmp	.+26     	; 0x2816 <vfprintf+0x272>
    27fc:	fb 2d       	mov	r31, r11
    27fe:	f4 60       	ori	r31, 0x04	; 4
    2800:	bf 2e       	mov	r11, r31
    2802:	09 c0       	rjmp	.+18     	; 0x2816 <vfprintf+0x272>
    2804:	34 fe       	sbrs	r3, 4
    2806:	0a c0       	rjmp	.+20     	; 0x281c <vfprintf+0x278>
    2808:	29 2f       	mov	r18, r25
    280a:	26 60       	ori	r18, 0x06	; 6
    280c:	b2 2e       	mov	r11, r18
    280e:	06 c0       	rjmp	.+12     	; 0x281c <vfprintf+0x278>
    2810:	28 e0       	ldi	r18, 0x08	; 8
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	05 c0       	rjmp	.+10     	; 0x2820 <vfprintf+0x27c>
    2816:	20 e1       	ldi	r18, 0x10	; 16
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <vfprintf+0x27c>
    281c:	20 e1       	ldi	r18, 0x10	; 16
    281e:	32 e0       	ldi	r19, 0x02	; 2
    2820:	f8 01       	movw	r30, r16
    2822:	b7 fe       	sbrs	r11, 7
    2824:	07 c0       	rjmp	.+14     	; 0x2834 <vfprintf+0x290>
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	0c 5f       	subi	r16, 0xFC	; 252
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	06 c0       	rjmp	.+12     	; 0x2840 <vfprintf+0x29c>
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 5f       	subi	r16, 0xFE	; 254
    283e:	1f 4f       	sbci	r17, 0xFF	; 255
    2840:	a3 01       	movw	r20, r6
    2842:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__ultoa_invert>
    2846:	88 2e       	mov	r8, r24
    2848:	86 18       	sub	r8, r6
    284a:	fb 2d       	mov	r31, r11
    284c:	ff 77       	andi	r31, 0x7F	; 127
    284e:	3f 2e       	mov	r3, r31
    2850:	36 fe       	sbrs	r3, 6
    2852:	0d c0       	rjmp	.+26     	; 0x286e <vfprintf+0x2ca>
    2854:	23 2d       	mov	r18, r3
    2856:	2e 7f       	andi	r18, 0xFE	; 254
    2858:	a2 2e       	mov	r10, r18
    285a:	89 14       	cp	r8, r9
    285c:	58 f4       	brcc	.+22     	; 0x2874 <vfprintf+0x2d0>
    285e:	34 fe       	sbrs	r3, 4
    2860:	0b c0       	rjmp	.+22     	; 0x2878 <vfprintf+0x2d4>
    2862:	32 fc       	sbrc	r3, 2
    2864:	09 c0       	rjmp	.+18     	; 0x2878 <vfprintf+0x2d4>
    2866:	83 2d       	mov	r24, r3
    2868:	8e 7e       	andi	r24, 0xEE	; 238
    286a:	a8 2e       	mov	r10, r24
    286c:	05 c0       	rjmp	.+10     	; 0x2878 <vfprintf+0x2d4>
    286e:	b8 2c       	mov	r11, r8
    2870:	a3 2c       	mov	r10, r3
    2872:	03 c0       	rjmp	.+6      	; 0x287a <vfprintf+0x2d6>
    2874:	b8 2c       	mov	r11, r8
    2876:	01 c0       	rjmp	.+2      	; 0x287a <vfprintf+0x2d6>
    2878:	b9 2c       	mov	r11, r9
    287a:	a4 fe       	sbrs	r10, 4
    287c:	0f c0       	rjmp	.+30     	; 0x289c <vfprintf+0x2f8>
    287e:	fe 01       	movw	r30, r28
    2880:	e8 0d       	add	r30, r8
    2882:	f1 1d       	adc	r31, r1
    2884:	80 81       	ld	r24, Z
    2886:	80 33       	cpi	r24, 0x30	; 48
    2888:	21 f4       	brne	.+8      	; 0x2892 <vfprintf+0x2ee>
    288a:	9a 2d       	mov	r25, r10
    288c:	99 7e       	andi	r25, 0xE9	; 233
    288e:	a9 2e       	mov	r10, r25
    2890:	09 c0       	rjmp	.+18     	; 0x28a4 <vfprintf+0x300>
    2892:	a2 fe       	sbrs	r10, 2
    2894:	06 c0       	rjmp	.+12     	; 0x28a2 <vfprintf+0x2fe>
    2896:	b3 94       	inc	r11
    2898:	b3 94       	inc	r11
    289a:	04 c0       	rjmp	.+8      	; 0x28a4 <vfprintf+0x300>
    289c:	8a 2d       	mov	r24, r10
    289e:	86 78       	andi	r24, 0x86	; 134
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <vfprintf+0x300>
    28a2:	b3 94       	inc	r11
    28a4:	a3 fc       	sbrc	r10, 3
    28a6:	11 c0       	rjmp	.+34     	; 0x28ca <vfprintf+0x326>
    28a8:	a0 fe       	sbrs	r10, 0
    28aa:	06 c0       	rjmp	.+12     	; 0x28b8 <vfprintf+0x314>
    28ac:	b2 14       	cp	r11, r2
    28ae:	88 f4       	brcc	.+34     	; 0x28d2 <vfprintf+0x32e>
    28b0:	28 0c       	add	r2, r8
    28b2:	92 2c       	mov	r9, r2
    28b4:	9b 18       	sub	r9, r11
    28b6:	0e c0       	rjmp	.+28     	; 0x28d4 <vfprintf+0x330>
    28b8:	b2 14       	cp	r11, r2
    28ba:	60 f4       	brcc	.+24     	; 0x28d4 <vfprintf+0x330>
    28bc:	b6 01       	movw	r22, r12
    28be:	80 e2       	ldi	r24, 0x20	; 32
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 c9 14 	call	0x2992	; 0x2992 <fputc>
    28c6:	b3 94       	inc	r11
    28c8:	f7 cf       	rjmp	.-18     	; 0x28b8 <vfprintf+0x314>
    28ca:	b2 14       	cp	r11, r2
    28cc:	18 f4       	brcc	.+6      	; 0x28d4 <vfprintf+0x330>
    28ce:	2b 18       	sub	r2, r11
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <vfprintf+0x332>
    28d2:	98 2c       	mov	r9, r8
    28d4:	21 2c       	mov	r2, r1
    28d6:	a4 fe       	sbrs	r10, 4
    28d8:	10 c0       	rjmp	.+32     	; 0x28fa <vfprintf+0x356>
    28da:	b6 01       	movw	r22, r12
    28dc:	80 e3       	ldi	r24, 0x30	; 48
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 c9 14 	call	0x2992	; 0x2992 <fputc>
    28e4:	a2 fe       	sbrs	r10, 2
    28e6:	17 c0       	rjmp	.+46     	; 0x2916 <vfprintf+0x372>
    28e8:	a1 fc       	sbrc	r10, 1
    28ea:	03 c0       	rjmp	.+6      	; 0x28f2 <vfprintf+0x34e>
    28ec:	88 e7       	ldi	r24, 0x78	; 120
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <vfprintf+0x352>
    28f2:	88 e5       	ldi	r24, 0x58	; 88
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	b6 01       	movw	r22, r12
    28f8:	0c c0       	rjmp	.+24     	; 0x2912 <vfprintf+0x36e>
    28fa:	8a 2d       	mov	r24, r10
    28fc:	86 78       	andi	r24, 0x86	; 134
    28fe:	59 f0       	breq	.+22     	; 0x2916 <vfprintf+0x372>
    2900:	a1 fe       	sbrs	r10, 1
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <vfprintf+0x364>
    2904:	8b e2       	ldi	r24, 0x2B	; 43
    2906:	01 c0       	rjmp	.+2      	; 0x290a <vfprintf+0x366>
    2908:	80 e2       	ldi	r24, 0x20	; 32
    290a:	a7 fc       	sbrc	r10, 7
    290c:	8d e2       	ldi	r24, 0x2D	; 45
    290e:	b6 01       	movw	r22, r12
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	0e 94 c9 14 	call	0x2992	; 0x2992 <fputc>
    2916:	89 14       	cp	r8, r9
    2918:	38 f4       	brcc	.+14     	; 0x2928 <vfprintf+0x384>
    291a:	b6 01       	movw	r22, r12
    291c:	80 e3       	ldi	r24, 0x30	; 48
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	0e 94 c9 14 	call	0x2992	; 0x2992 <fputc>
    2924:	9a 94       	dec	r9
    2926:	f7 cf       	rjmp	.-18     	; 0x2916 <vfprintf+0x372>
    2928:	8a 94       	dec	r8
    292a:	f3 01       	movw	r30, r6
    292c:	e8 0d       	add	r30, r8
    292e:	f1 1d       	adc	r31, r1
    2930:	80 81       	ld	r24, Z
    2932:	b6 01       	movw	r22, r12
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	0e 94 c9 14 	call	0x2992	; 0x2992 <fputc>
    293a:	81 10       	cpse	r8, r1
    293c:	f5 cf       	rjmp	.-22     	; 0x2928 <vfprintf+0x384>
    293e:	22 20       	and	r2, r2
    2940:	09 f4       	brne	.+2      	; 0x2944 <vfprintf+0x3a0>
    2942:	42 ce       	rjmp	.-892    	; 0x25c8 <vfprintf+0x24>
    2944:	b6 01       	movw	r22, r12
    2946:	80 e2       	ldi	r24, 0x20	; 32
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	0e 94 c9 14 	call	0x2992	; 0x2992 <fputc>
    294e:	2a 94       	dec	r2
    2950:	f6 cf       	rjmp	.-20     	; 0x293e <vfprintf+0x39a>
    2952:	f6 01       	movw	r30, r12
    2954:	86 81       	ldd	r24, Z+6	; 0x06
    2956:	97 81       	ldd	r25, Z+7	; 0x07
    2958:	02 c0       	rjmp	.+4      	; 0x295e <vfprintf+0x3ba>
    295a:	8f ef       	ldi	r24, 0xFF	; 255
    295c:	9f ef       	ldi	r25, 0xFF	; 255
    295e:	2b 96       	adiw	r28, 0x0b	; 11
    2960:	e2 e1       	ldi	r30, 0x12	; 18
    2962:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__epilogue_restores__>

00002966 <strnlen_P>:
    2966:	fc 01       	movw	r30, r24
    2968:	05 90       	lpm	r0, Z+
    296a:	61 50       	subi	r22, 0x01	; 1
    296c:	70 40       	sbci	r23, 0x00	; 0
    296e:	01 10       	cpse	r0, r1
    2970:	d8 f7       	brcc	.-10     	; 0x2968 <strnlen_P+0x2>
    2972:	80 95       	com	r24
    2974:	90 95       	com	r25
    2976:	8e 0f       	add	r24, r30
    2978:	9f 1f       	adc	r25, r31
    297a:	08 95       	ret

0000297c <strnlen>:
    297c:	fc 01       	movw	r30, r24
    297e:	61 50       	subi	r22, 0x01	; 1
    2980:	70 40       	sbci	r23, 0x00	; 0
    2982:	01 90       	ld	r0, Z+
    2984:	01 10       	cpse	r0, r1
    2986:	d8 f7       	brcc	.-10     	; 0x297e <strnlen+0x2>
    2988:	80 95       	com	r24
    298a:	90 95       	com	r25
    298c:	8e 0f       	add	r24, r30
    298e:	9f 1f       	adc	r25, r31
    2990:	08 95       	ret

00002992 <fputc>:
    2992:	0f 93       	push	r16
    2994:	1f 93       	push	r17
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	fb 01       	movw	r30, r22
    299c:	23 81       	ldd	r18, Z+3	; 0x03
    299e:	21 fd       	sbrc	r18, 1
    29a0:	03 c0       	rjmp	.+6      	; 0x29a8 <fputc+0x16>
    29a2:	8f ef       	ldi	r24, 0xFF	; 255
    29a4:	9f ef       	ldi	r25, 0xFF	; 255
    29a6:	2c c0       	rjmp	.+88     	; 0x2a00 <fputc+0x6e>
    29a8:	22 ff       	sbrs	r18, 2
    29aa:	16 c0       	rjmp	.+44     	; 0x29d8 <fputc+0x46>
    29ac:	46 81       	ldd	r20, Z+6	; 0x06
    29ae:	57 81       	ldd	r21, Z+7	; 0x07
    29b0:	24 81       	ldd	r18, Z+4	; 0x04
    29b2:	35 81       	ldd	r19, Z+5	; 0x05
    29b4:	42 17       	cp	r20, r18
    29b6:	53 07       	cpc	r21, r19
    29b8:	44 f4       	brge	.+16     	; 0x29ca <fputc+0x38>
    29ba:	a0 81       	ld	r26, Z
    29bc:	b1 81       	ldd	r27, Z+1	; 0x01
    29be:	9d 01       	movw	r18, r26
    29c0:	2f 5f       	subi	r18, 0xFF	; 255
    29c2:	3f 4f       	sbci	r19, 0xFF	; 255
    29c4:	31 83       	std	Z+1, r19	; 0x01
    29c6:	20 83       	st	Z, r18
    29c8:	8c 93       	st	X, r24
    29ca:	26 81       	ldd	r18, Z+6	; 0x06
    29cc:	37 81       	ldd	r19, Z+7	; 0x07
    29ce:	2f 5f       	subi	r18, 0xFF	; 255
    29d0:	3f 4f       	sbci	r19, 0xFF	; 255
    29d2:	37 83       	std	Z+7, r19	; 0x07
    29d4:	26 83       	std	Z+6, r18	; 0x06
    29d6:	14 c0       	rjmp	.+40     	; 0x2a00 <fputc+0x6e>
    29d8:	8b 01       	movw	r16, r22
    29da:	ec 01       	movw	r28, r24
    29dc:	fb 01       	movw	r30, r22
    29de:	00 84       	ldd	r0, Z+8	; 0x08
    29e0:	f1 85       	ldd	r31, Z+9	; 0x09
    29e2:	e0 2d       	mov	r30, r0
    29e4:	09 95       	icall
    29e6:	89 2b       	or	r24, r25
    29e8:	e1 f6       	brne	.-72     	; 0x29a2 <fputc+0x10>
    29ea:	d8 01       	movw	r26, r16
    29ec:	16 96       	adiw	r26, 0x06	; 6
    29ee:	8d 91       	ld	r24, X+
    29f0:	9c 91       	ld	r25, X
    29f2:	17 97       	sbiw	r26, 0x07	; 7
    29f4:	01 96       	adiw	r24, 0x01	; 1
    29f6:	17 96       	adiw	r26, 0x07	; 7
    29f8:	9c 93       	st	X, r25
    29fa:	8e 93       	st	-X, r24
    29fc:	16 97       	sbiw	r26, 0x06	; 6
    29fe:	ce 01       	movw	r24, r28
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	08 95       	ret

00002a0a <__ultoa_invert>:
    2a0a:	fa 01       	movw	r30, r20
    2a0c:	aa 27       	eor	r26, r26
    2a0e:	28 30       	cpi	r18, 0x08	; 8
    2a10:	51 f1       	breq	.+84     	; 0x2a66 <__ultoa_invert+0x5c>
    2a12:	20 31       	cpi	r18, 0x10	; 16
    2a14:	81 f1       	breq	.+96     	; 0x2a76 <__ultoa_invert+0x6c>
    2a16:	e8 94       	clt
    2a18:	6f 93       	push	r22
    2a1a:	6e 7f       	andi	r22, 0xFE	; 254
    2a1c:	6e 5f       	subi	r22, 0xFE	; 254
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a20:	8f 4f       	sbci	r24, 0xFF	; 255
    2a22:	9f 4f       	sbci	r25, 0xFF	; 255
    2a24:	af 4f       	sbci	r26, 0xFF	; 255
    2a26:	b1 e0       	ldi	r27, 0x01	; 1
    2a28:	3e d0       	rcall	.+124    	; 0x2aa6 <__ultoa_invert+0x9c>
    2a2a:	b4 e0       	ldi	r27, 0x04	; 4
    2a2c:	3c d0       	rcall	.+120    	; 0x2aa6 <__ultoa_invert+0x9c>
    2a2e:	67 0f       	add	r22, r23
    2a30:	78 1f       	adc	r23, r24
    2a32:	89 1f       	adc	r24, r25
    2a34:	9a 1f       	adc	r25, r26
    2a36:	a1 1d       	adc	r26, r1
    2a38:	68 0f       	add	r22, r24
    2a3a:	79 1f       	adc	r23, r25
    2a3c:	8a 1f       	adc	r24, r26
    2a3e:	91 1d       	adc	r25, r1
    2a40:	a1 1d       	adc	r26, r1
    2a42:	6a 0f       	add	r22, r26
    2a44:	71 1d       	adc	r23, r1
    2a46:	81 1d       	adc	r24, r1
    2a48:	91 1d       	adc	r25, r1
    2a4a:	a1 1d       	adc	r26, r1
    2a4c:	20 d0       	rcall	.+64     	; 0x2a8e <__ultoa_invert+0x84>
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <__ultoa_invert+0x48>
    2a50:	68 94       	set
    2a52:	3f 91       	pop	r19
    2a54:	2a e0       	ldi	r18, 0x0A	; 10
    2a56:	26 9f       	mul	r18, r22
    2a58:	11 24       	eor	r1, r1
    2a5a:	30 19       	sub	r19, r0
    2a5c:	30 5d       	subi	r19, 0xD0	; 208
    2a5e:	31 93       	st	Z+, r19
    2a60:	de f6       	brtc	.-74     	; 0x2a18 <__ultoa_invert+0xe>
    2a62:	cf 01       	movw	r24, r30
    2a64:	08 95       	ret
    2a66:	46 2f       	mov	r20, r22
    2a68:	47 70       	andi	r20, 0x07	; 7
    2a6a:	40 5d       	subi	r20, 0xD0	; 208
    2a6c:	41 93       	st	Z+, r20
    2a6e:	b3 e0       	ldi	r27, 0x03	; 3
    2a70:	0f d0       	rcall	.+30     	; 0x2a90 <__ultoa_invert+0x86>
    2a72:	c9 f7       	brne	.-14     	; 0x2a66 <__ultoa_invert+0x5c>
    2a74:	f6 cf       	rjmp	.-20     	; 0x2a62 <__ultoa_invert+0x58>
    2a76:	46 2f       	mov	r20, r22
    2a78:	4f 70       	andi	r20, 0x0F	; 15
    2a7a:	40 5d       	subi	r20, 0xD0	; 208
    2a7c:	4a 33       	cpi	r20, 0x3A	; 58
    2a7e:	18 f0       	brcs	.+6      	; 0x2a86 <__ultoa_invert+0x7c>
    2a80:	49 5d       	subi	r20, 0xD9	; 217
    2a82:	31 fd       	sbrc	r19, 1
    2a84:	40 52       	subi	r20, 0x20	; 32
    2a86:	41 93       	st	Z+, r20
    2a88:	02 d0       	rcall	.+4      	; 0x2a8e <__ultoa_invert+0x84>
    2a8a:	a9 f7       	brne	.-22     	; 0x2a76 <__ultoa_invert+0x6c>
    2a8c:	ea cf       	rjmp	.-44     	; 0x2a62 <__ultoa_invert+0x58>
    2a8e:	b4 e0       	ldi	r27, 0x04	; 4
    2a90:	a6 95       	lsr	r26
    2a92:	97 95       	ror	r25
    2a94:	87 95       	ror	r24
    2a96:	77 95       	ror	r23
    2a98:	67 95       	ror	r22
    2a9a:	ba 95       	dec	r27
    2a9c:	c9 f7       	brne	.-14     	; 0x2a90 <__ultoa_invert+0x86>
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	61 05       	cpc	r22, r1
    2aa2:	71 05       	cpc	r23, r1
    2aa4:	08 95       	ret
    2aa6:	9b 01       	movw	r18, r22
    2aa8:	ac 01       	movw	r20, r24
    2aaa:	0a 2e       	mov	r0, r26
    2aac:	06 94       	lsr	r0
    2aae:	57 95       	ror	r21
    2ab0:	47 95       	ror	r20
    2ab2:	37 95       	ror	r19
    2ab4:	27 95       	ror	r18
    2ab6:	ba 95       	dec	r27
    2ab8:	c9 f7       	brne	.-14     	; 0x2aac <__ultoa_invert+0xa2>
    2aba:	62 0f       	add	r22, r18
    2abc:	73 1f       	adc	r23, r19
    2abe:	84 1f       	adc	r24, r20
    2ac0:	95 1f       	adc	r25, r21
    2ac2:	a0 1d       	adc	r26, r0
    2ac4:	08 95       	ret

00002ac6 <eeprom_read_byte>:
    2ac6:	f9 99       	sbic	0x1f, 1	; 31
    2ac8:	fe cf       	rjmp	.-4      	; 0x2ac6 <eeprom_read_byte>
    2aca:	92 bd       	out	0x22, r25	; 34
    2acc:	81 bd       	out	0x21, r24	; 33
    2ace:	f8 9a       	sbi	0x1f, 0	; 31
    2ad0:	99 27       	eor	r25, r25
    2ad2:	80 b5       	in	r24, 0x20	; 32
    2ad4:	08 95       	ret

00002ad6 <eeprom_read_word>:
    2ad6:	a8 e1       	ldi	r26, 0x18	; 24
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	42 e0       	ldi	r20, 0x02	; 2
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <eeprom_read_blraw>

00002ae2 <eeprom_write_byte>:
    2ae2:	26 2f       	mov	r18, r22

00002ae4 <eeprom_write_r18>:
    2ae4:	f9 99       	sbic	0x1f, 1	; 31
    2ae6:	fe cf       	rjmp	.-4      	; 0x2ae4 <eeprom_write_r18>
    2ae8:	1f ba       	out	0x1f, r1	; 31
    2aea:	92 bd       	out	0x22, r25	; 34
    2aec:	81 bd       	out	0x21, r24	; 33
    2aee:	20 bd       	out	0x20, r18	; 32
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	fa 9a       	sbi	0x1f, 2	; 31
    2af6:	f9 9a       	sbi	0x1f, 1	; 31
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	08 95       	ret

00002afe <eeprom_write_word>:
    2afe:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <eeprom_write_byte>
    2b02:	27 2f       	mov	r18, r23
    2b04:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <eeprom_write_r18>

00002b08 <eeprom_read_block>:
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22

00002b0c <eeprom_read_blraw>:
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	f9 99       	sbic	0x1f, 1	; 31
    2b10:	fe cf       	rjmp	.-4      	; 0x2b0e <eeprom_read_blraw+0x2>
    2b12:	06 c0       	rjmp	.+12     	; 0x2b20 <eeprom_read_blraw+0x14>
    2b14:	f2 bd       	out	0x22, r31	; 34
    2b16:	e1 bd       	out	0x21, r30	; 33
    2b18:	f8 9a       	sbi	0x1f, 0	; 31
    2b1a:	31 96       	adiw	r30, 0x01	; 1
    2b1c:	00 b4       	in	r0, 0x20	; 32
    2b1e:	0d 92       	st	X+, r0
    2b20:	41 50       	subi	r20, 0x01	; 1
    2b22:	50 40       	sbci	r21, 0x00	; 0
    2b24:	b8 f7       	brcc	.-18     	; 0x2b14 <eeprom_read_blraw+0x8>
    2b26:	08 95       	ret

00002b28 <__prologue_saves__>:
    2b28:	2f 92       	push	r2
    2b2a:	3f 92       	push	r3
    2b2c:	4f 92       	push	r4
    2b2e:	5f 92       	push	r5
    2b30:	6f 92       	push	r6
    2b32:	7f 92       	push	r7
    2b34:	8f 92       	push	r8
    2b36:	9f 92       	push	r9
    2b38:	af 92       	push	r10
    2b3a:	bf 92       	push	r11
    2b3c:	cf 92       	push	r12
    2b3e:	df 92       	push	r13
    2b40:	ef 92       	push	r14
    2b42:	ff 92       	push	r15
    2b44:	0f 93       	push	r16
    2b46:	1f 93       	push	r17
    2b48:	cf 93       	push	r28
    2b4a:	df 93       	push	r29
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	ca 1b       	sub	r28, r26
    2b52:	db 0b       	sbc	r29, r27
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	09 94       	ijmp

00002b60 <__epilogue_restores__>:
    2b60:	2a 88       	ldd	r2, Y+18	; 0x12
    2b62:	39 88       	ldd	r3, Y+17	; 0x11
    2b64:	48 88       	ldd	r4, Y+16	; 0x10
    2b66:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b68:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b70:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b72:	b9 84       	ldd	r11, Y+9	; 0x09
    2b74:	c8 84       	ldd	r12, Y+8	; 0x08
    2b76:	df 80       	ldd	r13, Y+7	; 0x07
    2b78:	ee 80       	ldd	r14, Y+6	; 0x06
    2b7a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b7c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b7e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b80:	aa 81       	ldd	r26, Y+2	; 0x02
    2b82:	b9 81       	ldd	r27, Y+1	; 0x01
    2b84:	ce 0f       	add	r28, r30
    2b86:	d1 1d       	adc	r29, r1
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	ed 01       	movw	r28, r26
    2b94:	08 95       	ret

00002b96 <__do_global_dtors>:
    2b96:	10 e0       	ldi	r17, 0x00	; 0
    2b98:	ca e3       	ldi	r28, 0x3A	; 58
    2b9a:	d0 e0       	ldi	r29, 0x00	; 0
    2b9c:	04 c0       	rjmp	.+8      	; 0x2ba6 <__do_global_dtors+0x10>
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	0e 94 2d 11 	call	0x225a	; 0x225a <__tablejump2__>
    2ba4:	21 96       	adiw	r28, 0x01	; 1
    2ba6:	cb 33       	cpi	r28, 0x3B	; 59
    2ba8:	d1 07       	cpc	r29, r17
    2baa:	c9 f7       	brne	.-14     	; 0x2b9e <__do_global_dtors+0x8>
    2bac:	f8 94       	cli

00002bae <__stop_program>:
    2bae:	ff cf       	rjmp	.-2      	; 0x2bae <__stop_program>
