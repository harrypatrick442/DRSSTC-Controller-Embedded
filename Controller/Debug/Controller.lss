
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  00001efc  00001fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001efc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000132  00800298  00800298  00002148  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00002148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000024  00000000  00000000  0000214c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000001e  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000430  00000000  00000000  00002230  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006180  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023d8  00000000  00000000  000087e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000020c7  00000000  00000000  0000abb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000980  00000000  00000000  0000cc80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001daf  00000000  00000000  0000d600  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002a78  00000000  00000000  0000f3af  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004a0  00000000  00000000  00011e27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__dtors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_14>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_18>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	e2 04       	cpc	r14, r2
      6a:	68 05       	cpc	r22, r8
      6c:	c6 05       	cpc	r28, r6
      6e:	df 0a       	sbc	r13, r31

00000070 <__ctors_end>:
      70:	d7 05       	cpc	r29, r7

00000072 <__dtors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf ef       	ldi	r28, 0xFF	; 255
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	12 e0       	ldi	r17, 0x02	; 2
      80:	a0 e0       	ldi	r26, 0x00	; 0
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	ec ef       	ldi	r30, 0xFC	; 252
      86:	fe e1       	ldi	r31, 0x1E	; 30
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a8 39       	cpi	r26, 0x98	; 152
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	23 e0       	ldi	r18, 0x03	; 3
      96:	a8 e9       	ldi	r26, 0x98	; 152
      98:	b2 e0       	ldi	r27, 0x02	; 2
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	aa 3c       	cpi	r26, 0xCA	; 202
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>

000000a4 <__do_global_ctors>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	c8 e3       	ldi	r28, 0x38	; 56
      a8:	d0 e0       	ldi	r29, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_global_ctors+0x10>
      ac:	21 97       	sbiw	r28, 0x01	; 1
      ae:	fe 01       	movw	r30, r28
      b0:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__tablejump2__>
      b4:	c4 33       	cpi	r28, 0x34	; 52
      b6:	d1 07       	cpc	r29, r17
      b8:	c9 f7       	brne	.-14     	; 0xac <__do_global_ctors+0x8>
      ba:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
      be:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__do_global_dtors>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <i2c_delay_T2>:
	...
nop
nop
nop
nop
nop
nop
     10a:	00 00       	nop
	ret          ; 3   "
     10c:	08 95       	ret

0000010e <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     10e:	3d 98       	cbi	0x07, 5	; 7
	cbi SCL_DDR,SCL		;release SCL
     110:	3c 98       	cbi	0x07, 4	; 7
	cbi SDA_OUT,SDA
     112:	45 98       	cbi	0x08, 5	; 8
	cbi SCL_OUT,SCL
     114:	44 98       	cbi	0x08, 4	; 8
	ret
     116:	08 95       	ret

00000118 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     118:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     11a:	d5 df       	rcall	.-86     	; 0xc6 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     11c:	1d d0       	rcall	.+58     	; 0x158 <i2c_write>
	ret
     11e:	08 95       	ret

00000120 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     120:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     122:	d1 df       	rcall	.-94     	; 0xc6 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     124:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     126:	cf df       	rcall	.-98     	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     128:	3c 98       	cbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     12a:	cd df       	rcall	.-102    	; 0xc6 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     12c:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay	T/2
     12e:	cb df       	rcall	.-106    	; 0xc6 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     130:	13 d0       	rcall	.+38     	; 0x158 <i2c_write>
	ret
     132:	08 95       	ret

00000134 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     134:	08 2e       	mov	r0, r24

00000136 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     136:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     138:	c6 df       	rcall	.-116    	; 0xc6 <i2c_delay_T2>
	mov	r24,__tmp_reg__
     13a:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     13c:	0d d0       	rcall	.+26     	; 0x158 <i2c_write>
	tst	r24		;if device not busy -> done
     13e:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     140:	11 f0       	breq	.+4      	; 0x146 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     142:	02 d0       	rcall	.+4      	; 0x148 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     144:	f8 cf       	rjmp	.-16     	; 0x136 <i2c_start_wait1>

00000146 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     146:	08 95       	ret

00000148 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     148:	3c 9a       	sbi	0x07, 4	; 7
	sbi	SDA_DDR,SDA	;force SDA low
     14a:	3d 9a       	sbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     14c:	bc df       	rcall	.-136    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     14e:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     150:	ba df       	rcall	.-140    	; 0xc6 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     152:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     154:	b8 df       	rcall	.-144    	; 0xc6 <i2c_delay_T2>
	ret
     156:	08 95       	ret

00000158 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     158:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     15a:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     15c:	01 c0       	rjmp	.+2      	; 0x160 <i2c_write_first>

0000015e <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     15e:	88 0f       	add	r24, r24

00000160 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     160:	59 f0       	breq	.+22     	; 0x178 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     162:	3c 9a       	sbi	0x07, 4	; 7
	brcc	i2c_write_low
     164:	18 f4       	brcc	.+6      	; 0x16c <i2c_write_low>
	nop
     166:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     168:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16a:	02 c0       	rjmp	.+4      	; 0x170 <i2c_write_high>

0000016c <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     16c:	3d 9a       	sbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16e:	00 c0       	rjmp	.+0      	; 0x170 <i2c_write_high>

00000170 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     170:	aa df       	rcall	.-172    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     172:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     174:	a8 df       	rcall	.-176    	; 0xc6 <i2c_delay_T2>
	rjmp	i2c_write_bit
     176:	f3 cf       	rjmp	.-26     	; 0x15e <i2c_write_bit>

00000178 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     178:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA
     17a:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     17c:	a4 df       	rcall	.-184    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     17e:	3c 98       	cbi	0x07, 4	; 7

00000180 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     180:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_ack_wait
     182:	fe cf       	rjmp	.-4      	; 0x180 <i2c_ack_wait>
	
	clr	r24		;return 0
     184:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     186:	35 99       	sbic	0x06, 5	; 6
	ldi	r24,1
     188:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     18a:	9d df       	rcall	.-198    	; 0xc6 <i2c_delay_T2>
	clr	r25
     18c:	99 27       	eor	r25, r25
	ret
     18e:	08 95       	ret

00000190 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     190:	88 27       	eor	r24, r24
	rjmp	i2c_read
     192:	01 c0       	rjmp	.+2      	; 0x196 <i2c_read>

00000194 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     194:	81 e0       	ldi	r24, 0x01	; 1

00000196 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     196:	71 e0       	ldi	r23, 0x01	; 1

00000198 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     198:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     19a:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     19c:	94 df       	rcall	.-216    	; 0xc6 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     19e:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     1a0:	92 df       	rcall	.-220    	; 0xc6 <i2c_delay_T2>

000001a2 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     1a2:	34 9b       	sbis	0x06, 4	; 6
    rjmp	i2c_read_stretch
     1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <i2c_read_stretch>
    	
	clc			;clear carry flag
     1a6:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     1a8:	35 99       	sbic	0x06, 5	; 6
	sec			;  set carry flag
     1aa:	08 94       	sec
	
	rol	r23		;store bit
     1ac:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     1ae:	a0 f7       	brcc	.-24     	; 0x198 <i2c_read_bit>

000001b0 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     1b0:	3c 9a       	sbi	0x07, 4	; 7
	cpi	r24,1
     1b2:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     1b4:	11 f0       	breq	.+4      	; 0x1ba <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     1b6:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_put_ack_high
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <i2c_put_ack_high>

000001ba <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     1ba:	3d 9a       	sbi	0x07, 5	; 7

000001bc <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     1bc:	84 df       	rcall	.-248    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     1be:	3c 98       	cbi	0x07, 4	; 7

000001c0 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     1c0:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_put_ack_wait
     1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     1c4:	80 df       	rcall	.-256    	; 0xc6 <i2c_delay_T2>
	mov	r24,r23
     1c6:	87 2f       	mov	r24, r23
	clr	r25
     1c8:	99 27       	eor	r25, r25
	ret
     1ca:	08 95       	ret

000001cc <main>:
#include "Endpoint.h"
#include "Temperatures.h"
#include "i2cmaster.h"
using namespace std;
int main(void)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <main+0x6>
     1d2:	00 d0       	rcall	.+0      	; 0x1d4 <main+0x8>
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	a8 95       	wdr
     1de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1e2:	88 61       	ori	r24, 0x18	; 24
     1e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1ec:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	i2c_init();
     1ee:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_init>
	Outputs::Initialize();
     1f2:	0e 94 31 04 	call	0x862	; 0x862 <_ZN7Outputs10InitializeEv>
	//Stopwatch stopWatch = Stopwatch();
	UART& uart = UART::GetInstance();
     1f6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN4UART11GetInstanceEv>
     1fa:	3c 01       	movw	r6, r24
	Settings& settings=Settings::GetInstance();
     1fc:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN8Settings11GetInstanceEv>
     200:	8c 01       	movw	r16, r24
	LM75* lm75_7= new LM75(0x07, "lm75_7");
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 6f 05 	call	0xade	; 0xade <_Znwj>
     20a:	4c 01       	movw	r8, r24
     20c:	46 e0       	ldi	r20, 0x06	; 6
     20e:	51 e0       	ldi	r21, 0x01	; 1
     210:	67 e0       	ldi	r22, 0x07	; 7
     212:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN4LM75C1EcPc>
	LM75* lm75_6= new LM75(0x06, "lm75_6");
     216:	8c e0       	ldi	r24, 0x0C	; 12
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 6f 05 	call	0xade	; 0xade <_Znwj>
     21e:	5c 01       	movw	r10, r24
     220:	4d e0       	ldi	r20, 0x0D	; 13
     222:	51 e0       	ldi	r21, 0x01	; 1
     224:	66 e0       	ldi	r22, 0x06	; 6
     226:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN4LM75C1EcPc>
	IGetTemperatureInfo* lm75s[] = {lm75_7, lm75_6};
     22a:	9a 82       	std	Y+2, r9	; 0x02
     22c:	89 82       	std	Y+1, r8	; 0x01
     22e:	bc 82       	std	Y+4, r11	; 0x04
     230:	ab 82       	std	Y+3, r10	; 0x03
	Temperatures& temperatures=Temperatures::GetInstance();
     232:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN12Temperatures11GetInstanceEv>
     236:	5c 01       	movw	r10, r24
	temperatures.SetInterfaces(lm75s, 0x2);
     238:	42 e0       	ldi	r20, 0x02	; 2
     23a:	be 01       	movw	r22, r28
     23c:	6f 5f       	subi	r22, 0xFF	; 255
     23e:	7f 4f       	sbci	r23, 0xFF	; 255
     240:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>
	Leds::Main::SetGreen();		
     244:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4Leds4Main8SetGreenEv>
	Endpoint* endpoint = new Endpoint(&uart, &uart, &settings, &settings, &settings, &settings, &temperatures);
     248:	80 e1       	ldi	r24, 0x10	; 16
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 6f 05 	call	0xade	; 0xade <_Znwj>
     250:	4c 01       	movw	r8, r24
     252:	68 01       	movw	r12, r16
     254:	84 e0       	ldi	r24, 0x04	; 4
     256:	c8 0e       	add	r12, r24
     258:	d1 1c       	adc	r13, r1
     25a:	78 01       	movw	r14, r16
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	e8 0e       	add	r14, r24
     260:	f1 1c       	adc	r15, r1
     262:	98 01       	movw	r18, r16
     264:	2e 5f       	subi	r18, 0xFE	; 254
     266:	3f 4f       	sbci	r19, 0xFF	; 255
     268:	b3 01       	movw	r22, r6
     26a:	6e 5f       	subi	r22, 0xFE	; 254
     26c:	7f 4f       	sbci	r23, 0xFF	; 255
     26e:	a3 01       	movw	r20, r6
     270:	c4 01       	movw	r24, r8
     272:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperatures>
		//if(settings.GetTemperatureMax()==101)Leds::Main::SetBlue();
		//bool success=true;
		//lm75_7->GetTemperature(success);
		//if(!success)
		//uart.Send('U');
	    endpoint->Run();
     276:	c4 01       	movw	r24, r8
     278:	0e 94 43 02 	call	0x486	; 0x486 <_ZN8Endpoint3RunEv>
     27c:	fc cf       	rjmp	.-8      	; 0x276 <main+0xaa>

0000027e <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperatures>:
#include "Leds.h"
#include "Endpoint.h"
#include "UART.h"
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures){
     27e:	af 92       	push	r10
     280:	bf 92       	push	r11
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	fc 01       	movw	r30, r24
     290:	71 83       	std	Z+1, r23	; 0x01
     292:	60 83       	st	Z, r22
     294:	53 83       	std	Z+3, r21	; 0x03
     296:	42 83       	std	Z+2, r20	; 0x02
     298:	35 83       	std	Z+5, r19	; 0x05
     29a:	24 83       	std	Z+4, r18	; 0x04
     29c:	17 83       	std	Z+7, r17	; 0x07
     29e:	06 83       	std	Z+6, r16	; 0x06
     2a0:	f1 86       	std	Z+9, r15	; 0x09
     2a2:	e0 86       	std	Z+8, r14	; 0x08
     2a4:	d3 86       	std	Z+11, r13	; 0x0b
     2a6:	c2 86       	std	Z+10, r12	; 0x0a
     2a8:	b5 86       	std	Z+13, r11	; 0x0d
     2aa:	a4 86       	std	Z+12, r10	; 0x0c
	
}
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	df 90       	pop	r13
     2b6:	cf 90       	pop	r12
     2b8:	bf 90       	pop	r11
     2ba:	af 90       	pop	r10
     2bc:	08 95       	ret

000002be <_ZN8Endpoint8GetPowerEv>:
		}
		delete messages;
	}
}

void Endpoint::GetPower(){
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	6e 97       	sbiw	r28, 0x1e	; 30
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	7c 01       	movw	r14, r24
	uint16_t power = iGetPower->GetPower();
     2dc:	dc 01       	movw	r26, r24
     2de:	1a 96       	adiw	r26, 0x0a	; 10
     2e0:	8d 91       	ld	r24, X+
     2e2:	9c 91       	ld	r25, X
     2e4:	1b 97       	sbiw	r26, 0x0b	; 11
     2e6:	dc 01       	movw	r26, r24
     2e8:	ed 91       	ld	r30, X+
     2ea:	fc 91       	ld	r31, X
     2ec:	01 90       	ld	r0, Z+
     2ee:	f0 81       	ld	r31, Z
     2f0:	e0 2d       	mov	r30, r0
     2f2:	09 95       	icall
	char buf[30];
	sprintf(buf,"{\"type\":\"power\",\"power\":%04d}",power);
     2f4:	9f 93       	push	r25
     2f6:	8f 93       	push	r24
     2f8:	84 e1       	ldi	r24, 0x14	; 20
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	9f 93       	push	r25
     2fe:	8f 93       	push	r24
     300:	8e 01       	movw	r16, r28
     302:	0f 5f       	subi	r16, 0xFF	; 255
     304:	1f 4f       	sbci	r17, 0xFF	; 255
     306:	1f 93       	push	r17
     308:	0f 93       	push	r16
     30a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <sprintf>
	iSendMessage->SendMessage(buf, 29);
     30e:	f7 01       	movw	r30, r14
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	93 81       	ldd	r25, Z+3	; 0x03
     314:	dc 01       	movw	r26, r24
     316:	ed 91       	ld	r30, X+
     318:	fc 91       	ld	r31, X
     31a:	01 90       	ld	r0, Z+
     31c:	f0 81       	ld	r31, Z
     31e:	e0 2d       	mov	r30, r0
     320:	4d e1       	ldi	r20, 0x1D	; 29
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	b8 01       	movw	r22, r16
     326:	09 95       	icall
}
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	6e 96       	adiw	r28, 0x1e	; 30
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	08 95       	ret

0000034e <_ZN8Endpoint17GetTemperatureMaxEv>:
void Endpoint::GetTemperatureMax(){
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	e1 97       	sbiw	r28, 0x31	; 49
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	7c 01       	movw	r14, r24
	uint8_t temperatureMax = iGetTemperatureMax->GetTemperatureMax();
     36c:	dc 01       	movw	r26, r24
     36e:	16 96       	adiw	r26, 0x06	; 6
     370:	8d 91       	ld	r24, X+
     372:	9c 91       	ld	r25, X
     374:	17 97       	sbiw	r26, 0x07	; 7
     376:	dc 01       	movw	r26, r24
     378:	ed 91       	ld	r30, X+
     37a:	fc 91       	ld	r31, X
     37c:	01 90       	ld	r0, Z+
     37e:	f0 81       	ld	r31, Z
     380:	e0 2d       	mov	r30, r0
     382:	09 95       	icall
	char buf[49];
	sprintf(buf,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}",temperatureMax);
     384:	1f 92       	push	r1
     386:	8f 93       	push	r24
     388:	82 e3       	ldi	r24, 0x32	; 50
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	9f 93       	push	r25
     38e:	8f 93       	push	r24
     390:	8e 01       	movw	r16, r28
     392:	0f 5f       	subi	r16, 0xFF	; 255
     394:	1f 4f       	sbci	r17, 0xFF	; 255
     396:	1f 93       	push	r17
     398:	0f 93       	push	r16
     39a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <sprintf>
iSendMessage->SendMessage(buf, 48);}
     39e:	f7 01       	movw	r30, r14
     3a0:	82 81       	ldd	r24, Z+2	; 0x02
     3a2:	93 81       	ldd	r25, Z+3	; 0x03
     3a4:	dc 01       	movw	r26, r24
     3a6:	ed 91       	ld	r30, X+
     3a8:	fc 91       	ld	r31, X
     3aa:	01 90       	ld	r0, Z+
     3ac:	f0 81       	ld	r31, Z
     3ae:	e0 2d       	mov	r30, r0
     3b0:	40 e3       	ldi	r20, 0x30	; 48
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	b8 01       	movw	r22, r16
     3b6:	09 95       	icall
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	e1 96       	adiw	r28, 0x31	; 49
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <_ZN8Endpoint17GetMaxTemperatureEv>:

void Endpoint::GetMaxTemperature(){
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	ae 97       	sbiw	r28, 0x2e	; 46
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	8c 01       	movw	r16, r24
	bool successful=true;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	89 83       	std	Y+1, r24	; 0x01
	uint8_t temperature = iTemperatures->GetMaxTemperature(successful);
     400:	d8 01       	movw	r26, r16
     402:	1c 96       	adiw	r26, 0x0c	; 12
     404:	8d 91       	ld	r24, X+
     406:	9c 91       	ld	r25, X
     408:	1d 97       	sbiw	r26, 0x0d	; 13
     40a:	dc 01       	movw	r26, r24
     40c:	ed 91       	ld	r30, X+
     40e:	fc 91       	ld	r31, X
     410:	01 90       	ld	r0, Z+
     412:	f0 81       	ld	r31, Z
     414:	e0 2d       	mov	r30, r0
     416:	be 01       	movw	r22, r28
     418:	6f 5f       	subi	r22, 0xFF	; 255
     41a:	7f 4f       	sbci	r23, 0xFF	; 255
     41c:	09 95       	icall
     41e:	f8 2e       	mov	r15, r24
	if(successful){
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	88 23       	and	r24, r24
     424:	19 f1       	breq	.+70     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		Leds::Main::SetRed();
     426:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN4Leds4Main6SetRedEv>
		char buf[45];
		sprintf(buf,"{\"type\":\"max_temperature\",\"temperature\":%03d}",temperature);
     42a:	1f 92       	push	r1
     42c:	ff 92       	push	r15
     42e:	84 e6       	ldi	r24, 0x64	; 100
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	7e 01       	movw	r14, r28
     438:	b2 e0       	ldi	r27, 0x02	; 2
     43a:	eb 0e       	add	r14, r27
     43c:	f1 1c       	adc	r15, r1
     43e:	ff 92       	push	r15
     440:	ef 92       	push	r14
     442:	0e 94 56 0c 	call	0x18ac	; 0x18ac <sprintf>
     446:	f8 01       	movw	r30, r16
     448:	82 81       	ldd	r24, Z+2	; 0x02
     44a:	93 81       	ldd	r25, Z+3	; 0x03
     44c:	dc 01       	movw	r26, r24
     44e:	ed 91       	ld	r30, X+
     450:	fc 91       	ld	r31, X
     452:	01 90       	ld	r0, Z+
     454:	f0 81       	ld	r31, Z
     456:	e0 2d       	mov	r30, r0
     458:	4c e2       	ldi	r20, 0x2C	; 44
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	b7 01       	movw	r22, r14
     45e:	09 95       	icall
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	ae 96       	adiw	r28, 0x2e	; 46
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	08 95       	ret

00000486 <_ZN8Endpoint3RunEv>:
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures){
	
}
void Endpoint::Run(){
     486:	8f 92       	push	r8
     488:	9f 92       	push	r9
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	c0 5c       	subi	r28, 0xC0	; 192
     4a4:	d1 40       	sbci	r29, 0x01	; 1
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	6c 01       	movw	r12, r24
	Messages* messages = iGetMessages->GetMessages();
     4b2:	dc 01       	movw	r26, r24
     4b4:	8d 91       	ld	r24, X+
     4b6:	9c 91       	ld	r25, X
     4b8:	dc 01       	movw	r26, r24
     4ba:	ed 91       	ld	r30, X+
     4bc:	fc 91       	ld	r31, X
     4be:	01 90       	ld	r0, Z+
     4c0:	f0 81       	ld	r31, Z
     4c2:	e0 2d       	mov	r30, r0
     4c4:	09 95       	icall
     4c6:	7c 01       	movw	r14, r24
	if(messages!=NULL){
     4c8:	00 97       	sbiw	r24, 0x00	; 0
     4ca:	09 f4       	brne	.+2      	; 0x4ce <_ZN8Endpoint3RunEv+0x48>
     4cc:	e2 c0       	rjmp	.+452    	; 0x692 <_ZN8Endpoint3RunEv+0x20c>
		if(messages->length>0)
     4ce:	fc 01       	movw	r30, r24
     4d0:	82 81       	ldd	r24, Z+2	; 0x02
     4d2:	93 81       	ldd	r25, Z+3	; 0x03
     4d4:	18 16       	cp	r1, r24
     4d6:	19 06       	cpc	r1, r25
     4d8:	0c f0       	brlt	.+2      	; 0x4dc <_ZN8Endpoint3RunEv+0x56>
     4da:	d5 c0       	rjmp	.+426    	; 0x686 <_ZN8Endpoint3RunEv+0x200>
		{
			Leds::Main::SetBlue();
     4dc:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN4Leds4Main7SetBlueEv>
			for(int i=0; i<messages->length; i++){
     4e0:	d7 01       	movw	r26, r14
     4e2:	12 96       	adiw	r26, 0x02	; 2
     4e4:	8d 91       	ld	r24, X+
     4e6:	9c 91       	ld	r25, X
     4e8:	13 97       	sbiw	r26, 0x03	; 3
     4ea:	18 16       	cp	r1, r24
     4ec:	19 06       	cpc	r1, r25
     4ee:	0c f0       	brlt	.+2      	; 0x4f2 <_ZN8Endpoint3RunEv+0x6c>
     4f0:	ca c0       	rjmp	.+404    	; 0x686 <_ZN8Endpoint3RunEv+0x200>
     4f2:	00 e0       	ldi	r16, 0x00	; 0
     4f4:	10 e0       	ldi	r17, 0x00	; 0
				Message* message = messages->messages[i];
     4f6:	d7 01       	movw	r26, r14
     4f8:	ed 91       	ld	r30, X+
     4fa:	fc 91       	ld	r31, X
     4fc:	c8 01       	movw	r24, r16
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	e8 0f       	add	r30, r24
     504:	f9 1f       	adc	r31, r25
     506:	01 90       	ld	r0, Z+
     508:	f0 81       	ld	r31, Z
     50a:	e0 2d       	mov	r30, r0
				json_t pool[64];
				json_t const* root = json_create( (char*)message->buffer, pool, message->length );
     50c:	42 81       	ldd	r20, Z+2	; 0x02
     50e:	53 81       	ldd	r21, Z+3	; 0x03
     510:	be 01       	movw	r22, r28
     512:	6f 5f       	subi	r22, 0xFF	; 255
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	80 81       	ld	r24, Z
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	0e 94 05 07 	call	0xe0a	; 0xe0a <json_create>
     51e:	5c 01       	movw	r10, r24
				json_t const* jObjectType = json_getProperty( root, "type" );
     520:	62 e9       	ldi	r22, 0x92	; 146
     522:	71 e0       	ldi	r23, 0x01	; 1
     524:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <json_getProperty>
				if ( jObjectType && JSON_TEXT == json_getType(  jObjectType ) ) {
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	09 f4       	brne	.+2      	; 0x52e <_ZN8Endpoint3RunEv+0xa8>
     52c:	a1 c0       	rjmp	.+322    	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
     52e:	fc 01       	movw	r30, r24
     530:	26 81       	ldd	r18, Z+6	; 0x06
     532:	22 30       	cpi	r18, 0x02	; 2
     534:	09 f0       	breq	.+2      	; 0x538 <_ZN8Endpoint3RunEv+0xb2>
     536:	9c c0       	rjmp	.+312    	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
/** Get the value of a json property.
  * The type of property cannot be JSON_OBJ or JSON_ARRAY.
  * @param json A valid handler of a json property.
  * @return Pointer to null-terminated string with the value. */
static inline char const* json_getValue( json_t const* property ) {
    return property->u.value;
     538:	84 80       	ldd	r8, Z+4	; 0x04
     53a:	95 80       	ldd	r9, Z+5	; 0x05
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
     53c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN4UART11GetInstanceEv>
     540:	f4 01       	movw	r30, r8
     542:	01 90       	ld	r0, Z+
     544:	00 20       	and	r0, r0
     546:	e9 f7       	brne	.-6      	; 0x542 <_ZN8Endpoint3RunEv+0xbc>
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	af 01       	movw	r20, r30
     54c:	48 19       	sub	r20, r8
     54e:	59 09       	sbc	r21, r9
     550:	dc 01       	movw	r26, r24
     552:	ed 91       	ld	r30, X+
     554:	fc 91       	ld	r31, X
     556:	01 90       	ld	r0, Z+
     558:	f0 81       	ld	r31, Z
     55a:	e0 2d       	mov	r30, r0
     55c:	b4 01       	movw	r22, r8
     55e:	09 95       	icall
					if(strcmp(type, "system_check")==0){
     560:	67 e9       	ldi	r22, 0x97	; 151
     562:	71 e0       	ldi	r23, 0x01	; 1
     564:	c4 01       	movw	r24, r8
     566:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
     56a:	89 2b       	or	r24, r25
     56c:	59 f4       	brne	.+22     	; 0x584 <_ZN8Endpoint3RunEv+0xfe>
						iSystemCheck->Check();
     56e:	f6 01       	movw	r30, r12
     570:	86 85       	ldd	r24, Z+14	; 0x0e
     572:	97 85       	ldd	r25, Z+15	; 0x0f
     574:	dc 01       	movw	r26, r24
     576:	ed 91       	ld	r30, X+
     578:	fc 91       	ld	r31, X
     57a:	01 90       	ld	r0, Z+
     57c:	f0 81       	ld	r31, Z
     57e:	e0 2d       	mov	r30, r0
     580:	09 95       	icall
     582:	76 c0       	rjmp	.+236    	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
						}else{
						if(strcmp(type,"run")==0){
     584:	64 ea       	ldi	r22, 0xA4	; 164
     586:	71 e0       	ldi	r23, 0x01	; 1
     588:	c4 01       	movw	r24, r8
     58a:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
     58e:	89 2b       	or	r24, r25
     590:	09 f4       	brne	.+2      	; 0x594 <_ZN8Endpoint3RunEv+0x10e>
     592:	6e c0       	rjmp	.+220    	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
							
							}else{
							if(strcmp(type,"set_temperature_max")==0){
     594:	68 ea       	ldi	r22, 0xA8	; 168
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	c4 01       	movw	r24, r8
     59a:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
     59e:	89 2b       	or	r24, r25
     5a0:	f1 f4       	brne	.+60     	; 0x5de <_ZN8Endpoint3RunEv+0x158>
								json_t const* jObjectTemperatureMax = json_getProperty( root, "temperature_max" );
     5a2:	60 ec       	ldi	r22, 0xC0	; 192
     5a4:	71 e0       	ldi	r23, 0x01	; 1
     5a6:	c5 01       	movw	r24, r10
     5a8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <json_getProperty>
								if ( jObjectTemperatureMax!=NULL && JSON_INTEGER == json_getType(  jObjectTemperatureMax ) ) {
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <_ZN8Endpoint3RunEv+0x12c>
     5b0:	5f c0       	rjmp	.+190    	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
     5b2:	fc 01       	movw	r30, r24
     5b4:	26 81       	ldd	r18, Z+6	; 0x06
     5b6:	24 30       	cpi	r18, 0x04	; 4
     5b8:	09 f0       	breq	.+2      	; 0x5bc <_ZN8Endpoint3RunEv+0x136>
     5ba:	5a c0       	rjmp	.+180    	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
    return (int64_t)atol( property->u.value );
     5bc:	84 81       	ldd	r24, Z+4	; 0x04
     5be:	95 81       	ldd	r25, Z+5	; 0x05
     5c0:	0e 94 11 0c 	call	0x1822	; 0x1822 <atol>
									int temperatureMax = json_getInteger(jObjectTemperatureMax);
									iSetTemperatureMax->SetTemperatureMax(temperatureMax);
     5c4:	d6 01       	movw	r26, r12
     5c6:	14 96       	adiw	r26, 0x04	; 4
     5c8:	8d 91       	ld	r24, X+
     5ca:	9c 91       	ld	r25, X
     5cc:	15 97       	sbiw	r26, 0x05	; 5
     5ce:	dc 01       	movw	r26, r24
     5d0:	ed 91       	ld	r30, X+
     5d2:	fc 91       	ld	r31, X
     5d4:	01 90       	ld	r0, Z+
     5d6:	f0 81       	ld	r31, Z
     5d8:	e0 2d       	mov	r30, r0
     5da:	09 95       	icall
     5dc:	49 c0       	rjmp	.+146    	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
								}
								}else{
								if(strcmp(type,"get_temperature_max")==0){
     5de:	6c eb       	ldi	r22, 0xBC	; 188
     5e0:	71 e0       	ldi	r23, 0x01	; 1
     5e2:	c4 01       	movw	r24, r8
     5e4:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
     5e8:	89 2b       	or	r24, r25
     5ea:	21 f4       	brne	.+8      	; 0x5f4 <_ZN8Endpoint3RunEv+0x16e>
									GetTemperatureMax();
     5ec:	c6 01       	movw	r24, r12
     5ee:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN8Endpoint17GetTemperatureMaxEv>
     5f2:	3e c0       	rjmp	.+124    	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
									}else{
									if(strcmp(type,"set_power"  )==0){
     5f4:	60 ed       	ldi	r22, 0xD0	; 208
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	c4 01       	movw	r24, r8
     5fa:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
     5fe:	89 2b       	or	r24, r25
     600:	d9 f4       	brne	.+54     	; 0x638 <_ZN8Endpoint3RunEv+0x1b2>
										json_t const* jObjectPower = json_getProperty( root, "power" );
     602:	6e ed       	ldi	r22, 0xDE	; 222
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	c5 01       	movw	r24, r10
     608:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <json_getProperty>
										if ( jObjectPower && JSON_INTEGER == json_getType(  jObjectPower ) ) {
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	81 f1       	breq	.+96     	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
     610:	fc 01       	movw	r30, r24
     612:	26 81       	ldd	r18, Z+6	; 0x06
     614:	24 30       	cpi	r18, 0x04	; 4
     616:	61 f5       	brne	.+88     	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
     618:	84 81       	ldd	r24, Z+4	; 0x04
     61a:	95 81       	ldd	r25, Z+5	; 0x05
     61c:	0e 94 11 0c 	call	0x1822	; 0x1822 <atol>
											int Power = json_getInteger(jObjectPower);
											iSetPower->SetPower(Power);
     620:	f6 01       	movw	r30, r12
     622:	a0 85       	ldd	r26, Z+8	; 0x08
     624:	b1 85       	ldd	r27, Z+9	; 0x09
     626:	ed 91       	ld	r30, X+
     628:	fc 91       	ld	r31, X
     62a:	11 97       	sbiw	r26, 0x01	; 1
     62c:	01 90       	ld	r0, Z+
     62e:	f0 81       	ld	r31, Z
     630:	e0 2d       	mov	r30, r0
     632:	cd 01       	movw	r24, r26
     634:	09 95       	icall
     636:	1c c0       	rjmp	.+56     	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
										}
										}else{
										if(strcmp(type,"get_power")==0){
     638:	6a ed       	ldi	r22, 0xDA	; 218
     63a:	71 e0       	ldi	r23, 0x01	; 1
     63c:	c4 01       	movw	r24, r8
     63e:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
     642:	89 2b       	or	r24, r25
     644:	21 f4       	brne	.+8      	; 0x64e <_ZN8Endpoint3RunEv+0x1c8>
											GetPower();
     646:	c6 01       	movw	r24, r12
     648:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN8Endpoint8GetPowerEv>
     64c:	11 c0       	rjmp	.+34     	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
											}else{
											if(strcmp(type,"set_info_rate")==0){
     64e:	64 ee       	ldi	r22, 0xE4	; 228
     650:	71 e0       	ldi	r23, 0x01	; 1
     652:	c4 01       	movw	r24, r8
     654:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
     658:	89 2b       	or	r24, r25
     65a:	51 f0       	breq	.+20     	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>

												}else{
												if(strcmp(type, "get_max_temperature")==0 ){
     65c:	62 ef       	ldi	r22, 0xF2	; 242
     65e:	71 e0       	ldi	r23, 0x01	; 1
     660:	c4 01       	movw	r24, r8
     662:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
     666:	89 2b       	or	r24, r25
     668:	19 f4       	brne	.+6      	; 0x670 <_ZN8Endpoint3RunEv+0x1ea>
													GetMaxTemperature();
     66a:	c6 01       	movw	r24, r12
     66c:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN8Endpoint17GetMaxTemperatureEv>
	Messages* messages = iGetMessages->GetMessages();
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetBlue();
			for(int i=0; i<messages->length; i++){
     670:	0f 5f       	subi	r16, 0xFF	; 255
     672:	1f 4f       	sbci	r17, 0xFF	; 255
     674:	d7 01       	movw	r26, r14
     676:	12 96       	adiw	r26, 0x02	; 2
     678:	8d 91       	ld	r24, X+
     67a:	9c 91       	ld	r25, X
     67c:	13 97       	sbiw	r26, 0x03	; 3
     67e:	08 17       	cp	r16, r24
     680:	19 07       	cpc	r17, r25
     682:	0c f4       	brge	.+2      	; 0x686 <_ZN8Endpoint3RunEv+0x200>
     684:	38 cf       	rjmp	.-400    	; 0x4f6 <_ZN8Endpoint3RunEv+0x70>
				
				//Document d;
				//d.Parse(message->buffer);
			}
		}
		delete messages;
     686:	c7 01       	movw	r24, r14
     688:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN8MessagesD1Ev>
     68c:	c7 01       	movw	r24, r14
     68e:	0e 94 75 05 	call	0xaea	; 0xaea <_ZdlPv>
	}
}
     692:	c0 54       	subi	r28, 0x40	; 64
     694:	de 4f       	sbci	r29, 0xFE	; 254
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	df 90       	pop	r13
     6ae:	cf 90       	pop	r12
     6b0:	bf 90       	pop	r11
     6b2:	af 90       	pop	r10
     6b4:	9f 90       	pop	r9
     6b6:	8f 90       	pop	r8
     6b8:	08 95       	ret

000006ba <_ZN4Leds4Main6SetRedEv>:
#include "Outputs.h"



void Leds::Main::SetRed(){
	Outputs::PD::_2::SetLow();
     6ba:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetLow();
     6be:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetHigh();
     6c2:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN7Outputs2PD2_47SetHighEv>
     6c6:	08 95       	ret

000006c8 <_ZN4Leds4Main8SetGreenEv>:
}
void Leds::Main::SetGreen(){
	Outputs::PD::_2::SetLow();
     6c8:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetHigh();
     6cc:	0e 94 39 04 	call	0x872	; 0x872 <_ZN7Outputs2PD2_37SetHighEv>
	Outputs::PD::_4::SetLow();
     6d0:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN7Outputs2PD2_46SetLowEv>
     6d4:	08 95       	ret

000006d6 <_ZN4Leds4Main7SetBlueEv>:
}
void Leds::Main::SetBlue(){
	Outputs::PD::_2::SetHigh();
     6d6:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN7Outputs2PD2_27SetHighEv>
	Outputs::PD::_3::SetLow();
     6da:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetLow();
     6de:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN7Outputs2PD2_46SetLowEv>
     6e2:	08 95       	ret

000006e4 <_ZN4LM757GetNameEv>:
	addressWrite =0x90|(shifted&0x0e);
	addressRead =0x91|(shifted&0x0e);
} //LM75
const char* LM75::GetName(){
	return name;
}
     6e4:	fc 01       	movw	r30, r24
     6e6:	80 85       	ldd	r24, Z+8	; 0x08
     6e8:	91 85       	ldd	r25, Z+9	; 0x09
     6ea:	08 95       	ret

000006ec <_ZN4LM7514GetTemperatureERb>:
int8_t LM75::GetTemperature(bool& successful){
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	ec 01       	movw	r28, r24
     6f8:	7b 01       	movw	r14, r22
	i2c_start_wait(addressWrite);
     6fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     6fc:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
	char r=i2c_write(TEMPERATURE_ADDRESS);
     700:	8c 81       	ldd	r24, Y+4	; 0x04
     702:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_write>
     706:	18 2f       	mov	r17, r24
	i2c_stop();
     708:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
	if(r!=0){
     70c:	11 23       	and	r17, r17
     70e:	11 f0       	breq	.+4      	; 0x714 <_ZN4LM7514GetTemperatureERb+0x28>
		successful=false;
     710:	f7 01       	movw	r30, r14
     712:	10 82       	st	Z, r1
	}

	i2c_start_wait(addressRead);
     714:	8a 85       	ldd	r24, Y+10	; 0x0a
     716:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
	char most = i2c_readAck();
     71a:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readAck>
     71e:	c8 2f       	mov	r28, r24
	char least = i2c_readAck();
     720:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readAck>
	sei();
     724:	78 94       	sei
	return static_cast<int8_t>(most);
	i2c_stop();
	return 0;
}
     726:	8c 2f       	mov	r24, r28
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	08 95       	ret

00000734 <_ZThn2_N4LM757GetNameEv>:
     734:	fc 01       	movw	r30, r24
     736:	86 81       	ldd	r24, Z+6	; 0x06
     738:	97 81       	ldd	r25, Z+7	; 0x07
     73a:	08 95       	ret

0000073c <_ZN4LM75C1EcPc>:
*/
#include "i2cmaster.h"
#include "LM75.h"
#include <avr/interrupt.h>
// default constructor
LM75::LM75(char address, char* name):name(name)
     73c:	fc 01       	movw	r30, r24
     73e:	8a e0       	ldi	r24, 0x0A	; 10
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	91 83       	std	Z+1, r25	; 0x01
     744:	80 83       	st	Z, r24
     746:	82 e1       	ldi	r24, 0x12	; 18
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	93 83       	std	Z+3, r25	; 0x03
     74c:	82 83       	std	Z+2, r24	; 0x02
     74e:	14 82       	std	Z+4, r1	; 0x04
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	85 83       	std	Z+5, r24	; 0x05
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	86 83       	std	Z+6, r24	; 0x06
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	87 83       	std	Z+7, r24	; 0x07
     75c:	51 87       	std	Z+9, r21	; 0x09
     75e:	40 87       	std	Z+8, r20	; 0x08
{
	char shifted = (address<<1);
	addressWrite =0x90|(shifted&0x0e);
     760:	66 0f       	add	r22, r22
     762:	6e 70       	andi	r22, 0x0E	; 14
     764:	86 2f       	mov	r24, r22
     766:	80 69       	ori	r24, 0x90	; 144
     768:	83 87       	std	Z+11, r24	; 0x0b
	addressRead =0x91|(shifted&0x0e);
     76a:	61 69       	ori	r22, 0x91	; 145
     76c:	62 87       	std	Z+10, r22	; 0x0a
     76e:	08 95       	ret

00000770 <_ZN7MessageC1EPKcj>:
*
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include "Message.h"
Message::Message(const char* bufferIn, unsigned int lengthIn):length(lengthIn), buffer(bufferIn){
     770:	fc 01       	movw	r30, r24
     772:	71 83       	std	Z+1, r23	; 0x01
     774:	60 83       	st	Z, r22
     776:	53 83       	std	Z+3, r21	; 0x03
     778:	42 83       	std	Z+2, r20	; 0x02
     77a:	08 95       	ret

0000077c <_ZN7MessageD1Ev>:
	
}
Message::~Message(){
	delete[] this->buffer;
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
     780:	91 81       	ldd	r25, Z+1	; 0x01
     782:	00 97       	sbiw	r24, 0x00	; 0
     784:	11 f0       	breq	.+4      	; 0x78a <_ZN7MessageD1Ev+0xe>
     786:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_ZdaPv>
     78a:	08 95       	ret

0000078c <_ZN8MessagesC1EPP7Messagec>:
*
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	ec 01       	movw	r28, r24
     798:	f6 2e       	mov	r15, r22
     79a:	07 2f       	mov	r16, r23
     79c:	14 2f       	mov	r17, r20
     79e:	84 2f       	mov	r24, r20
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	9b 83       	std	Y+3, r25	; 0x03
     7a4:	8a 83       	std	Y+2, r24	; 0x02
	messages = new Message*[lengthIn];
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	0e 94 72 05 	call	0xae4	; 0xae4 <_Znaj>
     7ae:	99 83       	std	Y+1, r25	; 0x01
     7b0:	88 83       	st	Y, r24
	for(char i=0; i<lengthIn; i++)
     7b2:	11 23       	and	r17, r17
     7b4:	b9 f0       	breq	.+46     	; 0x7e4 <_ZN8MessagesC1EPP7Messagec+0x58>
     7b6:	af 2d       	mov	r26, r15
     7b8:	b0 2f       	mov	r27, r16
     7ba:	11 50       	subi	r17, 0x01	; 1
     7bc:	21 2f       	mov	r18, r17
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	2f 5f       	subi	r18, 0xFF	; 255
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255
     7c4:	22 0f       	add	r18, r18
     7c6:	33 1f       	adc	r19, r19
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
	messages[i]= messagesIn[i];
     7cc:	4d 91       	ld	r20, X+
     7ce:	5d 91       	ld	r21, X+
     7d0:	e8 81       	ld	r30, Y
     7d2:	f9 81       	ldd	r31, Y+1	; 0x01
     7d4:	e8 0f       	add	r30, r24
     7d6:	f9 1f       	adc	r31, r25
     7d8:	51 83       	std	Z+1, r21	; 0x01
     7da:	40 83       	st	Z, r20
     7dc:	02 96       	adiw	r24, 0x02	; 2
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
	messages = new Message*[lengthIn];
	for(char i=0; i<lengthIn; i++)
     7de:	82 17       	cp	r24, r18
     7e0:	93 07       	cpc	r25, r19
     7e2:	a1 f7       	brne	.-24     	; 0x7cc <_ZN8MessagesC1EPP7Messagec+0x40>
	messages[i]= messagesIn[i];
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	08 95       	ret

000007f0 <_ZN8MessagesD1Ev>:
Messages::~Messages(){
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	7c 01       	movw	r14, r24

	for(char i=0; i<length; i++)
     7fc:	dc 01       	movw	r26, r24
     7fe:	12 96       	adiw	r26, 0x02	; 2
     800:	8d 91       	ld	r24, X+
     802:	9c 91       	ld	r25, X
     804:	13 97       	sbiw	r26, 0x03	; 3
     806:	18 16       	cp	r1, r24
     808:	19 06       	cpc	r1, r25
     80a:	f4 f4       	brge	.+60     	; 0x848 <_ZN8MessagesD1Ev+0x58>
     80c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		delete messages[i];
     80e:	ec 2f       	mov	r30, r28
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	d7 01       	movw	r26, r14
     818:	8d 91       	ld	r24, X+
     81a:	9c 91       	ld	r25, X
     81c:	e8 0f       	add	r30, r24
     81e:	f9 1f       	adc	r31, r25
     820:	00 81       	ld	r16, Z
     822:	11 81       	ldd	r17, Z+1	; 0x01
     824:	01 15       	cp	r16, r1
     826:	11 05       	cpc	r17, r1
     828:	31 f0       	breq	.+12     	; 0x836 <_ZN8MessagesD1Ev+0x46>
     82a:	c8 01       	movw	r24, r16
     82c:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN7MessageD1Ev>
     830:	c8 01       	movw	r24, r16
     832:	0e 94 75 05 	call	0xaea	; 0xaea <_ZdlPv>
	for(char i=0; i<lengthIn; i++)
	messages[i]= messagesIn[i];
}
Messages::~Messages(){

	for(char i=0; i<length; i++)
     836:	cf 5f       	subi	r28, 0xFF	; 255
     838:	2c 2f       	mov	r18, r28
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	f7 01       	movw	r30, r14
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	93 81       	ldd	r25, Z+3	; 0x03
     842:	28 17       	cp	r18, r24
     844:	39 07       	cpc	r19, r25
     846:	1c f3       	brlt	.-58     	; 0x80e <_ZN8MessagesD1Ev+0x1e>
	{
		delete messages[i];
	}
	delete[] messages;
     848:	d7 01       	movw	r26, r14
     84a:	8d 91       	ld	r24, X+
     84c:	9c 91       	ld	r25, X
     84e:	00 97       	sbiw	r24, 0x00	; 0
     850:	11 f0       	breq	.+4      	; 0x856 <_ZN8MessagesD1Ev+0x66>
     852:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_ZdaPv>
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	08 95       	ret

00000862 <_ZN7Outputs10InitializeEv>:
}
void Outputs::PB::_5::SetHigh(){
	PORTB = PORTB|0x20;
}
void Outputs::PB::_5::SetLow(){
	PORTB= PORTB&0xFB;
     862:	8a b1       	in	r24, 0x0a	; 10
     864:	8c 61       	ori	r24, 0x1C	; 28
     866:	8a b9       	out	0x0a, r24	; 10
     868:	08 95       	ret

0000086a <_ZN7Outputs2PD2_27SetHighEv>:
}
void Outputs::PD::_2::SetHigh(){
	PORTD = PORTD|0x04;
     86a:	5a 9a       	sbi	0x0b, 2	; 11
     86c:	08 95       	ret

0000086e <_ZN7Outputs2PD2_26SetLowEv>:
}
void Outputs::PD::_2::SetLow(){
	PORTD= PORTD&0xFB;
     86e:	5a 98       	cbi	0x0b, 2	; 11
     870:	08 95       	ret

00000872 <_ZN7Outputs2PD2_37SetHighEv>:
}
void Outputs::PD::_3::SetHigh(){
	PORTD = PORTD|0x08;
     872:	5b 9a       	sbi	0x0b, 3	; 11
     874:	08 95       	ret

00000876 <_ZN7Outputs2PD2_36SetLowEv>:
}
void Outputs::PD::_3::SetLow(){
	PORTD= PORTD&0xF7;
     876:	5b 98       	cbi	0x0b, 3	; 11
     878:	08 95       	ret

0000087a <_ZN7Outputs2PD2_47SetHighEv>:
}
void Outputs::PD::_4::SetHigh(){
	PORTD = PORTD|0x10;
     87a:	5c 9a       	sbi	0x0b, 4	; 11
     87c:	08 95       	ret

0000087e <_ZN7Outputs2PD2_46SetLowEv>:
}
void Outputs::PD::_4::SetLow(){
	PORTD= PORTD&0xEF;
     87e:	5c 98       	cbi	0x0b, 4	; 11
     880:	08 95       	ret

00000882 <_ZN8Settings17GetTemperatureMaxEv>:
		if(a<POWER_MIN)
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
     882:	fc 01       	movw	r30, r24
     884:	80 85       	ldd	r24, Z+8	; 0x08
     886:	08 95       	ret

00000888 <_ZN8Settings8GetPowerEv>:
	temperatureMax=a;
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
}
uint16_t Settings::GetPower(){
	return power;
}
     888:	fc 01       	movw	r30, r24
     88a:	81 85       	ldd	r24, Z+9	; 0x09
     88c:	92 85       	ldd	r25, Z+10	; 0x0a
     88e:	08 95       	ret

00000890 <_ZThn4_N8Settings8GetPowerEv>:
     890:	fc 01       	movw	r30, r24
     892:	85 81       	ldd	r24, Z+5	; 0x05
     894:	96 81       	ldd	r25, Z+6	; 0x06
     896:	08 95       	ret

00000898 <_ZN8Settings17CapTemperatureMaxERh>:
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
	CapPower(a);
	power=a;
}
void Settings::CapTemperatureMax(uint8_t& a){
	if(a>TEMPERATURE_MAX_MAX)
     898:	fb 01       	movw	r30, r22
     89a:	80 81       	ld	r24, Z
     89c:	8e 37       	cpi	r24, 0x7E	; 126
     89e:	18 f0       	brcs	.+6      	; 0x8a6 <_ZN8Settings17CapTemperatureMaxERh+0xe>
		a=TEMPERATURE_MAX_MAX;
     8a0:	8d e7       	ldi	r24, 0x7D	; 125
     8a2:	80 83       	st	Z, r24
     8a4:	08 95       	ret
	else
		if(a<TEMPERTURE_MAX_MIN)
     8a6:	88 32       	cpi	r24, 0x28	; 40
     8a8:	18 f4       	brcc	.+6      	; 0x8b0 <_ZN8Settings17CapTemperatureMaxERh+0x18>
			a=TEMPERTURE_MAX_MIN;
     8aa:	88 e2       	ldi	r24, 0x28	; 40
     8ac:	fb 01       	movw	r30, r22
     8ae:	80 83       	st	Z, r24
     8b0:	08 95       	ret

000008b2 <_ZN8Settings17SetTemperatureMaxEh>:
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
void Settings::SetTemperatureMax(uint8_t a){
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	1f 92       	push	r1
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	8c 01       	movw	r16, r24
     8c2:	69 83       	std	Y+1, r22	; 0x01
	CapTemperatureMax(a);
     8c4:	be 01       	movw	r22, r28
     8c6:	6f 5f       	subi	r22, 0xFF	; 255
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN8Settings17CapTemperatureMaxERh>
	temperatureMax=a;
     8ce:	69 81       	ldd	r22, Y+1	; 0x01
     8d0:	f8 01       	movw	r30, r16
     8d2:	60 87       	std	Z+8, r22	; 0x08
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <eeprom_write_byte>
}
     8dc:	0f 90       	pop	r0
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <_ZThn2_N8Settings17SetTemperatureMaxEh>:
     8e8:	02 97       	sbiw	r24, 0x02	; 2
     8ea:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN8Settings17SetTemperatureMaxEh>
     8ee:	08 95       	ret

000008f0 <_ZN8Settings8CapPowerERj>:
		if(a<TEMPERTURE_MAX_MIN)
			a=TEMPERTURE_MAX_MIN;
}	
void Settings::CapPower(uint16_t& a){
	
	if(a>POWER_MAX)
     8f0:	fb 01       	movw	r30, r22
     8f2:	80 81       	ld	r24, Z
     8f4:	91 81       	ldd	r25, Z+1	; 0x01
     8f6:	8d 3d       	cpi	r24, 0xDD	; 221
     8f8:	f5 e0       	ldi	r31, 0x05	; 5
     8fa:	9f 07       	cpc	r25, r31
     8fc:	30 f0       	brcs	.+12     	; 0x90a <__stack+0xb>
		a=POWER_MAX;
     8fe:	8c ed       	ldi	r24, 0xDC	; 220
     900:	95 e0       	ldi	r25, 0x05	; 5
     902:	fb 01       	movw	r30, r22
     904:	91 83       	std	Z+1, r25	; 0x01
     906:	80 83       	st	Z, r24
     908:	08 95       	ret
	else
		if(a<POWER_MIN)
     90a:	4e 97       	sbiw	r24, 0x1e	; 30
     90c:	28 f4       	brcc	.+10     	; 0x918 <__stack+0x19>
			a=POWER_MIN;
     90e:	8e e1       	ldi	r24, 0x1E	; 30
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fb 01       	movw	r30, r22
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	08 95       	ret

0000091a <_ZN8Settings10InitializeEv>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void Settings::Initialize(){
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	00 d0       	rcall	.+0      	; 0x924 <_ZN8Settings10InitializeEv+0xa>
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	8c 01       	movw	r16, r24
	temperatureMax= eeprom_read_byte(&ADDRESS_TEMPERATURE_MAX);
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <eeprom_read_byte>
     932:	f8 01       	movw	r30, r16
     934:	80 87       	std	Z+8, r24	; 0x08
	CapTemperatureMax(temperatureMax);
     936:	b8 01       	movw	r22, r16
     938:	68 5f       	subi	r22, 0xF8	; 248
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	c8 01       	movw	r24, r16
     93e:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN8Settings17CapTemperatureMaxERh>
	
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <eeprom_read_word>
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
	CapPower(a);
     94e:	be 01       	movw	r22, r28
     950:	6f 5f       	subi	r22, 0xFF	; 255
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	c8 01       	movw	r24, r16
     956:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_ZN8Settings8CapPowerERj>
	power=a;
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	f8 01       	movw	r30, r16
     960:	92 87       	std	Z+10, r25	; 0x0a
     962:	81 87       	std	Z+9, r24	; 0x09
}
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <_ZN8Settings11GetInstanceEv>:
uint8_t EEMEM  ADDRESS_TEMPERATURE_MAX;
uint16_t EEMEM  ADDRESS_POWER;
Settings Settings:: _Singleton;
Settings& Settings::GetInstance(){
	static bool initialized=false;
	if(!initialized)
     972:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
     976:	81 11       	cpse	r24, r1
     978:	07 c0       	rjmp	.+14     	; 0x988 <_ZN8Settings11GetInstanceEv+0x16>
	{
		_Singleton.Initialize();
     97a:	89 e9       	ldi	r24, 0x99	; 153
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN8Settings10InitializeEv>
		initialized=true;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
	}
	return _Singleton;
}
     988:	89 e9       	ldi	r24, 0x99	; 153
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	08 95       	ret

0000098e <_ZN8Settings8SetPowerEj>:
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
}
uint16_t Settings::GetPower(){
	return power;
}
void Settings::SetPower(uint16_t a){
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	00 d0       	rcall	.+0      	; 0x994 <_ZN8Settings8SetPowerEj+0x6>
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	7a 83       	std	Y+2, r23	; 0x02
     99a:	69 83       	std	Y+1, r22	; 0x01
	CapPower(a);
     99c:	be 01       	movw	r22, r28
     99e:	6f 5f       	subi	r22, 0xFF	; 255
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_ZN8Settings8CapPowerERj>
	eeprom_write_word(&ADDRESS_POWER, a);
     9a6:	69 81       	ldd	r22, Y+1	; 0x01
     9a8:	7a 81       	ldd	r23, Y+2	; 0x02
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <eeprom_write_word>
}
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <_ZThn6_N8Settings8SetPowerEj>:
     9bc:	06 97       	sbiw	r24, 0x06	; 6
     9be:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN8Settings8SetPowerEj>
     9c2:	08 95       	ret

000009c4 <_GLOBAL__sub_I_ADDRESS_TEMPERATURE_MAX>:
#include "ISetPower.h"
#define TEMPERATURE_MAX_MAX 125
#define TEMPERTURE_MAX_MIN 40
#define POWER_MIN 30
#define POWER_MAX 1500
class Settings:public  IGetTemperatureMax, public  ISetTemperatureMax, public  IGetPower, public  ISetPower
     9c4:	e9 e9       	ldi	r30, 0x99	; 153
     9c6:	f2 e0       	ldi	r31, 0x02	; 2
     9c8:	88 e1       	ldi	r24, 0x18	; 24
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	80 83       	st	Z, r24
     9d0:	84 e2       	ldi	r24, 0x24	; 36
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	93 83       	std	Z+3, r25	; 0x03
     9d6:	82 83       	std	Z+2, r24	; 0x02
     9d8:	8a e2       	ldi	r24, 0x2A	; 42
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	95 83       	std	Z+5, r25	; 0x05
     9de:	84 83       	std	Z+4, r24	; 0x04
     9e0:	80 e3       	ldi	r24, 0x30	; 48
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	97 83       	std	Z+7, r25	; 0x07
     9e6:	86 83       	std	Z+6, r24	; 0x06
     9e8:	87 e7       	ldi	r24, 0x77	; 119
     9ea:	80 87       	std	Z+8, r24	; 0x08
     9ec:	8a e0       	ldi	r24, 0x0A	; 10
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	92 87       	std	Z+10, r25	; 0x0a
     9f2:	81 87       	std	Z+9, r24	; 0x09
     9f4:	08 95       	ret

000009f6 <_ZN12Temperatures17GetMaxTemperatureERb>:
}
void Temperatures::SetInterfaces(IGetTemperatureInfo** iGetTemperatureInfos, unsigned char  nIGetTemperatureInfos){
	this->iGetTemperatureInfos=iGetTemperatureInfos;
	this->nIGetTemperatureInfos=nIGetTemperatureInfos;
}
void Temperatures::Initialize(){
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	dc 01       	movw	r26, r24
     a06:	14 96       	adiw	r26, 0x04	; 4
     a08:	2c 91       	ld	r18, X
     a0a:	14 97       	sbiw	r26, 0x04	; 4
     a0c:	22 23       	and	r18, r18
     a0e:	09 f4       	brne	.+2      	; 0xa12 <_ZN12Temperatures17GetMaxTemperatureERb+0x1c>
     a10:	41 c0       	rjmp	.+130    	; 0xa94 <_ZN12Temperatures17GetMaxTemperatureERb+0x9e>
     a12:	7b 01       	movw	r14, r22
     a14:	8c 01       	movw	r16, r24
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	ed 91       	ld	r30, X+
     a1a:	fc 91       	ld	r31, X
     a1c:	13 97       	sbiw	r26, 0x03	; 3
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	dc 01       	movw	r26, r24
     a24:	ed 91       	ld	r30, X+
     a26:	fc 91       	ld	r31, X
     a28:	01 90       	ld	r0, Z+
     a2a:	f0 81       	ld	r31, Z
     a2c:	e0 2d       	mov	r30, r0
     a2e:	09 95       	icall
     a30:	d8 2e       	mov	r13, r24
     a32:	f7 01       	movw	r30, r14
     a34:	80 81       	ld	r24, Z
     a36:	88 23       	and	r24, r24
     a38:	79 f1       	breq	.+94     	; 0xa98 <_ZN12Temperatures17GetMaxTemperatureERb+0xa2>
     a3a:	d8 01       	movw	r26, r16
     a3c:	14 96       	adiw	r26, 0x04	; 4
     a3e:	8c 91       	ld	r24, X
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 97       	sbiw	r24, 0x02	; 2
     a44:	5c f1       	brlt	.+86     	; 0xa9c <_ZN12Temperatures17GetMaxTemperatureERb+0xa6>
     a46:	c1 e0       	ldi	r28, 0x01	; 1
     a48:	d0 e0       	ldi	r29, 0x00	; 0
     a4a:	06 c0       	rjmp	.+12     	; 0xa58 <_ZN12Temperatures17GetMaxTemperatureERb+0x62>
     a4c:	f8 01       	movw	r30, r16
     a4e:	24 81       	ldd	r18, Z+4	; 0x04
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	c2 17       	cp	r28, r18
     a54:	d3 07       	cpc	r29, r19
     a56:	24 f5       	brge	.+72     	; 0xaa0 <_ZN12Temperatures17GetMaxTemperatureERb+0xaa>
     a58:	d8 01       	movw	r26, r16
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	ed 91       	ld	r30, X+
     a5e:	fc 91       	ld	r31, X
     a60:	13 97       	sbiw	r26, 0x03	; 3
     a62:	9e 01       	movw	r18, r28
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	e2 0f       	add	r30, r18
     a6a:	f3 1f       	adc	r31, r19
     a6c:	80 81       	ld	r24, Z
     a6e:	91 81       	ldd	r25, Z+1	; 0x01
     a70:	dc 01       	movw	r26, r24
     a72:	ed 91       	ld	r30, X+
     a74:	fc 91       	ld	r31, X
     a76:	01 90       	ld	r0, Z+
     a78:	f0 81       	ld	r31, Z
     a7a:	e0 2d       	mov	r30, r0
     a7c:	b7 01       	movw	r22, r14
     a7e:	09 95       	icall
     a80:	d8 16       	cp	r13, r24
     a82:	0c f4       	brge	.+2      	; 0xa86 <_ZN12Temperatures17GetMaxTemperatureERb+0x90>
     a84:	d8 2e       	mov	r13, r24
     a86:	21 96       	adiw	r28, 0x01	; 1
     a88:	f7 01       	movw	r30, r14
     a8a:	80 81       	ld	r24, Z
     a8c:	81 11       	cpse	r24, r1
     a8e:	de cf       	rjmp	.-68     	; 0xa4c <_ZN12Temperatures17GetMaxTemperatureERb+0x56>
     a90:	8d 2d       	mov	r24, r13
     a92:	07 c0       	rjmp	.+14     	; 0xaa2 <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
     a94:	8b e0       	ldi	r24, 0x0B	; 11
     a96:	05 c0       	rjmp	.+10     	; 0xaa2 <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
     a98:	8d 2d       	mov	r24, r13
     a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
     a9c:	8d 2d       	mov	r24, r13
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
     aa0:	8d 2d       	mov	r24, r13
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	08 95       	ret

00000ab2 <_ZN12Temperatures11GetInstanceEv>:
     ab2:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <_ZZN12Temperatures11GetInstanceEvE11initialized>
     ab6:	81 11       	cpse	r24, r1
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <_ZN12Temperatures11GetInstanceEv+0xe>
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <_ZZN12Temperatures11GetInstanceEvE11initialized>
     ac0:	85 ea       	ldi	r24, 0xA5	; 165
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	08 95       	ret

00000ac6 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>:
     ac6:	fc 01       	movw	r30, r24
     ac8:	73 83       	std	Z+3, r23	; 0x03
     aca:	62 83       	std	Z+2, r22	; 0x02
     acc:	44 83       	std	Z+4, r20	; 0x04
     ace:	08 95       	ret

00000ad0 <_GLOBAL__sub_I__ZN12Temperatures10_SingletonE>:
#ifndef __Temperatures_H__
#define __Temperatures_H__
#include "IGetTemperatureInfo.h"
#include "ITemperatures.h"

class Temperatures:
     ad0:	86 e3       	ldi	r24, 0x36	; 54
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <_ZN12Temperatures10_SingletonE+0x1>
     ad8:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <_ZN12Temperatures10_SingletonE>
     adc:	08 95       	ret

00000ade <_Znwj>:
	}
	else
	//if(std::find(tickerCallbacksSeconds.begin(), tickerCallbacksSeconds.end(), callback)==tickerCallbacksSeconds.end())
		
		if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
     ade:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <malloc>
     ae2:	08 95       	ret

00000ae4 <_Znaj>:
     ae4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <malloc>
     ae8:	08 95       	ret

00000aea <_ZdlPv>:
     aea:	0e 94 88 0b 	call	0x1710	; 0x1710 <free>
     aee:	08 95       	ret

00000af0 <_ZdaPv>:
     af0:	0e 94 88 0b 	call	0x1710	; 0x1710 <free>
     af4:	08 95       	ret

00000af6 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	2f 93       	push	r18
     b06:	3f 93       	push	r19
     b08:	4f 93       	push	r20
     b0a:	5f 93       	push	r21
     b0c:	6f 93       	push	r22
     b0e:	7f 93       	push	r23
     b10:	8f 93       	push	r24
     b12:	9f 93       	push	r25
     b14:	af 93       	push	r26
     b16:	bf 93       	push	r27
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	ef 93       	push	r30
     b1e:	ff 93       	push	r31
cli();
     b20:	f8 94       	cli
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
     b22:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN6Ticker27tickerCallbacksMillisecondsE>
     b26:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x1>
//UART::Send('a');
//UART::Send('0'+Ticker::tickerCallbacksMilliseconds.size());
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
     b2a:	89 2b       	or	r24, r25
     b2c:	c9 f0       	breq	.+50     	; 0xb60 <__vector_14+0x6a>
     b2e:	c0 e0       	ldi	r28, 0x00	; 0
     b30:	d0 e0       	ldi	r29, 0x00	; 0
	Data const &operator[](size_t idx)volatile const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx)volatile { return d_data[idx]; }; // Changeable getter
     b32:	00 eb       	ldi	r16, 0xB0	; 176
     b34:	12 e0       	ldi	r17, 0x02	; 2
     b36:	d8 01       	movw	r26, r16
     b38:	14 96       	adiw	r26, 0x04	; 4
     b3a:	ed 91       	ld	r30, X+
     b3c:	fc 91       	ld	r31, X
     b3e:	15 97       	sbiw	r26, 0x05	; 5
	{
		//UART::Send('b');
		Ticker::tickerCallbacksMilliseconds[i]();
     b40:	ce 01       	movw	r24, r28
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	e8 0f       	add	r30, r24
     b48:	f9 1f       	adc	r31, r25
     b4a:	01 90       	ld	r0, Z+
     b4c:	f0 81       	ld	r31, Z
     b4e:	e0 2d       	mov	r30, r0
     b50:	09 95       	icall
ISR(TIMER0_COMPA_vect)
{
cli();
//UART::Send('a');
//UART::Send('0'+Ticker::tickerCallbacksMilliseconds.size());
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
     b52:	21 96       	adiw	r28, 0x01	; 1
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
     b54:	f8 01       	movw	r30, r16
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	c8 17       	cp	r28, r24
     b5c:	d9 07       	cpc	r29, r25
     b5e:	58 f3       	brcs	.-42     	; 0xb36 <__vector_14+0x40>
	{
		//UART::Send('b');
		Ticker::tickerCallbacksMilliseconds[i]();
}
sei();
     b60:	78 94       	sei
}
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	3f 91       	pop	r19
     b7c:	2f 91       	pop	r18
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <_GLOBAL__sub_I__Znwj>:
 for(size_t i=0; i<d_size; i++){
	if(d==d_data[i])return true;
 }
 return false;
	}
	volatile_vector() : d_size(0), d_capacity(0), d_data(0) {
     b8c:	e0 eb       	ldi	r30, 0xB0	; 176
     b8e:	f2 e0       	ldi	r31, 0x02	; 2
     b90:	11 82       	std	Z+1, r1	; 0x01
     b92:	10 82       	st	Z, r1
     b94:	13 82       	std	Z+3, r1	; 0x03
     b96:	12 82       	std	Z+2, r1	; 0x02
     b98:	15 82       	std	Z+5, r1	; 0x05
     b9a:	14 82       	std	Z+4, r1	; 0x04
     b9c:	ea ea       	ldi	r30, 0xAA	; 170
     b9e:	f2 e0       	ldi	r31, 0x02	; 2
     ba0:	11 82       	std	Z+1, r1	; 0x01
     ba2:	10 82       	st	Z, r1
     ba4:	13 82       	std	Z+3, r1	; 0x03
     ba6:	12 82       	std	Z+2, r1	; 0x02
     ba8:	15 82       	std	Z+5, r1	; 0x05
     baa:	14 82       	std	Z+4, r1	; 0x04
     bac:	08 95       	ret

00000bae <_GLOBAL__sub_D__Znwj>:

	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
     bae:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <_ZN6Ticker22tickerCallbacksSecondsE+0x4>
     bb2:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <_ZN6Ticker22tickerCallbacksSecondsE+0x5>
     bb6:	0e 94 88 0b 	call	0x1710	; 0x1710 <free>
     bba:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x4>
     bbe:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x5>
     bc2:	0e 94 88 0b 	call	0x1710	; 0x1710 <free>
     bc6:	08 95       	ret

00000bc8 <_ZL11parseStringPc>:
	json_t const* field = json_getProperty( obj, property );
	if ( !field ) return 0;
        jsonType_t type = json_getType( field );
        if ( JSON_ARRAY >= type ) return 0;
	return json_getValue( field );
}
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
     bce:	98 81       	ld	r25, Y
     bd0:	90 32       	cpi	r25, 0x20	; 32
     bd2:	08 f4       	brcc	.+2      	; 0xbd6 <_ZL11parseStringPc+0xe>
     bd4:	57 c0       	rjmp	.+174    	; 0xc84 <_ZL11parseStringPc+0xbc>
     bd6:	92 32       	cpi	r25, 0x22	; 34
     bd8:	31 f0       	breq	.+12     	; 0xbe6 <_ZL11parseStringPc+0x1e>
     bda:	de 01       	movw	r26, r28
     bdc:	4f e3       	ldi	r20, 0x3F	; 63
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <_ZL11parseStringPc+0x28>
     be0:	92 32       	cpi	r25, 0x22	; 34
     be2:	31 f4       	brne	.+12     	; 0xbf0 <_ZL11parseStringPc+0x28>
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <_ZL11parseStringPc+0x20>
     be6:	de 01       	movw	r26, r28
     be8:	1c 92       	st	X, r1
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	5b c0       	rjmp	.+182    	; 0xca6 <_ZL11parseStringPc+0xde>
     bf0:	9c 35       	cpi	r25, 0x5C	; 92
     bf2:	e1 f5       	brne	.+120    	; 0xc6c <_ZL11parseStringPc+0xa4>
     bf4:	99 81       	ldd	r25, Y+1	; 0x01
     bf6:	95 37       	cpi	r25, 0x75	; 117
     bf8:	19 f0       	breq	.+6      	; 0xc00 <_ZL11parseStringPc+0x38>
     bfa:	92 32       	cpi	r25, 0x22	; 34
     bfc:	c9 f4       	brne	.+50     	; 0xc30 <_ZL11parseStringPc+0x68>
     bfe:	20 c0       	rjmp	.+64     	; 0xc40 <_ZL11parseStringPc+0x78>
     c00:	fe 01       	movw	r30, r28
     c02:	32 96       	adiw	r30, 0x02	; 2
     c04:	9e 01       	movw	r18, r28
     c06:	2a 5f       	subi	r18, 0xFA	; 250
     c08:	3f 4f       	sbci	r19, 0xFF	; 255
     c0a:	81 91       	ld	r24, Z+
     c0c:	80 33       	cpi	r24, 0x30	; 48
     c0e:	e8 f1       	brcs	.+122    	; 0xc8a <_ZL11parseStringPc+0xc2>
     c10:	8a 33       	cpi	r24, 0x3A	; 58
     c12:	38 f0       	brcs	.+14     	; 0xc22 <_ZL11parseStringPc+0x5a>
     c14:	81 34       	cpi	r24, 0x41	; 65
     c16:	e0 f1       	brcs	.+120    	; 0xc90 <_ZL11parseStringPc+0xc8>
     c18:	87 34       	cpi	r24, 0x47	; 71
     c1a:	18 f0       	brcs	.+6      	; 0xc22 <_ZL11parseStringPc+0x5a>
     c1c:	81 56       	subi	r24, 0x61	; 97
     c1e:	86 30       	cpi	r24, 0x06	; 6
     c20:	d0 f5       	brcc	.+116    	; 0xc96 <_ZL11parseStringPc+0xce>
     c22:	e2 17       	cp	r30, r18
     c24:	f3 07       	cpc	r31, r19
     c26:	89 f7       	brne	.-30     	; 0xc0a <_ZL11parseStringPc+0x42>
     c28:	4c 93       	st	X, r20
     c2a:	fe 01       	movw	r30, r28
     c2c:	35 96       	adiw	r30, 0x05	; 5
     c2e:	20 c0       	rjmp	.+64     	; 0xc70 <_ZL11parseStringPc+0xa8>
     c30:	ea e7       	ldi	r30, 0x7A	; 122
     c32:	f2 e0       	ldi	r31, 0x02	; 2
     c34:	21 e0       	ldi	r18, 0x01	; 1
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	98 13       	cpse	r25, r24
     c3c:	0c c0       	rjmp	.+24     	; 0xc56 <_ZL11parseStringPc+0x8e>
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <_ZL11parseStringPc+0x7c>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	f9 01       	movw	r30, r18
     c4a:	e6 58       	subi	r30, 0x86	; 134
     c4c:	fd 4f       	sbci	r31, 0xFD	; 253
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	81 11       	cpse	r24, r1
     c52:	08 c0       	rjmp	.+16     	; 0xc64 <_ZL11parseStringPc+0x9c>
     c54:	23 c0       	rjmp	.+70     	; 0xc9c <_ZL11parseStringPc+0xd4>
     c56:	2f 5f       	subi	r18, 0xFF	; 255
     c58:	3f 4f       	sbci	r19, 0xFF	; 255
     c5a:	32 96       	adiw	r30, 0x02	; 2
     c5c:	28 30       	cpi	r18, 0x08	; 8
     c5e:	31 05       	cpc	r19, r1
     c60:	59 f7       	brne	.-42     	; 0xc38 <_ZL11parseStringPc+0x70>
     c62:	1f c0       	rjmp	.+62     	; 0xca2 <_ZL11parseStringPc+0xda>
     c64:	fe 01       	movw	r30, r28
     c66:	31 96       	adiw	r30, 0x01	; 1
     c68:	8c 93       	st	X, r24
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <_ZL11parseStringPc+0xa8>
     c6c:	9c 93       	st	X, r25
     c6e:	fe 01       	movw	r30, r28
     c70:	ef 01       	movw	r28, r30
     c72:	21 96       	adiw	r28, 0x01	; 1
     c74:	11 96       	adiw	r26, 0x01	; 1
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	90 32       	cpi	r25, 0x20	; 32
     c7a:	08 f0       	brcs	.+2      	; 0xc7e <_ZL11parseStringPc+0xb6>
     c7c:	b1 cf       	rjmp	.-158    	; 0xbe0 <_ZL11parseStringPc+0x18>
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	11 c0       	rjmp	.+34     	; 0xca6 <_ZL11parseStringPc+0xde>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e c0       	rjmp	.+28     	; 0xca6 <_ZL11parseStringPc+0xde>
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0b c0       	rjmp	.+22     	; 0xca6 <_ZL11parseStringPc+0xde>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	08 c0       	rjmp	.+16     	; 0xca6 <_ZL11parseStringPc+0xde>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <_ZL11parseStringPc+0xde>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <_ZL11parseStringPc+0xde>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <_ZL11isOneOfThemcPKc>:
     cac:	fb 01       	movw	r30, r22
     cae:	91 91       	ld	r25, Z+
     cb0:	99 23       	and	r25, r25
     cb2:	21 f0       	breq	.+8      	; 0xcbc <_ZL11isOneOfThemcPKc+0x10>
     cb4:	98 13       	cpse	r25, r24
     cb6:	fb cf       	rjmp	.-10     	; 0xcae <_ZL11isOneOfThemcPKc+0x2>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	08 95       	ret
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	08 95       	ret

00000cc0 <_ZL7goWhilePcPKc>:
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ec 01       	movw	r28, r24
     cca:	8b 01       	movw	r16, r22
     ccc:	88 81       	ld	r24, Y
     cce:	88 23       	and	r24, r24
     cd0:	59 f0       	breq	.+22     	; 0xce8 <_ZL7goWhilePcPKc+0x28>
     cd2:	b8 01       	movw	r22, r16
     cd4:	0e 94 56 06 	call	0xcac	; 0xcac <_ZL11isOneOfThemcPKc>
     cd8:	88 23       	and	r24, r24
     cda:	49 f0       	breq	.+18     	; 0xcee <_ZL7goWhilePcPKc+0x2e>
     cdc:	21 96       	adiw	r28, 0x01	; 1
     cde:	88 81       	ld	r24, Y
     ce0:	81 11       	cpse	r24, r1
     ce2:	f7 cf       	rjmp	.-18     	; 0xcd2 <_ZL7goWhilePcPKc+0x12>
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <_ZL7goWhilePcPKc+0x32>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <_ZL7goWhilePcPKc+0x32>
     cee:	8c 2f       	mov	r24, r28
     cf0:	9d 2f       	mov	r25, r29
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <_ZL5goNumPc>:
     cfc:	fc 01       	movw	r30, r24
     cfe:	80 81       	ld	r24, Z
     d00:	88 23       	and	r24, r24
     d02:	81 f0       	breq	.+32     	; 0xd24 <_ZL5goNumPc+0x28>
     d04:	80 53       	subi	r24, 0x30	; 48
     d06:	8a 30       	cpi	r24, 0x0A	; 10
     d08:	80 f4       	brcc	.+32     	; 0xd2a <_ZL5goNumPc+0x2e>
     d0a:	31 96       	adiw	r30, 0x01	; 1
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <_ZL5goNumPc+0x18>
     d0e:	20 53       	subi	r18, 0x30	; 48
     d10:	2a 30       	cpi	r18, 0x0A	; 10
     d12:	68 f4       	brcc	.+26     	; 0xd2e <_ZL5goNumPc+0x32>
     d14:	8e 2f       	mov	r24, r30
     d16:	9f 2f       	mov	r25, r31
     d18:	21 91       	ld	r18, Z+
     d1a:	21 11       	cpse	r18, r1
     d1c:	f8 cf       	rjmp	.-16     	; 0xd0e <_ZL5goNumPc+0x12>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	08 95       	ret
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	08 95       	ret
     d2a:	8e 2f       	mov	r24, r30
     d2c:	9f 2f       	mov	r25, r31
     d2e:	08 95       	ret

00000d30 <_ZL16isEndOfPrimitivec>:
     d30:	cf 93       	push	r28
     d32:	8c 32       	cpi	r24, 0x2C	; 44
     d34:	69 f0       	breq	.+26     	; 0xd50 <_ZL16isEndOfPrimitivec+0x20>
     d36:	c8 2f       	mov	r28, r24
     d38:	68 e3       	ldi	r22, 0x38	; 56
     d3a:	72 e0       	ldi	r23, 0x02	; 2
     d3c:	0e 94 56 06 	call	0xcac	; 0xcac <_ZL11isOneOfThemcPKc>
     d40:	81 11       	cpse	r24, r1
     d42:	07 c0       	rjmp	.+14     	; 0xd52 <_ZL16isEndOfPrimitivec+0x22>
     d44:	6e e3       	ldi	r22, 0x3E	; 62
     d46:	72 e0       	ldi	r23, 0x02	; 2
     d48:	8c 2f       	mov	r24, r28
     d4a:	0e 94 56 06 	call	0xcac	; 0xcac <_ZL11isOneOfThemcPKc>
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <_ZL16isEndOfPrimitivec+0x22>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>:
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	8b 01       	movw	r16, r22
     d62:	f2 2e       	mov	r15, r18
     d64:	e4 2f       	mov	r30, r20
     d66:	f5 2f       	mov	r31, r21
     d68:	ec 01       	movw	r28, r24
     d6a:	21 91       	ld	r18, Z+
     d6c:	22 23       	and	r18, r18
     d6e:	29 f0       	breq	.+10     	; 0xd7a <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x24>
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	38 81       	ld	r19, Y
     d74:	23 17       	cp	r18, r19
     d76:	c1 f3       	breq	.-16     	; 0xd68 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x12>
     d78:	15 c0       	rjmp	.+42     	; 0xda4 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x4e>
     d7a:	89 2b       	or	r24, r25
     d7c:	b1 f0       	breq	.+44     	; 0xdaa <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x54>
     d7e:	88 81       	ld	r24, Y
     d80:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZL16isEndOfPrimitivec>
     d84:	88 23       	and	r24, r24
     d86:	a1 f0       	breq	.+40     	; 0xdb0 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5a>
     d88:	6e e3       	ldi	r22, 0x3E	; 62
     d8a:	72 e0       	ldi	r23, 0x02	; 2
     d8c:	88 81       	ld	r24, Y
     d8e:	0e 94 56 06 	call	0xcac	; 0xcac <_ZL11isOneOfThemcPKc>
     d92:	81 11       	cpse	r24, r1
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x44>
     d96:	18 82       	st	Y, r1
     d98:	21 96       	adiw	r28, 0x01	; 1
     d9a:	f8 01       	movw	r30, r16
     d9c:	f6 82       	std	Z+6, r15	; 0x06
     d9e:	8c 2f       	mov	r24, r28
     da0:	9d 2f       	mov	r25, r29
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	08 95       	ret

00000dc0 <json_getProperty>:
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	8b 01       	movw	r16, r22
     dca:	fc 01       	movw	r30, r24
     dcc:	c4 81       	ldd	r28, Z+4	; 0x04
     dce:	d5 81       	ldd	r29, Z+5	; 0x05
     dd0:	20 97       	sbiw	r28, 0x00	; 0
     dd2:	89 f0       	breq	.+34     	; 0xdf6 <json_getProperty+0x36>
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	29 f0       	breq	.+10     	; 0xde6 <json_getProperty+0x26>
     ddc:	b8 01       	movw	r22, r16
     dde:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
     de2:	89 2b       	or	r24, r25
     de4:	59 f0       	breq	.+22     	; 0xdfc <json_getProperty+0x3c>
     de6:	09 90       	ld	r0, Y+
     de8:	d8 81       	ld	r29, Y
     dea:	c0 2d       	mov	r28, r0
     dec:	20 97       	sbiw	r28, 0x00	; 0
     dee:	91 f7       	brne	.-28     	; 0xdd4 <json_getProperty+0x14>
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <json_getProperty+0x40>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <json_getProperty+0x40>
     dfc:	8c 2f       	mov	r24, r28
     dfe:	9d 2f       	mov	r25, r29
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <json_create>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
     e0a:	2f 92       	push	r2
     e0c:	3f 92       	push	r3
     e0e:	4f 92       	push	r4
     e10:	5f 92       	push	r5
     e12:	6f 92       	push	r6
     e14:	7f 92       	push	r7
     e16:	8f 92       	push	r8
     e18:	9f 92       	push	r9
     e1a:	af 92       	push	r10
     e1c:	bf 92       	push	r11
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <json_create+0x26>
     e30:	1f 92       	push	r1
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	5b 01       	movw	r10, r22
     e38:	3a 01       	movw	r6, r20

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
     e3a:	68 e3       	ldi	r22, 0x38	; 56
     e3c:	72 e0       	ldi	r23, 0x02	; 2
     e3e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZL7goWhilePcPKc>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	09 f4       	brne	.+2      	; 0xe48 <json_create+0x3e>
     e46:	bb c1       	rjmp	.+886    	; 0x11be <json_create+0x3b4>
     e48:	dc 01       	movw	r26, r24
     e4a:	2c 91       	ld	r18, X
     e4c:	2b 37       	cpi	r18, 0x7B	; 123
     e4e:	09 f0       	breq	.+2      	; 0xe52 <json_create+0x48>
     e50:	b9 c1       	rjmp	.+882    	; 0x11c4 <json_create+0x3ba>
    jsonPool_t pool = { .mem = mem, .qty = qty };
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
     e52:	f5 01       	movw	r30, r10
     e54:	13 82       	std	Z+3, r1	; 0x03
     e56:	12 82       	std	Z+2, r1	; 0x02
    obj->sibling = 0;
     e58:	11 82       	std	Z+1, r1	; 0x01
     e5a:	10 82       	st	Z, r1
    obj->u.child = 0;
     e5c:	15 82       	std	Z+5, r1	; 0x05
     e5e:	14 82       	std	Z+4, r1	; 0x04
  * @param str Pointer to first character.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
    obj->type    = JSON_OBJ;
     e60:	16 82       	std	Z+6, r1	; 0x06
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
     e62:	8c 01       	movw	r16, r24
     e64:	0f 5f       	subi	r16, 0xFF	; 255
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	75 01       	movw	r14, r10

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
    pool->nextFree = 1;
     e6a:	cc 24       	eor	r12, r12
     e6c:	c3 94       	inc	r12
     e6e:	d1 2c       	mov	r13, r1
    if ( *ptr != '0' ) {
        ptr = goNum( ptr );
        if ( !ptr ) return 0;
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
     e70:	68 94       	set
     e72:	22 24       	eor	r2, r2
     e74:	22 f8       	bld	r2, 2
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    ptr = parseString( ++ptr );
    if ( !ptr ) return 0;
    property->type = JSON_TEXT;
     e76:	68 94       	set
     e78:	44 24       	eor	r4, r4
     e7a:	41 f8       	bld	r4, 1
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
     e7c:	33 24       	eor	r3, r3
     e7e:	33 94       	inc	r3
        if ( !ptr ) return 0;
        if ( *ptr == ',' ) {
            ++ptr;
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
     e80:	0f 2e       	mov	r0, r31
     e82:	fd e7       	ldi	r31, 0x7D	; 125
     e84:	5f 2e       	mov	r5, r31
     e86:	f0 2d       	mov	r31, r0

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
     e88:	68 e3       	ldi	r22, 0x38	; 56
     e8a:	72 e0       	ldi	r23, 0x02	; 2
     e8c:	c8 01       	movw	r24, r16
     e8e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZL7goWhilePcPKc>
     e92:	9b 83       	std	Y+3, r25	; 0x03
     e94:	8a 83       	std	Y+2, r24	; 0x02
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    for(;;) {
        ptr = goBlank( ptr );
        if ( !ptr ) return 0;
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	09 f4       	brne	.+2      	; 0xe9c <json_create+0x92>
     e9a:	9a c1       	rjmp	.+820    	; 0x11d0 <json_create+0x3c6>
        if ( *ptr == ',' ) {
     e9c:	dc 01       	movw	r26, r24
     e9e:	8c 91       	ld	r24, X
     ea0:	8c 32       	cpi	r24, 0x2C	; 44
     ea2:	21 f4       	brne	.+8      	; 0xeac <json_create+0xa2>
            ++ptr;
     ea4:	8d 01       	movw	r16, r26
     ea6:	0f 5f       	subi	r16, 0xFF	; 255
     ea8:	1f 4f       	sbci	r17, 0xFF	; 255
     eaa:	ee cf       	rjmp	.-36     	; 0xe88 <json_create+0x7e>
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
     eac:	f7 01       	movw	r30, r14
     eae:	96 81       	ldd	r25, Z+6	; 0x06
     eb0:	99 23       	and	r25, r25
     eb2:	11 f0       	breq	.+4      	; 0xeb8 <json_create+0xae>
     eb4:	2d e5       	ldi	r18, 0x5D	; 93
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <json_create+0xb0>
     eb8:	25 2d       	mov	r18, r5
        if ( *ptr == endchar ) {
     eba:	82 13       	cpse	r24, r18
     ebc:	16 c0       	rjmp	.+44     	; 0xeea <json_create+0xe0>
            *ptr = '\0';
     ebe:	aa 81       	ldd	r26, Y+2	; 0x02
     ec0:	bb 81       	ldd	r27, Y+3	; 0x03
     ec2:	1c 92       	st	X, r1
            json_t* parentObj = obj->sibling;
     ec4:	f7 01       	movw	r30, r14
     ec6:	80 81       	ld	r24, Z
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
            if ( !parentObj ) return ++ptr;
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	31 f4       	brne	.+12     	; 0xeda <json_create+0xd0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	09 f4       	brne	.+2      	; 0xed4 <json_create+0xca>
     ed2:	7b c1       	rjmp	.+758    	; 0x11ca <json_create+0x3c0>
    return obj;
     ed4:	8a 2d       	mov	r24, r10
     ed6:	9b 2d       	mov	r25, r11
     ed8:	80 c1       	rjmp	.+768    	; 0x11da <json_create+0x3d0>
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
     eda:	11 82       	std	Z+1, r1	; 0x01
     edc:	10 82       	st	Z, r1
            obj = parentObj;
            ++ptr;
     ede:	0a 81       	ldd	r16, Y+2	; 0x02
     ee0:	1b 81       	ldd	r17, Y+3	; 0x03
     ee2:	0f 5f       	subi	r16, 0xFF	; 255
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
            obj = parentObj;
     ee6:	7c 01       	movw	r14, r24
     ee8:	cf cf       	rjmp	.-98     	; 0xe88 <json_create+0x7e>
/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
     eea:	c6 14       	cp	r12, r6
     eec:	d7 04       	cpc	r13, r7
     eee:	08 f0       	brcs	.+2      	; 0xef2 <json_create+0xe8>
     ef0:	72 c1       	rjmp	.+740    	; 0x11d6 <json_create+0x3cc>
    return &pool->mem[pool->nextFree++];
     ef2:	46 01       	movw	r8, r12
     ef4:	bf ef       	ldi	r27, 0xFF	; 255
     ef6:	8b 1a       	sub	r8, r27
     ef8:	9b 0a       	sbc	r9, r27
     efa:	96 01       	movw	r18, r12
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	22 0f       	add	r18, r18
     f02:	33 1f       	adc	r19, r19
     f04:	22 0f       	add	r18, r18
     f06:	33 1f       	adc	r19, r19
     f08:	f9 01       	movw	r30, r18
     f0a:	ec 19       	sub	r30, r12
     f0c:	fd 09       	sbc	r31, r13
     f0e:	6f 01       	movw	r12, r30
     f10:	ca 0c       	add	r12, r10
     f12:	db 1c       	adc	r13, r11
            obj = parentObj;
            ++ptr;
            continue;
        }
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
     f14:	c1 14       	cp	r12, r1
     f16:	d1 04       	cpc	r13, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <json_create+0x112>
     f1a:	5a c1       	rjmp	.+692    	; 0x11d0 <json_create+0x3c6>
        if( obj->type != JSON_ARRAY ) {
     f1c:	91 30       	cpi	r25, 0x01	; 1
     f1e:	31 f1       	breq	.+76     	; 0xf6c <json_create+0x162>
            if ( *ptr != '\"' ) return 0;
     f20:	82 32       	cpi	r24, 0x22	; 34
     f22:	09 f0       	breq	.+2      	; 0xf26 <json_create+0x11c>
     f24:	55 c1       	rjmp	.+682    	; 0x11d0 <json_create+0x3c6>
  * @param str Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	9b 81       	ldd	r25, Y+3	; 0x03
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	d6 01       	movw	r26, r12
     f2e:	13 96       	adiw	r26, 0x03	; 3
     f30:	9c 93       	st	X, r25
     f32:	8e 93       	st	-X, r24
     f34:	12 97       	sbiw	r26, 0x02	; 2
    ptr = parseString( ptr );
     f36:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZL11parseStringPc>
    if ( !ptr ) return 0;
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f4       	brne	.+2      	; 0xf40 <json_create+0x136>
     f3e:	4b c1       	rjmp	.+662    	; 0x11d6 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
     f40:	68 e3       	ldi	r22, 0x38	; 56
     f42:	72 e0       	ldi	r23, 0x02	; 2
     f44:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZL7goWhilePcPKc>
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    ptr = parseString( ptr );
    if ( !ptr ) return 0;
    ptr = goBlank( ptr );
    if ( !ptr ) return 0;
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	09 f4       	brne	.+2      	; 0xf4e <json_create+0x144>
     f4c:	44 c1       	rjmp	.+648    	; 0x11d6 <json_create+0x3cc>
    if ( *ptr++ != ':' ) return 0;
     f4e:	fc 01       	movw	r30, r24
     f50:	20 81       	ld	r18, Z
     f52:	2a 33       	cpi	r18, 0x3A	; 58
     f54:	09 f0       	breq	.+2      	; 0xf58 <json_create+0x14e>
     f56:	3f c1       	rjmp	.+638    	; 0x11d6 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
     f58:	68 e3       	ldi	r22, 0x38	; 56
     f5a:	72 e0       	ldi	r23, 0x02	; 2
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZL7goWhilePcPKc>
     f62:	9b 83       	std	Y+3, r25	; 0x03
     f64:	8a 83       	std	Y+2, r24	; 0x02
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
        if( obj->type != JSON_ARRAY ) {
            if ( *ptr != '\"' ) return 0;
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
     f66:	89 2b       	or	r24, r25
     f68:	31 f4       	brne	.+12     	; 0xf76 <json_create+0x16c>
     f6a:	32 c1       	rjmp	.+612    	; 0x11d0 <json_create+0x3c6>
        }
        else property->name = 0;
     f6c:	d6 01       	movw	r26, r12
     f6e:	13 96       	adiw	r26, 0x03	; 3
     f70:	1c 92       	st	X, r1
     f72:	1e 92       	st	-X, r1
     f74:	12 97       	sbiw	r26, 0x02	; 2

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
    property->sibling = 0;
     f76:	f6 01       	movw	r30, r12
     f78:	11 82       	std	Z+1, r1	; 0x01
     f7a:	10 82       	st	Z, r1
    if ( !obj->u.child ) obj->u.child = property;
     f7c:	d7 01       	movw	r26, r14
     f7e:	14 96       	adiw	r26, 0x04	; 4
     f80:	ed 91       	ld	r30, X+
     f82:	fc 91       	ld	r31, X
     f84:	15 97       	sbiw	r26, 0x05	; 5
     f86:	30 97       	sbiw	r30, 0x00	; 0
     f88:	39 f4       	brne	.+14     	; 0xf98 <json_create+0x18e>
     f8a:	15 96       	adiw	r26, 0x05	; 5
     f8c:	dc 92       	st	X, r13
     f8e:	ce 92       	st	-X, r12
     f90:	14 97       	sbiw	r26, 0x04	; 4
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <json_create+0x19a>
    else {
        json_t* iter;
        for( iter = obj->u.child; iter->sibling; iter = iter->sibling );
     f94:	fc 01       	movw	r30, r24
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <json_create+0x18e>
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	d1 f7       	brne	.-12     	; 0xf94 <json_create+0x18a>
        iter->sibling = property;
     fa0:	d1 82       	std	Z+1, r13	; 0x01
     fa2:	c0 82       	st	Z, r12
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
        }
        else property->name = 0;
        add( obj, property );
        property->u.value = ptr;
     fa4:	ea 81       	ldd	r30, Y+2	; 0x02
     fa6:	fb 81       	ldd	r31, Y+3	; 0x03
     fa8:	d6 01       	movw	r26, r12
     faa:	15 96       	adiw	r26, 0x05	; 5
     fac:	fc 93       	st	X, r31
     fae:	ee 93       	st	-X, r30
     fb0:	14 97       	sbiw	r26, 0x04	; 4
        switch( *ptr ) {
     fb2:	80 81       	ld	r24, Z
     fb4:	86 36       	cpi	r24, 0x66	; 102
     fb6:	09 f4       	brne	.+2      	; 0xfba <json_create+0x1b0>
     fb8:	46 c0       	rjmp	.+140    	; 0x1046 <json_create+0x23c>
     fba:	28 f4       	brcc	.+10     	; 0xfc6 <json_create+0x1bc>
     fbc:	82 32       	cpi	r24, 0x22	; 34
     fbe:	39 f1       	breq	.+78     	; 0x100e <json_create+0x204>
     fc0:	8b 35       	cpi	r24, 0x5B	; 91
     fc2:	c9 f0       	breq	.+50     	; 0xff6 <json_create+0x1ec>
     fc4:	54 c0       	rjmp	.+168    	; 0x106e <json_create+0x264>
     fc6:	84 37       	cpi	r24, 0x74	; 116
     fc8:	a1 f1       	breq	.+104    	; 0x1032 <json_create+0x228>
     fca:	8b 37       	cpi	r24, 0x7B	; 123
     fcc:	21 f0       	breq	.+8      	; 0xfd6 <json_create+0x1cc>
     fce:	8e 36       	cpi	r24, 0x6E	; 110
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <json_create+0x1ca>
     fd2:	4d c0       	rjmp	.+154    	; 0x106e <json_create+0x264>
     fd4:	42 c0       	rjmp	.+132    	; 0x105a <json_create+0x250>
            case '{':
                property->type    = JSON_OBJ;
     fd6:	d6 01       	movw	r26, r12
     fd8:	16 96       	adiw	r26, 0x06	; 6
     fda:	1c 92       	st	X, r1
     fdc:	16 97       	sbiw	r26, 0x06	; 6
                property->u.child = 0;
     fde:	15 96       	adiw	r26, 0x05	; 5
     fe0:	1c 92       	st	X, r1
     fe2:	1e 92       	st	-X, r1
     fe4:	14 97       	sbiw	r26, 0x04	; 4
                property->sibling = obj;
     fe6:	ed 92       	st	X+, r14
     fe8:	fc 92       	st	X, r15
                obj = property;
                ++ptr;
     fea:	0a 81       	ldd	r16, Y+2	; 0x02
     fec:	1b 81       	ldd	r17, Y+3	; 0x03
     fee:	0f 5f       	subi	r16, 0xFF	; 255
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
     ff2:	76 01       	movw	r14, r12
     ff4:	df c0       	rjmp	.+446    	; 0x11b4 <json_create+0x3aa>
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
     ff6:	f6 01       	movw	r30, r12
     ff8:	36 82       	std	Z+6, r3	; 0x06
                property->u.child = 0;
     ffa:	15 82       	std	Z+5, r1	; 0x05
     ffc:	14 82       	std	Z+4, r1	; 0x04
                property->sibling = obj;
     ffe:	f1 82       	std	Z+1, r15	; 0x01
    1000:	e0 82       	st	Z, r14
                obj = property;
                ++ptr;
    1002:	0a 81       	ldd	r16, Y+2	; 0x02
    1004:	1b 81       	ldd	r17, Y+3	; 0x03
    1006:	0f 5f       	subi	r16, 0xFF	; 255
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    100a:	76 01       	movw	r14, r12
    100c:	d3 c0       	rjmp	.+422    	; 0x11b4 <json_create+0x3aa>
  * @param str Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	d6 01       	movw	r26, r12
    1016:	15 96       	adiw	r26, 0x05	; 5
    1018:	9c 93       	st	X, r25
    101a:	8e 93       	st	-X, r24
    101c:	14 97       	sbiw	r26, 0x04	; 4
    ptr = parseString( ++ptr );
    101e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZL11parseStringPc>
    1022:	8c 01       	movw	r16, r24
    if ( !ptr ) return 0;
    1024:	89 2b       	or	r24, r25
    1026:	09 f4       	brne	.+2      	; 0x102a <json_create+0x220>
    1028:	d6 c0       	rjmp	.+428    	; 0x11d6 <json_create+0x3cc>
    property->type = JSON_TEXT;
    102a:	f6 01       	movw	r30, r12
    102c:	46 82       	std	Z+6, r4	; 0x06
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    102e:	64 01       	movw	r12, r8
    1030:	2b cf       	rjmp	.-426    	; 0xe88 <json_create+0x7e>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
    1032:	23 e0       	ldi	r18, 0x03	; 3
    1034:	41 e4       	ldi	r20, 0x41	; 65
    1036:	52 e0       	ldi	r21, 0x02	; 2
    1038:	b6 01       	movw	r22, r12
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1042:	8c 01       	movw	r16, r24
    1044:	b7 c0       	rjmp	.+366    	; 0x11b4 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
    1046:	23 e0       	ldi	r18, 0x03	; 3
    1048:	46 e4       	ldi	r20, 0x46	; 70
    104a:	52 e0       	ldi	r21, 0x02	; 2
    104c:	b6 01       	movw	r22, r12
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1056:	8c 01       	movw	r16, r24
    1058:	ad c0       	rjmp	.+346    	; 0x11b4 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "null", JSON_NULL );
    105a:	26 e0       	ldi	r18, 0x06	; 6
    105c:	4c e4       	ldi	r20, 0x4C	; 76
    105e:	52 e0       	ldi	r21, 0x02	; 2
    1060:	b6 01       	movw	r22, r12
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    106a:	8c 01       	movw	r16, r24
    106c:	a3 c0       	rjmp	.+326    	; 0x11b4 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
    if ( *ptr == '-' ) ++ptr;
    106e:	8d 32       	cpi	r24, 0x2D	; 45
    1070:	21 f4       	brne	.+8      	; 0x107a <json_create+0x270>
    1072:	ea 81       	ldd	r30, Y+2	; 0x02
    1074:	fb 81       	ldd	r31, Y+3	; 0x03
    1076:	31 96       	adiw	r30, 0x01	; 1
    1078:	02 c0       	rjmp	.+4      	; 0x107e <json_create+0x274>
    107a:	ea 81       	ldd	r30, Y+2	; 0x02
    107c:	fb 81       	ldd	r31, Y+3	; 0x03
    if ( !isNum( *ptr ) ) return 0;
    107e:	80 81       	ld	r24, Z
    1080:	90 ed       	ldi	r25, 0xD0	; 208
    1082:	98 0f       	add	r25, r24
    1084:	9a 30       	cpi	r25, 0x0A	; 10
    1086:	08 f0       	brcs	.+2      	; 0x108a <json_create+0x280>
    1088:	a6 c0       	rjmp	.+332    	; 0x11d6 <json_create+0x3cc>
    if ( *ptr != '0' ) {
    108a:	80 33       	cpi	r24, 0x30	; 48
    108c:	39 f0       	breq	.+14     	; 0x109c <json_create+0x292>
        ptr = goNum( ptr );
    108e:	cf 01       	movw	r24, r30
    1090:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZL5goNumPc>
    1094:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
    1096:	89 2b       	or	r24, r25
    1098:	49 f4       	brne	.+18     	; 0x10ac <json_create+0x2a2>
    109a:	9d c0       	rjmp	.+314    	; 0x11d6 <json_create+0x3cc>
    }
    else if ( isNum( *++ptr ) ) return 0;
    109c:	8f 01       	movw	r16, r30
    109e:	0f 5f       	subi	r16, 0xFF	; 255
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    10a2:	81 81       	ldd	r24, Z+1	; 0x01
    10a4:	80 53       	subi	r24, 0x30	; 48
    10a6:	8a 30       	cpi	r24, 0x0A	; 10
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <json_create+0x2a2>
    10aa:	95 c0       	rjmp	.+298    	; 0x11d6 <json_create+0x3cc>
    property->type = JSON_INTEGER;
    10ac:	d6 01       	movw	r26, r12
    10ae:	16 96       	adiw	r26, 0x06	; 6
    10b0:	2c 92       	st	X, r2
    if ( *ptr == '.' ) {
    10b2:	f8 01       	movw	r30, r16
    10b4:	80 81       	ld	r24, Z
    10b6:	8e 32       	cpi	r24, 0x2E	; 46
    10b8:	89 f4       	brne	.+34     	; 0x10dc <json_create+0x2d2>
/** Analyze the decimal part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
    if ( !isNum( *ptr ) ) return 0;
    10ba:	81 81       	ldd	r24, Z+1	; 0x01
    10bc:	80 53       	subi	r24, 0x30	; 48
    10be:	8a 30       	cpi	r24, 0x0A	; 10
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <json_create+0x2ba>
    10c2:	86 c0       	rjmp	.+268    	; 0x11d0 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    10c4:	c8 01       	movw	r24, r16
    10c6:	02 96       	adiw	r24, 0x02	; 2
    10c8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZL5goNumPc>
    10cc:	8c 01       	movw	r16, r24
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    if ( *ptr == '.' ) {
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
    10ce:	89 2b       	or	r24, r25
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <json_create+0x2ca>
    10d2:	81 c0       	rjmp	.+258    	; 0x11d6 <json_create+0x3cc>
        property->type = JSON_REAL;
    10d4:	e5 e0       	ldi	r30, 0x05	; 5
    10d6:	d6 01       	movw	r26, r12
    10d8:	16 96       	adiw	r26, 0x06	; 6
    10da:	ec 93       	st	X, r30
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
    10dc:	d8 01       	movw	r26, r16
    10de:	8c 91       	ld	r24, X
    10e0:	8f 7d       	andi	r24, 0xDF	; 223
    10e2:	85 34       	cpi	r24, 0x45	; 69
    10e4:	11 f5       	brne	.+68     	; 0x112a <json_create+0x320>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	8c 91       	ld	r24, X
    10ea:	8d 32       	cpi	r24, 0x2D	; 45
    10ec:	29 f0       	breq	.+10     	; 0x10f8 <json_create+0x2ee>
    10ee:	8b 32       	cpi	r24, 0x2B	; 43
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <json_create+0x2ee>
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
    10f2:	f8 01       	movw	r30, r16
    10f4:	31 96       	adiw	r30, 0x01	; 1
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <json_create+0x2f2>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    10f8:	f8 01       	movw	r30, r16
    10fa:	32 96       	adiw	r30, 0x02	; 2
    if ( !isNum( *ptr ) ) return 0;
    10fc:	90 81       	ld	r25, Z
    10fe:	90 53       	subi	r25, 0x30	; 48
    1100:	9a 30       	cpi	r25, 0x0A	; 10
    1102:	08 f0       	brcs	.+2      	; 0x1106 <json_create+0x2fc>
    1104:	65 c0       	rjmp	.+202    	; 0x11d0 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    1106:	cf 01       	movw	r24, r30
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_ZL5goNumPc>
    110e:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
        if ( !ptr ) return 0;
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	09 f4       	brne	.+2      	; 0x1116 <json_create+0x30c>
    1114:	60 c0       	rjmp	.+192    	; 0x11d6 <json_create+0x3cc>
        property->type = JSON_REAL;
    1116:	25 e0       	ldi	r18, 0x05	; 5
    1118:	f6 01       	movw	r30, r12
    111a:	26 83       	std	Z+6, r18	; 0x06
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
    111c:	dc 01       	movw	r26, r24
    111e:	8c 91       	ld	r24, X
    1120:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZL16isEndOfPrimitivec>
    1124:	81 11       	cpse	r24, r1
    1126:	3a c0       	rjmp	.+116    	; 0x119c <json_create+0x392>
    1128:	56 c0       	rjmp	.+172    	; 0x11d6 <json_create+0x3cc>
    112a:	f8 01       	movw	r30, r16
    112c:	f0 81       	ld	r31, Z
    112e:	f9 83       	std	Y+1, r31	; 0x01
    1130:	8f 2f       	mov	r24, r31
    1132:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZL16isEndOfPrimitivec>
    1136:	88 23       	and	r24, r24
    1138:	09 f4       	brne	.+2      	; 0x113c <json_create+0x332>
    113a:	4d c0       	rjmp	.+154    	; 0x11d6 <json_create+0x3cc>
    if ( JSON_INTEGER == property->type ) {
    113c:	d6 01       	movw	r26, r12
    113e:	16 96       	adiw	r26, 0x06	; 6
    1140:	8c 91       	ld	r24, X
    1142:	84 30       	cpi	r24, 0x04	; 4
    1144:	59 f5       	brne	.+86     	; 0x119c <json_create+0x392>
        char const* value = property->u.value;
        bool const negative = *value == '-';
    1146:	ea 81       	ldd	r30, Y+2	; 0x02
    1148:	fb 81       	ldd	r31, Y+3	; 0x03
    114a:	40 81       	ld	r20, Z
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
    114c:	4d 32       	cpi	r20, 0x2D	; 45
    114e:	19 f0       	breq	.+6      	; 0x1156 <json_create+0x34c>
    1150:	83 e1       	ldi	r24, 0x13	; 19
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <json_create+0x350>
    1156:	84 e1       	ldi	r24, 0x14	; 20
    1158:	90 e0       	ldi	r25, 0x00	; 0
        unsigned int const len = ptr - value;
    115a:	98 01       	movw	r18, r16
    115c:	6a 81       	ldd	r22, Y+2	; 0x02
    115e:	7b 81       	ldd	r23, Y+3	; 0x03
    1160:	26 1b       	sub	r18, r22
    1162:	37 0b       	sbc	r19, r23
        if ( len > maxdigits ) return 0;
    1164:	82 17       	cp	r24, r18
    1166:	93 07       	cpc	r25, r19
    1168:	b0 f1       	brcs	.+108    	; 0x11d6 <json_create+0x3cc>
        if ( len == maxdigits ) {
    116a:	28 17       	cp	r18, r24
    116c:	39 07       	cpc	r19, r25
    116e:	b1 f4       	brne	.+44     	; 0x119c <json_create+0x392>
            char const tmp = *ptr;
            *ptr = '\0';
    1170:	d8 01       	movw	r26, r16
    1172:	1c 92       	st	X, r1
            char const* const threshold = negative ? min: max;
    1174:	4d 32       	cpi	r20, 0x2D	; 45
    1176:	29 f0       	breq	.+10     	; 0x1182 <json_create+0x378>
    1178:	e1 e5       	ldi	r30, 0x51	; 81
    117a:	f2 e0       	ldi	r31, 0x02	; 2
    117c:	8e 2f       	mov	r24, r30
    117e:	9f 2f       	mov	r25, r31
    1180:	04 c0       	rjmp	.+8      	; 0x118a <json_create+0x380>
    1182:	25 e6       	ldi	r18, 0x65	; 101
    1184:	32 e0       	ldi	r19, 0x02	; 2
    1186:	82 2f       	mov	r24, r18
    1188:	93 2f       	mov	r25, r19
            if ( 0 > strcmp( threshold, value ) ) return 0;
    118a:	6a 81       	ldd	r22, Y+2	; 0x02
    118c:	7b 81       	ldd	r23, Y+3	; 0x03
    118e:	0e 94 38 0c 	call	0x1870	; 0x1870 <strcmp>
    1192:	99 23       	and	r25, r25
    1194:	04 f1       	brlt	.+64     	; 0x11d6 <json_create+0x3cc>
            *ptr = tmp;
    1196:	e9 81       	ldd	r30, Y+1	; 0x01
    1198:	d8 01       	movw	r26, r16
    119a:	ec 93       	st	X, r30

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
    119c:	6e e3       	ldi	r22, 0x3E	; 62
    119e:	72 e0       	ldi	r23, 0x02	; 2
    11a0:	d8 01       	movw	r26, r16
    11a2:	8c 91       	ld	r24, X
    11a4:	0e 94 56 06 	call	0xcac	; 0xcac <_ZL11isOneOfThemcPKc>
    11a8:	81 11       	cpse	r24, r1
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <json_create+0x3aa>
    11ac:	f8 01       	movw	r30, r16
    11ae:	10 82       	st	Z, r1
    11b0:	0f 5f       	subi	r16, 0xFF	; 255
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
            case 't':  ptr = trueValue( ptr, property );  break;
            case 'f':  ptr = falseValue( ptr, property ); break;
            case 'n':  ptr = nullValue( ptr, property );  break;
            default:   ptr = numValue( ptr, property );   break;
        }
        if ( !ptr ) return 0;
    11b4:	01 15       	cp	r16, r1
    11b6:	11 05       	cpc	r17, r1
    11b8:	59 f0       	breq	.+22     	; 0x11d0 <json_create+0x3c6>
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    11ba:	64 01       	movw	r12, r8
    11bc:	65 ce       	rjmp	.-822    	; 0xe88 <json_create+0x7e>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0b c0       	rjmp	.+22     	; 0x11da <json_create+0x3d0>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	08 c0       	rjmp	.+16     	; 0x11da <json_create+0x3d0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	05 c0       	rjmp	.+10     	; 0x11da <json_create+0x3d0>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <json_create+0x3d0>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    return obj;
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	bf 90       	pop	r11
    11f2:	af 90       	pop	r10
    11f4:	9f 90       	pop	r9
    11f6:	8f 90       	pop	r8
    11f8:	7f 90       	pop	r7
    11fa:	6f 90       	pop	r6
    11fc:	5f 90       	pop	r5
    11fe:	4f 90       	pop	r4
    1200:	3f 90       	pop	r3
    1202:	2f 90       	pop	r2
    1204:	08 95       	ret

00001206 <_ZN4UART11GetMessagesEv>:
					bufferIndexes[nBuffer]=bufferIndex+1;
				}
			}
		}
	}
	Messages* UART::GetMessages(){
    1206:	3f 92       	push	r3
    1208:	4f 92       	push	r4
    120a:	5f 92       	push	r5
    120c:	6f 92       	push	r6
    120e:	7f 92       	push	r7
    1210:	8f 92       	push	r8
    1212:	9f 92       	push	r9
    1214:	af 92       	push	r10
    1216:	bf 92       	push	r11
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	2a 97       	sbiw	r28, 0x0a	; 10
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	5c 01       	movw	r10, r24
    123a:	e1 2c       	mov	r14, r1
    123c:	f1 2c       	mov	r15, r1
		char tempMessagesIndex=0;
    123e:	31 2c       	mov	r3, r1
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1240:	2c 01       	movw	r4, r24
    1242:	84 ef       	ldi	r24, 0xF4	; 244
    1244:	48 1a       	sub	r4, r24
    1246:	8e ef       	ldi	r24, 0xFE	; 254
    1248:	58 0a       	sbc	r5, r24
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
					tempMessages[tempMessagesIndex]=new Message(buf, length);
					tempMessagesIndex++;
					bufferIndexes[i]=0;
					overflowedBuffers=false;
    124a:	f5 01       	movw	r30, r10
    124c:	e2 5f       	subi	r30, 0xF2	; 242
    124e:	fe 4f       	sbci	r31, 0xFE	; 254
    1250:	fa 87       	std	Y+10, r31	; 0x0a
    1252:	e9 87       	std	Y+9, r30	; 0x09
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1254:	f2 01       	movw	r30, r4
    1256:	80 81       	ld	r24, Z
    1258:	8e 15       	cp	r24, r14
    125a:	09 f4       	brne	.+2      	; 0x125e <_ZN4UART11GetMessagesEv+0x58>
    125c:	4f c0       	rjmp	.+158    	; 0x12fc <_ZN4UART11GetMessagesEv+0xf6>
				if(bufferIndexes[i]>0){
    125e:	47 01       	movw	r8, r14
    1260:	67 01       	movw	r12, r14
    1262:	cc 0c       	add	r12, r12
    1264:	dd 1c       	adc	r13, r13
    1266:	ca 0c       	add	r12, r10
    1268:	db 1c       	adc	r13, r11
    126a:	f6 01       	movw	r30, r12
    126c:	84 81       	ldd	r24, Z+4	; 0x04
    126e:	95 81       	ldd	r25, Z+5	; 0x05
    1270:	18 16       	cp	r1, r24
    1272:	19 06       	cpc	r1, r25
    1274:	0c f0       	brlt	.+2      	; 0x1278 <_ZN4UART11GetMessagesEv+0x72>
    1276:	42 c0       	rjmp	.+132    	; 0x12fc <_ZN4UART11GetMessagesEv+0xf6>

				unsigned int length = bufferIndexes[i];
    1278:	04 81       	ldd	r16, Z+4	; 0x04
    127a:	15 81       	ldd	r17, Z+5	; 0x05
					char* buf = new char[ length+1];
    127c:	c8 01       	movw	r24, r16
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	0e 94 72 05 	call	0xae4	; 0xae4 <_Znaj>
    1284:	3c 01       	movw	r6, r24
					for (int j = 0; j < length; j++)
    1286:	01 15       	cp	r16, r1
    1288:	11 05       	cpc	r17, r1
    128a:	c1 f0       	breq	.+48     	; 0x12bc <_ZN4UART11GetMessagesEv+0xb6>
    128c:	fc 01       	movw	r30, r24
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
					buf[j] = (char)buffer[i][j];
    1292:	00 24       	eor	r0, r0
    1294:	96 94       	lsr	r9
    1296:	87 94       	ror	r8
    1298:	07 94       	ror	r0
    129a:	96 94       	lsr	r9
    129c:	87 94       	ror	r8
    129e:	07 94       	ror	r0
    12a0:	98 2c       	mov	r9, r8
    12a2:	80 2c       	mov	r8, r0
    12a4:	8a 0c       	add	r8, r10
    12a6:	9b 1c       	adc	r9, r11
    12a8:	d4 01       	movw	r26, r8
    12aa:	a8 0f       	add	r26, r24
    12ac:	b9 1f       	adc	r27, r25
    12ae:	1c 96       	adiw	r26, 0x0c	; 12
    12b0:	2c 91       	ld	r18, X
    12b2:	21 93       	st	Z+, r18
			if(i!=nBuffer){
				if(bufferIndexes[i]>0){

				unsigned int length = bufferIndexes[i];
					char* buf = new char[ length+1];
					for (int j = 0; j < length; j++)
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	08 17       	cp	r16, r24
    12b8:	19 07       	cpc	r17, r25
    12ba:	b1 f7       	brne	.-20     	; 0x12a8 <_ZN4UART11GetMessagesEv+0xa2>
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
    12bc:	f3 01       	movw	r30, r6
    12be:	e0 0f       	add	r30, r16
    12c0:	f1 1f       	adc	r31, r17
    12c2:	10 82       	st	Z, r1
					tempMessages[tempMessagesIndex]=new Message(buf, length);
    12c4:	84 e0       	ldi	r24, 0x04	; 4
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 6f 05 	call	0xade	; 0xade <_Znwj>
    12cc:	4c 01       	movw	r8, r24
    12ce:	a8 01       	movw	r20, r16
    12d0:	b3 01       	movw	r22, r6
    12d2:	0e 94 b8 03 	call	0x770	; 0x770 <_ZN7MessageC1EPKcj>
    12d6:	e3 2d       	mov	r30, r3
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	8c 0f       	add	r24, r28
    12e4:	9d 1f       	adc	r25, r29
    12e6:	e8 0f       	add	r30, r24
    12e8:	f9 1f       	adc	r31, r25
    12ea:	91 82       	std	Z+1, r9	; 0x01
    12ec:	80 82       	st	Z, r8
					tempMessagesIndex++;
    12ee:	33 94       	inc	r3
					bufferIndexes[i]=0;
    12f0:	f6 01       	movw	r30, r12
    12f2:	15 82       	std	Z+5, r1	; 0x05
    12f4:	14 82       	std	Z+4, r1	; 0x04
					overflowedBuffers=false;
    12f6:	e9 85       	ldd	r30, Y+9	; 0x09
    12f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    12fa:	10 82       	st	Z, r1
    12fc:	ff ef       	ldi	r31, 0xFF	; 255
    12fe:	ef 1a       	sub	r14, r31
    1300:	ff 0a       	sbc	r15, r31
		}
	}
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
    1302:	84 e0       	ldi	r24, 0x04	; 4
    1304:	e8 16       	cp	r14, r24
    1306:	f1 04       	cpc	r15, r1
    1308:	09 f0       	breq	.+2      	; 0x130c <_ZN4UART11GetMessagesEv+0x106>
    130a:	a4 cf       	rjmp	.-184    	; 0x1254 <_ZN4UART11GetMessagesEv+0x4e>
					bufferIndexes[i]=0;
					overflowedBuffers=false;
				}
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
    130c:	33 20       	and	r3, r3
    130e:	61 f0       	breq	.+24     	; 0x1328 <_ZN4UART11GetMessagesEv+0x122>
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 6f 05 	call	0xade	; 0xade <_Znwj>
    1318:	8c 01       	movw	r16, r24
    131a:	43 2d       	mov	r20, r3
    131c:	be 01       	movw	r22, r28
    131e:	6f 5f       	subi	r22, 0xFF	; 255
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN8MessagesC1EPP7Messagec>
    1326:	02 c0       	rjmp	.+4      	; 0x132c <_ZN4UART11GetMessagesEv+0x126>
    1328:	00 e0       	ldi	r16, 0x00	; 0
    132a:	10 e0       	ldi	r17, 0x00	; 0
		return m;
}
    132c:	c8 01       	movw	r24, r16
    132e:	2a 96       	adiw	r28, 0x0a	; 10
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	df 90       	pop	r13
    1348:	cf 90       	pop	r12
    134a:	bf 90       	pop	r11
    134c:	af 90       	pop	r10
    134e:	9f 90       	pop	r9
    1350:	8f 90       	pop	r8
    1352:	7f 90       	pop	r7
    1354:	6f 90       	pop	r6
    1356:	5f 90       	pop	r5
    1358:	4f 90       	pop	r4
    135a:	3f 90       	pop	r3
    135c:	08 95       	ret

0000135e <_ZThn2_N4UART11GetMessagesEv>:
    135e:	02 97       	sbiw	r24, 0x02	; 2
    1360:	0e 94 03 09 	call	0x1206	; 0x1206 <_ZN4UART11GetMessagesEv>
    1364:	08 95       	ret

00001366 <_ZN4UART10InitializeEv>:
 initialized=true;
 }
	return _Singleton;
}
 void UART::Initialize ()
{
    1366:	fc 01       	movw	r30, r24
	//volatile int bufferIndexes[UART_N_BUFFERS];
	//volatile char buffer[UART_N_BUFFERS][UART_BUFFER_SIZE] ;
	
	nBuffer=0;
    1368:	dc 01       	movw	r26, r24
    136a:	a4 5f       	subi	r26, 0xF4	; 244
    136c:	be 4f       	sbci	r27, 0xFE	; 254
    136e:	1c 92       	st	X, r1
	overflowedCurrentBuffer=false;
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	1c 92       	st	X, r1
	overflowedBuffers=false;
    1374:	11 96       	adiw	r26, 0x01	; 1
    1376:	1c 92       	st	X, r1
	DDRD =DDRD&0xFE;
    1378:	50 98       	cbi	0x0a, 0	; 10
	DDRD = DDRD | 0x2;
    137a:	51 9a       	sbi	0x0a, 1	; 10
//PORTD=PORTD&0x1;
	for(char i=0; i<UART_N_BUFFERS; i++)
	{
		bufferIndexes[i]=0;
    137c:	15 82       	std	Z+5, r1	; 0x05
    137e:	14 82       	std	Z+4, r1	; 0x04
    1380:	17 82       	std	Z+7, r1	; 0x07
    1382:	16 82       	std	Z+6, r1	; 0x06
    1384:	11 86       	std	Z+9, r1	; 0x09
    1386:	10 86       	std	Z+8, r1	; 0x08
    1388:	13 86       	std	Z+11, r1	; 0x0b
    138a:	12 86       	std	Z+10, r1	; 0x0a
	}
	UBRR0H = UBRRH_VALUE;
    138c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    1390:	83 e3       	ldi	r24, 0x33	; 51
    1392:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#if USE_U2X
	UCSR0A |= (1<<U2X0);
	#else
	UCSR0A &= ~(1<<U2X0);
    1396:	e0 ec       	ldi	r30, 0xC0	; 192
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	8d 7f       	andi	r24, 0xFD	; 253
    139e:	80 83       	st	Z, r24
	#endif
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|( 1<<RXCIE0);
    13a0:	88 e9       	ldi	r24, 0x98	; 152
    13a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    13a6:	e2 ec       	ldi	r30, 0xC2	; 194
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	86 60       	ori	r24, 0x06	; 6
    13ae:	80 83       	st	Z, r24

	sei();
    13b0:	78 94       	sei
    13b2:	08 95       	ret

000013b4 <_ZN4UART11GetInstanceEv>:
#include <util/setbaud.h>

 UART UART:: _Singleton;
  UART& UART::GetInstance(){
 static bool initialized=false;
 if(!initialized)
    13b4:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <_ZZN4UART11GetInstanceEvE11initialized>
    13b8:	81 11       	cpse	r24, r1
    13ba:	07 c0       	rjmp	.+14     	; 0x13ca <_ZN4UART11GetInstanceEv+0x16>
 {
 _Singleton.Initialize();
    13bc:	87 eb       	ldi	r24, 0xB7	; 183
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN4UART10InitializeEv>
 initialized=true;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <_ZZN4UART11GetInstanceEvE11initialized>
 }
	return _Singleton;
}
    13ca:	87 eb       	ldi	r24, 0xB7	; 183
    13cc:	92 e0       	ldi	r25, 0x02	; 2
    13ce:	08 95       	ret

000013d0 <_ZN4UART8IncomingEv>:

	sei();
}

void UART::Incoming(){
	unsigned char data = UDR0;
    13d0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(    data==13||data==10   )
    13d4:	2d 30       	cpi	r18, 0x0D	; 13
    13d6:	19 f0       	breq	.+6      	; 0x13de <_ZN4UART8IncomingEv+0xe>
    13d8:	2a 30       	cpi	r18, 0x0A	; 10
    13da:	09 f0       	breq	.+2      	; 0x13de <_ZN4UART8IncomingEv+0xe>
    13dc:	67 c0       	rjmp	.+206    	; 0x14ac <_ZN4UART8IncomingEv+0xdc>
	{
		if(bufferIndexes[nBuffer]!=0)
    13de:	fc 01       	movw	r30, r24
    13e0:	e4 5f       	subi	r30, 0xF4	; 244
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	e0 81       	ld	r30, Z
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	32 96       	adiw	r30, 0x02	; 2
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	e8 0f       	add	r30, r24
    13f0:	f9 1f       	adc	r31, r25
    13f2:	20 81       	ld	r18, Z
    13f4:	31 81       	ldd	r19, Z+1	; 0x01
    13f6:	23 2b       	or	r18, r19
    13f8:	09 f4       	brne	.+2      	; 0x13fc <_ZN4UART8IncomingEv+0x2c>
    13fa:	94 c0       	rjmp	.+296    	; 0x1524 <_ZN4UART8IncomingEv+0x154>
		{
			if(!overflowedCurrentBuffer)
    13fc:	fc 01       	movw	r30, r24
    13fe:	e3 5f       	subi	r30, 0xF3	; 243
    1400:	fe 4f       	sbci	r31, 0xFE	; 254
    1402:	20 81       	ld	r18, Z
    1404:	21 11       	cpse	r18, r1
    1406:	41 c0       	rjmp	.+130    	; 0x148a <_ZN4UART8IncomingEv+0xba>
			{
				if(nBuffer<UART_N_BUFFERS-1)
    1408:	31 97       	sbiw	r30, 0x01	; 1
    140a:	20 81       	ld	r18, Z
    140c:	23 30       	cpi	r18, 0x03	; 3
    140e:	30 f0       	brcs	.+12     	; 0x141c <_ZN4UART8IncomingEv+0x4c>
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1410:	fc 01       	movw	r30, r24
    1412:	24 81       	ldd	r18, Z+4	; 0x04
    1414:	35 81       	ldd	r19, Z+5	; 0x05
    1416:	23 2b       	or	r18, r19
    1418:	a9 f4       	brne	.+42     	; 0x1444 <_ZN4UART8IncomingEv+0x74>
    141a:	27 c0       	rjmp	.+78     	; 0x146a <_ZN4UART8IncomingEv+0x9a>
		{
			if(!overflowedCurrentBuffer)
			{
				if(nBuffer<UART_N_BUFFERS-1)
				{
					nBuffer++;
    141c:	fc 01       	movw	r30, r24
    141e:	e4 5f       	subi	r30, 0xF4	; 244
    1420:	fe 4f       	sbci	r31, 0xFE	; 254
    1422:	20 81       	ld	r18, Z
    1424:	2f 5f       	subi	r18, 0xFF	; 255
    1426:	20 83       	st	Z, r18
					bufferIndexes[nBuffer]=0;
    1428:	e0 81       	ld	r30, Z
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	32 96       	adiw	r30, 0x02	; 2
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	e8 0f       	add	r30, r24
    1434:	f9 1f       	adc	r31, r25
    1436:	11 82       	std	Z+1, r1	; 0x01
    1438:	10 82       	st	Z, r1
					overflowedCurrentBuffer=false;
    143a:	fc 01       	movw	r30, r24
    143c:	e3 5f       	subi	r30, 0xF3	; 243
    143e:	fe 4f       	sbci	r31, 0xFE	; 254
    1440:	10 82       	st	Z, r1
    1442:	08 95       	ret
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1444:	fc 01       	movw	r30, r24
    1446:	26 81       	ldd	r18, Z+6	; 0x06
    1448:	37 81       	ldd	r19, Z+7	; 0x07
    144a:	23 2b       	or	r18, r19
    144c:	51 f0       	breq	.+20     	; 0x1462 <_ZN4UART8IncomingEv+0x92>
    144e:	20 85       	ldd	r18, Z+8	; 0x08
    1450:	31 85       	ldd	r19, Z+9	; 0x09
    1452:	23 2b       	or	r18, r19
    1454:	41 f0       	breq	.+16     	; 0x1466 <_ZN4UART8IncomingEv+0x96>
    1456:	22 85       	ldd	r18, Z+10	; 0x0a
    1458:	33 85       	ldd	r19, Z+11	; 0x0b
    145a:	23 2b       	or	r18, r19
    145c:	81 f4       	brne	.+32     	; 0x147e <_ZN4UART8IncomingEv+0xae>
					overflowedCurrentBuffer=false;

				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
    145e:	23 e0       	ldi	r18, 0x03	; 3
    1460:	05 c0       	rjmp	.+10     	; 0x146c <_ZN4UART8IncomingEv+0x9c>
    1462:	21 e0       	ldi	r18, 0x01	; 1
    1464:	03 c0       	rjmp	.+6      	; 0x146c <_ZN4UART8IncomingEv+0x9c>
    1466:	22 e0       	ldi	r18, 0x02	; 2
    1468:	01 c0       	rjmp	.+2      	; 0x146c <_ZN4UART8IncomingEv+0x9c>
					{
						if(bufferIndexes[i]==0)
    146a:	20 e0       	ldi	r18, 0x00	; 0
						{
							nBuffer=i;
    146c:	fc 01       	movw	r30, r24
    146e:	e4 5f       	subi	r30, 0xF4	; 244
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	20 83       	st	Z, r18
							overflowedCurrentBuffer=false;
    1474:	31 96       	adiw	r30, 0x01	; 1
    1476:	10 82       	st	Z, r1
							overflowedBuffers=false;
    1478:	31 96       	adiw	r30, 0x01	; 1
    147a:	10 82       	st	Z, r1
							return;
    147c:	08 95       	ret
						}
					}
					overflowedBuffers=true;
    147e:	fc 01       	movw	r30, r24
    1480:	e2 5f       	subi	r30, 0xF2	; 242
    1482:	fe 4f       	sbci	r31, 0xFE	; 254
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	20 83       	st	Z, r18
    1488:	08 95       	ret
				}
			}
			else
			{
				overflowedCurrentBuffer=false;
    148a:	fc 01       	movw	r30, r24
    148c:	e3 5f       	subi	r30, 0xF3	; 243
    148e:	fe 4f       	sbci	r31, 0xFE	; 254
    1490:	10 82       	st	Z, r1
				bufferIndexes[nBuffer]=0;
    1492:	31 97       	sbiw	r30, 0x01	; 1
    1494:	20 81       	ld	r18, Z
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	2e 5f       	subi	r18, 0xFE	; 254
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	22 0f       	add	r18, r18
    149e:	33 1f       	adc	r19, r19
    14a0:	fc 01       	movw	r30, r24
    14a2:	e2 0f       	add	r30, r18
    14a4:	f3 1f       	adc	r31, r19
    14a6:	11 82       	std	Z+1, r1	; 0x01
    14a8:	10 82       	st	Z, r1
    14aa:	08 95       	ret
			}
		}
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
    14ac:	fc 01       	movw	r30, r24
    14ae:	e3 5f       	subi	r30, 0xF3	; 243
    14b0:	fe 4f       	sbci	r31, 0xFE	; 254
    14b2:	30 81       	ld	r19, Z
    14b4:	31 11       	cpse	r19, r1
    14b6:	36 c0       	rjmp	.+108    	; 0x1524 <_ZN4UART8IncomingEv+0x154>
    14b8:	31 96       	adiw	r30, 0x01	; 1
    14ba:	30 81       	ld	r19, Z
    14bc:	31 11       	cpse	r19, r1
    14be:	32 c0       	rjmp	.+100    	; 0x1524 <_ZN4UART8IncomingEv+0x154>
    14c0:	21 c0       	rjmp	.+66     	; 0x1504 <_ZN4UART8IncomingEv+0x134>
		{
			int bufferIndex=bufferIndexes[nBuffer];
			if(bufferIndex>=UART_BUFFER_SIZE)
			{
				overflowedCurrentBuffer=true;
    14c2:	fc 01       	movw	r30, r24
    14c4:	e3 5f       	subi	r30, 0xF3	; 243
    14c6:	fe 4f       	sbci	r31, 0xFE	; 254
    14c8:	21 e0       	ldi	r18, 0x01	; 1
    14ca:	20 83       	st	Z, r18
    14cc:	08 95       	ret
			}
			else{
					buffer[nBuffer][bufferIndex]=data;
    14ce:	dc 01       	movw	r26, r24
    14d0:	a4 5f       	subi	r26, 0xF4	; 244
    14d2:	be 4f       	sbci	r27, 0xFE	; 254
    14d4:	3c 91       	ld	r19, X
    14d6:	fc 01       	movw	r30, r24
    14d8:	60 e4       	ldi	r22, 0x40	; 64
    14da:	36 9f       	mul	r19, r22
    14dc:	e0 0d       	add	r30, r0
    14de:	f1 1d       	adc	r31, r1
    14e0:	11 24       	eor	r1, r1
    14e2:	e4 0f       	add	r30, r20
    14e4:	f5 1f       	adc	r31, r21
    14e6:	24 87       	std	Z+12, r18	; 0x0c
					bufferIndexes[nBuffer]=bufferIndex+1;
    14e8:	2c 91       	ld	r18, X
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	4f 5f       	subi	r20, 0xFF	; 255
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	2e 5f       	subi	r18, 0xFE	; 254
    14f2:	3f 4f       	sbci	r19, 0xFF	; 255
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	fc 01       	movw	r30, r24
    14fa:	e2 0f       	add	r30, r18
    14fc:	f3 1f       	adc	r31, r19
    14fe:	51 83       	std	Z+1, r21	; 0x01
    1500:	40 83       	st	Z, r20
    1502:	08 95       	ret
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
		{
			int bufferIndex=bufferIndexes[nBuffer];
    1504:	fc 01       	movw	r30, r24
    1506:	e4 5f       	subi	r30, 0xF4	; 244
    1508:	fe 4f       	sbci	r31, 0xFE	; 254
    150a:	e0 81       	ld	r30, Z
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	32 96       	adiw	r30, 0x02	; 2
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	e8 0f       	add	r30, r24
    1516:	f9 1f       	adc	r31, r25
    1518:	40 81       	ld	r20, Z
    151a:	51 81       	ldd	r21, Z+1	; 0x01
			if(bufferIndex>=UART_BUFFER_SIZE)
    151c:	40 34       	cpi	r20, 0x40	; 64
    151e:	51 05       	cpc	r21, r1
    1520:	b4 f2       	brlt	.-84     	; 0x14ce <_ZN4UART8IncomingEv+0xfe>
    1522:	cf cf       	rjmp	.-98     	; 0x14c2 <_ZN4UART8IncomingEv+0xf2>
    1524:	08 95       	ret

00001526 <__vector_18>:
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
		return m;
}
	ISR(USART_RX_vect){
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
		cli();
    1548:	f8 94       	cli
		UART::GetInstance().Incoming();
    154a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN4UART11GetInstanceEv>
    154e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN4UART8IncomingEv>
		sei();
    1552:	78 94       	sei
	}
    1554:	ff 91       	pop	r31
    1556:	ef 91       	pop	r30
    1558:	bf 91       	pop	r27
    155a:	af 91       	pop	r26
    155c:	9f 91       	pop	r25
    155e:	8f 91       	pop	r24
    1560:	7f 91       	pop	r23
    1562:	6f 91       	pop	r22
    1564:	5f 91       	pop	r21
    1566:	4f 91       	pop	r20
    1568:	3f 91       	pop	r19
    156a:	2f 91       	pop	r18
    156c:	0f 90       	pop	r0
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	0f 90       	pop	r0
    1572:	1f 90       	pop	r1
    1574:	18 95       	reti

00001576 <_ZN4UART4SendEc>:
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
    1576:	e0 ec       	ldi	r30, 0xC0	; 192
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	85 ff       	sbrs	r24, 5
    157e:	fd cf       	rjmp	.-6      	; 0x157a <_ZN4UART4SendEc+0x4>
		UDR0=message;
    1580:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1584:	08 95       	ret

00001586 <_ZN4UART11SendMessageEPKcj>:
	}
	void UART::SendMessage(const char* message, unsigned int length){
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
		for(unsigned int i=0; i<length; i++)
    1592:	41 15       	cp	r20, r1
    1594:	51 05       	cpc	r21, r1
    1596:	61 f0       	breq	.+24     	; 0x15b0 <_ZN4UART11SendMessageEPKcj+0x2a>
    1598:	8b 01       	movw	r16, r22
    159a:	7c 01       	movw	r14, r24
    159c:	eb 01       	movw	r28, r22
    159e:	04 0f       	add	r16, r20
    15a0:	15 1f       	adc	r17, r21
		Send(*(message+i));
    15a2:	69 91       	ld	r22, Y+
    15a4:	c7 01       	movw	r24, r14
    15a6:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN4UART4SendEc>
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
		UDR0=message;
	}
	void UART::SendMessage(const char* message, unsigned int length){
		for(unsigned int i=0; i<length; i++)
    15aa:	c0 17       	cp	r28, r16
    15ac:	d1 07       	cpc	r29, r17
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <_ZN4UART11SendMessageEPKcj+0x1c>
		Send(*(message+i));
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	08 95       	ret

000015be <_GLOBAL__sub_I__ZN4UART10_SingletonE>:
void operator=(UART const&) = delete; // Don't implement
protected:
public:

private:
UART(){}
    15be:	e7 eb       	ldi	r30, 0xB7	; 183
    15c0:	f2 e0       	ldi	r31, 0x02	; 2
    15c2:	8e e8       	ldi	r24, 0x8E	; 142
    15c4:	92 e0       	ldi	r25, 0x02	; 2
    15c6:	91 83       	std	Z+1, r25	; 0x01
    15c8:	80 83       	st	Z, r24
    15ca:	86 e9       	ldi	r24, 0x96	; 150
    15cc:	92 e0       	ldi	r25, 0x02	; 2
    15ce:	93 83       	std	Z+3, r25	; 0x03
    15d0:	82 83       	std	Z+2, r24	; 0x02
    15d2:	08 95       	ret

000015d4 <__tablejump2__>:
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	05 90       	lpm	r0, Z+
    15da:	f4 91       	lpm	r31, Z
    15dc:	e0 2d       	mov	r30, r0
    15de:	09 94       	ijmp

000015e0 <malloc>:
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	91 05       	cpc	r25, r1
    15ec:	10 f4       	brcc	.+4      	; 0x15f2 <malloc+0x12>
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	e0 91 c8 03 	lds	r30, 0x03C8	; 0x8003c8 <__flp>
    15f6:	f0 91 c9 03 	lds	r31, 0x03C9	; 0x8003c9 <__flp+0x1>
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	a0 e0       	ldi	r26, 0x00	; 0
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	30 97       	sbiw	r30, 0x00	; 0
    1604:	19 f1       	breq	.+70     	; 0x164c <malloc+0x6c>
    1606:	40 81       	ld	r20, Z
    1608:	51 81       	ldd	r21, Z+1	; 0x01
    160a:	02 81       	ldd	r16, Z+2	; 0x02
    160c:	13 81       	ldd	r17, Z+3	; 0x03
    160e:	48 17       	cp	r20, r24
    1610:	59 07       	cpc	r21, r25
    1612:	c8 f0       	brcs	.+50     	; 0x1646 <malloc+0x66>
    1614:	84 17       	cp	r24, r20
    1616:	95 07       	cpc	r25, r21
    1618:	69 f4       	brne	.+26     	; 0x1634 <malloc+0x54>
    161a:	10 97       	sbiw	r26, 0x00	; 0
    161c:	31 f0       	breq	.+12     	; 0x162a <malloc+0x4a>
    161e:	12 96       	adiw	r26, 0x02	; 2
    1620:	0c 93       	st	X, r16
    1622:	12 97       	sbiw	r26, 0x02	; 2
    1624:	13 96       	adiw	r26, 0x03	; 3
    1626:	1c 93       	st	X, r17
    1628:	27 c0       	rjmp	.+78     	; 0x1678 <malloc+0x98>
    162a:	00 93 c8 03 	sts	0x03C8, r16	; 0x8003c8 <__flp>
    162e:	10 93 c9 03 	sts	0x03C9, r17	; 0x8003c9 <__flp+0x1>
    1632:	22 c0       	rjmp	.+68     	; 0x1678 <malloc+0x98>
    1634:	21 15       	cp	r18, r1
    1636:	31 05       	cpc	r19, r1
    1638:	19 f0       	breq	.+6      	; 0x1640 <malloc+0x60>
    163a:	42 17       	cp	r20, r18
    163c:	53 07       	cpc	r21, r19
    163e:	18 f4       	brcc	.+6      	; 0x1646 <malloc+0x66>
    1640:	9a 01       	movw	r18, r20
    1642:	bd 01       	movw	r22, r26
    1644:	ef 01       	movw	r28, r30
    1646:	df 01       	movw	r26, r30
    1648:	f8 01       	movw	r30, r16
    164a:	db cf       	rjmp	.-74     	; 0x1602 <malloc+0x22>
    164c:	21 15       	cp	r18, r1
    164e:	31 05       	cpc	r19, r1
    1650:	f9 f0       	breq	.+62     	; 0x1690 <malloc+0xb0>
    1652:	28 1b       	sub	r18, r24
    1654:	39 0b       	sbc	r19, r25
    1656:	24 30       	cpi	r18, 0x04	; 4
    1658:	31 05       	cpc	r19, r1
    165a:	80 f4       	brcc	.+32     	; 0x167c <malloc+0x9c>
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	9b 81       	ldd	r25, Y+3	; 0x03
    1660:	61 15       	cp	r22, r1
    1662:	71 05       	cpc	r23, r1
    1664:	21 f0       	breq	.+8      	; 0x166e <malloc+0x8e>
    1666:	fb 01       	movw	r30, r22
    1668:	93 83       	std	Z+3, r25	; 0x03
    166a:	82 83       	std	Z+2, r24	; 0x02
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <malloc+0x96>
    166e:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <__flp+0x1>
    1672:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <__flp>
    1676:	fe 01       	movw	r30, r28
    1678:	32 96       	adiw	r30, 0x02	; 2
    167a:	44 c0       	rjmp	.+136    	; 0x1704 <malloc+0x124>
    167c:	fe 01       	movw	r30, r28
    167e:	e2 0f       	add	r30, r18
    1680:	f3 1f       	adc	r31, r19
    1682:	81 93       	st	Z+, r24
    1684:	91 93       	st	Z+, r25
    1686:	22 50       	subi	r18, 0x02	; 2
    1688:	31 09       	sbc	r19, r1
    168a:	39 83       	std	Y+1, r19	; 0x01
    168c:	28 83       	st	Y, r18
    168e:	3a c0       	rjmp	.+116    	; 0x1704 <malloc+0x124>
    1690:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <__brkval>
    1694:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <__brkval+0x1>
    1698:	23 2b       	or	r18, r19
    169a:	41 f4       	brne	.+16     	; 0x16ac <malloc+0xcc>
    169c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    16a0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    16a4:	30 93 c7 03 	sts	0x03C7, r19	; 0x8003c7 <__brkval+0x1>
    16a8:	20 93 c6 03 	sts	0x03C6, r18	; 0x8003c6 <__brkval>
    16ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    16b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    16b4:	21 15       	cp	r18, r1
    16b6:	31 05       	cpc	r19, r1
    16b8:	41 f4       	brne	.+16     	; 0x16ca <malloc+0xea>
    16ba:	2d b7       	in	r18, 0x3d	; 61
    16bc:	3e b7       	in	r19, 0x3e	; 62
    16be:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    16c2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    16c6:	24 1b       	sub	r18, r20
    16c8:	35 0b       	sbc	r19, r21
    16ca:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <__brkval>
    16ce:	f0 91 c7 03 	lds	r31, 0x03C7	; 0x8003c7 <__brkval+0x1>
    16d2:	e2 17       	cp	r30, r18
    16d4:	f3 07       	cpc	r31, r19
    16d6:	a0 f4       	brcc	.+40     	; 0x1700 <malloc+0x120>
    16d8:	2e 1b       	sub	r18, r30
    16da:	3f 0b       	sbc	r19, r31
    16dc:	28 17       	cp	r18, r24
    16de:	39 07       	cpc	r19, r25
    16e0:	78 f0       	brcs	.+30     	; 0x1700 <malloc+0x120>
    16e2:	ac 01       	movw	r20, r24
    16e4:	4e 5f       	subi	r20, 0xFE	; 254
    16e6:	5f 4f       	sbci	r21, 0xFF	; 255
    16e8:	24 17       	cp	r18, r20
    16ea:	35 07       	cpc	r19, r21
    16ec:	48 f0       	brcs	.+18     	; 0x1700 <malloc+0x120>
    16ee:	4e 0f       	add	r20, r30
    16f0:	5f 1f       	adc	r21, r31
    16f2:	50 93 c7 03 	sts	0x03C7, r21	; 0x8003c7 <__brkval+0x1>
    16f6:	40 93 c6 03 	sts	0x03C6, r20	; 0x8003c6 <__brkval>
    16fa:	81 93       	st	Z+, r24
    16fc:	91 93       	st	Z+, r25
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <malloc+0x124>
    1700:	e0 e0       	ldi	r30, 0x00	; 0
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	cf 01       	movw	r24, r30
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	08 95       	ret

00001710 <free>:
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	09 f4       	brne	.+2      	; 0x171a <free+0xa>
    1718:	81 c0       	rjmp	.+258    	; 0x181c <free+0x10c>
    171a:	fc 01       	movw	r30, r24
    171c:	32 97       	sbiw	r30, 0x02	; 2
    171e:	13 82       	std	Z+3, r1	; 0x03
    1720:	12 82       	std	Z+2, r1	; 0x02
    1722:	a0 91 c8 03 	lds	r26, 0x03C8	; 0x8003c8 <__flp>
    1726:	b0 91 c9 03 	lds	r27, 0x03C9	; 0x8003c9 <__flp+0x1>
    172a:	10 97       	sbiw	r26, 0x00	; 0
    172c:	81 f4       	brne	.+32     	; 0x174e <free+0x3e>
    172e:	20 81       	ld	r18, Z
    1730:	31 81       	ldd	r19, Z+1	; 0x01
    1732:	82 0f       	add	r24, r18
    1734:	93 1f       	adc	r25, r19
    1736:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <__brkval>
    173a:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <__brkval+0x1>
    173e:	28 17       	cp	r18, r24
    1740:	39 07       	cpc	r19, r25
    1742:	51 f5       	brne	.+84     	; 0x1798 <free+0x88>
    1744:	f0 93 c7 03 	sts	0x03C7, r31	; 0x8003c7 <__brkval+0x1>
    1748:	e0 93 c6 03 	sts	0x03C6, r30	; 0x8003c6 <__brkval>
    174c:	67 c0       	rjmp	.+206    	; 0x181c <free+0x10c>
    174e:	ed 01       	movw	r28, r26
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	ce 17       	cp	r28, r30
    1756:	df 07       	cpc	r29, r31
    1758:	40 f4       	brcc	.+16     	; 0x176a <free+0x5a>
    175a:	4a 81       	ldd	r20, Y+2	; 0x02
    175c:	5b 81       	ldd	r21, Y+3	; 0x03
    175e:	9e 01       	movw	r18, r28
    1760:	41 15       	cp	r20, r1
    1762:	51 05       	cpc	r21, r1
    1764:	f1 f0       	breq	.+60     	; 0x17a2 <free+0x92>
    1766:	ea 01       	movw	r28, r20
    1768:	f5 cf       	rjmp	.-22     	; 0x1754 <free+0x44>
    176a:	d3 83       	std	Z+3, r29	; 0x03
    176c:	c2 83       	std	Z+2, r28	; 0x02
    176e:	40 81       	ld	r20, Z
    1770:	51 81       	ldd	r21, Z+1	; 0x01
    1772:	84 0f       	add	r24, r20
    1774:	95 1f       	adc	r25, r21
    1776:	c8 17       	cp	r28, r24
    1778:	d9 07       	cpc	r29, r25
    177a:	59 f4       	brne	.+22     	; 0x1792 <free+0x82>
    177c:	88 81       	ld	r24, Y
    177e:	99 81       	ldd	r25, Y+1	; 0x01
    1780:	84 0f       	add	r24, r20
    1782:	95 1f       	adc	r25, r21
    1784:	02 96       	adiw	r24, 0x02	; 2
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	9b 81       	ldd	r25, Y+3	; 0x03
    178e:	93 83       	std	Z+3, r25	; 0x03
    1790:	82 83       	std	Z+2, r24	; 0x02
    1792:	21 15       	cp	r18, r1
    1794:	31 05       	cpc	r19, r1
    1796:	29 f4       	brne	.+10     	; 0x17a2 <free+0x92>
    1798:	f0 93 c9 03 	sts	0x03C9, r31	; 0x8003c9 <__flp+0x1>
    179c:	e0 93 c8 03 	sts	0x03C8, r30	; 0x8003c8 <__flp>
    17a0:	3d c0       	rjmp	.+122    	; 0x181c <free+0x10c>
    17a2:	e9 01       	movw	r28, r18
    17a4:	fb 83       	std	Y+3, r31	; 0x03
    17a6:	ea 83       	std	Y+2, r30	; 0x02
    17a8:	49 91       	ld	r20, Y+
    17aa:	59 91       	ld	r21, Y+
    17ac:	c4 0f       	add	r28, r20
    17ae:	d5 1f       	adc	r29, r21
    17b0:	ec 17       	cp	r30, r28
    17b2:	fd 07       	cpc	r31, r29
    17b4:	61 f4       	brne	.+24     	; 0x17ce <free+0xbe>
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	84 0f       	add	r24, r20
    17bc:	95 1f       	adc	r25, r21
    17be:	02 96       	adiw	r24, 0x02	; 2
    17c0:	e9 01       	movw	r28, r18
    17c2:	99 83       	std	Y+1, r25	; 0x01
    17c4:	88 83       	st	Y, r24
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	9b 83       	std	Y+3, r25	; 0x03
    17cc:	8a 83       	std	Y+2, r24	; 0x02
    17ce:	e0 e0       	ldi	r30, 0x00	; 0
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	12 96       	adiw	r26, 0x02	; 2
    17d4:	8d 91       	ld	r24, X+
    17d6:	9c 91       	ld	r25, X
    17d8:	13 97       	sbiw	r26, 0x03	; 3
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	19 f0       	breq	.+6      	; 0x17e4 <free+0xd4>
    17de:	fd 01       	movw	r30, r26
    17e0:	dc 01       	movw	r26, r24
    17e2:	f7 cf       	rjmp	.-18     	; 0x17d2 <free+0xc2>
    17e4:	8d 91       	ld	r24, X+
    17e6:	9c 91       	ld	r25, X
    17e8:	11 97       	sbiw	r26, 0x01	; 1
    17ea:	9d 01       	movw	r18, r26
    17ec:	2e 5f       	subi	r18, 0xFE	; 254
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	82 0f       	add	r24, r18
    17f2:	93 1f       	adc	r25, r19
    17f4:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <__brkval>
    17f8:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <__brkval+0x1>
    17fc:	28 17       	cp	r18, r24
    17fe:	39 07       	cpc	r19, r25
    1800:	69 f4       	brne	.+26     	; 0x181c <free+0x10c>
    1802:	30 97       	sbiw	r30, 0x00	; 0
    1804:	29 f4       	brne	.+10     	; 0x1810 <free+0x100>
    1806:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <__flp+0x1>
    180a:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <__flp>
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <free+0x104>
    1810:	13 82       	std	Z+3, r1	; 0x03
    1812:	12 82       	std	Z+2, r1	; 0x02
    1814:	b0 93 c7 03 	sts	0x03C7, r27	; 0x8003c7 <__brkval+0x1>
    1818:	a0 93 c6 03 	sts	0x03C6, r26	; 0x8003c6 <__brkval>
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <atol>:
    1822:	1f 93       	push	r17
    1824:	fc 01       	movw	r30, r24
    1826:	99 27       	eor	r25, r25
    1828:	88 27       	eor	r24, r24
    182a:	bc 01       	movw	r22, r24
    182c:	e8 94       	clt
    182e:	11 91       	ld	r17, Z+
    1830:	10 32       	cpi	r17, 0x20	; 32
    1832:	e9 f3       	breq	.-6      	; 0x182e <atol+0xc>
    1834:	19 30       	cpi	r17, 0x09	; 9
    1836:	10 f0       	brcs	.+4      	; 0x183c <atol+0x1a>
    1838:	1e 30       	cpi	r17, 0x0E	; 14
    183a:	c8 f3       	brcs	.-14     	; 0x182e <atol+0xc>
    183c:	1b 32       	cpi	r17, 0x2B	; 43
    183e:	51 f0       	breq	.+20     	; 0x1854 <atol+0x32>
    1840:	1d 32       	cpi	r17, 0x2D	; 45
    1842:	49 f4       	brne	.+18     	; 0x1856 <atol+0x34>
    1844:	68 94       	set
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <atol+0x32>
    1848:	0e 94 41 0c 	call	0x1882	; 0x1882 <__mulsi_const_10>
    184c:	61 0f       	add	r22, r17
    184e:	71 1d       	adc	r23, r1
    1850:	81 1d       	adc	r24, r1
    1852:	91 1d       	adc	r25, r1
    1854:	11 91       	ld	r17, Z+
    1856:	10 53       	subi	r17, 0x30	; 48
    1858:	1a 30       	cpi	r17, 0x0A	; 10
    185a:	b0 f3       	brcs	.-20     	; 0x1848 <atol+0x26>
    185c:	3e f4       	brtc	.+14     	; 0x186c <atol+0x4a>
    185e:	90 95       	com	r25
    1860:	80 95       	com	r24
    1862:	70 95       	com	r23
    1864:	61 95       	neg	r22
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	8f 4f       	sbci	r24, 0xFF	; 255
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	1f 91       	pop	r17
    186e:	08 95       	ret

00001870 <strcmp>:
    1870:	fb 01       	movw	r30, r22
    1872:	dc 01       	movw	r26, r24
    1874:	8d 91       	ld	r24, X+
    1876:	01 90       	ld	r0, Z+
    1878:	80 19       	sub	r24, r0
    187a:	01 10       	cpse	r0, r1
    187c:	d9 f3       	breq	.-10     	; 0x1874 <strcmp+0x4>
    187e:	99 0b       	sbc	r25, r25
    1880:	08 95       	ret

00001882 <__mulsi_const_10>:
    1882:	59 2f       	mov	r21, r25
    1884:	48 2f       	mov	r20, r24
    1886:	37 2f       	mov	r19, r23
    1888:	26 2f       	mov	r18, r22
    188a:	66 0f       	add	r22, r22
    188c:	77 1f       	adc	r23, r23
    188e:	88 1f       	adc	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	88 1f       	adc	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	62 0f       	add	r22, r18
    189c:	73 1f       	adc	r23, r19
    189e:	84 1f       	adc	r24, r20
    18a0:	95 1f       	adc	r25, r21
    18a2:	66 0f       	add	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	88 1f       	adc	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	08 95       	ret

000018ac <sprintf>:
    18ac:	ae e0       	ldi	r26, 0x0E	; 14
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ec e5       	ldi	r30, 0x5C	; 92
    18b2:	fc e0       	ldi	r31, 0x0C	; 12
    18b4:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__prologue_saves__+0x1c>
    18b8:	0d 89       	ldd	r16, Y+21	; 0x15
    18ba:	1e 89       	ldd	r17, Y+22	; 0x16
    18bc:	86 e0       	ldi	r24, 0x06	; 6
    18be:	8c 83       	std	Y+4, r24	; 0x04
    18c0:	1a 83       	std	Y+2, r17	; 0x02
    18c2:	09 83       	std	Y+1, r16	; 0x01
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
    18c6:	9f e7       	ldi	r25, 0x7F	; 127
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	ae 01       	movw	r20, r28
    18ce:	47 5e       	subi	r20, 0xE7	; 231
    18d0:	5f 4f       	sbci	r21, 0xFF	; 255
    18d2:	6f 89       	ldd	r22, Y+23	; 0x17
    18d4:	78 8d       	ldd	r23, Y+24	; 0x18
    18d6:	ce 01       	movw	r24, r28
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <vfprintf>
    18de:	ef 81       	ldd	r30, Y+7	; 0x07
    18e0:	f8 85       	ldd	r31, Y+8	; 0x08
    18e2:	e0 0f       	add	r30, r16
    18e4:	f1 1f       	adc	r31, r17
    18e6:	10 82       	st	Z, r1
    18e8:	2e 96       	adiw	r28, 0x0e	; 14
    18ea:	e4 e0       	ldi	r30, 0x04	; 4
    18ec:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__epilogue_restores__+0x1c>

000018f0 <vfprintf>:
    18f0:	ab e0       	ldi	r26, 0x0B	; 11
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ee e7       	ldi	r30, 0x7E	; 126
    18f6:	fc e0       	ldi	r31, 0x0C	; 12
    18f8:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__prologue_saves__>
    18fc:	6c 01       	movw	r12, r24
    18fe:	7b 01       	movw	r14, r22
    1900:	8a 01       	movw	r16, r20
    1902:	fc 01       	movw	r30, r24
    1904:	17 82       	std	Z+7, r1	; 0x07
    1906:	16 82       	std	Z+6, r1	; 0x06
    1908:	83 81       	ldd	r24, Z+3	; 0x03
    190a:	81 ff       	sbrs	r24, 1
    190c:	cc c1       	rjmp	.+920    	; 0x1ca6 <vfprintf+0x3b6>
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	3c 01       	movw	r6, r24
    1914:	f6 01       	movw	r30, r12
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	f7 01       	movw	r30, r14
    191a:	93 fd       	sbrc	r25, 3
    191c:	85 91       	lpm	r24, Z+
    191e:	93 ff       	sbrs	r25, 3
    1920:	81 91       	ld	r24, Z+
    1922:	7f 01       	movw	r14, r30
    1924:	88 23       	and	r24, r24
    1926:	09 f4       	brne	.+2      	; 0x192a <vfprintf+0x3a>
    1928:	ba c1       	rjmp	.+884    	; 0x1c9e <vfprintf+0x3ae>
    192a:	85 32       	cpi	r24, 0x25	; 37
    192c:	39 f4       	brne	.+14     	; 0x193c <vfprintf+0x4c>
    192e:	93 fd       	sbrc	r25, 3
    1930:	85 91       	lpm	r24, Z+
    1932:	93 ff       	sbrs	r25, 3
    1934:	81 91       	ld	r24, Z+
    1936:	7f 01       	movw	r14, r30
    1938:	85 32       	cpi	r24, 0x25	; 37
    193a:	29 f4       	brne	.+10     	; 0x1946 <vfprintf+0x56>
    193c:	b6 01       	movw	r22, r12
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fputc>
    1944:	e7 cf       	rjmp	.-50     	; 0x1914 <vfprintf+0x24>
    1946:	91 2c       	mov	r9, r1
    1948:	21 2c       	mov	r2, r1
    194a:	31 2c       	mov	r3, r1
    194c:	ff e1       	ldi	r31, 0x1F	; 31
    194e:	f3 15       	cp	r31, r3
    1950:	d8 f0       	brcs	.+54     	; 0x1988 <vfprintf+0x98>
    1952:	8b 32       	cpi	r24, 0x2B	; 43
    1954:	79 f0       	breq	.+30     	; 0x1974 <vfprintf+0x84>
    1956:	38 f4       	brcc	.+14     	; 0x1966 <vfprintf+0x76>
    1958:	80 32       	cpi	r24, 0x20	; 32
    195a:	79 f0       	breq	.+30     	; 0x197a <vfprintf+0x8a>
    195c:	83 32       	cpi	r24, 0x23	; 35
    195e:	a1 f4       	brne	.+40     	; 0x1988 <vfprintf+0x98>
    1960:	23 2d       	mov	r18, r3
    1962:	20 61       	ori	r18, 0x10	; 16
    1964:	1d c0       	rjmp	.+58     	; 0x19a0 <vfprintf+0xb0>
    1966:	8d 32       	cpi	r24, 0x2D	; 45
    1968:	61 f0       	breq	.+24     	; 0x1982 <vfprintf+0x92>
    196a:	80 33       	cpi	r24, 0x30	; 48
    196c:	69 f4       	brne	.+26     	; 0x1988 <vfprintf+0x98>
    196e:	23 2d       	mov	r18, r3
    1970:	21 60       	ori	r18, 0x01	; 1
    1972:	16 c0       	rjmp	.+44     	; 0x19a0 <vfprintf+0xb0>
    1974:	83 2d       	mov	r24, r3
    1976:	82 60       	ori	r24, 0x02	; 2
    1978:	38 2e       	mov	r3, r24
    197a:	e3 2d       	mov	r30, r3
    197c:	e4 60       	ori	r30, 0x04	; 4
    197e:	3e 2e       	mov	r3, r30
    1980:	2a c0       	rjmp	.+84     	; 0x19d6 <vfprintf+0xe6>
    1982:	f3 2d       	mov	r31, r3
    1984:	f8 60       	ori	r31, 0x08	; 8
    1986:	1d c0       	rjmp	.+58     	; 0x19c2 <vfprintf+0xd2>
    1988:	37 fc       	sbrc	r3, 7
    198a:	2d c0       	rjmp	.+90     	; 0x19e6 <vfprintf+0xf6>
    198c:	20 ed       	ldi	r18, 0xD0	; 208
    198e:	28 0f       	add	r18, r24
    1990:	2a 30       	cpi	r18, 0x0A	; 10
    1992:	40 f0       	brcs	.+16     	; 0x19a4 <vfprintf+0xb4>
    1994:	8e 32       	cpi	r24, 0x2E	; 46
    1996:	b9 f4       	brne	.+46     	; 0x19c6 <vfprintf+0xd6>
    1998:	36 fc       	sbrc	r3, 6
    199a:	81 c1       	rjmp	.+770    	; 0x1c9e <vfprintf+0x3ae>
    199c:	23 2d       	mov	r18, r3
    199e:	20 64       	ori	r18, 0x40	; 64
    19a0:	32 2e       	mov	r3, r18
    19a2:	19 c0       	rjmp	.+50     	; 0x19d6 <vfprintf+0xe6>
    19a4:	36 fe       	sbrs	r3, 6
    19a6:	06 c0       	rjmp	.+12     	; 0x19b4 <vfprintf+0xc4>
    19a8:	8a e0       	ldi	r24, 0x0A	; 10
    19aa:	98 9e       	mul	r9, r24
    19ac:	20 0d       	add	r18, r0
    19ae:	11 24       	eor	r1, r1
    19b0:	92 2e       	mov	r9, r18
    19b2:	11 c0       	rjmp	.+34     	; 0x19d6 <vfprintf+0xe6>
    19b4:	ea e0       	ldi	r30, 0x0A	; 10
    19b6:	2e 9e       	mul	r2, r30
    19b8:	20 0d       	add	r18, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	22 2e       	mov	r2, r18
    19be:	f3 2d       	mov	r31, r3
    19c0:	f0 62       	ori	r31, 0x20	; 32
    19c2:	3f 2e       	mov	r3, r31
    19c4:	08 c0       	rjmp	.+16     	; 0x19d6 <vfprintf+0xe6>
    19c6:	8c 36       	cpi	r24, 0x6C	; 108
    19c8:	21 f4       	brne	.+8      	; 0x19d2 <vfprintf+0xe2>
    19ca:	83 2d       	mov	r24, r3
    19cc:	80 68       	ori	r24, 0x80	; 128
    19ce:	38 2e       	mov	r3, r24
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <vfprintf+0xe6>
    19d2:	88 36       	cpi	r24, 0x68	; 104
    19d4:	41 f4       	brne	.+16     	; 0x19e6 <vfprintf+0xf6>
    19d6:	f7 01       	movw	r30, r14
    19d8:	93 fd       	sbrc	r25, 3
    19da:	85 91       	lpm	r24, Z+
    19dc:	93 ff       	sbrs	r25, 3
    19de:	81 91       	ld	r24, Z+
    19e0:	7f 01       	movw	r14, r30
    19e2:	81 11       	cpse	r24, r1
    19e4:	b3 cf       	rjmp	.-154    	; 0x194c <vfprintf+0x5c>
    19e6:	98 2f       	mov	r25, r24
    19e8:	9f 7d       	andi	r25, 0xDF	; 223
    19ea:	95 54       	subi	r25, 0x45	; 69
    19ec:	93 30       	cpi	r25, 0x03	; 3
    19ee:	28 f4       	brcc	.+10     	; 0x19fa <vfprintf+0x10a>
    19f0:	0c 5f       	subi	r16, 0xFC	; 252
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	9f e3       	ldi	r25, 0x3F	; 63
    19f6:	99 83       	std	Y+1, r25	; 0x01
    19f8:	0d c0       	rjmp	.+26     	; 0x1a14 <vfprintf+0x124>
    19fa:	83 36       	cpi	r24, 0x63	; 99
    19fc:	31 f0       	breq	.+12     	; 0x1a0a <vfprintf+0x11a>
    19fe:	83 37       	cpi	r24, 0x73	; 115
    1a00:	71 f0       	breq	.+28     	; 0x1a1e <vfprintf+0x12e>
    1a02:	83 35       	cpi	r24, 0x53	; 83
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <vfprintf+0x118>
    1a06:	59 c0       	rjmp	.+178    	; 0x1aba <vfprintf+0x1ca>
    1a08:	21 c0       	rjmp	.+66     	; 0x1a4c <vfprintf+0x15c>
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	80 81       	ld	r24, Z
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	0e 5f       	subi	r16, 0xFE	; 254
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	88 24       	eor	r8, r8
    1a16:	83 94       	inc	r8
    1a18:	91 2c       	mov	r9, r1
    1a1a:	53 01       	movw	r10, r6
    1a1c:	13 c0       	rjmp	.+38     	; 0x1a44 <vfprintf+0x154>
    1a1e:	28 01       	movw	r4, r16
    1a20:	f2 e0       	ldi	r31, 0x02	; 2
    1a22:	4f 0e       	add	r4, r31
    1a24:	51 1c       	adc	r5, r1
    1a26:	f8 01       	movw	r30, r16
    1a28:	a0 80       	ld	r10, Z
    1a2a:	b1 80       	ldd	r11, Z+1	; 0x01
    1a2c:	36 fe       	sbrs	r3, 6
    1a2e:	03 c0       	rjmp	.+6      	; 0x1a36 <vfprintf+0x146>
    1a30:	69 2d       	mov	r22, r9
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <vfprintf+0x14a>
    1a36:	6f ef       	ldi	r22, 0xFF	; 255
    1a38:	7f ef       	ldi	r23, 0xFF	; 255
    1a3a:	c5 01       	movw	r24, r10
    1a3c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <strnlen>
    1a40:	4c 01       	movw	r8, r24
    1a42:	82 01       	movw	r16, r4
    1a44:	f3 2d       	mov	r31, r3
    1a46:	ff 77       	andi	r31, 0x7F	; 127
    1a48:	3f 2e       	mov	r3, r31
    1a4a:	16 c0       	rjmp	.+44     	; 0x1a78 <vfprintf+0x188>
    1a4c:	28 01       	movw	r4, r16
    1a4e:	22 e0       	ldi	r18, 0x02	; 2
    1a50:	42 0e       	add	r4, r18
    1a52:	51 1c       	adc	r5, r1
    1a54:	f8 01       	movw	r30, r16
    1a56:	a0 80       	ld	r10, Z
    1a58:	b1 80       	ldd	r11, Z+1	; 0x01
    1a5a:	36 fe       	sbrs	r3, 6
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <vfprintf+0x174>
    1a5e:	69 2d       	mov	r22, r9
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <vfprintf+0x178>
    1a64:	6f ef       	ldi	r22, 0xFF	; 255
    1a66:	7f ef       	ldi	r23, 0xFF	; 255
    1a68:	c5 01       	movw	r24, r10
    1a6a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <strnlen_P>
    1a6e:	4c 01       	movw	r8, r24
    1a70:	f3 2d       	mov	r31, r3
    1a72:	f0 68       	ori	r31, 0x80	; 128
    1a74:	3f 2e       	mov	r3, r31
    1a76:	82 01       	movw	r16, r4
    1a78:	33 fc       	sbrc	r3, 3
    1a7a:	1b c0       	rjmp	.+54     	; 0x1ab2 <vfprintf+0x1c2>
    1a7c:	82 2d       	mov	r24, r2
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	88 16       	cp	r8, r24
    1a82:	99 06       	cpc	r9, r25
    1a84:	b0 f4       	brcc	.+44     	; 0x1ab2 <vfprintf+0x1c2>
    1a86:	b6 01       	movw	r22, r12
    1a88:	80 e2       	ldi	r24, 0x20	; 32
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fputc>
    1a90:	2a 94       	dec	r2
    1a92:	f4 cf       	rjmp	.-24     	; 0x1a7c <vfprintf+0x18c>
    1a94:	f5 01       	movw	r30, r10
    1a96:	37 fc       	sbrc	r3, 7
    1a98:	85 91       	lpm	r24, Z+
    1a9a:	37 fe       	sbrs	r3, 7
    1a9c:	81 91       	ld	r24, Z+
    1a9e:	5f 01       	movw	r10, r30
    1aa0:	b6 01       	movw	r22, r12
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fputc>
    1aa8:	21 10       	cpse	r2, r1
    1aaa:	2a 94       	dec	r2
    1aac:	21 e0       	ldi	r18, 0x01	; 1
    1aae:	82 1a       	sub	r8, r18
    1ab0:	91 08       	sbc	r9, r1
    1ab2:	81 14       	cp	r8, r1
    1ab4:	91 04       	cpc	r9, r1
    1ab6:	71 f7       	brne	.-36     	; 0x1a94 <vfprintf+0x1a4>
    1ab8:	e8 c0       	rjmp	.+464    	; 0x1c8a <vfprintf+0x39a>
    1aba:	84 36       	cpi	r24, 0x64	; 100
    1abc:	11 f0       	breq	.+4      	; 0x1ac2 <vfprintf+0x1d2>
    1abe:	89 36       	cpi	r24, 0x69	; 105
    1ac0:	41 f5       	brne	.+80     	; 0x1b12 <vfprintf+0x222>
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	37 fe       	sbrs	r3, 7
    1ac6:	07 c0       	rjmp	.+14     	; 0x1ad6 <vfprintf+0x1e6>
    1ac8:	60 81       	ld	r22, Z
    1aca:	71 81       	ldd	r23, Z+1	; 0x01
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	0c 5f       	subi	r16, 0xFC	; 252
    1ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad4:	08 c0       	rjmp	.+16     	; 0x1ae6 <vfprintf+0x1f6>
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	07 2e       	mov	r0, r23
    1adc:	00 0c       	add	r0, r0
    1ade:	88 0b       	sbc	r24, r24
    1ae0:	99 0b       	sbc	r25, r25
    1ae2:	0e 5f       	subi	r16, 0xFE	; 254
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	f3 2d       	mov	r31, r3
    1ae8:	ff 76       	andi	r31, 0x6F	; 111
    1aea:	3f 2e       	mov	r3, r31
    1aec:	97 ff       	sbrs	r25, 7
    1aee:	09 c0       	rjmp	.+18     	; 0x1b02 <vfprintf+0x212>
    1af0:	90 95       	com	r25
    1af2:	80 95       	com	r24
    1af4:	70 95       	com	r23
    1af6:	61 95       	neg	r22
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	8f 4f       	sbci	r24, 0xFF	; 255
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	f0 68       	ori	r31, 0x80	; 128
    1b00:	3f 2e       	mov	r3, r31
    1b02:	2a e0       	ldi	r18, 0x0A	; 10
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	a3 01       	movw	r20, r6
    1b08:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__ultoa_invert>
    1b0c:	88 2e       	mov	r8, r24
    1b0e:	86 18       	sub	r8, r6
    1b10:	45 c0       	rjmp	.+138    	; 0x1b9c <vfprintf+0x2ac>
    1b12:	85 37       	cpi	r24, 0x75	; 117
    1b14:	31 f4       	brne	.+12     	; 0x1b22 <vfprintf+0x232>
    1b16:	23 2d       	mov	r18, r3
    1b18:	2f 7e       	andi	r18, 0xEF	; 239
    1b1a:	b2 2e       	mov	r11, r18
    1b1c:	2a e0       	ldi	r18, 0x0A	; 10
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	25 c0       	rjmp	.+74     	; 0x1b6c <vfprintf+0x27c>
    1b22:	93 2d       	mov	r25, r3
    1b24:	99 7f       	andi	r25, 0xF9	; 249
    1b26:	b9 2e       	mov	r11, r25
    1b28:	8f 36       	cpi	r24, 0x6F	; 111
    1b2a:	c1 f0       	breq	.+48     	; 0x1b5c <vfprintf+0x26c>
    1b2c:	18 f4       	brcc	.+6      	; 0x1b34 <vfprintf+0x244>
    1b2e:	88 35       	cpi	r24, 0x58	; 88
    1b30:	79 f0       	breq	.+30     	; 0x1b50 <vfprintf+0x260>
    1b32:	b5 c0       	rjmp	.+362    	; 0x1c9e <vfprintf+0x3ae>
    1b34:	80 37       	cpi	r24, 0x70	; 112
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <vfprintf+0x24e>
    1b38:	88 37       	cpi	r24, 0x78	; 120
    1b3a:	21 f0       	breq	.+8      	; 0x1b44 <vfprintf+0x254>
    1b3c:	b0 c0       	rjmp	.+352    	; 0x1c9e <vfprintf+0x3ae>
    1b3e:	e9 2f       	mov	r30, r25
    1b40:	e0 61       	ori	r30, 0x10	; 16
    1b42:	be 2e       	mov	r11, r30
    1b44:	b4 fe       	sbrs	r11, 4
    1b46:	0d c0       	rjmp	.+26     	; 0x1b62 <vfprintf+0x272>
    1b48:	fb 2d       	mov	r31, r11
    1b4a:	f4 60       	ori	r31, 0x04	; 4
    1b4c:	bf 2e       	mov	r11, r31
    1b4e:	09 c0       	rjmp	.+18     	; 0x1b62 <vfprintf+0x272>
    1b50:	34 fe       	sbrs	r3, 4
    1b52:	0a c0       	rjmp	.+20     	; 0x1b68 <vfprintf+0x278>
    1b54:	29 2f       	mov	r18, r25
    1b56:	26 60       	ori	r18, 0x06	; 6
    1b58:	b2 2e       	mov	r11, r18
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <vfprintf+0x278>
    1b5c:	28 e0       	ldi	r18, 0x08	; 8
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <vfprintf+0x27c>
    1b62:	20 e1       	ldi	r18, 0x10	; 16
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <vfprintf+0x27c>
    1b68:	20 e1       	ldi	r18, 0x10	; 16
    1b6a:	32 e0       	ldi	r19, 0x02	; 2
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	b7 fe       	sbrs	r11, 7
    1b70:	07 c0       	rjmp	.+14     	; 0x1b80 <vfprintf+0x290>
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	0c 5f       	subi	r16, 0xFC	; 252
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	06 c0       	rjmp	.+12     	; 0x1b8c <vfprintf+0x29c>
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 5f       	subi	r16, 0xFE	; 254
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	a3 01       	movw	r20, r6
    1b8e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__ultoa_invert>
    1b92:	88 2e       	mov	r8, r24
    1b94:	86 18       	sub	r8, r6
    1b96:	fb 2d       	mov	r31, r11
    1b98:	ff 77       	andi	r31, 0x7F	; 127
    1b9a:	3f 2e       	mov	r3, r31
    1b9c:	36 fe       	sbrs	r3, 6
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <vfprintf+0x2ca>
    1ba0:	23 2d       	mov	r18, r3
    1ba2:	2e 7f       	andi	r18, 0xFE	; 254
    1ba4:	a2 2e       	mov	r10, r18
    1ba6:	89 14       	cp	r8, r9
    1ba8:	58 f4       	brcc	.+22     	; 0x1bc0 <vfprintf+0x2d0>
    1baa:	34 fe       	sbrs	r3, 4
    1bac:	0b c0       	rjmp	.+22     	; 0x1bc4 <vfprintf+0x2d4>
    1bae:	32 fc       	sbrc	r3, 2
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <vfprintf+0x2d4>
    1bb2:	83 2d       	mov	r24, r3
    1bb4:	8e 7e       	andi	r24, 0xEE	; 238
    1bb6:	a8 2e       	mov	r10, r24
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <vfprintf+0x2d4>
    1bba:	b8 2c       	mov	r11, r8
    1bbc:	a3 2c       	mov	r10, r3
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <vfprintf+0x2d6>
    1bc0:	b8 2c       	mov	r11, r8
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <vfprintf+0x2d6>
    1bc4:	b9 2c       	mov	r11, r9
    1bc6:	a4 fe       	sbrs	r10, 4
    1bc8:	0f c0       	rjmp	.+30     	; 0x1be8 <vfprintf+0x2f8>
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e8 0d       	add	r30, r8
    1bce:	f1 1d       	adc	r31, r1
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 33       	cpi	r24, 0x30	; 48
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <vfprintf+0x2ee>
    1bd6:	9a 2d       	mov	r25, r10
    1bd8:	99 7e       	andi	r25, 0xE9	; 233
    1bda:	a9 2e       	mov	r10, r25
    1bdc:	09 c0       	rjmp	.+18     	; 0x1bf0 <vfprintf+0x300>
    1bde:	a2 fe       	sbrs	r10, 2
    1be0:	06 c0       	rjmp	.+12     	; 0x1bee <vfprintf+0x2fe>
    1be2:	b3 94       	inc	r11
    1be4:	b3 94       	inc	r11
    1be6:	04 c0       	rjmp	.+8      	; 0x1bf0 <vfprintf+0x300>
    1be8:	8a 2d       	mov	r24, r10
    1bea:	86 78       	andi	r24, 0x86	; 134
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <vfprintf+0x300>
    1bee:	b3 94       	inc	r11
    1bf0:	a3 fc       	sbrc	r10, 3
    1bf2:	11 c0       	rjmp	.+34     	; 0x1c16 <vfprintf+0x326>
    1bf4:	a0 fe       	sbrs	r10, 0
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <vfprintf+0x314>
    1bf8:	b2 14       	cp	r11, r2
    1bfa:	88 f4       	brcc	.+34     	; 0x1c1e <vfprintf+0x32e>
    1bfc:	28 0c       	add	r2, r8
    1bfe:	92 2c       	mov	r9, r2
    1c00:	9b 18       	sub	r9, r11
    1c02:	0e c0       	rjmp	.+28     	; 0x1c20 <vfprintf+0x330>
    1c04:	b2 14       	cp	r11, r2
    1c06:	60 f4       	brcc	.+24     	; 0x1c20 <vfprintf+0x330>
    1c08:	b6 01       	movw	r22, r12
    1c0a:	80 e2       	ldi	r24, 0x20	; 32
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fputc>
    1c12:	b3 94       	inc	r11
    1c14:	f7 cf       	rjmp	.-18     	; 0x1c04 <vfprintf+0x314>
    1c16:	b2 14       	cp	r11, r2
    1c18:	18 f4       	brcc	.+6      	; 0x1c20 <vfprintf+0x330>
    1c1a:	2b 18       	sub	r2, r11
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <vfprintf+0x332>
    1c1e:	98 2c       	mov	r9, r8
    1c20:	21 2c       	mov	r2, r1
    1c22:	a4 fe       	sbrs	r10, 4
    1c24:	10 c0       	rjmp	.+32     	; 0x1c46 <vfprintf+0x356>
    1c26:	b6 01       	movw	r22, r12
    1c28:	80 e3       	ldi	r24, 0x30	; 48
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fputc>
    1c30:	a2 fe       	sbrs	r10, 2
    1c32:	17 c0       	rjmp	.+46     	; 0x1c62 <vfprintf+0x372>
    1c34:	a1 fc       	sbrc	r10, 1
    1c36:	03 c0       	rjmp	.+6      	; 0x1c3e <vfprintf+0x34e>
    1c38:	88 e7       	ldi	r24, 0x78	; 120
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <vfprintf+0x352>
    1c3e:	88 e5       	ldi	r24, 0x58	; 88
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	b6 01       	movw	r22, r12
    1c44:	0c c0       	rjmp	.+24     	; 0x1c5e <vfprintf+0x36e>
    1c46:	8a 2d       	mov	r24, r10
    1c48:	86 78       	andi	r24, 0x86	; 134
    1c4a:	59 f0       	breq	.+22     	; 0x1c62 <vfprintf+0x372>
    1c4c:	a1 fe       	sbrs	r10, 1
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <vfprintf+0x364>
    1c50:	8b e2       	ldi	r24, 0x2B	; 43
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <vfprintf+0x366>
    1c54:	80 e2       	ldi	r24, 0x20	; 32
    1c56:	a7 fc       	sbrc	r10, 7
    1c58:	8d e2       	ldi	r24, 0x2D	; 45
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fputc>
    1c62:	89 14       	cp	r8, r9
    1c64:	38 f4       	brcc	.+14     	; 0x1c74 <vfprintf+0x384>
    1c66:	b6 01       	movw	r22, r12
    1c68:	80 e3       	ldi	r24, 0x30	; 48
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fputc>
    1c70:	9a 94       	dec	r9
    1c72:	f7 cf       	rjmp	.-18     	; 0x1c62 <vfprintf+0x372>
    1c74:	8a 94       	dec	r8
    1c76:	f3 01       	movw	r30, r6
    1c78:	e8 0d       	add	r30, r8
    1c7a:	f1 1d       	adc	r31, r1
    1c7c:	80 81       	ld	r24, Z
    1c7e:	b6 01       	movw	r22, r12
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fputc>
    1c86:	81 10       	cpse	r8, r1
    1c88:	f5 cf       	rjmp	.-22     	; 0x1c74 <vfprintf+0x384>
    1c8a:	22 20       	and	r2, r2
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <vfprintf+0x3a0>
    1c8e:	42 ce       	rjmp	.-892    	; 0x1914 <vfprintf+0x24>
    1c90:	b6 01       	movw	r22, r12
    1c92:	80 e2       	ldi	r24, 0x20	; 32
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <fputc>
    1c9a:	2a 94       	dec	r2
    1c9c:	f6 cf       	rjmp	.-20     	; 0x1c8a <vfprintf+0x39a>
    1c9e:	f6 01       	movw	r30, r12
    1ca0:	86 81       	ldd	r24, Z+6	; 0x06
    1ca2:	97 81       	ldd	r25, Z+7	; 0x07
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <vfprintf+0x3ba>
    1ca6:	8f ef       	ldi	r24, 0xFF	; 255
    1ca8:	9f ef       	ldi	r25, 0xFF	; 255
    1caa:	2b 96       	adiw	r28, 0x0b	; 11
    1cac:	e2 e1       	ldi	r30, 0x12	; 18
    1cae:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__epilogue_restores__>

00001cb2 <strnlen_P>:
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	05 90       	lpm	r0, Z+
    1cb6:	61 50       	subi	r22, 0x01	; 1
    1cb8:	70 40       	sbci	r23, 0x00	; 0
    1cba:	01 10       	cpse	r0, r1
    1cbc:	d8 f7       	brcc	.-10     	; 0x1cb4 <strnlen_P+0x2>
    1cbe:	80 95       	com	r24
    1cc0:	90 95       	com	r25
    1cc2:	8e 0f       	add	r24, r30
    1cc4:	9f 1f       	adc	r25, r31
    1cc6:	08 95       	ret

00001cc8 <strnlen>:
    1cc8:	fc 01       	movw	r30, r24
    1cca:	61 50       	subi	r22, 0x01	; 1
    1ccc:	70 40       	sbci	r23, 0x00	; 0
    1cce:	01 90       	ld	r0, Z+
    1cd0:	01 10       	cpse	r0, r1
    1cd2:	d8 f7       	brcc	.-10     	; 0x1cca <strnlen+0x2>
    1cd4:	80 95       	com	r24
    1cd6:	90 95       	com	r25
    1cd8:	8e 0f       	add	r24, r30
    1cda:	9f 1f       	adc	r25, r31
    1cdc:	08 95       	ret

00001cde <fputc>:
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	fb 01       	movw	r30, r22
    1ce8:	23 81       	ldd	r18, Z+3	; 0x03
    1cea:	21 fd       	sbrc	r18, 1
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <fputc+0x16>
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	9f ef       	ldi	r25, 0xFF	; 255
    1cf2:	2c c0       	rjmp	.+88     	; 0x1d4c <fputc+0x6e>
    1cf4:	22 ff       	sbrs	r18, 2
    1cf6:	16 c0       	rjmp	.+44     	; 0x1d24 <fputc+0x46>
    1cf8:	46 81       	ldd	r20, Z+6	; 0x06
    1cfa:	57 81       	ldd	r21, Z+7	; 0x07
    1cfc:	24 81       	ldd	r18, Z+4	; 0x04
    1cfe:	35 81       	ldd	r19, Z+5	; 0x05
    1d00:	42 17       	cp	r20, r18
    1d02:	53 07       	cpc	r21, r19
    1d04:	44 f4       	brge	.+16     	; 0x1d16 <fputc+0x38>
    1d06:	a0 81       	ld	r26, Z
    1d08:	b1 81       	ldd	r27, Z+1	; 0x01
    1d0a:	9d 01       	movw	r18, r26
    1d0c:	2f 5f       	subi	r18, 0xFF	; 255
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	31 83       	std	Z+1, r19	; 0x01
    1d12:	20 83       	st	Z, r18
    1d14:	8c 93       	st	X, r24
    1d16:	26 81       	ldd	r18, Z+6	; 0x06
    1d18:	37 81       	ldd	r19, Z+7	; 0x07
    1d1a:	2f 5f       	subi	r18, 0xFF	; 255
    1d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1e:	37 83       	std	Z+7, r19	; 0x07
    1d20:	26 83       	std	Z+6, r18	; 0x06
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <fputc+0x6e>
    1d24:	8b 01       	movw	r16, r22
    1d26:	ec 01       	movw	r28, r24
    1d28:	fb 01       	movw	r30, r22
    1d2a:	00 84       	ldd	r0, Z+8	; 0x08
    1d2c:	f1 85       	ldd	r31, Z+9	; 0x09
    1d2e:	e0 2d       	mov	r30, r0
    1d30:	09 95       	icall
    1d32:	89 2b       	or	r24, r25
    1d34:	e1 f6       	brne	.-72     	; 0x1cee <fputc+0x10>
    1d36:	d8 01       	movw	r26, r16
    1d38:	16 96       	adiw	r26, 0x06	; 6
    1d3a:	8d 91       	ld	r24, X+
    1d3c:	9c 91       	ld	r25, X
    1d3e:	17 97       	sbiw	r26, 0x07	; 7
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	17 96       	adiw	r26, 0x07	; 7
    1d44:	9c 93       	st	X, r25
    1d46:	8e 93       	st	-X, r24
    1d48:	16 97       	sbiw	r26, 0x06	; 6
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret

00001d56 <__ultoa_invert>:
    1d56:	fa 01       	movw	r30, r20
    1d58:	aa 27       	eor	r26, r26
    1d5a:	28 30       	cpi	r18, 0x08	; 8
    1d5c:	51 f1       	breq	.+84     	; 0x1db2 <__ultoa_invert+0x5c>
    1d5e:	20 31       	cpi	r18, 0x10	; 16
    1d60:	81 f1       	breq	.+96     	; 0x1dc2 <__ultoa_invert+0x6c>
    1d62:	e8 94       	clt
    1d64:	6f 93       	push	r22
    1d66:	6e 7f       	andi	r22, 0xFE	; 254
    1d68:	6e 5f       	subi	r22, 0xFE	; 254
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	af 4f       	sbci	r26, 0xFF	; 255
    1d72:	b1 e0       	ldi	r27, 0x01	; 1
    1d74:	3e d0       	rcall	.+124    	; 0x1df2 <__ultoa_invert+0x9c>
    1d76:	b4 e0       	ldi	r27, 0x04	; 4
    1d78:	3c d0       	rcall	.+120    	; 0x1df2 <__ultoa_invert+0x9c>
    1d7a:	67 0f       	add	r22, r23
    1d7c:	78 1f       	adc	r23, r24
    1d7e:	89 1f       	adc	r24, r25
    1d80:	9a 1f       	adc	r25, r26
    1d82:	a1 1d       	adc	r26, r1
    1d84:	68 0f       	add	r22, r24
    1d86:	79 1f       	adc	r23, r25
    1d88:	8a 1f       	adc	r24, r26
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	a1 1d       	adc	r26, r1
    1d8e:	6a 0f       	add	r22, r26
    1d90:	71 1d       	adc	r23, r1
    1d92:	81 1d       	adc	r24, r1
    1d94:	91 1d       	adc	r25, r1
    1d96:	a1 1d       	adc	r26, r1
    1d98:	20 d0       	rcall	.+64     	; 0x1dda <__ultoa_invert+0x84>
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <__ultoa_invert+0x48>
    1d9c:	68 94       	set
    1d9e:	3f 91       	pop	r19
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	26 9f       	mul	r18, r22
    1da4:	11 24       	eor	r1, r1
    1da6:	30 19       	sub	r19, r0
    1da8:	30 5d       	subi	r19, 0xD0	; 208
    1daa:	31 93       	st	Z+, r19
    1dac:	de f6       	brtc	.-74     	; 0x1d64 <__ultoa_invert+0xe>
    1dae:	cf 01       	movw	r24, r30
    1db0:	08 95       	ret
    1db2:	46 2f       	mov	r20, r22
    1db4:	47 70       	andi	r20, 0x07	; 7
    1db6:	40 5d       	subi	r20, 0xD0	; 208
    1db8:	41 93       	st	Z+, r20
    1dba:	b3 e0       	ldi	r27, 0x03	; 3
    1dbc:	0f d0       	rcall	.+30     	; 0x1ddc <__ultoa_invert+0x86>
    1dbe:	c9 f7       	brne	.-14     	; 0x1db2 <__ultoa_invert+0x5c>
    1dc0:	f6 cf       	rjmp	.-20     	; 0x1dae <__ultoa_invert+0x58>
    1dc2:	46 2f       	mov	r20, r22
    1dc4:	4f 70       	andi	r20, 0x0F	; 15
    1dc6:	40 5d       	subi	r20, 0xD0	; 208
    1dc8:	4a 33       	cpi	r20, 0x3A	; 58
    1dca:	18 f0       	brcs	.+6      	; 0x1dd2 <__ultoa_invert+0x7c>
    1dcc:	49 5d       	subi	r20, 0xD9	; 217
    1dce:	31 fd       	sbrc	r19, 1
    1dd0:	40 52       	subi	r20, 0x20	; 32
    1dd2:	41 93       	st	Z+, r20
    1dd4:	02 d0       	rcall	.+4      	; 0x1dda <__ultoa_invert+0x84>
    1dd6:	a9 f7       	brne	.-22     	; 0x1dc2 <__ultoa_invert+0x6c>
    1dd8:	ea cf       	rjmp	.-44     	; 0x1dae <__ultoa_invert+0x58>
    1dda:	b4 e0       	ldi	r27, 0x04	; 4
    1ddc:	a6 95       	lsr	r26
    1dde:	97 95       	ror	r25
    1de0:	87 95       	ror	r24
    1de2:	77 95       	ror	r23
    1de4:	67 95       	ror	r22
    1de6:	ba 95       	dec	r27
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <__ultoa_invert+0x86>
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	61 05       	cpc	r22, r1
    1dee:	71 05       	cpc	r23, r1
    1df0:	08 95       	ret
    1df2:	9b 01       	movw	r18, r22
    1df4:	ac 01       	movw	r20, r24
    1df6:	0a 2e       	mov	r0, r26
    1df8:	06 94       	lsr	r0
    1dfa:	57 95       	ror	r21
    1dfc:	47 95       	ror	r20
    1dfe:	37 95       	ror	r19
    1e00:	27 95       	ror	r18
    1e02:	ba 95       	dec	r27
    1e04:	c9 f7       	brne	.-14     	; 0x1df8 <__ultoa_invert+0xa2>
    1e06:	62 0f       	add	r22, r18
    1e08:	73 1f       	adc	r23, r19
    1e0a:	84 1f       	adc	r24, r20
    1e0c:	95 1f       	adc	r25, r21
    1e0e:	a0 1d       	adc	r26, r0
    1e10:	08 95       	ret

00001e12 <eeprom_read_byte>:
    1e12:	f9 99       	sbic	0x1f, 1	; 31
    1e14:	fe cf       	rjmp	.-4      	; 0x1e12 <eeprom_read_byte>
    1e16:	92 bd       	out	0x22, r25	; 34
    1e18:	81 bd       	out	0x21, r24	; 33
    1e1a:	f8 9a       	sbi	0x1f, 0	; 31
    1e1c:	99 27       	eor	r25, r25
    1e1e:	80 b5       	in	r24, 0x20	; 32
    1e20:	08 95       	ret

00001e22 <eeprom_read_word>:
    1e22:	a8 e1       	ldi	r26, 0x18	; 24
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	42 e0       	ldi	r20, 0x02	; 2
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <eeprom_read_blraw>

00001e2e <eeprom_write_byte>:
    1e2e:	26 2f       	mov	r18, r22

00001e30 <eeprom_write_r18>:
    1e30:	f9 99       	sbic	0x1f, 1	; 31
    1e32:	fe cf       	rjmp	.-4      	; 0x1e30 <eeprom_write_r18>
    1e34:	1f ba       	out	0x1f, r1	; 31
    1e36:	92 bd       	out	0x22, r25	; 34
    1e38:	81 bd       	out	0x21, r24	; 33
    1e3a:	20 bd       	out	0x20, r18	; 32
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	fa 9a       	sbi	0x1f, 2	; 31
    1e42:	f9 9a       	sbi	0x1f, 1	; 31
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	08 95       	ret

00001e4a <eeprom_write_word>:
    1e4a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <eeprom_write_byte>
    1e4e:	27 2f       	mov	r18, r23
    1e50:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <eeprom_write_r18>

00001e54 <eeprom_read_block>:
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22

00001e58 <eeprom_read_blraw>:
    1e58:	fc 01       	movw	r30, r24
    1e5a:	f9 99       	sbic	0x1f, 1	; 31
    1e5c:	fe cf       	rjmp	.-4      	; 0x1e5a <eeprom_read_blraw+0x2>
    1e5e:	06 c0       	rjmp	.+12     	; 0x1e6c <eeprom_read_blraw+0x14>
    1e60:	f2 bd       	out	0x22, r31	; 34
    1e62:	e1 bd       	out	0x21, r30	; 33
    1e64:	f8 9a       	sbi	0x1f, 0	; 31
    1e66:	31 96       	adiw	r30, 0x01	; 1
    1e68:	00 b4       	in	r0, 0x20	; 32
    1e6a:	0d 92       	st	X+, r0
    1e6c:	41 50       	subi	r20, 0x01	; 1
    1e6e:	50 40       	sbci	r21, 0x00	; 0
    1e70:	b8 f7       	brcc	.-18     	; 0x1e60 <eeprom_read_blraw+0x8>
    1e72:	08 95       	ret

00001e74 <__prologue_saves__>:
    1e74:	2f 92       	push	r2
    1e76:	3f 92       	push	r3
    1e78:	4f 92       	push	r4
    1e7a:	5f 92       	push	r5
    1e7c:	6f 92       	push	r6
    1e7e:	7f 92       	push	r7
    1e80:	8f 92       	push	r8
    1e82:	9f 92       	push	r9
    1e84:	af 92       	push	r10
    1e86:	bf 92       	push	r11
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	ca 1b       	sub	r28, r26
    1e9e:	db 0b       	sbc	r29, r27
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	09 94       	ijmp

00001eac <__epilogue_restores__>:
    1eac:	2a 88       	ldd	r2, Y+18	; 0x12
    1eae:	39 88       	ldd	r3, Y+17	; 0x11
    1eb0:	48 88       	ldd	r4, Y+16	; 0x10
    1eb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eba:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ebc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ebe:	b9 84       	ldd	r11, Y+9	; 0x09
    1ec0:	c8 84       	ldd	r12, Y+8	; 0x08
    1ec2:	df 80       	ldd	r13, Y+7	; 0x07
    1ec4:	ee 80       	ldd	r14, Y+6	; 0x06
    1ec6:	fd 80       	ldd	r15, Y+5	; 0x05
    1ec8:	0c 81       	ldd	r16, Y+4	; 0x04
    1eca:	1b 81       	ldd	r17, Y+3	; 0x03
    1ecc:	aa 81       	ldd	r26, Y+2	; 0x02
    1ece:	b9 81       	ldd	r27, Y+1	; 0x01
    1ed0:	ce 0f       	add	r28, r30
    1ed2:	d1 1d       	adc	r29, r1
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	ed 01       	movw	r28, r26
    1ee0:	08 95       	ret

00001ee2 <__do_global_dtors>:
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	c8 e3       	ldi	r28, 0x38	; 56
    1ee6:	d0 e0       	ldi	r29, 0x00	; 0
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <__do_global_dtors+0x10>
    1eea:	fe 01       	movw	r30, r28
    1eec:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__tablejump2__>
    1ef0:	21 96       	adiw	r28, 0x01	; 1
    1ef2:	c9 33       	cpi	r28, 0x39	; 57
    1ef4:	d1 07       	cpc	r29, r17
    1ef6:	c9 f7       	brne	.-14     	; 0x1eea <__do_global_dtors+0x8>
    1ef8:	f8 94       	cli

00001efa <__stop_program>:
    1efa:	ff cf       	rjmp	.-2      	; 0x1efa <__stop_program>
