
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000290  00800100  0000274c  00002800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000274c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  00800390  00800390  00002a90  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00002a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000024  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000001e  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  00002ad6  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b34  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000690  00000000  00000000  00002b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b567  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000373c  00000000  00000000  0000e76f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003350  00000000  00000000  00011eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000010cc  00000000  00000000  000151fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003049  00000000  00000000  000162c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000046c1  00000000  00000000  00019311  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  0001d9d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__dtors_end>
       4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      38:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_14>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__vector_18>
      4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	4b 06       	cpc	r4, r27
      6a:	8b 06       	cpc	r8, r27
      6c:	79 09       	sbc	r23, r9
      6e:	d7 09       	sbc	r29, r7
      70:	f0 0e       	add	r15, r16

00000072 <__ctors_end>:
      72:	e8 09       	sbc	r30, r8

00000074 <__dtors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	13 e0       	ldi	r17, 0x03	; 3
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	ec e4       	ldi	r30, 0x4C	; 76
      88:	f7 e2       	ldi	r31, 0x27	; 39
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a0 39       	cpi	r26, 0x90	; 144
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	24 e0       	ldi	r18, 0x04	; 4
      98:	a0 e9       	ldi	r26, 0x90	; 144
      9a:	b3 e0       	ldi	r27, 0x03	; 3
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	af 3c       	cpi	r26, 0xCF	; 207
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>

000000a6 <__do_global_ctors>:
      a6:	10 e0       	ldi	r17, 0x00	; 0
      a8:	c9 e3       	ldi	r28, 0x39	; 57
      aa:	d0 e0       	ldi	r29, 0x00	; 0
      ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_global_ctors+0x10>
      ae:	21 97       	sbiw	r28, 0x01	; 1
      b0:	fe 01       	movw	r30, r28
      b2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__tablejump2__>
      b6:	c4 33       	cpi	r28, 0x34	; 52
      b8:	d1 07       	cpc	r29, r17
      ba:	c9 f7       	brne	.-14     	; 0xae <__do_global_ctors+0x8>
      bc:	0e 94 36 01 	call	0x26c	; 0x26c <main>
      c0:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__do_global_dtors>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <i2c_delay_T2>:
	...
nop
nop
nop
nop
nop
nop
     10c:	00 00       	nop
	ret          ; 3   "
     10e:	08 95       	ret

00000110 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     110:	3d 98       	cbi	0x07, 5	; 7
	cbi SCL_DDR,SCL		;release SCL
     112:	3c 98       	cbi	0x07, 4	; 7
	cbi SDA_OUT,SDA
     114:	45 98       	cbi	0x08, 5	; 8
	cbi SCL_OUT,SCL
     116:	44 98       	cbi	0x08, 4	; 8
	ret
     118:	08 95       	ret

0000011a <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     11a:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     11c:	d5 df       	rcall	.-86     	; 0xc8 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     11e:	1d d0       	rcall	.+58     	; 0x15a <i2c_write>
	ret
     120:	08 95       	ret

00000122 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     122:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     124:	d1 df       	rcall	.-94     	; 0xc8 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     126:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     128:	cf df       	rcall	.-98     	; 0xc8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     12a:	3c 98       	cbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     12c:	cd df       	rcall	.-102    	; 0xc8 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     12e:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay	T/2
     130:	cb df       	rcall	.-106    	; 0xc8 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     132:	13 d0       	rcall	.+38     	; 0x15a <i2c_write>
	ret
     134:	08 95       	ret

00000136 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     136:	08 2e       	mov	r0, r24

00000138 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     138:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     13a:	c6 df       	rcall	.-116    	; 0xc8 <i2c_delay_T2>
	mov	r24,__tmp_reg__
     13c:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     13e:	0d d0       	rcall	.+26     	; 0x15a <i2c_write>
	tst	r24		;if device not busy -> done
     140:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     142:	11 f0       	breq	.+4      	; 0x148 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     144:	02 d0       	rcall	.+4      	; 0x14a <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     146:	f8 cf       	rjmp	.-16     	; 0x138 <i2c_start_wait1>

00000148 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     148:	08 95       	ret

0000014a <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     14a:	3c 9a       	sbi	0x07, 4	; 7
	sbi	SDA_DDR,SDA	;force SDA low
     14c:	3d 9a       	sbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     14e:	bc df       	rcall	.-136    	; 0xc8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     150:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     152:	ba df       	rcall	.-140    	; 0xc8 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     154:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     156:	b8 df       	rcall	.-144    	; 0xc8 <i2c_delay_T2>
	ret
     158:	08 95       	ret

0000015a <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     15a:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     15c:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     15e:	01 c0       	rjmp	.+2      	; 0x162 <i2c_write_first>

00000160 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     160:	88 0f       	add	r24, r24

00000162 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     162:	59 f0       	breq	.+22     	; 0x17a <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     164:	3c 9a       	sbi	0x07, 4	; 7
	brcc	i2c_write_low
     166:	18 f4       	brcc	.+6      	; 0x16e <i2c_write_low>
	nop
     168:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     16a:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16c:	02 c0       	rjmp	.+4      	; 0x172 <i2c_write_high>

0000016e <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     16e:	3d 9a       	sbi	0x07, 5	; 7
	rjmp	i2c_write_high
     170:	00 c0       	rjmp	.+0      	; 0x172 <i2c_write_high>

00000172 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     172:	aa df       	rcall	.-172    	; 0xc8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     174:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     176:	a8 df       	rcall	.-176    	; 0xc8 <i2c_delay_T2>
	rjmp	i2c_write_bit
     178:	f3 cf       	rjmp	.-26     	; 0x160 <i2c_write_bit>

0000017a <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     17a:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA
     17c:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     17e:	a4 df       	rcall	.-184    	; 0xc8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     180:	3c 98       	cbi	0x07, 4	; 7

00000182 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     182:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_ack_wait
     184:	fe cf       	rjmp	.-4      	; 0x182 <i2c_ack_wait>
	
	clr	r24		;return 0
     186:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     188:	35 99       	sbic	0x06, 5	; 6
	ldi	r24,1
     18a:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     18c:	9d df       	rcall	.-198    	; 0xc8 <i2c_delay_T2>
	clr	r25
     18e:	99 27       	eor	r25, r25
	ret
     190:	08 95       	ret

00000192 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     192:	88 27       	eor	r24, r24
	rjmp	i2c_read
     194:	01 c0       	rjmp	.+2      	; 0x198 <i2c_read>

00000196 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     196:	81 e0       	ldi	r24, 0x01	; 1

00000198 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     198:	71 e0       	ldi	r23, 0x01	; 1

0000019a <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     19a:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     19c:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     19e:	94 df       	rcall	.-216    	; 0xc8 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     1a0:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     1a2:	92 df       	rcall	.-220    	; 0xc8 <i2c_delay_T2>

000001a4 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     1a4:	34 9b       	sbis	0x06, 4	; 6
    rjmp	i2c_read_stretch
     1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <i2c_read_stretch>
    	
	clc			;clear carry flag
     1a8:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     1aa:	35 99       	sbic	0x06, 5	; 6
	sec			;  set carry flag
     1ac:	08 94       	sec
	
	rol	r23		;store bit
     1ae:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     1b0:	a0 f7       	brcc	.-24     	; 0x19a <i2c_read_bit>

000001b2 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     1b2:	3c 9a       	sbi	0x07, 4	; 7
	cpi	r24,1
     1b4:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     1b6:	11 f0       	breq	.+4      	; 0x1bc <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     1b8:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_put_ack_high
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <i2c_put_ack_high>

000001bc <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     1bc:	3d 9a       	sbi	0x07, 5	; 7

000001be <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     1be:	84 df       	rcall	.-248    	; 0xc8 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     1c0:	3c 98       	cbi	0x07, 4	; 7

000001c2 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     1c2:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_put_ack_wait
     1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     1c6:	80 df       	rcall	.-256    	; 0xc8 <i2c_delay_T2>
	mov	r24,r23
     1c8:	87 2f       	mov	r24, r23
	clr	r25
     1ca:	99 27       	eor	r25, r25
	ret
     1cc:	08 95       	ret

000001ce <_ZN22CommunicationException8ToStringEv>:

CommunicationException::~CommunicationException()
{
	if(message!=NULL) delete message;
}
const char* CommunicationException::ToString(){
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ec 01       	movw	r28, r24

	if(message==NULL){
     1dc:	8e 81       	ldd	r24, Y+6	; 0x06
     1de:	9f 81       	ldd	r25, Y+7	; 0x07
     1e0:	89 2b       	or	r24, r25
     1e2:	41 f5       	brne	.+80     	; 0x234 <_ZN22CommunicationException8ToStringEv+0x66>
		size_t totalLength = strlen(deviceName)+27;
     1e4:	fc 80       	ldd	r15, Y+4	; 0x04
     1e6:	ed 80       	ldd	r14, Y+5	; 0x05
     1e8:	ef 2d       	mov	r30, r15
     1ea:	fe 2d       	mov	r31, r14
     1ec:	df 01       	movw	r26, r30
     1ee:	0d 90       	ld	r0, X+
     1f0:	00 20       	and	r0, r0
     1f2:	e9 f7       	brne	.-6      	; 0x1ee <_ZN22CommunicationException8ToStringEv+0x20>
     1f4:	8d 01       	movw	r16, r26
     1f6:	0e 1b       	sub	r16, r30
     1f8:	1f 0b       	sbc	r17, r31
     1fa:	06 5e       	subi	r16, 0xE6	; 230
     1fc:	1f 4f       	sbci	r17, 0xFF	; 255
		message=(char*)malloc(sizeof(char)*totalLength);
     1fe:	c8 01       	movw	r24, r16
     200:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <malloc>
     204:	9f 83       	std	Y+7, r25	; 0x07
     206:	8e 83       	std	Y+6, r24	; 0x06
		if(message!=NULL){
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	a1 f0       	breq	.+40     	; 0x234 <_ZN22CommunicationException8ToStringEv+0x66>
			snprintf(message,totalLength, "Communication with %s failed", deviceName);
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	26 e0       	ldi	r18, 0x06	; 6
     212:	31 e0       	ldi	r19, 0x01	; 1
     214:	3f 93       	push	r19
     216:	2f 93       	push	r18
     218:	1f 93       	push	r17
     21a:	0f 93       	push	r16
     21c:	9f 93       	push	r25
     21e:	8f 93       	push	r24
     220:	0e 94 70 10 	call	0x20e0	; 0x20e0 <snprintf>
     224:	8d b7       	in	r24, 0x3d	; 61
     226:	9e b7       	in	r25, 0x3e	; 62
     228:	08 96       	adiw	r24, 0x08	; 8
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	9e bf       	out	0x3e, r25	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	8d bf       	out	0x3d, r24	; 61
		}
	}
	return message;
     234:	8e 81       	ldd	r24, Y+6	; 0x06
     236:	9f 81       	ldd	r25, Y+7	; 0x07
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	08 95       	ret

00000246 <_ZN22CommunicationExceptionC1EPKc>:
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "CommunicationException.h"

CommunicationException::CommunicationException(const char* deviceName):deviceName(deviceName)
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	ec 01       	movw	r28, r24
     250:	8b 01       	movw	r16, r22
     252:	0e 94 12 04 	call	0x824	; 0x824 <_ZN9ExceptionC1Ev>
     256:	87 e2       	ldi	r24, 0x27	; 39
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	99 83       	std	Y+1, r25	; 0x01
     25c:	88 83       	st	Y, r24
     25e:	1d 83       	std	Y+5, r17	; 0x05
     260:	0c 83       	std	Y+4, r16	; 0x04
{
}
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	08 95       	ret

0000026c <main>:
#include "TC654.h"
#include "Fans.h"
#include "SystemCheck.h"
using namespace std;
int main(void)
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	e9 97       	sbiw	r28, 0x39	; 57
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	a8 95       	wdr
     286:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     28a:	88 61       	ori	r24, 0x18	; 24
     28c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     290:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     294:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	i2c_init();
     296:	0e 94 88 00 	call	0x110	; 0x110 <i2c_init>
	Outputs::Initialize();
     29a:	0e 94 94 05 	call	0xb28	; 0xb28 <_ZN7Outputs10InitializeEv>
	//Stopwatch stopWatch = Stopwatch();
	UART& uart = UART::GetInstance();
     29e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN4UART11GetInstanceEv>
     2a2:	2c 01       	movw	r4, r24
	Settings& settings=Settings::GetInstance();
     2a4:	0e 94 22 06 	call	0xc44	; 0xc44 <_ZN8Settings11GetInstanceEv>
     2a8:	8c 01       	movw	r16, r24
	TC654 tc654 = TC654(0x01, 0x01);
     2aa:	41 e0       	ldi	r20, 0x01	; 1
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	ce 01       	movw	r24, r28
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN5TC654C1Ecc>
	IGetFanInfo* iGetFanInfos[]={tc654.GetIGetFan1Info(), tc654.GetIGetFan2Info()};
     2b6:	ce 01       	movw	r24, r28
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN5TC65415GetIGetFan1InfoEv>
     2be:	9b ab       	std	Y+51, r25	; 0x33
     2c0:	8a ab       	std	Y+50, r24	; 0x32
     2c2:	ce 01       	movw	r24, r28
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN5TC65415GetIGetFan2InfoEv>
     2ca:	9d ab       	std	Y+53, r25	; 0x35
     2cc:	8c ab       	std	Y+52, r24	; 0x34
	Fans& fans = Fans::GetInstance();
     2ce:	0e 94 ae 04 	call	0x95c	; 0x95c <_ZN4Fans11GetInstanceEv>
     2d2:	3c 01       	movw	r6, r24
	fans.SetInterfaces(iGetFanInfos, 0x02, &settings);
     2d4:	98 01       	movw	r18, r16
     2d6:	28 5f       	subi	r18, 0xF8	; 248
     2d8:	3f 4f       	sbci	r19, 0xFF	; 255
     2da:	42 e0       	ldi	r20, 0x02	; 2
     2dc:	be 01       	movw	r22, r28
     2de:	6e 5c       	subi	r22, 0xCE	; 206
     2e0:	7f 4f       	sbci	r23, 0xFF	; 255
     2e2:	0e 94 af 04 	call	0x95e	; 0x95e <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>
	LM75* lm75_7= new LM75(0x07, "lm75_7");
     2e6:	8c e0       	ldi	r24, 0x0C	; 12
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
     2ee:	4c 01       	movw	r8, r24
     2f0:	49 e2       	ldi	r20, 0x29	; 41
     2f2:	51 e0       	ldi	r21, 0x01	; 1
     2f4:	67 e0       	ldi	r22, 0x07	; 7
     2f6:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN4LM75C1EcPc>
	LM75* lm75_6= new LM75(0x06, "lm75_6");
     2fa:	8c e0       	ldi	r24, 0x0C	; 12
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
     302:	5c 01       	movw	r10, r24
     304:	40 e3       	ldi	r20, 0x30	; 48
     306:	51 e0       	ldi	r21, 0x01	; 1
     308:	66 e0       	ldi	r22, 0x06	; 6
     30a:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN4LM75C1EcPc>
	IGetTemperatureInfo* lm75s[] = {lm75_7, lm75_6};
     30e:	9f aa       	std	Y+55, r9	; 0x37
     310:	8e aa       	std	Y+54, r8	; 0x36
     312:	b9 ae       	std	Y+57, r11	; 0x39
     314:	a8 ae       	std	Y+56, r10	; 0x38
	Temperatures& temperatures=Temperatures::GetInstance();
     316:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN12Temperatures11GetInstanceEv>
     31a:	5c 01       	movw	r10, r24
	temperatures.SetInterfaces(lm75s, 0x2);
     31c:	42 e0       	ldi	r20, 0x02	; 2
     31e:	be 01       	movw	r22, r28
     320:	6a 5c       	subi	r22, 0xCA	; 202
     322:	7f 4f       	sbci	r23, 0xFF	; 255
     324:	0e 94 74 09 	call	0x12e8	; 0x12e8 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>
	SystemCheck& systemCheck = SystemCheck::GetInstance();
     328:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN11SystemCheck11GetInstanceEv>
     32c:	4c 01       	movw	r8, r24
	systemCheck.SetInterfaces(&temperatures, &settings, &fans);
     32e:	93 01       	movw	r18, r6
     330:	a8 01       	movw	r20, r16
     332:	b5 01       	movw	r22, r10
     334:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN11SystemCheck13SetInterfacesEP13ITemperaturesP18IGetTemperatureMaxP5IFans>
	Leds::Main::SetGreen();		
     338:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN4Leds4Main8SetGreenEv>
	Endpoint* endpoint = new Endpoint(&uart, &uart, &settings, &settings, &settings, &settings, &temperatures, &systemCheck);
     33c:	80 e1       	ldi	r24, 0x10	; 16
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
     344:	3c 01       	movw	r6, r24
     346:	68 01       	movw	r12, r16
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	c8 0e       	add	r12, r24
     34c:	d1 1c       	adc	r13, r1
     34e:	78 01       	movw	r14, r16
     350:	86 e0       	ldi	r24, 0x06	; 6
     352:	e8 0e       	add	r14, r24
     354:	f1 1c       	adc	r15, r1
     356:	98 01       	movw	r18, r16
     358:	2e 5f       	subi	r18, 0xFE	; 254
     35a:	3f 4f       	sbci	r19, 0xFF	; 255
     35c:	b2 01       	movw	r22, r4
     35e:	6e 5f       	subi	r22, 0xFE	; 254
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	a2 01       	movw	r20, r4
     364:	c3 01       	movw	r24, r6
     366:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperaturesP12ISystemCheck>
	while(1)
	{
	    endpoint->Run();
     36a:	c3 01       	movw	r24, r6
     36c:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN8Endpoint3RunEv>
     370:	fc cf       	rjmp	.-8      	; 0x36a <main+0xfe>

00000372 <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperaturesP12ISystemCheck>:
#include "Leds.h"
#include "Endpoint.h"
#include "UART.h"
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures, ISystemCheck* iSystemCheck):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures), iSystemCheck(iSystemCheck){
     372:	8f 92       	push	r8
     374:	9f 92       	push	r9
     376:	af 92       	push	r10
     378:	bf 92       	push	r11
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	fc 01       	movw	r30, r24
     390:	71 83       	std	Z+1, r23	; 0x01
     392:	60 83       	st	Z, r22
     394:	53 83       	std	Z+3, r21	; 0x03
     396:	42 83       	std	Z+2, r20	; 0x02
     398:	35 83       	std	Z+5, r19	; 0x05
     39a:	24 83       	std	Z+4, r18	; 0x04
     39c:	17 83       	std	Z+7, r17	; 0x07
     39e:	06 83       	std	Z+6, r16	; 0x06
     3a0:	f1 86       	std	Z+9, r15	; 0x09
     3a2:	e0 86       	std	Z+8, r14	; 0x08
     3a4:	d3 86       	std	Z+11, r13	; 0x0b
     3a6:	c2 86       	std	Z+10, r12	; 0x0a
     3a8:	b5 86       	std	Z+13, r11	; 0x0d
     3aa:	a4 86       	std	Z+12, r10	; 0x0c
     3ac:	97 86       	std	Z+15, r9	; 0x0f
     3ae:	86 86       	std	Z+14, r8	; 0x0e
	
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	cf 90       	pop	r12
     3c0:	bf 90       	pop	r11
     3c2:	af 90       	pop	r10
     3c4:	9f 90       	pop	r9
     3c6:	8f 90       	pop	r8
     3c8:	08 95       	ret

000003ca <_ZN8Endpoint8GetPowerEv>:
		}
		delete messages;
	}
}

void Endpoint::GetPower(){
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	6e 97       	sbiw	r28, 0x1e	; 30
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	7c 01       	movw	r14, r24
	uint16_t power = iGetPower->GetPower();
     3e8:	dc 01       	movw	r26, r24
     3ea:	1a 96       	adiw	r26, 0x0a	; 10
     3ec:	8d 91       	ld	r24, X+
     3ee:	9c 91       	ld	r25, X
     3f0:	1b 97       	sbiw	r26, 0x0b	; 11
     3f2:	dc 01       	movw	r26, r24
     3f4:	ed 91       	ld	r30, X+
     3f6:	fc 91       	ld	r31, X
     3f8:	01 90       	ld	r0, Z+
     3fa:	f0 81       	ld	r31, Z
     3fc:	e0 2d       	mov	r30, r0
     3fe:	09 95       	icall
	char buf[30];
	snprintf(buf,30,"{\"type\":\"power\",\"power\":%04d}",power);
     400:	9f 93       	push	r25
     402:	8f 93       	push	r24
     404:	87 e3       	ldi	r24, 0x37	; 55
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	1f 92       	push	r1
     40e:	8e e1       	ldi	r24, 0x1E	; 30
     410:	8f 93       	push	r24
     412:	8e 01       	movw	r16, r28
     414:	0f 5f       	subi	r16, 0xFF	; 255
     416:	1f 4f       	sbci	r17, 0xFF	; 255
     418:	1f 93       	push	r17
     41a:	0f 93       	push	r16
     41c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <snprintf>
	iSendMessage->SendMessage(buf, 29);
     420:	f7 01       	movw	r30, r14
     422:	82 81       	ldd	r24, Z+2	; 0x02
     424:	93 81       	ldd	r25, Z+3	; 0x03
     426:	dc 01       	movw	r26, r24
     428:	ed 91       	ld	r30, X+
     42a:	fc 91       	ld	r31, X
     42c:	01 90       	ld	r0, Z+
     42e:	f0 81       	ld	r31, Z
     430:	e0 2d       	mov	r30, r0
     432:	4d e1       	ldi	r20, 0x1D	; 29
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	b8 01       	movw	r22, r16
     438:	09 95       	icall
}
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	6e 96       	adiw	r28, 0x1e	; 30
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	08 95       	ret

0000045e <_ZN8Endpoint17GetTemperatureMaxEv>:
void Endpoint::GetTemperatureMax(){
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	e1 97       	sbiw	r28, 0x31	; 49
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	7c 01       	movw	r14, r24
	uint8_t temperatureMax = iGetTemperatureMax->GetTemperatureMax();
     47c:	dc 01       	movw	r26, r24
     47e:	16 96       	adiw	r26, 0x06	; 6
     480:	8d 91       	ld	r24, X+
     482:	9c 91       	ld	r25, X
     484:	17 97       	sbiw	r26, 0x07	; 7
     486:	dc 01       	movw	r26, r24
     488:	ed 91       	ld	r30, X+
     48a:	fc 91       	ld	r31, X
     48c:	01 90       	ld	r0, Z+
     48e:	f0 81       	ld	r31, Z
     490:	e0 2d       	mov	r30, r0
     492:	09 95       	icall
	char buf[49];
	snprintf(buf,49,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}",temperatureMax);
     494:	1f 92       	push	r1
     496:	8f 93       	push	r24
     498:	85 e5       	ldi	r24, 0x55	; 85
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	1f 92       	push	r1
     4a2:	81 e3       	ldi	r24, 0x31	; 49
     4a4:	8f 93       	push	r24
     4a6:	8e 01       	movw	r16, r28
     4a8:	0f 5f       	subi	r16, 0xFF	; 255
     4aa:	1f 4f       	sbci	r17, 0xFF	; 255
     4ac:	1f 93       	push	r17
     4ae:	0f 93       	push	r16
     4b0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <snprintf>
iSendMessage->SendMessage(buf, 48);}
     4b4:	f7 01       	movw	r30, r14
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	93 81       	ldd	r25, Z+3	; 0x03
     4ba:	dc 01       	movw	r26, r24
     4bc:	ed 91       	ld	r30, X+
     4be:	fc 91       	ld	r31, X
     4c0:	01 90       	ld	r0, Z+
     4c2:	f0 81       	ld	r31, Z
     4c4:	e0 2d       	mov	r30, r0
     4c6:	40 e3       	ldi	r20, 0x30	; 48
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	b8 01       	movw	r22, r16
     4cc:	09 95       	icall
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	e1 96       	adiw	r28, 0x31	; 49
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	08 95       	ret

000004f2 <_ZN8Endpoint17GetMaxTemperatureEv>:

void Endpoint::GetMaxTemperature(){
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	e4 97       	sbiw	r28, 0x34	; 52
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	8c 01       	movw	r16, r24
	bool successful=true;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	89 83       	std	Y+1, r24	; 0x01
	Exceptions exceptions;
     514:	ce 01       	movw	r24, r28
     516:	02 96       	adiw	r24, 0x02	; 2
     518:	0e 94 24 04 	call	0x848	; 0x848 <_ZN10ExceptionsC1Ev>
	 
	int8_t temperature = iTemperatures->GetMaxTemperature(successful, exceptions);
     51c:	d8 01       	movw	r26, r16
     51e:	1c 96       	adiw	r26, 0x0c	; 12
     520:	8d 91       	ld	r24, X+
     522:	9c 91       	ld	r25, X
     524:	1d 97       	sbiw	r26, 0x0d	; 13
     526:	dc 01       	movw	r26, r24
     528:	ed 91       	ld	r30, X+
     52a:	fc 91       	ld	r31, X
     52c:	01 90       	ld	r0, Z+
     52e:	f0 81       	ld	r31, Z
     530:	e0 2d       	mov	r30, r0
     532:	ae 01       	movw	r20, r28
     534:	4e 5f       	subi	r20, 0xFE	; 254
     536:	5f 4f       	sbci	r21, 0xFF	; 255
     538:	be 01       	movw	r22, r28
     53a:	6f 5f       	subi	r22, 0xFF	; 255
     53c:	7f 4f       	sbci	r23, 0xFF	; 255
     53e:	09 95       	icall
     540:	f8 2e       	mov	r15, r24
	if(successful){
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	88 23       	and	r24, r24
     546:	49 f1       	breq	.+82     	; 0x59a <_ZN8Endpoint17GetMaxTemperatureEv+0xa8>
		Leds::Main::SetRed();
     548:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN4Leds4Main6SetRedEv>
		char buf[45];
		snprintf(buf,45,"{\"type\":\"max_temperature\",\"temperature\":%03d}",temperature);
     54c:	8f 2d       	mov	r24, r15
     54e:	0f 2c       	mov	r0, r15
     550:	00 0c       	add	r0, r0
     552:	99 0b       	sbc	r25, r25
     554:	9f 93       	push	r25
     556:	ff 92       	push	r15
     558:	87 e8       	ldi	r24, 0x87	; 135
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	1f 92       	push	r1
     562:	8d e2       	ldi	r24, 0x2D	; 45
     564:	8f 93       	push	r24
     566:	7e 01       	movw	r14, r28
     568:	b8 e0       	ldi	r27, 0x08	; 8
     56a:	eb 0e       	add	r14, r27
     56c:	f1 1c       	adc	r15, r1
     56e:	ff 92       	push	r15
     570:	ef 92       	push	r14
     572:	0e 94 70 10 	call	0x20e0	; 0x20e0 <snprintf>
	iSendMessage->SendMessage(buf, 44);}
     576:	f8 01       	movw	r30, r16
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	dc 01       	movw	r26, r24
     57e:	ed 91       	ld	r30, X+
     580:	fc 91       	ld	r31, X
     582:	01 90       	ld	r0, Z+
     584:	f0 81       	ld	r31, Z
     586:	e0 2d       	mov	r30, r0
     588:	4c e2       	ldi	r20, 0x2C	; 44
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	b7 01       	movw	r22, r14
     58e:	09 95       	icall
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
	snprintf(buf,49,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}",temperatureMax);
iSendMessage->SendMessage(buf, 48);}

void Endpoint::GetMaxTemperature(){
	bool successful=true;
	Exceptions exceptions;
     59a:	ce 01       	movw	r24, r28
     59c:	02 96       	adiw	r24, 0x02	; 2
     59e:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN10ExceptionsD1Ev>
		char buf[45];
		snprintf(buf,45,"{\"type\":\"max_temperature\",\"temperature\":%03d}",temperature);
	iSendMessage->SendMessage(buf, 44);}
	else
	SendExceptions(exceptions);
	}
     5a2:	e4 96       	adiw	r28, 0x34	; 52
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	08 95       	ret

000005bc <_ZN8Endpoint3RunEv>:
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures, ISystemCheck* iSystemCheck):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures), iSystemCheck(iSystemCheck){
	
}
void Endpoint::Run(){
     5bc:	7f 92       	push	r7
     5be:	8f 92       	push	r8
     5c0:	9f 92       	push	r9
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	c7 5c       	subi	r28, 0xC7	; 199
     5dc:	d1 40       	sbci	r29, 0x01	; 1
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	6c 01       	movw	r12, r24
	Messages* messages = iGetMessages->GetMessages();
     5ea:	dc 01       	movw	r26, r24
     5ec:	8d 91       	ld	r24, X+
     5ee:	9c 91       	ld	r25, X
     5f0:	dc 01       	movw	r26, r24
     5f2:	ed 91       	ld	r30, X+
     5f4:	fc 91       	ld	r31, X
     5f6:	01 90       	ld	r0, Z+
     5f8:	f0 81       	ld	r31, Z
     5fa:	e0 2d       	mov	r30, r0
     5fc:	09 95       	icall
     5fe:	7c 01       	movw	r14, r24
	if(messages!=NULL){
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	09 f4       	brne	.+2      	; 0x606 <_ZN8Endpoint3RunEv+0x4a>
     604:	f9 c0       	rjmp	.+498    	; 0x7f8 <_ZN8Endpoint3RunEv+0x23c>
		if(messages->length>0)
     606:	fc 01       	movw	r30, r24
     608:	82 81       	ldd	r24, Z+2	; 0x02
     60a:	93 81       	ldd	r25, Z+3	; 0x03
     60c:	18 16       	cp	r1, r24
     60e:	19 06       	cpc	r1, r25
     610:	0c f0       	brlt	.+2      	; 0x614 <_ZN8Endpoint3RunEv+0x58>
     612:	ec c0       	rjmp	.+472    	; 0x7ec <_ZN8Endpoint3RunEv+0x230>
		{
			Leds::Main::SetGreen();
     614:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN4Leds4Main8SetGreenEv>
			for(int i=0; i<messages->length; i++){
     618:	d7 01       	movw	r26, r14
     61a:	12 96       	adiw	r26, 0x02	; 2
     61c:	8d 91       	ld	r24, X+
     61e:	9c 91       	ld	r25, X
     620:	13 97       	sbiw	r26, 0x03	; 3
     622:	18 16       	cp	r1, r24
     624:	19 06       	cpc	r1, r25
     626:	0c f0       	brlt	.+2      	; 0x62a <_ZN8Endpoint3RunEv+0x6e>
     628:	e1 c0       	rjmp	.+450    	; 0x7ec <_ZN8Endpoint3RunEv+0x230>
     62a:	00 e0       	ldi	r16, 0x00	; 0
     62c:	10 e0       	ldi	r17, 0x00	; 0
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
					if(strcmp(type, "system_check")==0){
					Exceptions exceptions;
						  bool successful=true;
     62e:	77 24       	eor	r7, r7
     630:	73 94       	inc	r7
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetGreen();
			for(int i=0; i<messages->length; i++){
				Message* message = messages->messages[i];
     632:	d7 01       	movw	r26, r14
     634:	ed 91       	ld	r30, X+
     636:	fc 91       	ld	r31, X
     638:	c8 01       	movw	r24, r16
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	e8 0f       	add	r30, r24
     640:	f9 1f       	adc	r31, r25
     642:	01 90       	ld	r0, Z+
     644:	f0 81       	ld	r31, Z
     646:	e0 2d       	mov	r30, r0
				json_t pool[64];
				json_t const* root = json_create( (char*)message->buffer, pool, message->length );
     648:	42 81       	ldd	r20, Z+2	; 0x02
     64a:	53 81       	ldd	r21, Z+3	; 0x03
     64c:	be 01       	movw	r22, r28
     64e:	6f 5f       	subi	r22, 0xFF	; 255
     650:	7f 4f       	sbci	r23, 0xFF	; 255
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	0e 94 16 0b 	call	0x162c	; 0x162c <json_create>
     65a:	5c 01       	movw	r10, r24
				json_t const* jObjectType = json_getProperty( root, "type" );
     65c:	65 eb       	ldi	r22, 0xB5	; 181
     65e:	71 e0       	ldi	r23, 0x01	; 1
     660:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <json_getProperty>
				if ( jObjectType && JSON_TEXT == json_getType(  jObjectType ) ) {
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	09 f4       	brne	.+2      	; 0x66a <_ZN8Endpoint3RunEv+0xae>
     668:	b6 c0       	rjmp	.+364    	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
     66a:	fc 01       	movw	r30, r24
     66c:	26 81       	ldd	r18, Z+6	; 0x06
     66e:	22 30       	cpi	r18, 0x02	; 2
     670:	09 f0       	breq	.+2      	; 0x674 <_ZN8Endpoint3RunEv+0xb8>
     672:	b1 c0       	rjmp	.+354    	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
/** Get the value of a json property.
  * The type of property cannot be JSON_OBJ or JSON_ARRAY.
  * @param json A valid handler of a json property.
  * @return Pointer to null-terminated string with the value. */
static inline char const* json_getValue( json_t const* property ) {
    return property->u.value;
     674:	84 80       	ldd	r8, Z+4	; 0x04
     676:	95 80       	ldd	r9, Z+5	; 0x05
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
     678:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN4UART11GetInstanceEv>
     67c:	f4 01       	movw	r30, r8
     67e:	01 90       	ld	r0, Z+
     680:	00 20       	and	r0, r0
     682:	e9 f7       	brne	.-6      	; 0x67e <_ZN8Endpoint3RunEv+0xc2>
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	af 01       	movw	r20, r30
     688:	48 19       	sub	r20, r8
     68a:	59 09       	sbc	r21, r9
     68c:	dc 01       	movw	r26, r24
     68e:	ed 91       	ld	r30, X+
     690:	fc 91       	ld	r31, X
     692:	01 90       	ld	r0, Z+
     694:	f0 81       	ld	r31, Z
     696:	e0 2d       	mov	r30, r0
     698:	b4 01       	movw	r22, r8
     69a:	09 95       	icall
					if(strcmp(type, "system_check")==0){
     69c:	6a eb       	ldi	r22, 0xBA	; 186
     69e:	71 e0       	ldi	r23, 0x01	; 1
     6a0:	c4 01       	movw	r24, r8
     6a2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
     6a6:	89 2b       	or	r24, r25
     6a8:	01 f5       	brne	.+64     	; 0x6ea <_ZN8Endpoint3RunEv+0x12e>
					Exceptions exceptions;
     6aa:	ce 01       	movw	r24, r28
     6ac:	8f 53       	subi	r24, 0x3F	; 63
     6ae:	9e 4f       	sbci	r25, 0xFE	; 254
     6b0:	0e 94 24 04 	call	0x848	; 0x848 <_ZN10ExceptionsC1Ev>
						  bool successful=true;
     6b4:	c9 53       	subi	r28, 0x39	; 57
     6b6:	de 4f       	sbci	r29, 0xFE	; 254
     6b8:	78 82       	st	Y, r7
     6ba:	c7 5c       	subi	r28, 0xC7	; 199
     6bc:	d1 40       	sbci	r29, 0x01	; 1
						   iSystemCheck->Check(successful, exceptions);
     6be:	f6 01       	movw	r30, r12
     6c0:	86 85       	ldd	r24, Z+14	; 0x0e
     6c2:	97 85       	ldd	r25, Z+15	; 0x0f
     6c4:	dc 01       	movw	r26, r24
     6c6:	ed 91       	ld	r30, X+
     6c8:	fc 91       	ld	r31, X
     6ca:	01 90       	ld	r0, Z+
     6cc:	f0 81       	ld	r31, Z
     6ce:	e0 2d       	mov	r30, r0
     6d0:	ae 01       	movw	r20, r28
     6d2:	4f 53       	subi	r20, 0x3F	; 63
     6d4:	5e 4f       	sbci	r21, 0xFE	; 254
     6d6:	be 01       	movw	r22, r28
     6d8:	69 53       	subi	r22, 0x39	; 57
     6da:	7e 4f       	sbci	r23, 0xFE	; 254
     6dc:	09 95       	icall
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
					if(strcmp(type, "system_check")==0){
					Exceptions exceptions;
     6de:	ce 01       	movw	r24, r28
     6e0:	8f 53       	subi	r24, 0x3F	; 63
     6e2:	9e 4f       	sbci	r25, 0xFE	; 254
     6e4:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN10ExceptionsD1Ev>
     6e8:	76 c0       	rjmp	.+236    	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
						  bool successful=true;
						   iSystemCheck->Check(successful, exceptions);
						}else{
						if(strcmp(type,"run")==0){
     6ea:	67 ec       	ldi	r22, 0xC7	; 199
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	c4 01       	movw	r24, r8
     6f0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
     6f4:	89 2b       	or	r24, r25
     6f6:	09 f4       	brne	.+2      	; 0x6fa <_ZN8Endpoint3RunEv+0x13e>
     6f8:	6e c0       	rjmp	.+220    	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
							
							}else{
							if(strcmp(type,"set_temperature_max")==0){
     6fa:	6b ec       	ldi	r22, 0xCB	; 203
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	c4 01       	movw	r24, r8
     700:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
     704:	89 2b       	or	r24, r25
     706:	f1 f4       	brne	.+60     	; 0x744 <_ZN8Endpoint3RunEv+0x188>
								json_t const* jObjectTemperatureMax = json_getProperty( root, "temperature_max" );
     708:	63 ee       	ldi	r22, 0xE3	; 227
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	c5 01       	movw	r24, r10
     70e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <json_getProperty>
								if ( jObjectTemperatureMax!=NULL && JSON_INTEGER == json_getType(  jObjectTemperatureMax ) ) {
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	09 f4       	brne	.+2      	; 0x718 <_ZN8Endpoint3RunEv+0x15c>
     716:	5f c0       	rjmp	.+190    	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
     718:	fc 01       	movw	r30, r24
     71a:	26 81       	ldd	r18, Z+6	; 0x06
     71c:	24 30       	cpi	r18, 0x04	; 4
     71e:	09 f0       	breq	.+2      	; 0x722 <_ZN8Endpoint3RunEv+0x166>
     720:	5a c0       	rjmp	.+180    	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
    return (int64_t)atol( property->u.value );
     722:	84 81       	ldd	r24, Z+4	; 0x04
     724:	95 81       	ldd	r25, Z+5	; 0x05
     726:	0e 94 22 10 	call	0x2044	; 0x2044 <atol>
									int temperatureMax = json_getInteger(jObjectTemperatureMax);
									iSetTemperatureMax->SetTemperatureMax(temperatureMax);
     72a:	d6 01       	movw	r26, r12
     72c:	14 96       	adiw	r26, 0x04	; 4
     72e:	8d 91       	ld	r24, X+
     730:	9c 91       	ld	r25, X
     732:	15 97       	sbiw	r26, 0x05	; 5
     734:	dc 01       	movw	r26, r24
     736:	ed 91       	ld	r30, X+
     738:	fc 91       	ld	r31, X
     73a:	01 90       	ld	r0, Z+
     73c:	f0 81       	ld	r31, Z
     73e:	e0 2d       	mov	r30, r0
     740:	09 95       	icall
     742:	49 c0       	rjmp	.+146    	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
								}
								}else{
								if(strcmp(type,"get_temperature_max")==0){
     744:	6f ed       	ldi	r22, 0xDF	; 223
     746:	71 e0       	ldi	r23, 0x01	; 1
     748:	c4 01       	movw	r24, r8
     74a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
     74e:	89 2b       	or	r24, r25
     750:	21 f4       	brne	.+8      	; 0x75a <_ZN8Endpoint3RunEv+0x19e>
									GetTemperatureMax();
     752:	c6 01       	movw	r24, r12
     754:	0e 94 2f 02 	call	0x45e	; 0x45e <_ZN8Endpoint17GetTemperatureMaxEv>
     758:	3e c0       	rjmp	.+124    	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
									}else{
									if(strcmp(type,"set_power"  )==0){
     75a:	63 ef       	ldi	r22, 0xF3	; 243
     75c:	71 e0       	ldi	r23, 0x01	; 1
     75e:	c4 01       	movw	r24, r8
     760:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
     764:	89 2b       	or	r24, r25
     766:	d9 f4       	brne	.+54     	; 0x79e <_ZN8Endpoint3RunEv+0x1e2>
										json_t const* jObjectPower = json_getProperty( root, "power" );
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	72 e0       	ldi	r23, 0x02	; 2
     76c:	c5 01       	movw	r24, r10
     76e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <json_getProperty>
										if ( jObjectPower && JSON_INTEGER == json_getType(  jObjectPower ) ) {
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	81 f1       	breq	.+96     	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
     776:	fc 01       	movw	r30, r24
     778:	26 81       	ldd	r18, Z+6	; 0x06
     77a:	24 30       	cpi	r18, 0x04	; 4
     77c:	61 f5       	brne	.+88     	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
     77e:	84 81       	ldd	r24, Z+4	; 0x04
     780:	95 81       	ldd	r25, Z+5	; 0x05
     782:	0e 94 22 10 	call	0x2044	; 0x2044 <atol>
											int Power = json_getInteger(jObjectPower);
											iSetPower->SetPower(Power);
     786:	f6 01       	movw	r30, r12
     788:	a0 85       	ldd	r26, Z+8	; 0x08
     78a:	b1 85       	ldd	r27, Z+9	; 0x09
     78c:	ed 91       	ld	r30, X+
     78e:	fc 91       	ld	r31, X
     790:	11 97       	sbiw	r26, 0x01	; 1
     792:	01 90       	ld	r0, Z+
     794:	f0 81       	ld	r31, Z
     796:	e0 2d       	mov	r30, r0
     798:	cd 01       	movw	r24, r26
     79a:	09 95       	icall
     79c:	1c c0       	rjmp	.+56     	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
										}
										}else{
										if(strcmp(type,"get_power")==0){
     79e:	6d ef       	ldi	r22, 0xFD	; 253
     7a0:	71 e0       	ldi	r23, 0x01	; 1
     7a2:	c4 01       	movw	r24, r8
     7a4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
     7a8:	89 2b       	or	r24, r25
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <_ZN8Endpoint3RunEv+0x1f8>
											GetPower();
     7ac:	c6 01       	movw	r24, r12
     7ae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN8Endpoint8GetPowerEv>
     7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
											}else{
											if(strcmp(type,"set_info_rate")==0){
     7b4:	67 e0       	ldi	r22, 0x07	; 7
     7b6:	72 e0       	ldi	r23, 0x02	; 2
     7b8:	c4 01       	movw	r24, r8
     7ba:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
     7be:	89 2b       	or	r24, r25
     7c0:	51 f0       	breq	.+20     	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>

												}else{
												if(strcmp(type, "get_max_temperature")==0 ){
     7c2:	65 e1       	ldi	r22, 0x15	; 21
     7c4:	72 e0       	ldi	r23, 0x02	; 2
     7c6:	c4 01       	movw	r24, r8
     7c8:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
     7cc:	89 2b       	or	r24, r25
     7ce:	19 f4       	brne	.+6      	; 0x7d6 <_ZN8Endpoint3RunEv+0x21a>
													GetMaxTemperature();
     7d0:	c6 01       	movw	r24, r12
     7d2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN8Endpoint17GetMaxTemperatureEv>
	Messages* messages = iGetMessages->GetMessages();
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetGreen();
			for(int i=0; i<messages->length; i++){
     7d6:	0f 5f       	subi	r16, 0xFF	; 255
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
     7da:	d7 01       	movw	r26, r14
     7dc:	12 96       	adiw	r26, 0x02	; 2
     7de:	8d 91       	ld	r24, X+
     7e0:	9c 91       	ld	r25, X
     7e2:	13 97       	sbiw	r26, 0x03	; 3
     7e4:	08 17       	cp	r16, r24
     7e6:	19 07       	cpc	r17, r25
     7e8:	0c f4       	brge	.+2      	; 0x7ec <_ZN8Endpoint3RunEv+0x230>
     7ea:	23 cf       	rjmp	.-442    	; 0x632 <_ZN8Endpoint3RunEv+0x76>
						}
					}
				}
			}
		}
		delete messages;
     7ec:	c7 01       	movw	r24, r14
     7ee:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN8MessagesD1Ev>
     7f2:	c7 01       	movw	r24, r14
     7f4:	0e 94 86 09 	call	0x130c	; 0x130c <_ZdlPv>
	}
}
     7f8:	c9 53       	subi	r28, 0x39	; 57
     7fa:	de 4f       	sbci	r29, 0xFE	; 254
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	bf 90       	pop	r11
     818:	af 90       	pop	r10
     81a:	9f 90       	pop	r9
     81c:	8f 90       	pop	r8
     81e:	7f 90       	pop	r7
     820:	08 95       	ret

00000822 <_ZN9Exception8ToStringEv>:

// default constructor
Exception::Exception()
{
} //Outputs
Exception::Exception(const char* message):message(message)
     822:	08 95       	ret

00000824 <_ZN9ExceptionC1Ev>:
     824:	2d e2       	ldi	r18, 0x2D	; 45
     826:	32 e0       	ldi	r19, 0x02	; 2
     828:	fc 01       	movw	r30, r24
     82a:	31 83       	std	Z+1, r19	; 0x01
     82c:	20 83       	st	Z, r18
     82e:	08 95       	ret

00000830 <_ZN9ExceptionD1Ev>:
{
} //Outputs

// default destructor
Exception::~Exception()
     830:	2d e2       	ldi	r18, 0x2D	; 45
     832:	32 e0       	ldi	r19, 0x02	; 2
     834:	fc 01       	movw	r30, r24
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	20 83       	st	Z, r18
{
if(message!=NULL){
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	93 81       	ldd	r25, Z+3	; 0x03
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	11 f0       	breq	.+4      	; 0x846 <_ZN9ExceptionD1Ev+0x16>
delete message;
     842:	0e 94 86 09 	call	0x130c	; 0x130c <_ZdlPv>
     846:	08 95       	ret

00000848 <_ZN10ExceptionsC1Ev>:
}
void Exceptions::Add(Exception* exception){
exceptions.push_back(exception);}
unsigned int Exceptions::Count(){
	return exceptions.size();
}
     848:	fc 01       	movw	r30, r24
     84a:	11 82       	std	Z+1, r1	; 0x01
     84c:	10 82       	st	Z, r1
     84e:	13 82       	std	Z+3, r1	; 0x03
     850:	12 82       	std	Z+2, r1	; 0x02
     852:	15 82       	std	Z+5, r1	; 0x05
     854:	14 82       	std	Z+4, r1	; 0x04
     856:	08 95       	ret

00000858 <_ZN10Exceptions3AddEP9Exception>:
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ec 01       	movw	r28, r24
     86e:	7b 01       	movw	r14, r22
     870:	0a 81       	ldd	r16, Y+2	; 0x02
     872:	1b 81       	ldd	r17, Y+3	; 0x03
     874:	88 81       	ld	r24, Y
     876:	99 81       	ldd	r25, Y+1	; 0x01
     878:	08 17       	cp	r16, r24
     87a:	19 07       	cpc	r17, r25
     87c:	e9 f4       	brne	.+58     	; 0x8b8 <_ZN10Exceptions3AddEP9Exception+0x60>
     87e:	01 15       	cp	r16, r1
     880:	11 05       	cpc	r17, r1
     882:	21 f0       	breq	.+8      	; 0x88c <_ZN10Exceptions3AddEP9Exception+0x34>
     884:	c8 01       	movw	r24, r16
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	02 c0       	rjmp	.+4      	; 0x890 <_ZN10Exceptions3AddEP9Exception+0x38>
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	9b 83       	std	Y+3, r25	; 0x03
     892:	8a 83       	std	Y+2, r24	; 0x02
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <malloc>
     89c:	6c 01       	movw	r12, r24
     89e:	ac 80       	ldd	r10, Y+4	; 0x04
     8a0:	bd 80       	ldd	r11, Y+5	; 0x05
     8a2:	a8 01       	movw	r20, r16
     8a4:	44 0f       	add	r20, r20
     8a6:	55 1f       	adc	r21, r21
     8a8:	b5 01       	movw	r22, r10
     8aa:	0e 94 49 10 	call	0x2092	; 0x2092 <memcpy>
     8ae:	c5 01       	movw	r24, r10
     8b0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <free>
     8b4:	dd 82       	std	Y+5, r13	; 0x05
     8b6:	cc 82       	std	Y+4, r12	; 0x04
     8b8:	ec 81       	ldd	r30, Y+4	; 0x04
     8ba:	fd 81       	ldd	r31, Y+5	; 0x05
     8bc:	88 81       	ld	r24, Y
     8be:	99 81       	ldd	r25, Y+1	; 0x01
     8c0:	9c 01       	movw	r18, r24
     8c2:	2f 5f       	subi	r18, 0xFF	; 255
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	39 83       	std	Y+1, r19	; 0x01
     8c8:	28 83       	st	Y, r18
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	e8 0f       	add	r30, r24
     8d0:	f9 1f       	adc	r31, r25
     8d2:	f1 82       	std	Z+1, r15	; 0x01
     8d4:	e0 82       	st	Z, r14
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	08 95       	ret

000008ec <_ZN10ExceptionsD1Ev>:
// default destructor
Exceptions::~Exceptions()
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	8c 01       	movw	r16, r24
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
	   simple_vector &operator=(   simple_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x)  { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size()  const { return d_size; }; // Size getter
     8fe:	dc 01       	movw	r26, r24
     900:	ed 90       	ld	r14, X+
     902:	fc 90       	ld	r15, X
{
	unsigned int size = exceptions.size();
	for(unsigned int i=0; i<size; i++){
     904:	e1 14       	cp	r14, r1
     906:	f1 04       	cpc	r15, r1
     908:	d9 f0       	breq	.+54     	; 0x940 <__stack+0x41>
     90a:	c0 e0       	ldi	r28, 0x00	; 0
     90c:	d0 e0       	ldi	r29, 0x00	; 0
		if(exceptions[i]!=NULL)
     90e:	d8 01       	movw	r26, r16
     910:	14 96       	adiw	r26, 0x04	; 4
     912:	ed 91       	ld	r30, X+
     914:	fc 91       	ld	r31, X
     916:	15 97       	sbiw	r26, 0x05	; 5
     918:	ce 01       	movw	r24, r28
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	e8 0f       	add	r30, r24
     920:	f9 1f       	adc	r31, r25
     922:	c0 80       	ld	r12, Z
     924:	d1 80       	ldd	r13, Z+1	; 0x01
		delete exceptions[i];
     926:	c1 14       	cp	r12, r1
     928:	d1 04       	cpc	r13, r1
     92a:	31 f0       	breq	.+12     	; 0x938 <__stack+0x39>
     92c:	c6 01       	movw	r24, r12
     92e:	0e 94 18 04 	call	0x830	; 0x830 <_ZN9ExceptionD1Ev>
     932:	c6 01       	movw	r24, r12
     934:	0e 94 86 09 	call	0x130c	; 0x130c <_ZdlPv>
}
// default destructor
Exceptions::~Exceptions()
{
	unsigned int size = exceptions.size();
	for(unsigned int i=0; i<size; i++){
     938:	21 96       	adiw	r28, 0x01	; 1
     93a:	ec 16       	cp	r14, r28
     93c:	fd 06       	cpc	r15, r29
     93e:	39 f7       	brne	.-50     	; 0x90e <__stack+0xf>

	}; // Default constructor
	   simple_vector(   simple_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) {
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
     940:	f8 01       	movw	r30, r16
     942:	84 81       	ldd	r24, Z+4	; 0x04
     944:	95 81       	ldd	r25, Z+5	; 0x05
     946:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <free>
		if(exceptions[i]!=NULL)
		delete exceptions[i];
	}
} //~Exceptions
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	08 95       	ret

0000095c <_ZN4Fans11GetInstanceEv>:
#include "CommunicationException.h"
#include "Exceptions.h"

Fans& Fans::GetInstance(){
	
} void Fans::SetInterfaces(IGetFanInfo** iGetFanInfos, unsigned char nIGetFanInfos, IGetFanSpeedMin*iGetFanSpeedMin)
     95c:	08 95       	ret

0000095e <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>:
{
     95e:	fc 01       	movw	r30, r24
	this->iGetFanInfos=iGetFanInfos;
     960:	75 83       	std	Z+5, r23	; 0x05
     962:	64 83       	std	Z+4, r22	; 0x04
	this->nIGetFanInfos=nIGetFanInfos;
     964:	46 83       	std	Z+6, r20	; 0x06
	this->iGetFanSpeedMin = iGetFanSpeedMin;
     966:	30 87       	std	Z+8, r19	; 0x08
     968:	27 83       	std	Z+7, r18	; 0x07
     96a:	08 95       	ret

0000096c <_ZN4Leds4Main6SetRedEv>:
#include "Outputs.h"



void Leds::Main::SetRed(){
	Outputs::PD::_2::SetLow();
     96c:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetLow();
     970:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetHigh();
     974:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN7Outputs2PD2_47SetHighEv>
     978:	08 95       	ret

0000097a <_ZN4Leds4Main8SetGreenEv>:
}
void Leds::Main::SetGreen(){
	Outputs::PD::_2::SetLow();
     97a:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetHigh();
     97e:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN7Outputs2PD2_37SetHighEv>
	Outputs::PD::_4::SetLow();
     982:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7Outputs2PD2_46SetLowEv>
     986:	08 95       	ret

00000988 <_ZN4LM757GetNameEv>:
	addressWrite =0x90|(shifted&0x0e);
	addressRead =0x91|(shifted&0x0e);
} //LM75
const char* LM75::GetName(){
	return name;
}
     988:	fc 01       	movw	r30, r24
     98a:	80 85       	ldd	r24, Z+8	; 0x08
     98c:	91 85       	ldd	r25, Z+9	; 0x09
     98e:	08 95       	ret

00000990 <_ZN4LM7514GetTemperatureERbR10Exceptions>:
	int8_t LM75::GetTemperature(bool& successful, Exceptions& exceptions){
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	ec 01       	movw	r28, r24
     99e:	7a 01       	movw	r14, r20
	i2c_start_wait(addressWrite);
     9a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a2:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_start_wait>
	char r=i2c_write(TEMPERATURE_ADDRESS);
     9a6:	8c 81       	ldd	r24, Y+4	; 0x04
     9a8:	0e 94 ad 00 	call	0x15a	; 0x15a <i2c_write>
     9ac:	18 2f       	mov	r17, r24
	i2c_stop();
     9ae:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_stop>
	if(r!=0){
     9b2:	11 23       	and	r17, r17
     9b4:	79 f0       	breq	.+30     	; 0x9d4 <_ZN4LM7514GetTemperatureERbR10Exceptions+0x44>
	exceptions.Add(new CommunicationException(name));
     9b6:	88 e0       	ldi	r24, 0x08	; 8
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
     9be:	8c 01       	movw	r16, r24
     9c0:	68 85       	ldd	r22, Y+8	; 0x08
     9c2:	79 85       	ldd	r23, Y+9	; 0x09
     9c4:	0e 94 23 01 	call	0x246	; 0x246 <_ZN22CommunicationExceptionC1EPKc>
     9c8:	b8 01       	movw	r22, r16
     9ca:	c7 01       	movw	r24, r14
     9cc:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN10Exceptions3AddEP9Exception>
	return 0;
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0c c0       	rjmp	.+24     	; 0x9ec <_ZN4LM7514GetTemperatureERbR10Exceptions+0x5c>
	}
	i2c_start_wait(addressRead);
     9d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     9d6:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_start_wait>
	char most = i2c_readAck();
     9da:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_readAck>
     9de:	c8 2f       	mov	r28, r24
	char least = i2c_readAck();
     9e0:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_readAck>
	sei();
     9e4:	78 94       	sei
	i2c_stop();
     9e6:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_stop>
	return static_cast<int8_t>(most);
     9ea:	8c 2f       	mov	r24, r28
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	08 95       	ret

000009fa <_ZThn2_N4LM757GetNameEv>:
     9fa:	fc 01       	movw	r30, r24
     9fc:	86 81       	ldd	r24, Z+6	; 0x06
     9fe:	97 81       	ldd	r25, Z+7	; 0x07
     a00:	08 95       	ret

00000a02 <_ZN4LM75C1EcPc>:
#include "i2cmaster.h"
#include "LM75.h"
#include "CommunicationException.h"
#include <avr/interrupt.h>
// default constructor
LM75::LM75(char address, char* name):name(name)
     a02:	fc 01       	movw	r30, r24
     a04:	83 e3       	ldi	r24, 0x33	; 51
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	91 83       	std	Z+1, r25	; 0x01
     a0a:	80 83       	st	Z, r24
     a0c:	8b e3       	ldi	r24, 0x3B	; 59
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	93 83       	std	Z+3, r25	; 0x03
     a12:	82 83       	std	Z+2, r24	; 0x02
     a14:	14 82       	std	Z+4, r1	; 0x04
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	85 83       	std	Z+5, r24	; 0x05
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	86 83       	std	Z+6, r24	; 0x06
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	87 83       	std	Z+7, r24	; 0x07
     a22:	51 87       	std	Z+9, r21	; 0x09
     a24:	40 87       	std	Z+8, r20	; 0x08
{
	char shifted = (address<<1);
	addressWrite =0x90|(shifted&0x0e);
     a26:	66 0f       	add	r22, r22
     a28:	6e 70       	andi	r22, 0x0E	; 14
     a2a:	86 2f       	mov	r24, r22
     a2c:	80 69       	ori	r24, 0x90	; 144
     a2e:	83 87       	std	Z+11, r24	; 0x0b
	addressRead =0x91|(shifted&0x0e);
     a30:	61 69       	ori	r22, 0x91	; 145
     a32:	62 87       	std	Z+10, r22	; 0x0a
     a34:	08 95       	ret

00000a36 <_ZN7MessageC1EPKcj>:
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include <stdlib.h>
#include "Message.h"
Message::Message(const char* bufferIn, unsigned int lengthIn):length(lengthIn), buffer(bufferIn){
     a36:	fc 01       	movw	r30, r24
     a38:	71 83       	std	Z+1, r23	; 0x01
     a3a:	60 83       	st	Z, r22
     a3c:	53 83       	std	Z+3, r21	; 0x03
     a3e:	42 83       	std	Z+2, r20	; 0x02
     a40:	08 95       	ret

00000a42 <_ZN7MessageD1Ev>:
	
}
Message::~Message(){
	delete[] this->buffer;
     a42:	fc 01       	movw	r30, r24
     a44:	80 81       	ld	r24, Z
     a46:	91 81       	ldd	r25, Z+1	; 0x01
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	11 f0       	breq	.+4      	; 0xa50 <_ZN7MessageD1Ev+0xe>
     a4c:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZdaPv>
     a50:	08 95       	ret

00000a52 <_ZN8MessagesC1EPP7Messagec>:
*
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
     a5e:	f6 2e       	mov	r15, r22
     a60:	07 2f       	mov	r16, r23
     a62:	14 2f       	mov	r17, r20
     a64:	84 2f       	mov	r24, r20
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	9b 83       	std	Y+3, r25	; 0x03
     a6a:	8a 83       	std	Y+2, r24	; 0x02
	messages = new Message*[lengthIn];
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	0e 94 83 09 	call	0x1306	; 0x1306 <_Znaj>
     a74:	99 83       	std	Y+1, r25	; 0x01
     a76:	88 83       	st	Y, r24
	for(char i=0; i<lengthIn; i++)
     a78:	11 23       	and	r17, r17
     a7a:	b9 f0       	breq	.+46     	; 0xaaa <_ZN8MessagesC1EPP7Messagec+0x58>
     a7c:	af 2d       	mov	r26, r15
     a7e:	b0 2f       	mov	r27, r16
     a80:	11 50       	subi	r17, 0x01	; 1
     a82:	21 2f       	mov	r18, r17
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	2f 5f       	subi	r18, 0xFF	; 255
     a88:	3f 4f       	sbci	r19, 0xFF	; 255
     a8a:	22 0f       	add	r18, r18
     a8c:	33 1f       	adc	r19, r19
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
	messages[i]= messagesIn[i];
     a92:	4d 91       	ld	r20, X+
     a94:	5d 91       	ld	r21, X+
     a96:	e8 81       	ld	r30, Y
     a98:	f9 81       	ldd	r31, Y+1	; 0x01
     a9a:	e8 0f       	add	r30, r24
     a9c:	f9 1f       	adc	r31, r25
     a9e:	51 83       	std	Z+1, r21	; 0x01
     aa0:	40 83       	st	Z, r20
     aa2:	02 96       	adiw	r24, 0x02	; 2
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
	messages = new Message*[lengthIn];
	for(char i=0; i<lengthIn; i++)
     aa4:	82 17       	cp	r24, r18
     aa6:	93 07       	cpc	r25, r19
     aa8:	a1 f7       	brne	.-24     	; 0xa92 <_ZN8MessagesC1EPP7Messagec+0x40>
	messages[i]= messagesIn[i];
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	08 95       	ret

00000ab6 <_ZN8MessagesD1Ev>:
Messages::~Messages(){
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	7c 01       	movw	r14, r24

	for(char i=0; i<length; i++)
     ac2:	dc 01       	movw	r26, r24
     ac4:	12 96       	adiw	r26, 0x02	; 2
     ac6:	8d 91       	ld	r24, X+
     ac8:	9c 91       	ld	r25, X
     aca:	13 97       	sbiw	r26, 0x03	; 3
     acc:	18 16       	cp	r1, r24
     ace:	19 06       	cpc	r1, r25
     ad0:	f4 f4       	brge	.+60     	; 0xb0e <_ZN8MessagesD1Ev+0x58>
     ad2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		delete messages[i];
     ad4:	ec 2f       	mov	r30, r28
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	d7 01       	movw	r26, r14
     ade:	8d 91       	ld	r24, X+
     ae0:	9c 91       	ld	r25, X
     ae2:	e8 0f       	add	r30, r24
     ae4:	f9 1f       	adc	r31, r25
     ae6:	00 81       	ld	r16, Z
     ae8:	11 81       	ldd	r17, Z+1	; 0x01
     aea:	01 15       	cp	r16, r1
     aec:	11 05       	cpc	r17, r1
     aee:	31 f0       	breq	.+12     	; 0xafc <_ZN8MessagesD1Ev+0x46>
     af0:	c8 01       	movw	r24, r16
     af2:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN7MessageD1Ev>
     af6:	c8 01       	movw	r24, r16
     af8:	0e 94 86 09 	call	0x130c	; 0x130c <_ZdlPv>
	for(char i=0; i<lengthIn; i++)
	messages[i]= messagesIn[i];
}
Messages::~Messages(){

	for(char i=0; i<length; i++)
     afc:	cf 5f       	subi	r28, 0xFF	; 255
     afe:	2c 2f       	mov	r18, r28
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	f7 01       	movw	r30, r14
     b04:	82 81       	ldd	r24, Z+2	; 0x02
     b06:	93 81       	ldd	r25, Z+3	; 0x03
     b08:	28 17       	cp	r18, r24
     b0a:	39 07       	cpc	r19, r25
     b0c:	1c f3       	brlt	.-58     	; 0xad4 <_ZN8MessagesD1Ev+0x1e>
	{
		delete messages[i];
	}
	delete[] messages;
     b0e:	d7 01       	movw	r26, r14
     b10:	8d 91       	ld	r24, X+
     b12:	9c 91       	ld	r25, X
     b14:	00 97       	sbiw	r24, 0x00	; 0
     b16:	11 f0       	breq	.+4      	; 0xb1c <_ZN8MessagesD1Ev+0x66>
     b18:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZdaPv>
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	08 95       	ret

00000b28 <_ZN7Outputs10InitializeEv>:
}
void Outputs::PB::_5::SetLow(){
	PORTB= PORTB&0xFB;
}
void Outputs::PD::_2::SetHigh(){
	PORTD = PORTD|0x04;
     b28:	8a b1       	in	r24, 0x0a	; 10
     b2a:	8c 61       	ori	r24, 0x1C	; 28
     b2c:	8a b9       	out	0x0a, r24	; 10
     b2e:	08 95       	ret

00000b30 <_ZN7Outputs2PD2_26SetLowEv>:
}
void Outputs::PD::_2::SetLow(){
	PORTD= PORTD&0xFB;
     b30:	5a 98       	cbi	0x0b, 2	; 11
     b32:	08 95       	ret

00000b34 <_ZN7Outputs2PD2_37SetHighEv>:
}
void Outputs::PD::_3::SetHigh(){
	PORTD = PORTD|0x08;
     b34:	5b 9a       	sbi	0x0b, 3	; 11
     b36:	08 95       	ret

00000b38 <_ZN7Outputs2PD2_36SetLowEv>:
}
void Outputs::PD::_3::SetLow(){
	PORTD= PORTD&0xF7;
     b38:	5b 98       	cbi	0x0b, 3	; 11
     b3a:	08 95       	ret

00000b3c <_ZN7Outputs2PD2_47SetHighEv>:
}
void Outputs::PD::_4::SetHigh(){
	PORTD = PORTD|0x10;
     b3c:	5c 9a       	sbi	0x0b, 4	; 11
     b3e:	08 95       	ret

00000b40 <_ZN7Outputs2PD2_46SetLowEv>:
}
void Outputs::PD::_4::SetLow(){
	PORTD= PORTD&0xEF;
     b40:	5c 98       	cbi	0x0b, 4	; 11
     b42:	08 95       	ret

00000b44 <_ZN8Settings17GetTemperatureMaxEv>:
		if(a<POWER_MIN)
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
     b44:	fc 01       	movw	r30, r24
     b46:	82 85       	ldd	r24, Z+10	; 0x0a
     b48:	08 95       	ret

00000b4a <_ZN8Settings8GetPowerEv>:
	temperatureMax=a;
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
}
uint16_t Settings::GetPower(){
	return power;
}
     b4a:	fc 01       	movw	r30, r24
     b4c:	83 85       	ldd	r24, Z+11	; 0x0b
     b4e:	94 85       	ldd	r25, Z+12	; 0x0c
     b50:	08 95       	ret

00000b52 <_ZN8Settings14GetFanSpeedMinEv>:
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
     b52:	fc 01       	movw	r30, r24
     b54:	85 85       	ldd	r24, Z+13	; 0x0d
     b56:	96 85       	ldd	r25, Z+14	; 0x0e
     b58:	08 95       	ret

00000b5a <_ZThn8_N8Settings14GetFanSpeedMinEv>:
     b5a:	fc 01       	movw	r30, r24
     b5c:	85 81       	ldd	r24, Z+5	; 0x05
     b5e:	96 81       	ldd	r25, Z+6	; 0x06
     b60:	08 95       	ret

00000b62 <_ZThn4_N8Settings8GetPowerEv>:
     b62:	fc 01       	movw	r30, r24
     b64:	87 81       	ldd	r24, Z+7	; 0x07
     b66:	90 85       	ldd	r25, Z+8	; 0x08
     b68:	08 95       	ret

00000b6a <_ZN8Settings17CapTemperatureMaxERh>:
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
	CapPower(a);
	power=a;
}
void Settings::CapTemperatureMax(uint8_t& a){
	if(a>TEMPERATURE_MAX_MAX)
     b6a:	fb 01       	movw	r30, r22
     b6c:	80 81       	ld	r24, Z
     b6e:	8e 37       	cpi	r24, 0x7E	; 126
     b70:	18 f0       	brcs	.+6      	; 0xb78 <_ZN8Settings17CapTemperatureMaxERh+0xe>
		a=TEMPERATURE_MAX_MAX;
     b72:	8d e7       	ldi	r24, 0x7D	; 125
     b74:	80 83       	st	Z, r24
     b76:	08 95       	ret
	else
		if(a<TEMPERTURE_MAX_MIN)
     b78:	88 32       	cpi	r24, 0x28	; 40
     b7a:	18 f4       	brcc	.+6      	; 0xb82 <_ZN8Settings17CapTemperatureMaxERh+0x18>
			a=TEMPERTURE_MAX_MIN;
     b7c:	88 e2       	ldi	r24, 0x28	; 40
     b7e:	fb 01       	movw	r30, r22
     b80:	80 83       	st	Z, r24
     b82:	08 95       	ret

00000b84 <_ZN8Settings17SetTemperatureMaxEh>:
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
void Settings::SetTemperatureMax(uint8_t a){
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	8c 01       	movw	r16, r24
     b94:	69 83       	std	Y+1, r22	; 0x01
	CapTemperatureMax(a);
     b96:	be 01       	movw	r22, r28
     b98:	6f 5f       	subi	r22, 0xFF	; 255
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
     b9c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_ZN8Settings17CapTemperatureMaxERh>
	temperatureMax=a;
     ba0:	69 81       	ldd	r22, Y+1	; 0x01
     ba2:	f8 01       	movw	r30, r16
     ba4:	62 87       	std	Z+10, r22	; 0x0a
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 3f 13 	call	0x267e	; 0x267e <eeprom_write_byte>
}
     bae:	0f 90       	pop	r0
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <_ZThn2_N8Settings17SetTemperatureMaxEh>:
     bba:	02 97       	sbiw	r24, 0x02	; 2
     bbc:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN8Settings17SetTemperatureMaxEh>
     bc0:	08 95       	ret

00000bc2 <_ZN8Settings8CapPowerERj>:
		if(a<TEMPERTURE_MAX_MIN)
			a=TEMPERTURE_MAX_MIN;
}	
void Settings::CapPower(uint16_t& a){
	
	if(a>POWER_MAX)
     bc2:	fb 01       	movw	r30, r22
     bc4:	80 81       	ld	r24, Z
     bc6:	91 81       	ldd	r25, Z+1	; 0x01
     bc8:	8d 3d       	cpi	r24, 0xDD	; 221
     bca:	f5 e0       	ldi	r31, 0x05	; 5
     bcc:	9f 07       	cpc	r25, r31
     bce:	30 f0       	brcs	.+12     	; 0xbdc <_ZN8Settings8CapPowerERj+0x1a>
		a=POWER_MAX;
     bd0:	8c ed       	ldi	r24, 0xDC	; 220
     bd2:	95 e0       	ldi	r25, 0x05	; 5
     bd4:	fb 01       	movw	r30, r22
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	80 83       	st	Z, r24
     bda:	08 95       	ret
	else
		if(a<POWER_MIN)
     bdc:	4e 97       	sbiw	r24, 0x1e	; 30
     bde:	28 f4       	brcc	.+10     	; 0xbea <_ZN8Settings8CapPowerERj+0x28>
			a=POWER_MIN;
     be0:	8e e1       	ldi	r24, 0x1E	; 30
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	fb 01       	movw	r30, r22
     be6:	91 83       	std	Z+1, r25	; 0x01
     be8:	80 83       	st	Z, r24
     bea:	08 95       	ret

00000bec <_ZN8Settings10InitializeEv>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void Settings::Initialize(){
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <_ZN8Settings10InitializeEv+0xa>
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	8c 01       	movw	r16, r24
	temperatureMax= eeprom_read_byte(&ADDRESS_TEMPERATURE_MAX);
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 31 13 	call	0x2662	; 0x2662 <eeprom_read_byte>
     c04:	f8 01       	movw	r30, r16
     c06:	82 87       	std	Z+10, r24	; 0x0a
	CapTemperatureMax(temperatureMax);
     c08:	b8 01       	movw	r22, r16
     c0a:	66 5f       	subi	r22, 0xF6	; 246
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	c8 01       	movw	r24, r16
     c10:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_ZN8Settings17CapTemperatureMaxERh>
	
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 39 13 	call	0x2672	; 0x2672 <eeprom_read_word>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	CapPower(a);
     c20:	be 01       	movw	r22, r28
     c22:	6f 5f       	subi	r22, 0xFF	; 255
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	c8 01       	movw	r24, r16
     c28:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN8Settings8CapPowerERj>
	power=a;
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	f8 01       	movw	r30, r16
     c32:	94 87       	std	Z+12, r25	; 0x0c
     c34:	83 87       	std	Z+11, r24	; 0x0b
}
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <_ZN8Settings11GetInstanceEv>:
uint8_t EEMEM  ADDRESS_TEMPERATURE_MAX;
uint16_t EEMEM  ADDRESS_POWER;
Settings Settings:: _Singleton;
Settings& Settings::GetInstance(){
	static bool initialized=false;
	if(!initialized)
     c44:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <__data_end>
     c48:	81 11       	cpse	r24, r1
     c4a:	07 c0       	rjmp	.+14     	; 0xc5a <_ZN8Settings11GetInstanceEv+0x16>
	{
		_Singleton.Initialize();
     c4c:	81 e9       	ldi	r24, 0x91	; 145
     c4e:	93 e0       	ldi	r25, 0x03	; 3
     c50:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN8Settings10InitializeEv>
		initialized=true;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <__data_end>
	}
	return _Singleton;
}
     c5a:	81 e9       	ldi	r24, 0x91	; 145
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	08 95       	ret

00000c60 <_ZN8Settings8SetPowerEj>:
	return power;
}
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
void Settings::SetPower(uint16_t a){
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	00 d0       	rcall	.+0      	; 0xc66 <_ZN8Settings8SetPowerEj+0x6>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	7a 83       	std	Y+2, r23	; 0x02
     c6c:	69 83       	std	Y+1, r22	; 0x01
	CapPower(a);
     c6e:	be 01       	movw	r22, r28
     c70:	6f 5f       	subi	r22, 0xFF	; 255
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN8Settings8CapPowerERj>
	eeprom_write_word(&ADDRESS_POWER, a);
     c78:	69 81       	ldd	r22, Y+1	; 0x01
     c7a:	7a 81       	ldd	r23, Y+2	; 0x02
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 4d 13 	call	0x269a	; 0x269a <eeprom_write_word>
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <_ZThn6_N8Settings8SetPowerEj>:
     c8e:	06 97       	sbiw	r24, 0x06	; 6
     c90:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN8Settings8SetPowerEj>
     c94:	08 95       	ret

00000c96 <_GLOBAL__sub_I_ADDRESS_TEMPERATURE_MAX>:
#include "IGetFanSpeedMin.h"
#define TEMPERATURE_MAX_MAX 125
#define TEMPERTURE_MAX_MIN 40
#define POWER_MIN 30
#define POWER_MAX 1500
class Settings:public  IGetTemperatureMax, public  ISetTemperatureMax, public  IGetPower, public  ISetPower, public IGetFanSpeedMin
     c96:	e1 e9       	ldi	r30, 0x91	; 145
     c98:	f3 e0       	ldi	r31, 0x03	; 3
     c9a:	81 e4       	ldi	r24, 0x41	; 65
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24
     ca2:	8f e4       	ldi	r24, 0x4F	; 79
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	93 83       	std	Z+3, r25	; 0x03
     ca8:	82 83       	std	Z+2, r24	; 0x02
     caa:	85 e5       	ldi	r24, 0x55	; 85
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	95 83       	std	Z+5, r25	; 0x05
     cb0:	84 83       	std	Z+4, r24	; 0x04
     cb2:	8b e5       	ldi	r24, 0x5B	; 91
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	97 83       	std	Z+7, r25	; 0x07
     cb8:	86 83       	std	Z+6, r24	; 0x06
     cba:	81 e6       	ldi	r24, 0x61	; 97
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	91 87       	std	Z+9, r25	; 0x09
     cc0:	80 87       	std	Z+8, r24	; 0x08
     cc2:	87 e7       	ldi	r24, 0x77	; 119
     cc4:	82 87       	std	Z+10, r24	; 0x0a
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	94 87       	std	Z+12, r25	; 0x0c
     ccc:	83 87       	std	Z+11, r24	; 0x0b
     cce:	88 ee       	ldi	r24, 0xE8	; 232
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	96 87       	std	Z+14, r25	; 0x0e
     cd4:	85 87       	std	Z+13, r24	; 0x0d
     cd6:	08 95       	ret

00000cd8 <_ZN11SystemCheck5CheckERbR10Exceptions>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void SystemCheck::Initialize(){
     cd8:	dc 01       	movw	r26, r24
     cda:	12 96       	adiw	r26, 0x02	; 2
     cdc:	8d 91       	ld	r24, X+
     cde:	9c 91       	ld	r25, X
     ce0:	13 97       	sbiw	r26, 0x03	; 3
     ce2:	dc 01       	movw	r26, r24
     ce4:	ed 91       	ld	r30, X+
     ce6:	fc 91       	ld	r31, X
     ce8:	01 90       	ld	r0, Z+
     cea:	f0 81       	ld	r31, Z
     cec:	e0 2d       	mov	r30, r0
     cee:	09 95       	icall
     cf0:	08 95       	ret

00000cf2 <_ZN11SystemCheck11GetInstanceEv>:
     cf2:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <_ZZN11SystemCheck11GetInstanceEvE11initialized>
     cf6:	81 11       	cpse	r24, r1
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <_ZN11SystemCheck11GetInstanceEv+0xe>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <_ZZN11SystemCheck11GetInstanceEvE11initialized>
     d00:	81 ea       	ldi	r24, 0xA1	; 161
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	08 95       	ret

00000d06 <_ZN11SystemCheck13SetInterfacesEP13ITemperaturesP18IGetTemperatureMaxP5IFans>:

}
void SystemCheck::SetInterfaces(ITemperatures* iTemperatures, IGetTemperatureMax *  iGetTemperatureMax, IFans* iFans){
     d06:	fc 01       	movw	r30, r24
	this->iTemperatures=iTemperatures;
     d08:	73 83       	std	Z+3, r23	; 0x03
     d0a:	62 83       	std	Z+2, r22	; 0x02
	this->iGetTemperatureMax=iGetTemperatureMax;
     d0c:	55 83       	std	Z+5, r21	; 0x05
     d0e:	44 83       	std	Z+4, r20	; 0x04
	this->iFans = iFans;
     d10:	37 83       	std	Z+7, r19	; 0x07
     d12:	26 83       	std	Z+6, r18	; 0x06
     d14:	08 95       	ret

00000d16 <_GLOBAL__sub_I__ZN11SystemCheck10_SingletonE>:
#include "ITemperatures.h"
#include "ISystemCheck.h"
#include "IGetTemperatureMax.h"
#include "IFans.h"
#include  "Exceptions.h"	
class SystemCheck:public ISystemCheck
     d16:	87 e6       	ldi	r24, 0x67	; 103
     d18:	92 e0       	ldi	r25, 0x02	; 2
     d1a:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <_ZN11SystemCheck10_SingletonE+0x1>
     d1e:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <_ZN11SystemCheck10_SingletonE>
     d22:	08 95       	ret

00000d24 <_ZN5TC6543Fan7GetNameEv>:
}
unsigned char TC654::GetDutyCycle(bool& successful){
	return ReadRegister(successful, DUTY_CYCLE_ADDRESS);
}
void TC654::SetDutyCycle(bool& successful, unsigned char value){
	WriteRegister(successful, DUTY_CYCLE_ADDRESS, value);
     d24:	fc 01       	movw	r30, r24
     d26:	86 81       	ldd	r24, Z+6	; 0x06
     d28:	97 81       	ldd	r25, Z+7	; 0x07
     d2a:	08 95       	ret

00000d2c <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions>:
     d2c:	dc 01       	movw	r26, r24
     d2e:	1c 96       	adiw	r26, 0x0c	; 12
     d30:	2d 91       	ld	r18, X+
     d32:	3c 91       	ld	r19, X
     d34:	1d 97       	sbiw	r26, 0x0d	; 13
     d36:	20 fd       	sbrc	r18, 0
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x18>
     d3a:	1a 96       	adiw	r26, 0x0a	; 10
     d3c:	ed 91       	ld	r30, X+
     d3e:	fc 91       	ld	r31, X
     d40:	1b 97       	sbiw	r26, 0x0b	; 11
     d42:	15 c0       	rjmp	.+42     	; 0xd6e <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x42>
     d44:	18 96       	adiw	r26, 0x08	; 8
     d46:	ed 91       	ld	r30, X+
     d48:	fc 91       	ld	r31, X
     d4a:	19 97       	sbiw	r26, 0x09	; 9
     d4c:	c9 01       	movw	r24, r18
     d4e:	95 95       	asr	r25
     d50:	87 95       	ror	r24
     d52:	e8 0f       	add	r30, r24
     d54:	f9 1f       	adc	r31, r25
     d56:	01 90       	ld	r0, Z+
     d58:	f0 81       	ld	r31, Z
     d5a:	e0 2d       	mov	r30, r0
     d5c:	1a 96       	adiw	r26, 0x0a	; 10
     d5e:	8d 91       	ld	r24, X+
     d60:	9c 91       	ld	r25, X
     d62:	1b 97       	sbiw	r26, 0x0b	; 11
     d64:	e8 0f       	add	r30, r24
     d66:	f9 1f       	adc	r31, r25
     d68:	01 90       	ld	r0, Z+
     d6a:	f0 81       	ld	r31, Z
     d6c:	e0 2d       	mov	r30, r0
     d6e:	35 95       	asr	r19
     d70:	27 95       	ror	r18
     d72:	18 96       	adiw	r26, 0x08	; 8
     d74:	8d 91       	ld	r24, X+
     d76:	9c 91       	ld	r25, X
     d78:	19 97       	sbiw	r26, 0x09	; 9
     d7a:	82 0f       	add	r24, r18
     d7c:	93 1f       	adc	r25, r19
     d7e:	09 95       	icall
     d80:	22 e3       	ldi	r18, 0x32	; 50
     d82:	82 9f       	mul	r24, r18
     d84:	c0 01       	movw	r24, r0
     d86:	11 24       	eor	r1, r1
     d88:	08 95       	ret

00000d8a <_ZN5TC6543Fan5CheckERbR10Exceptions>:
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
     d90:	a8 89       	ldd	r26, Y+16	; 0x10
     d92:	b9 89       	ldd	r27, Y+17	; 0x11
     d94:	a0 fd       	sbrc	r26, 0
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <_ZN5TC6543Fan5CheckERbR10Exceptions+0x14>
     d98:	ee 85       	ldd	r30, Y+14	; 0x0e
     d9a:	ff 85       	ldd	r31, Y+15	; 0x0f
     d9c:	11 c0       	rjmp	.+34     	; 0xdc0 <_ZN5TC6543Fan5CheckERbR10Exceptions+0x36>
     d9e:	e8 85       	ldd	r30, Y+8	; 0x08
     da0:	f9 85       	ldd	r31, Y+9	; 0x09
     da2:	cd 01       	movw	r24, r26
     da4:	95 95       	asr	r25
     da6:	87 95       	ror	r24
     da8:	e8 0f       	add	r30, r24
     daa:	f9 1f       	adc	r31, r25
     dac:	01 90       	ld	r0, Z+
     dae:	f0 81       	ld	r31, Z
     db0:	e0 2d       	mov	r30, r0
     db2:	8e 85       	ldd	r24, Y+14	; 0x0e
     db4:	9f 85       	ldd	r25, Y+15	; 0x0f
     db6:	e8 0f       	add	r30, r24
     db8:	f9 1f       	adc	r31, r25
     dba:	01 90       	ld	r0, Z+
     dbc:	f0 81       	ld	r31, Z
     dbe:	e0 2d       	mov	r30, r0
     dc0:	2e 81       	ldd	r18, Y+6	; 0x06
     dc2:	3f 81       	ldd	r19, Y+7	; 0x07
     dc4:	b5 95       	asr	r27
     dc6:	a7 95       	ror	r26
     dc8:	88 85       	ldd	r24, Y+8	; 0x08
     dca:	99 85       	ldd	r25, Y+9	; 0x09
     dcc:	8a 0f       	add	r24, r26
     dce:	9b 1f       	adc	r25, r27
     dd0:	09 95       	icall
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <_ZThn4_N5TC6543Fan5CheckERbR10Exceptions>:
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN5TC6543Fan5CheckERbR10Exceptions>
     dde:	08 95       	ret

00000de0 <_ZThn2_N5TC6543Fan7GetNameEv>:
     de0:	fc 01       	movw	r30, r24
     de2:	84 81       	ldd	r24, Z+4	; 0x04
     de4:	95 81       	ldd	r25, Z+5	; 0x05
     de6:	08 95       	ret

00000de8 <_ZN5TC6546Status6GetF2FEv>:
     de8:	fc 01       	movw	r30, r24
     dea:	90 81       	ld	r25, Z
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	91 ff       	sbrs	r25, 1
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	08 95       	ret

00000df4 <_ZN5TC6546Status7GetR1COEv>:
     df4:	fc 01       	movw	r30, r24
     df6:	90 81       	ld	r25, Z
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	93 ff       	sbrs	r25, 3
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	08 95       	ret

00000e00 <_ZN5TC6546Status7GetR2COEv>:
     e00:	fc 01       	movw	r30, r24
     e02:	90 81       	ld	r25, Z
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	94 ff       	sbrs	r25, 4
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	08 95       	ret

00000e0c <_ZN5TC6543FanC1EPS_MS_FhRbEMS_FvS2_R10ExceptionsPKcEPc>:
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	fc 01       	movw	r30, r24
     e1a:	8d e7       	ldi	r24, 0x7D	; 125
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
     e22:	87 e8       	ldi	r24, 0x87	; 135
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	93 83       	std	Z+3, r25	; 0x03
     e28:	82 83       	std	Z+2, r24	; 0x02
     e2a:	8d e8       	ldi	r24, 0x8D	; 141
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	95 83       	std	Z+5, r25	; 0x05
     e30:	84 83       	std	Z+4, r24	; 0x04
     e32:	d7 82       	std	Z+7, r13	; 0x07
     e34:	c6 82       	std	Z+6, r12	; 0x06
     e36:	71 87       	std	Z+9, r23	; 0x09
     e38:	60 87       	std	Z+8, r22	; 0x08
     e3a:	e6 86       	std	Z+14, r14	; 0x0e
     e3c:	f7 86       	std	Z+15, r15	; 0x0f
     e3e:	00 8b       	std	Z+16, r16	; 0x10
     e40:	11 8b       	std	Z+17, r17	; 0x11
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	08 95       	ret

00000e50 <_ZN5TC654C1Ecc>:
     e50:	af 92       	push	r10
     e52:	bf 92       	push	r11
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	ec 01       	movw	r28, r24
     e66:	b6 2e       	mov	r11, r22
     e68:	a4 2e       	mov	r10, r20
     e6a:	86 e3       	ldi	r24, 0x36	; 54
     e6c:	88 83       	st	Y, r24
     e6e:	87 e3       	ldi	r24, 0x37	; 55
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	1a 82       	std	Y+2, r1	; 0x02
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	8b 83       	std	Y+3, r24	; 0x03
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	8c 83       	std	Y+4, r24	; 0x04
     e7c:	83 e0       	ldi	r24, 0x03	; 3
     e7e:	8d 83       	std	Y+5, r24	; 0x05
     e80:	84 e0       	ldi	r24, 0x04	; 4
     e82:	8e 83       	std	Y+6, r24	; 0x06
     e84:	85 e0       	ldi	r24, 0x05	; 5
     e86:	8f 83       	std	Y+7, r24	; 0x07
     e88:	86 e0       	ldi	r24, 0x06	; 6
     e8a:	88 87       	std	Y+8, r24	; 0x08
     e8c:	87 e0       	ldi	r24, 0x07	; 7
     e8e:	89 87       	std	Y+9, r24	; 0x09
     e90:	88 e0       	ldi	r24, 0x08	; 8
     e92:	8a 87       	std	Y+10, r24	; 0x0a
     e94:	0f 2e       	mov	r0, r31
     e96:	fc ec       	ldi	r31, 0xCC	; 204
     e98:	ef 2e       	mov	r14, r31
     e9a:	f7 e0       	ldi	r31, 0x07	; 7
     e9c:	ff 2e       	mov	r15, r31
     e9e:	f0 2d       	mov	r31, r0
     ea0:	00 e0       	ldi	r16, 0x00	; 0
     ea2:	10 e0       	ldi	r17, 0x00	; 0
     ea4:	2d eb       	ldi	r18, 0xBD	; 189
     ea6:	37 e0       	ldi	r19, 0x07	; 7
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	0f 2e       	mov	r0, r31
     eae:	f9 e6       	ldi	r31, 0x69	; 105
     eb0:	cf 2e       	mov	r12, r31
     eb2:	f2 e0       	ldi	r31, 0x02	; 2
     eb4:	df 2e       	mov	r13, r31
     eb6:	f0 2d       	mov	r31, r0
     eb8:	be 01       	movw	r22, r28
     eba:	ce 01       	movw	r24, r28
     ebc:	0d 96       	adiw	r24, 0x0d	; 13
     ebe:	0e 94 06 07 	call	0xe0c	; 0xe0c <_ZN5TC6543FanC1EPS_MS_FhRbEMS_FvS2_R10ExceptionsPKcEPc>
     ec2:	0f 2e       	mov	r0, r31
     ec4:	fb e1       	ldi	r31, 0x1B	; 27
     ec6:	ef 2e       	mov	r14, r31
     ec8:	f8 e0       	ldi	r31, 0x08	; 8
     eca:	ff 2e       	mov	r15, r31
     ecc:	f0 2d       	mov	r31, r0
     ece:	00 e0       	ldi	r16, 0x00	; 0
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	22 ec       	ldi	r18, 0xC2	; 194
     ed4:	37 e0       	ldi	r19, 0x07	; 7
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	0f 2e       	mov	r0, r31
     edc:	f1 e7       	ldi	r31, 0x71	; 113
     ede:	cf 2e       	mov	r12, r31
     ee0:	f2 e0       	ldi	r31, 0x02	; 2
     ee2:	df 2e       	mov	r13, r31
     ee4:	f0 2d       	mov	r31, r0
     ee6:	be 01       	movw	r22, r28
     ee8:	ce 01       	movw	r24, r28
     eea:	4f 96       	adiw	r24, 0x1f	; 31
     eec:	0e 94 06 07 	call	0xe0c	; 0xe0c <_ZN5TC6543FanC1EPS_MS_FhRbEMS_FvS2_R10ExceptionsPKcEPc>
     ef0:	8b 2d       	mov	r24, r11
     ef2:	8f 70       	andi	r24, 0x0F	; 15
     ef4:	b8 2e       	mov	r11, r24
     ef6:	bb 0c       	add	r11, r11
     ef8:	bb 0c       	add	r11, r11
     efa:	bb 86       	std	Y+11, r11	; 0x0b
     efc:	aa 0c       	add	r10, r10
     efe:	aa 0c       	add	r10, r10
     f00:	aa 0c       	add	r10, r10
     f02:	aa 0c       	add	r10, r10
     f04:	aa 0c       	add	r10, r10
     f06:	aa 0c       	add	r10, r10
     f08:	ac 86       	std	Y+12, r10	; 0x0c
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	bf 90       	pop	r11
     f1c:	af 90       	pop	r10
     f1e:	08 95       	ret

00000f20 <_ZN5TC65412ReadRegisterERbc>:
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
     f2c:	7b 01       	movw	r14, r22
     f2e:	14 2f       	mov	r17, r20
     f30:	88 81       	ld	r24, Y
     f32:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_start_wait>
     f36:	81 2f       	mov	r24, r17
     f38:	0e 94 ad 00 	call	0x15a	; 0x15a <i2c_write>
     f3c:	88 23       	and	r24, r24
     f3e:	31 f0       	breq	.+12     	; 0xf4c <_ZN5TC65412ReadRegisterERbc+0x2c>
     f40:	f7 01       	movw	r30, r14
     f42:	10 82       	st	Z, r1
     f44:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_stop>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <_ZN5TC65412ReadRegisterERbc+0x4e>
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	0e 94 91 00 	call	0x122	; 0x122 <i2c_rep_start>
     f52:	88 23       	and	r24, r24
     f54:	31 f0       	breq	.+12     	; 0xf62 <_ZN5TC65412ReadRegisterERbc+0x42>
     f56:	f7 01       	movw	r30, r14
     f58:	10 82       	st	Z, r1
     f5a:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_stop>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <_ZN5TC65412ReadRegisterERbc+0x4e>
     f62:	0e 94 c9 00 	call	0x192	; 0x192 <i2c_readNak>
     f66:	c8 2f       	mov	r28, r24
     f68:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_stop>
     f6c:	8c 2f       	mov	r24, r28
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	08 95       	ret

00000f7a <_ZN5TC6547GetRPM1ERb>:
     f7a:	fc 01       	movw	r30, r24
     f7c:	42 81       	ldd	r20, Z+2	; 0x02
     f7e:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN5TC65412ReadRegisterERbc>
     f82:	08 95       	ret

00000f84 <_ZN5TC6547GetRPM2ERb>:
     f84:	fc 01       	movw	r30, r24
     f86:	43 81       	ldd	r20, Z+3	; 0x03
     f88:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN5TC65412ReadRegisterERbc>
     f8c:	08 95       	ret

00000f8e <_ZN5TC6549GetStatusERb>:
}
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
     f8e:	fc 01       	movw	r30, r24
     f90:	47 81       	ldd	r20, Z+7	; 0x07
     f92:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN5TC65412ReadRegisterERbc>
}
     f96:	08 95       	ret

00000f98 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc>:
	return ReadRegister(successful, RPM1_ADDRESS);
}
unsigned char TC654::GetRPM2(bool& successful){
	return ReadRegister(successful, RPM2_ADDRESS);
}
void  TC654::CheckFan1(bool& successful, Exceptions& exceptions, const char* name){
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	1f 92       	push	r1
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	8b 01       	movw	r16, r22
     fb0:	7a 01       	movw	r14, r20
     fb2:	69 01       	movw	r12, r18
	Status status = GetStatus(successful);
     fb4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN5TC6549GetStatusERb>
     fb8:	89 83       	std	Y+1, r24	; 0x01
	if(!successful)
     fba:	f8 01       	movw	r30, r16
     fbc:	80 81       	ld	r24, Z
     fbe:	81 11       	cpse	r24, r1
     fc0:	0d c0       	rjmp	.+26     	; 0xfdc <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x44>
	{
		exceptions.Add(new CommunicationException(name));
     fc2:	88 e0       	ldi	r24, 0x08	; 8
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
     fca:	8c 01       	movw	r16, r24
     fcc:	b6 01       	movw	r22, r12
     fce:	0e 94 23 01 	call	0x246	; 0x246 <_ZN22CommunicationExceptionC1EPKc>
     fd2:	b8 01       	movw	r22, r16
     fd4:	c7 01       	movw	r24, r14
     fd6:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN10Exceptions3AddEP9Exception>
     fda:	23 c0       	rjmp	.+70     	; 0x1022 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x8a>
		return;
	}
		if(status.GetF1F())
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	80 ff       	sbrs	r24, 0
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x64>
		exceptions.Add(new TC654Exception(name, TC654Exception::Fault));
     fe2:	89 e0       	ldi	r24, 0x09	; 9
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
     fea:	8c 01       	movw	r16, r24
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	b6 01       	movw	r22, r12
     ff0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
     ff4:	b8 01       	movw	r22, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN10Exceptions3AddEP9Exception>
		if(status.GetR1CO())
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_ZN5TC6546Status7GetR1COEv>
    1004:	88 23       	and	r24, r24
    1006:	69 f0       	breq	.+26     	; 0x1022 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x8a>
		exceptions.Add(new TC654Exception(name, TC654Exception::CounterOverflow));
    1008:	89 e0       	ldi	r24, 0x09	; 9
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
    1010:	8c 01       	movw	r16, r24
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	b6 01       	movw	r22, r12
    1016:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    101a:	b8 01       	movw	r22, r16
    101c:	c7 01       	movw	r24, r14
    101e:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN10Exceptions3AddEP9Exception>
}
    1022:	0f 90       	pop	r0
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	08 95       	ret

00001036 <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc>:
void  TC654::CheckFan2(bool& successful, Exceptions& exceptions, const char* name){
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	1f 92       	push	r1
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	8b 01       	movw	r16, r22
    104e:	7a 01       	movw	r14, r20
    1050:	69 01       	movw	r12, r18
Status status = GetStatus(successful);
    1052:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN5TC6549GetStatusERb>
    1056:	89 83       	std	Y+1, r24	; 0x01
if(!successful)
    1058:	f8 01       	movw	r30, r16
    105a:	80 81       	ld	r24, Z
    105c:	81 11       	cpse	r24, r1
    105e:	0d c0       	rjmp	.+26     	; 0x107a <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x44>
{
	exceptions.Add(new CommunicationException(name));
    1060:	88 e0       	ldi	r24, 0x08	; 8
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
    1068:	8c 01       	movw	r16, r24
    106a:	b6 01       	movw	r22, r12
    106c:	0e 94 23 01 	call	0x246	; 0x246 <_ZN22CommunicationExceptionC1EPKc>
    1070:	b8 01       	movw	r22, r16
    1072:	c7 01       	movw	r24, r14
    1074:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN10Exceptions3AddEP9Exception>
    1078:	26 c0       	rjmp	.+76     	; 0x10c6 <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x90>
	return;
}
if(status.GetF2F())
    107a:	ce 01       	movw	r24, r28
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5TC6546Status6GetF2FEv>
    1082:	88 23       	and	r24, r24
    1084:	69 f0       	breq	.+26     	; 0x10a0 <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x6a>
exceptions.Add(new TC654Exception(name, TC654Exception::Fault));
    1086:	89 e0       	ldi	r24, 0x09	; 9
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
    108e:	8c 01       	movw	r16, r24
    1090:	40 e0       	ldi	r20, 0x00	; 0
    1092:	b6 01       	movw	r22, r12
    1094:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    1098:	b8 01       	movw	r22, r16
    109a:	c7 01       	movw	r24, r14
    109c:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN10Exceptions3AddEP9Exception>
if(status.GetR2CO())
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN5TC6546Status7GetR2COEv>
    10a8:	88 23       	and	r24, r24
    10aa:	69 f0       	breq	.+26     	; 0x10c6 <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x90>
exceptions.Add(new TC654Exception(name, TC654Exception::CounterOverflow));
    10ac:	89 e0       	ldi	r24, 0x09	; 9
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
    10b4:	8c 01       	movw	r16, r24
    10b6:	41 e0       	ldi	r20, 0x01	; 1
    10b8:	b6 01       	movw	r22, r12
    10ba:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    10be:	b8 01       	movw	r22, r16
    10c0:	c7 01       	movw	r24, r14
    10c2:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN10Exceptions3AddEP9Exception>
}
    10c6:	0f 90       	pop	r0
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	08 95       	ret

000010da <_ZN5TC65415GetIGetFan1InfoEv>:
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
}
IGetFanInfo* TC654::GetIGetFan1Info(){
	return &fan1;
}
    10da:	0d 96       	adiw	r24, 0x0d	; 13
    10dc:	08 95       	ret

000010de <_ZN5TC65415GetIGetFan2InfoEv>:
IGetFanInfo* TC654::GetIGetFan2Info(){
	return &fan2;
}
    10de:	4f 96       	adiw	r24, 0x1f	; 31
    10e0:	08 95       	ret

000010e2 <_ZN14TC654Exception8ToStringEv>:
{
	if(message!=NULL){
		delete message;
	}
} //~TC654Exception
const char* TC654Exception::ToString(){
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	ec 01       	movw	r28, r24
	if(message==NULL){
    10f0:	8f 81       	ldd	r24, Y+7	; 0x07
    10f2:	98 85       	ldd	r25, Y+8	; 0x08
    10f4:	89 2b       	or	r24, r25
    10f6:	09 f0       	breq	.+2      	; 0x10fa <_ZN14TC654Exception8ToStringEv+0x18>
    10f8:	57 c0       	rjmp	.+174    	; 0x11a8 <_ZN14TC654Exception8ToStringEv+0xc6>
		size_t totalLength;
		switch(type){
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	88 23       	and	r24, r24
    10fe:	19 f0       	breq	.+6      	; 0x1106 <_ZN14TC654Exception8ToStringEv+0x24>
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	51 f1       	breq	.+84     	; 0x1158 <_ZN14TC654Exception8ToStringEv+0x76>
    1104:	51 c0       	rjmp	.+162    	; 0x11a8 <_ZN14TC654Exception8ToStringEv+0xc6>
			case Fault:
			totalLength = strlen(name)+57;
    1106:	fd 80       	ldd	r15, Y+5	; 0x05
    1108:	ee 80       	ldd	r14, Y+6	; 0x06
    110a:	ef 2d       	mov	r30, r15
    110c:	fe 2d       	mov	r31, r14
    110e:	df 01       	movw	r26, r30
    1110:	0d 90       	ld	r0, X+
    1112:	00 20       	and	r0, r0
    1114:	e9 f7       	brne	.-6      	; 0x1110 <_ZN14TC654Exception8ToStringEv+0x2e>
    1116:	8d 01       	movw	r16, r26
    1118:	0e 1b       	sub	r16, r30
    111a:	1f 0b       	sbc	r17, r31
    111c:	08 5c       	subi	r16, 0xC8	; 200
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
			message=(char*)malloc(sizeof(char)*totalLength);
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <malloc>
    1126:	98 87       	std	Y+8, r25	; 0x08
    1128:	8f 83       	std	Y+7, r24	; 0x07
			if(message!=NULL){
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	e9 f1       	breq	.+122    	; 0x11a8 <_ZN14TC654Exception8ToStringEv+0xc6>
				snprintf(message,totalLength, "%s experienced a fault as indicated by its status register", name);
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	2f e8       	ldi	r18, 0x8F	; 143
    1134:	32 e0       	ldi	r19, 0x02	; 2
    1136:	3f 93       	push	r19
    1138:	2f 93       	push	r18
    113a:	1f 93       	push	r17
    113c:	0f 93       	push	r16
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	0e 94 70 10 	call	0x20e0	; 0x20e0 <snprintf>
    1146:	8d b7       	in	r24, 0x3d	; 61
    1148:	9e b7       	in	r25, 0x3e	; 62
    114a:	08 96       	adiw	r24, 0x08	; 8
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	9e bf       	out	0x3e, r25	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	8d bf       	out	0x3d, r24	; 61
    1156:	28 c0       	rjmp	.+80     	; 0x11a8 <_ZN14TC654Exception8ToStringEv+0xc6>
			}
			break;
			case CounterOverflow:
			totalLength = strlen(name)+68;
    1158:	fd 80       	ldd	r15, Y+5	; 0x05
    115a:	ee 80       	ldd	r14, Y+6	; 0x06
    115c:	ef 2d       	mov	r30, r15
    115e:	fe 2d       	mov	r31, r14
    1160:	df 01       	movw	r26, r30
    1162:	0d 90       	ld	r0, X+
    1164:	00 20       	and	r0, r0
    1166:	e9 f7       	brne	.-6      	; 0x1162 <_ZN14TC654Exception8ToStringEv+0x80>
    1168:	8d 01       	movw	r16, r26
    116a:	0e 1b       	sub	r16, r30
    116c:	1f 0b       	sbc	r17, r31
    116e:	0d 5b       	subi	r16, 0xBD	; 189
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
			message=(char*)malloc(sizeof(char)*totalLength);
    1172:	c8 01       	movw	r24, r16
    1174:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <malloc>
    1178:	98 87       	std	Y+8, r25	; 0x08
    117a:	8f 83       	std	Y+7, r24	; 0x07
			if(message!=NULL){
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	a1 f0       	breq	.+40     	; 0x11a8 <_ZN14TC654Exception8ToStringEv+0xc6>
				snprintf(message,totalLength, "%s experienced a counter overflow as indicated by its status register",name);
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	2a ec       	ldi	r18, 0xCA	; 202
    1186:	32 e0       	ldi	r19, 0x02	; 2
    1188:	3f 93       	push	r19
    118a:	2f 93       	push	r18
    118c:	1f 93       	push	r17
    118e:	0f 93       	push	r16
    1190:	9f 93       	push	r25
    1192:	8f 93       	push	r24
    1194:	0e 94 70 10 	call	0x20e0	; 0x20e0 <snprintf>
    1198:	8d b7       	in	r24, 0x3d	; 61
    119a:	9e b7       	in	r25, 0x3e	; 62
    119c:	08 96       	adiw	r24, 0x08	; 8
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	9e bf       	out	0x3e, r25	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	8d bf       	out	0x3d, r24	; 61
			}
			break;
		}
	}
	return message;
    11a8:	8f 81       	ldd	r24, Y+7	; 0x07
    11aa:	98 85       	ldd	r25, Y+8	; 0x08
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	08 95       	ret

000011ba <_ZN14TC654ExceptionC1EPKcNS_4TypeE>:
#include <stdio.h>
#include <stdlib.h>
#include "TC654Exception.h"

// default constructor
TC654Exception::TC654Exception(const char* name, Type type):name(name), type(type)
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
    11c6:	8b 01       	movw	r16, r22
    11c8:	f4 2e       	mov	r15, r20
    11ca:	0e 94 12 04 	call	0x824	; 0x824 <_ZN9ExceptionC1Ev>
    11ce:	84 e1       	ldi	r24, 0x14	; 20
    11d0:	93 e0       	ldi	r25, 0x03	; 3
    11d2:	99 83       	std	Y+1, r25	; 0x01
    11d4:	88 83       	st	Y, r24
    11d6:	fc 82       	std	Y+4, r15	; 0x04
    11d8:	1e 83       	std	Y+6, r17	; 0x06
    11da:	0d 83       	std	Y+5, r16	; 0x05
    11dc:	18 86       	std	Y+8, r1	; 0x08
    11de:	1f 82       	std	Y+7, r1	; 0x07
{
	
} //TC654Exception
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	08 95       	ret

000011ec <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions>:
}
void Temperatures::SetInterfaces(IGetTemperatureInfo** iGetTemperatureInfos, unsigned char  nIGetTemperatureInfos){
	this->iGetTemperatureInfos=iGetTemperatureInfos;
	this->nIGetTemperatureInfos=nIGetTemperatureInfos;
}
void Temperatures::Initialize(){
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	8c 01       	movw	r16, r24
    1200:	7b 01       	movw	r14, r22
    1202:	6a 01       	movw	r12, r20
    1204:	dc 01       	movw	r26, r24
    1206:	14 96       	adiw	r26, 0x04	; 4
    1208:	8c 91       	ld	r24, X
    120a:	14 97       	sbiw	r26, 0x04	; 4
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x26>
    1210:	41 c0       	rjmp	.+130    	; 0x1294 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xa8>
    1212:	12 96       	adiw	r26, 0x02	; 2
    1214:	ed 91       	ld	r30, X+
    1216:	fc 91       	ld	r31, X
    1218:	13 97       	sbiw	r26, 0x03	; 3
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	dc 01       	movw	r26, r24
    1220:	ed 91       	ld	r30, X+
    1222:	fc 91       	ld	r31, X
    1224:	01 90       	ld	r0, Z+
    1226:	f0 81       	ld	r31, Z
    1228:	e0 2d       	mov	r30, r0
    122a:	09 95       	icall
    122c:	b8 2e       	mov	r11, r24
    122e:	f7 01       	movw	r30, r14
    1230:	80 81       	ld	r24, Z
    1232:	88 23       	and	r24, r24
    1234:	09 f4       	brne	.+2      	; 0x1238 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x4c>
    1236:	3f c0       	rjmp	.+126    	; 0x12b6 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xca>
    1238:	d8 01       	movw	r26, r16
    123a:	14 96       	adiw	r26, 0x04	; 4
    123c:	8c 91       	ld	r24, X
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 97       	sbiw	r24, 0x02	; 2
    1242:	dc f1       	brlt	.+118    	; 0x12ba <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xce>
    1244:	c1 e0       	ldi	r28, 0x01	; 1
    1246:	d0 e0       	ldi	r29, 0x00	; 0
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x6a>
    124a:	f8 01       	movw	r30, r16
    124c:	24 81       	ldd	r18, Z+4	; 0x04
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	c2 17       	cp	r28, r18
    1252:	d3 07       	cpc	r29, r19
    1254:	a4 f5       	brge	.+104    	; 0x12be <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd2>
    1256:	d8 01       	movw	r26, r16
    1258:	12 96       	adiw	r26, 0x02	; 2
    125a:	ed 91       	ld	r30, X+
    125c:	fc 91       	ld	r31, X
    125e:	13 97       	sbiw	r26, 0x03	; 3
    1260:	9e 01       	movw	r18, r28
    1262:	22 0f       	add	r18, r18
    1264:	33 1f       	adc	r19, r19
    1266:	e2 0f       	add	r30, r18
    1268:	f3 1f       	adc	r31, r19
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	dc 01       	movw	r26, r24
    1270:	ed 91       	ld	r30, X+
    1272:	fc 91       	ld	r31, X
    1274:	01 90       	ld	r0, Z+
    1276:	f0 81       	ld	r31, Z
    1278:	e0 2d       	mov	r30, r0
    127a:	a6 01       	movw	r20, r12
    127c:	b7 01       	movw	r22, r14
    127e:	09 95       	icall
    1280:	b8 16       	cp	r11, r24
    1282:	0c f4       	brge	.+2      	; 0x1286 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x9a>
    1284:	b8 2e       	mov	r11, r24
    1286:	21 96       	adiw	r28, 0x01	; 1
    1288:	f7 01       	movw	r30, r14
    128a:	80 81       	ld	r24, Z
    128c:	81 11       	cpse	r24, r1
    128e:	dd cf       	rjmp	.-70     	; 0x124a <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x5e>
    1290:	8b 2d       	mov	r24, r11
    1292:	16 c0       	rjmp	.+44     	; 0x12c0 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    1294:	88 e0       	ldi	r24, 0x08	; 8
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
    129c:	ec 01       	movw	r28, r24
    129e:	66 e1       	ldi	r22, 0x16	; 22
    12a0:	73 e0       	ldi	r23, 0x03	; 3
    12a2:	0e 94 23 01 	call	0x246	; 0x246 <_ZN22CommunicationExceptionC1EPKc>
    12a6:	be 01       	movw	r22, r28
    12a8:	c6 01       	movw	r24, r12
    12aa:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN10Exceptions3AddEP9Exception>
    12ae:	d7 01       	movw	r26, r14
    12b0:	1c 92       	st	X, r1
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	05 c0       	rjmp	.+10     	; 0x12c0 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    12b6:	8b 2d       	mov	r24, r11
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    12ba:	8b 2d       	mov	r24, r11
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    12be:	8b 2d       	mov	r24, r11
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	bf 90       	pop	r11
    12d2:	08 95       	ret

000012d4 <_ZN12Temperatures11GetInstanceEv>:
    12d4:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    12d8:	81 11       	cpse	r24, r1
    12da:	03 c0       	rjmp	.+6      	; 0x12e2 <_ZN12Temperatures11GetInstanceEv+0xe>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    12e2:	8a ea       	ldi	r24, 0xAA	; 170
    12e4:	93 e0       	ldi	r25, 0x03	; 3
    12e6:	08 95       	ret

000012e8 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>:
    12e8:	fc 01       	movw	r30, r24
    12ea:	73 83       	std	Z+3, r23	; 0x03
    12ec:	62 83       	std	Z+2, r22	; 0x02
    12ee:	44 83       	std	Z+4, r20	; 0x04
    12f0:	08 95       	ret

000012f2 <_GLOBAL__sub_I__ZN12Temperatures10_SingletonE>:
#ifndef __Temperatures_H__
#define __Temperatures_H__
#include "IGetTemperatureInfo.h"
#include "ITemperatures.h"

class Temperatures:
    12f2:	8e e2       	ldi	r24, 0x2E	; 46
    12f4:	93 e0       	ldi	r25, 0x03	; 3
    12f6:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <_ZN12Temperatures10_SingletonE+0x1>
    12fa:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <_ZN12Temperatures10_SingletonE>
    12fe:	08 95       	ret

00001300 <_Znwj>:
		if(!Ticker::tickerCallbacksMilliseconds.contains(callback)){
		Ticker::tickerCallbacksMilliseconds.push_back(callback);}
	}
	else
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
    1300:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <malloc>
    1304:	08 95       	ret

00001306 <_Znaj>:
    1306:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <malloc>
    130a:	08 95       	ret

0000130c <_ZdlPv>:
    130c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <free>
    1310:	08 95       	ret

00001312 <_ZdaPv>:
    1312:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <free>
    1316:	08 95       	ret

00001318 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	2f 93       	push	r18
    1328:	3f 93       	push	r19
    132a:	4f 93       	push	r20
    132c:	5f 93       	push	r21
    132e:	6f 93       	push	r22
    1330:	7f 93       	push	r23
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
    1336:	af 93       	push	r26
    1338:	bf 93       	push	r27
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
	cli();
    1342:	f8 94       	cli
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    1344:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <_ZN6Ticker27tickerCallbacksMillisecondsE>
    1348:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x1>
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    134c:	89 2b       	or	r24, r25
    134e:	c9 f0       	breq	.+50     	; 0x1382 <__vector_14+0x6a>
    1350:	c0 e0       	ldi	r28, 0x00	; 0
    1352:	d0 e0       	ldi	r29, 0x00	; 0
	Data const &operator[](size_t idx)volatile const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx)volatile { return d_data[idx]; }; // Changeable getter
    1354:	05 eb       	ldi	r16, 0xB5	; 181
    1356:	13 e0       	ldi	r17, 0x03	; 3
    1358:	d8 01       	movw	r26, r16
    135a:	14 96       	adiw	r26, 0x04	; 4
    135c:	ed 91       	ld	r30, X+
    135e:	fc 91       	ld	r31, X
    1360:	15 97       	sbiw	r26, 0x05	; 5
	{
		Ticker::tickerCallbacksMilliseconds[i]();
    1362:	ce 01       	movw	r24, r28
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	e8 0f       	add	r30, r24
    136a:	f9 1f       	adc	r31, r25
    136c:	01 90       	ld	r0, Z+
    136e:	f0 81       	ld	r31, Z
    1370:	e0 2d       	mov	r30, r0
    1372:	09 95       	icall
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
ISR(TIMER0_COMPA_vect)
{
	cli();
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    1374:	21 96       	adiw	r28, 0x01	; 1
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    1376:	f8 01       	movw	r30, r16
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	c8 17       	cp	r28, r24
    137e:	d9 07       	cpc	r29, r25
    1380:	58 f3       	brcs	.-42     	; 0x1358 <__vector_14+0x40>
	{
		Ticker::tickerCallbacksMilliseconds[i]();
	}
	sei();
    1382:	78 94       	sei
}
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <_GLOBAL__sub_I__Znwj>:
 for(size_t i=0; i<d_size; i++){
	if(d==d_data[i])return true;
 }
 return false;
	}
	volatile_vector() : d_size(0), d_capacity(0), d_data(0) {
    13ae:	e5 eb       	ldi	r30, 0xB5	; 181
    13b0:	f3 e0       	ldi	r31, 0x03	; 3
    13b2:	11 82       	std	Z+1, r1	; 0x01
    13b4:	10 82       	st	Z, r1
    13b6:	13 82       	std	Z+3, r1	; 0x03
    13b8:	12 82       	std	Z+2, r1	; 0x02
    13ba:	15 82       	std	Z+5, r1	; 0x05
    13bc:	14 82       	std	Z+4, r1	; 0x04
    13be:	ef ea       	ldi	r30, 0xAF	; 175
    13c0:	f3 e0       	ldi	r31, 0x03	; 3
    13c2:	11 82       	std	Z+1, r1	; 0x01
    13c4:	10 82       	st	Z, r1
    13c6:	13 82       	std	Z+3, r1	; 0x03
    13c8:	12 82       	std	Z+2, r1	; 0x02
    13ca:	15 82       	std	Z+5, r1	; 0x05
    13cc:	14 82       	std	Z+4, r1	; 0x04
    13ce:	08 95       	ret

000013d0 <_GLOBAL__sub_D__Znwj>:

	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
    13d0:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <_ZN6Ticker22tickerCallbacksSecondsE+0x4>
    13d4:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <_ZN6Ticker22tickerCallbacksSecondsE+0x5>
    13d8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <free>
    13dc:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x4>
    13e0:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <_ZN6Ticker27tickerCallbacksMillisecondsE+0x5>
    13e4:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <free>
    13e8:	08 95       	ret

000013ea <_ZL11parseStringPc>:
	json_t const* field = json_getProperty( obj, property );
	if ( !field ) return 0;
        jsonType_t type = json_getType( field );
        if ( JSON_ARRAY >= type ) return 0;
	return json_getValue( field );
}
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
    13f0:	98 81       	ld	r25, Y
    13f2:	90 32       	cpi	r25, 0x20	; 32
    13f4:	08 f4       	brcc	.+2      	; 0x13f8 <_ZL11parseStringPc+0xe>
    13f6:	57 c0       	rjmp	.+174    	; 0x14a6 <_ZL11parseStringPc+0xbc>
    13f8:	92 32       	cpi	r25, 0x22	; 34
    13fa:	31 f0       	breq	.+12     	; 0x1408 <_ZL11parseStringPc+0x1e>
    13fc:	de 01       	movw	r26, r28
    13fe:	4f e3       	ldi	r20, 0x3F	; 63
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <_ZL11parseStringPc+0x28>
    1402:	92 32       	cpi	r25, 0x22	; 34
    1404:	31 f4       	brne	.+12     	; 0x1412 <_ZL11parseStringPc+0x28>
    1406:	01 c0       	rjmp	.+2      	; 0x140a <_ZL11parseStringPc+0x20>
    1408:	de 01       	movw	r26, r28
    140a:	1c 92       	st	X, r1
    140c:	ce 01       	movw	r24, r28
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	5b c0       	rjmp	.+182    	; 0x14c8 <_ZL11parseStringPc+0xde>
    1412:	9c 35       	cpi	r25, 0x5C	; 92
    1414:	e1 f5       	brne	.+120    	; 0x148e <_ZL11parseStringPc+0xa4>
    1416:	99 81       	ldd	r25, Y+1	; 0x01
    1418:	95 37       	cpi	r25, 0x75	; 117
    141a:	19 f0       	breq	.+6      	; 0x1422 <_ZL11parseStringPc+0x38>
    141c:	92 32       	cpi	r25, 0x22	; 34
    141e:	c9 f4       	brne	.+50     	; 0x1452 <_ZL11parseStringPc+0x68>
    1420:	20 c0       	rjmp	.+64     	; 0x1462 <_ZL11parseStringPc+0x78>
    1422:	fe 01       	movw	r30, r28
    1424:	32 96       	adiw	r30, 0x02	; 2
    1426:	9e 01       	movw	r18, r28
    1428:	2a 5f       	subi	r18, 0xFA	; 250
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	81 91       	ld	r24, Z+
    142e:	80 33       	cpi	r24, 0x30	; 48
    1430:	e8 f1       	brcs	.+122    	; 0x14ac <_ZL11parseStringPc+0xc2>
    1432:	8a 33       	cpi	r24, 0x3A	; 58
    1434:	38 f0       	brcs	.+14     	; 0x1444 <_ZL11parseStringPc+0x5a>
    1436:	81 34       	cpi	r24, 0x41	; 65
    1438:	e0 f1       	brcs	.+120    	; 0x14b2 <_ZL11parseStringPc+0xc8>
    143a:	87 34       	cpi	r24, 0x47	; 71
    143c:	18 f0       	brcs	.+6      	; 0x1444 <_ZL11parseStringPc+0x5a>
    143e:	81 56       	subi	r24, 0x61	; 97
    1440:	86 30       	cpi	r24, 0x06	; 6
    1442:	d0 f5       	brcc	.+116    	; 0x14b8 <_ZL11parseStringPc+0xce>
    1444:	e2 17       	cp	r30, r18
    1446:	f3 07       	cpc	r31, r19
    1448:	89 f7       	brne	.-30     	; 0x142c <_ZL11parseStringPc+0x42>
    144a:	4c 93       	st	X, r20
    144c:	fe 01       	movw	r30, r28
    144e:	35 96       	adiw	r30, 0x05	; 5
    1450:	20 c0       	rjmp	.+64     	; 0x1492 <_ZL11parseStringPc+0xa8>
    1452:	e2 e7       	ldi	r30, 0x72	; 114
    1454:	f3 e0       	ldi	r31, 0x03	; 3
    1456:	21 e0       	ldi	r18, 0x01	; 1
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	98 13       	cpse	r25, r24
    145e:	0c c0       	rjmp	.+24     	; 0x1478 <_ZL11parseStringPc+0x8e>
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <_ZL11parseStringPc+0x7c>
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	f9 01       	movw	r30, r18
    146c:	ee 58       	subi	r30, 0x8E	; 142
    146e:	fc 4f       	sbci	r31, 0xFC	; 252
    1470:	81 81       	ldd	r24, Z+1	; 0x01
    1472:	81 11       	cpse	r24, r1
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <_ZL11parseStringPc+0x9c>
    1476:	23 c0       	rjmp	.+70     	; 0x14be <_ZL11parseStringPc+0xd4>
    1478:	2f 5f       	subi	r18, 0xFF	; 255
    147a:	3f 4f       	sbci	r19, 0xFF	; 255
    147c:	32 96       	adiw	r30, 0x02	; 2
    147e:	28 30       	cpi	r18, 0x08	; 8
    1480:	31 05       	cpc	r19, r1
    1482:	59 f7       	brne	.-42     	; 0x145a <_ZL11parseStringPc+0x70>
    1484:	1f c0       	rjmp	.+62     	; 0x14c4 <_ZL11parseStringPc+0xda>
    1486:	fe 01       	movw	r30, r28
    1488:	31 96       	adiw	r30, 0x01	; 1
    148a:	8c 93       	st	X, r24
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <_ZL11parseStringPc+0xa8>
    148e:	9c 93       	st	X, r25
    1490:	fe 01       	movw	r30, r28
    1492:	ef 01       	movw	r28, r30
    1494:	21 96       	adiw	r28, 0x01	; 1
    1496:	11 96       	adiw	r26, 0x01	; 1
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	90 32       	cpi	r25, 0x20	; 32
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <_ZL11parseStringPc+0xb6>
    149e:	b1 cf       	rjmp	.-158    	; 0x1402 <_ZL11parseStringPc+0x18>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	11 c0       	rjmp	.+34     	; 0x14c8 <_ZL11parseStringPc+0xde>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e c0       	rjmp	.+28     	; 0x14c8 <_ZL11parseStringPc+0xde>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0b c0       	rjmp	.+22     	; 0x14c8 <_ZL11parseStringPc+0xde>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <_ZL11parseStringPc+0xde>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <_ZL11parseStringPc+0xde>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <_ZL11parseStringPc+0xde>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <_ZL11isOneOfThemcPKc>:
    14ce:	fb 01       	movw	r30, r22
    14d0:	91 91       	ld	r25, Z+
    14d2:	99 23       	and	r25, r25
    14d4:	21 f0       	breq	.+8      	; 0x14de <_ZL11isOneOfThemcPKc+0x10>
    14d6:	98 13       	cpse	r25, r24
    14d8:	fb cf       	rjmp	.-10     	; 0x14d0 <_ZL11isOneOfThemcPKc+0x2>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	08 95       	ret
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	08 95       	ret

000014e2 <_ZL7goWhilePcPKc>:
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	ec 01       	movw	r28, r24
    14ec:	8b 01       	movw	r16, r22
    14ee:	88 81       	ld	r24, Y
    14f0:	88 23       	and	r24, r24
    14f2:	59 f0       	breq	.+22     	; 0x150a <_ZL7goWhilePcPKc+0x28>
    14f4:	b8 01       	movw	r22, r16
    14f6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL11isOneOfThemcPKc>
    14fa:	88 23       	and	r24, r24
    14fc:	49 f0       	breq	.+18     	; 0x1510 <_ZL7goWhilePcPKc+0x2e>
    14fe:	21 96       	adiw	r28, 0x01	; 1
    1500:	88 81       	ld	r24, Y
    1502:	81 11       	cpse	r24, r1
    1504:	f7 cf       	rjmp	.-18     	; 0x14f4 <_ZL7goWhilePcPKc+0x12>
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <_ZL7goWhilePcPKc+0x32>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <_ZL7goWhilePcPKc+0x32>
    1510:	8c 2f       	mov	r24, r28
    1512:	9d 2f       	mov	r25, r29
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <_ZL5goNumPc>:
    151e:	fc 01       	movw	r30, r24
    1520:	80 81       	ld	r24, Z
    1522:	88 23       	and	r24, r24
    1524:	81 f0       	breq	.+32     	; 0x1546 <_ZL5goNumPc+0x28>
    1526:	80 53       	subi	r24, 0x30	; 48
    1528:	8a 30       	cpi	r24, 0x0A	; 10
    152a:	80 f4       	brcc	.+32     	; 0x154c <_ZL5goNumPc+0x2e>
    152c:	31 96       	adiw	r30, 0x01	; 1
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <_ZL5goNumPc+0x18>
    1530:	20 53       	subi	r18, 0x30	; 48
    1532:	2a 30       	cpi	r18, 0x0A	; 10
    1534:	68 f4       	brcc	.+26     	; 0x1550 <_ZL5goNumPc+0x32>
    1536:	8e 2f       	mov	r24, r30
    1538:	9f 2f       	mov	r25, r31
    153a:	21 91       	ld	r18, Z+
    153c:	21 11       	cpse	r18, r1
    153e:	f8 cf       	rjmp	.-16     	; 0x1530 <_ZL5goNumPc+0x12>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	08 95       	ret
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	08 95       	ret
    154c:	8e 2f       	mov	r24, r30
    154e:	9f 2f       	mov	r25, r31
    1550:	08 95       	ret

00001552 <_ZL16isEndOfPrimitivec>:
    1552:	cf 93       	push	r28
    1554:	8c 32       	cpi	r24, 0x2C	; 44
    1556:	69 f0       	breq	.+26     	; 0x1572 <_ZL16isEndOfPrimitivec+0x20>
    1558:	c8 2f       	mov	r28, r24
    155a:	60 e3       	ldi	r22, 0x30	; 48
    155c:	73 e0       	ldi	r23, 0x03	; 3
    155e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL11isOneOfThemcPKc>
    1562:	81 11       	cpse	r24, r1
    1564:	07 c0       	rjmp	.+14     	; 0x1574 <_ZL16isEndOfPrimitivec+0x22>
    1566:	66 e3       	ldi	r22, 0x36	; 54
    1568:	73 e0       	ldi	r23, 0x03	; 3
    156a:	8c 2f       	mov	r24, r28
    156c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL11isOneOfThemcPKc>
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <_ZL16isEndOfPrimitivec+0x22>
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>:
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	8b 01       	movw	r16, r22
    1584:	f2 2e       	mov	r15, r18
    1586:	e4 2f       	mov	r30, r20
    1588:	f5 2f       	mov	r31, r21
    158a:	ec 01       	movw	r28, r24
    158c:	21 91       	ld	r18, Z+
    158e:	22 23       	and	r18, r18
    1590:	29 f0       	breq	.+10     	; 0x159c <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x24>
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	38 81       	ld	r19, Y
    1596:	23 17       	cp	r18, r19
    1598:	c1 f3       	breq	.-16     	; 0x158a <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x12>
    159a:	15 c0       	rjmp	.+42     	; 0x15c6 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x4e>
    159c:	89 2b       	or	r24, r25
    159e:	b1 f0       	breq	.+44     	; 0x15cc <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x54>
    15a0:	88 81       	ld	r24, Y
    15a2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZL16isEndOfPrimitivec>
    15a6:	88 23       	and	r24, r24
    15a8:	a1 f0       	breq	.+40     	; 0x15d2 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5a>
    15aa:	66 e3       	ldi	r22, 0x36	; 54
    15ac:	73 e0       	ldi	r23, 0x03	; 3
    15ae:	88 81       	ld	r24, Y
    15b0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL11isOneOfThemcPKc>
    15b4:	81 11       	cpse	r24, r1
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x44>
    15b8:	18 82       	st	Y, r1
    15ba:	21 96       	adiw	r28, 0x01	; 1
    15bc:	f8 01       	movw	r30, r16
    15be:	f6 82       	std	Z+6, r15	; 0x06
    15c0:	8c 2f       	mov	r24, r28
    15c2:	9d 2f       	mov	r25, r29
    15c4:	08 c0       	rjmp	.+16     	; 0x15d6 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	08 95       	ret

000015e2 <json_getProperty>:
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	8b 01       	movw	r16, r22
    15ec:	fc 01       	movw	r30, r24
    15ee:	c4 81       	ldd	r28, Z+4	; 0x04
    15f0:	d5 81       	ldd	r29, Z+5	; 0x05
    15f2:	20 97       	sbiw	r28, 0x00	; 0
    15f4:	89 f0       	breq	.+34     	; 0x1618 <json_getProperty+0x36>
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	9b 81       	ldd	r25, Y+3	; 0x03
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	29 f0       	breq	.+10     	; 0x1608 <json_getProperty+0x26>
    15fe:	b8 01       	movw	r22, r16
    1600:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
    1604:	89 2b       	or	r24, r25
    1606:	59 f0       	breq	.+22     	; 0x161e <json_getProperty+0x3c>
    1608:	09 90       	ld	r0, Y+
    160a:	d8 81       	ld	r29, Y
    160c:	c0 2d       	mov	r28, r0
    160e:	20 97       	sbiw	r28, 0x00	; 0
    1610:	91 f7       	brne	.-28     	; 0x15f6 <json_getProperty+0x14>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <json_getProperty+0x40>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <json_getProperty+0x40>
    161e:	8c 2f       	mov	r24, r28
    1620:	9d 2f       	mov	r25, r29
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <json_create>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    162c:	2f 92       	push	r2
    162e:	3f 92       	push	r3
    1630:	4f 92       	push	r4
    1632:	5f 92       	push	r5
    1634:	6f 92       	push	r6
    1636:	7f 92       	push	r7
    1638:	8f 92       	push	r8
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	00 d0       	rcall	.+0      	; 0x1652 <json_create+0x26>
    1652:	1f 92       	push	r1
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	5b 01       	movw	r10, r22
    165a:	3a 01       	movw	r6, r20

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    165c:	60 e3       	ldi	r22, 0x30	; 48
    165e:	73 e0       	ldi	r23, 0x03	; 3
    1660:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZL7goWhilePcPKc>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	09 f4       	brne	.+2      	; 0x166a <json_create+0x3e>
    1668:	bb c1       	rjmp	.+886    	; 0x19e0 <json_create+0x3b4>
    166a:	dc 01       	movw	r26, r24
    166c:	2c 91       	ld	r18, X
    166e:	2b 37       	cpi	r18, 0x7B	; 123
    1670:	09 f0       	breq	.+2      	; 0x1674 <json_create+0x48>
    1672:	b9 c1       	rjmp	.+882    	; 0x19e6 <json_create+0x3ba>
    jsonPool_t pool = { .mem = mem, .qty = qty };
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    1674:	f5 01       	movw	r30, r10
    1676:	13 82       	std	Z+3, r1	; 0x03
    1678:	12 82       	std	Z+2, r1	; 0x02
    obj->sibling = 0;
    167a:	11 82       	std	Z+1, r1	; 0x01
    167c:	10 82       	st	Z, r1
    obj->u.child = 0;
    167e:	15 82       	std	Z+5, r1	; 0x05
    1680:	14 82       	std	Z+4, r1	; 0x04
  * @param str Pointer to first character.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
    obj->type    = JSON_OBJ;
    1682:	16 82       	std	Z+6, r1	; 0x06
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    1684:	8c 01       	movw	r16, r24
    1686:	0f 5f       	subi	r16, 0xFF	; 255
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	75 01       	movw	r14, r10

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
    pool->nextFree = 1;
    168c:	cc 24       	eor	r12, r12
    168e:	c3 94       	inc	r12
    1690:	d1 2c       	mov	r13, r1
    if ( *ptr != '0' ) {
        ptr = goNum( ptr );
        if ( !ptr ) return 0;
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    1692:	68 94       	set
    1694:	22 24       	eor	r2, r2
    1696:	22 f8       	bld	r2, 2
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    ptr = parseString( ++ptr );
    if ( !ptr ) return 0;
    property->type = JSON_TEXT;
    1698:	68 94       	set
    169a:	44 24       	eor	r4, r4
    169c:	41 f8       	bld	r4, 1
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    169e:	33 24       	eor	r3, r3
    16a0:	33 94       	inc	r3
        if ( !ptr ) return 0;
        if ( *ptr == ',' ) {
            ++ptr;
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    16a2:	0f 2e       	mov	r0, r31
    16a4:	fd e7       	ldi	r31, 0x7D	; 125
    16a6:	5f 2e       	mov	r5, r31
    16a8:	f0 2d       	mov	r31, r0

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    16aa:	60 e3       	ldi	r22, 0x30	; 48
    16ac:	73 e0       	ldi	r23, 0x03	; 3
    16ae:	c8 01       	movw	r24, r16
    16b0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZL7goWhilePcPKc>
    16b4:	9b 83       	std	Y+3, r25	; 0x03
    16b6:	8a 83       	std	Y+2, r24	; 0x02
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    for(;;) {
        ptr = goBlank( ptr );
        if ( !ptr ) return 0;
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	09 f4       	brne	.+2      	; 0x16be <json_create+0x92>
    16bc:	9a c1       	rjmp	.+820    	; 0x19f2 <json_create+0x3c6>
        if ( *ptr == ',' ) {
    16be:	dc 01       	movw	r26, r24
    16c0:	8c 91       	ld	r24, X
    16c2:	8c 32       	cpi	r24, 0x2C	; 44
    16c4:	21 f4       	brne	.+8      	; 0x16ce <json_create+0xa2>
            ++ptr;
    16c6:	8d 01       	movw	r16, r26
    16c8:	0f 5f       	subi	r16, 0xFF	; 255
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	ee cf       	rjmp	.-36     	; 0x16aa <json_create+0x7e>
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    16ce:	f7 01       	movw	r30, r14
    16d0:	96 81       	ldd	r25, Z+6	; 0x06
    16d2:	99 23       	and	r25, r25
    16d4:	11 f0       	breq	.+4      	; 0x16da <json_create+0xae>
    16d6:	2d e5       	ldi	r18, 0x5D	; 93
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <json_create+0xb0>
    16da:	25 2d       	mov	r18, r5
        if ( *ptr == endchar ) {
    16dc:	82 13       	cpse	r24, r18
    16de:	16 c0       	rjmp	.+44     	; 0x170c <json_create+0xe0>
            *ptr = '\0';
    16e0:	aa 81       	ldd	r26, Y+2	; 0x02
    16e2:	bb 81       	ldd	r27, Y+3	; 0x03
    16e4:	1c 92       	st	X, r1
            json_t* parentObj = obj->sibling;
    16e6:	f7 01       	movw	r30, r14
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
            if ( !parentObj ) return ++ptr;
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	31 f4       	brne	.+12     	; 0x16fc <json_create+0xd0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <json_create+0xca>
    16f4:	7b c1       	rjmp	.+758    	; 0x19ec <json_create+0x3c0>
    return obj;
    16f6:	8a 2d       	mov	r24, r10
    16f8:	9b 2d       	mov	r25, r11
    16fa:	80 c1       	rjmp	.+768    	; 0x19fc <json_create+0x3d0>
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
    16fc:	11 82       	std	Z+1, r1	; 0x01
    16fe:	10 82       	st	Z, r1
            obj = parentObj;
            ++ptr;
    1700:	0a 81       	ldd	r16, Y+2	; 0x02
    1702:	1b 81       	ldd	r17, Y+3	; 0x03
    1704:	0f 5f       	subi	r16, 0xFF	; 255
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
            obj = parentObj;
    1708:	7c 01       	movw	r14, r24
    170a:	cf cf       	rjmp	.-98     	; 0x16aa <json_create+0x7e>
/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    170c:	c6 14       	cp	r12, r6
    170e:	d7 04       	cpc	r13, r7
    1710:	08 f0       	brcs	.+2      	; 0x1714 <json_create+0xe8>
    1712:	72 c1       	rjmp	.+740    	; 0x19f8 <json_create+0x3cc>
    return &pool->mem[pool->nextFree++];
    1714:	46 01       	movw	r8, r12
    1716:	bf ef       	ldi	r27, 0xFF	; 255
    1718:	8b 1a       	sub	r8, r27
    171a:	9b 0a       	sbc	r9, r27
    171c:	96 01       	movw	r18, r12
    171e:	22 0f       	add	r18, r18
    1720:	33 1f       	adc	r19, r19
    1722:	22 0f       	add	r18, r18
    1724:	33 1f       	adc	r19, r19
    1726:	22 0f       	add	r18, r18
    1728:	33 1f       	adc	r19, r19
    172a:	f9 01       	movw	r30, r18
    172c:	ec 19       	sub	r30, r12
    172e:	fd 09       	sbc	r31, r13
    1730:	6f 01       	movw	r12, r30
    1732:	ca 0c       	add	r12, r10
    1734:	db 1c       	adc	r13, r11
            obj = parentObj;
            ++ptr;
            continue;
        }
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
    1736:	c1 14       	cp	r12, r1
    1738:	d1 04       	cpc	r13, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <json_create+0x112>
    173c:	5a c1       	rjmp	.+692    	; 0x19f2 <json_create+0x3c6>
        if( obj->type != JSON_ARRAY ) {
    173e:	91 30       	cpi	r25, 0x01	; 1
    1740:	31 f1       	breq	.+76     	; 0x178e <json_create+0x162>
            if ( *ptr != '\"' ) return 0;
    1742:	82 32       	cpi	r24, 0x22	; 34
    1744:	09 f0       	breq	.+2      	; 0x1748 <json_create+0x11c>
    1746:	55 c1       	rjmp	.+682    	; 0x19f2 <json_create+0x3c6>
  * @param str Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	9b 81       	ldd	r25, Y+3	; 0x03
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	d6 01       	movw	r26, r12
    1750:	13 96       	adiw	r26, 0x03	; 3
    1752:	9c 93       	st	X, r25
    1754:	8e 93       	st	-X, r24
    1756:	12 97       	sbiw	r26, 0x02	; 2
    ptr = parseString( ptr );
    1758:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_ZL11parseStringPc>
    if ( !ptr ) return 0;
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	09 f4       	brne	.+2      	; 0x1762 <json_create+0x136>
    1760:	4b c1       	rjmp	.+662    	; 0x19f8 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1762:	60 e3       	ldi	r22, 0x30	; 48
    1764:	73 e0       	ldi	r23, 0x03	; 3
    1766:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZL7goWhilePcPKc>
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    ptr = parseString( ptr );
    if ( !ptr ) return 0;
    ptr = goBlank( ptr );
    if ( !ptr ) return 0;
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	09 f4       	brne	.+2      	; 0x1770 <json_create+0x144>
    176e:	44 c1       	rjmp	.+648    	; 0x19f8 <json_create+0x3cc>
    if ( *ptr++ != ':' ) return 0;
    1770:	fc 01       	movw	r30, r24
    1772:	20 81       	ld	r18, Z
    1774:	2a 33       	cpi	r18, 0x3A	; 58
    1776:	09 f0       	breq	.+2      	; 0x177a <json_create+0x14e>
    1778:	3f c1       	rjmp	.+638    	; 0x19f8 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    177a:	60 e3       	ldi	r22, 0x30	; 48
    177c:	73 e0       	ldi	r23, 0x03	; 3
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZL7goWhilePcPKc>
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	8a 83       	std	Y+2, r24	; 0x02
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
        if( obj->type != JSON_ARRAY ) {
            if ( *ptr != '\"' ) return 0;
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
    1788:	89 2b       	or	r24, r25
    178a:	31 f4       	brne	.+12     	; 0x1798 <json_create+0x16c>
    178c:	32 c1       	rjmp	.+612    	; 0x19f2 <json_create+0x3c6>
        }
        else property->name = 0;
    178e:	d6 01       	movw	r26, r12
    1790:	13 96       	adiw	r26, 0x03	; 3
    1792:	1c 92       	st	X, r1
    1794:	1e 92       	st	-X, r1
    1796:	12 97       	sbiw	r26, 0x02	; 2

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
    property->sibling = 0;
    1798:	f6 01       	movw	r30, r12
    179a:	11 82       	std	Z+1, r1	; 0x01
    179c:	10 82       	st	Z, r1
    if ( !obj->u.child ) obj->u.child = property;
    179e:	d7 01       	movw	r26, r14
    17a0:	14 96       	adiw	r26, 0x04	; 4
    17a2:	ed 91       	ld	r30, X+
    17a4:	fc 91       	ld	r31, X
    17a6:	15 97       	sbiw	r26, 0x05	; 5
    17a8:	30 97       	sbiw	r30, 0x00	; 0
    17aa:	39 f4       	brne	.+14     	; 0x17ba <json_create+0x18e>
    17ac:	15 96       	adiw	r26, 0x05	; 5
    17ae:	dc 92       	st	X, r13
    17b0:	ce 92       	st	-X, r12
    17b2:	14 97       	sbiw	r26, 0x04	; 4
    17b4:	08 c0       	rjmp	.+16     	; 0x17c6 <json_create+0x19a>
    else {
        json_t* iter;
        for( iter = obj->u.child; iter->sibling; iter = iter->sibling );
    17b6:	fc 01       	movw	r30, r24
    17b8:	00 c0       	rjmp	.+0      	; 0x17ba <json_create+0x18e>
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	d1 f7       	brne	.-12     	; 0x17b6 <json_create+0x18a>
        iter->sibling = property;
    17c2:	d1 82       	std	Z+1, r13	; 0x01
    17c4:	c0 82       	st	Z, r12
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
        }
        else property->name = 0;
        add( obj, property );
        property->u.value = ptr;
    17c6:	ea 81       	ldd	r30, Y+2	; 0x02
    17c8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ca:	d6 01       	movw	r26, r12
    17cc:	15 96       	adiw	r26, 0x05	; 5
    17ce:	fc 93       	st	X, r31
    17d0:	ee 93       	st	-X, r30
    17d2:	14 97       	sbiw	r26, 0x04	; 4
        switch( *ptr ) {
    17d4:	80 81       	ld	r24, Z
    17d6:	86 36       	cpi	r24, 0x66	; 102
    17d8:	09 f4       	brne	.+2      	; 0x17dc <json_create+0x1b0>
    17da:	46 c0       	rjmp	.+140    	; 0x1868 <json_create+0x23c>
    17dc:	28 f4       	brcc	.+10     	; 0x17e8 <json_create+0x1bc>
    17de:	82 32       	cpi	r24, 0x22	; 34
    17e0:	39 f1       	breq	.+78     	; 0x1830 <json_create+0x204>
    17e2:	8b 35       	cpi	r24, 0x5B	; 91
    17e4:	c9 f0       	breq	.+50     	; 0x1818 <json_create+0x1ec>
    17e6:	54 c0       	rjmp	.+168    	; 0x1890 <json_create+0x264>
    17e8:	84 37       	cpi	r24, 0x74	; 116
    17ea:	a1 f1       	breq	.+104    	; 0x1854 <json_create+0x228>
    17ec:	8b 37       	cpi	r24, 0x7B	; 123
    17ee:	21 f0       	breq	.+8      	; 0x17f8 <json_create+0x1cc>
    17f0:	8e 36       	cpi	r24, 0x6E	; 110
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <json_create+0x1ca>
    17f4:	4d c0       	rjmp	.+154    	; 0x1890 <json_create+0x264>
    17f6:	42 c0       	rjmp	.+132    	; 0x187c <json_create+0x250>
            case '{':
                property->type    = JSON_OBJ;
    17f8:	d6 01       	movw	r26, r12
    17fa:	16 96       	adiw	r26, 0x06	; 6
    17fc:	1c 92       	st	X, r1
    17fe:	16 97       	sbiw	r26, 0x06	; 6
                property->u.child = 0;
    1800:	15 96       	adiw	r26, 0x05	; 5
    1802:	1c 92       	st	X, r1
    1804:	1e 92       	st	-X, r1
    1806:	14 97       	sbiw	r26, 0x04	; 4
                property->sibling = obj;
    1808:	ed 92       	st	X+, r14
    180a:	fc 92       	st	X, r15
                obj = property;
                ++ptr;
    180c:	0a 81       	ldd	r16, Y+2	; 0x02
    180e:	1b 81       	ldd	r17, Y+3	; 0x03
    1810:	0f 5f       	subi	r16, 0xFF	; 255
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1814:	76 01       	movw	r14, r12
    1816:	df c0       	rjmp	.+446    	; 0x19d6 <json_create+0x3aa>
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    1818:	f6 01       	movw	r30, r12
    181a:	36 82       	std	Z+6, r3	; 0x06
                property->u.child = 0;
    181c:	15 82       	std	Z+5, r1	; 0x05
    181e:	14 82       	std	Z+4, r1	; 0x04
                property->sibling = obj;
    1820:	f1 82       	std	Z+1, r15	; 0x01
    1822:	e0 82       	st	Z, r14
                obj = property;
                ++ptr;
    1824:	0a 81       	ldd	r16, Y+2	; 0x02
    1826:	1b 81       	ldd	r17, Y+3	; 0x03
    1828:	0f 5f       	subi	r16, 0xFF	; 255
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    182c:	76 01       	movw	r14, r12
    182e:	d3 c0       	rjmp	.+422    	; 0x19d6 <json_create+0x3aa>
  * @param str Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	d6 01       	movw	r26, r12
    1838:	15 96       	adiw	r26, 0x05	; 5
    183a:	9c 93       	st	X, r25
    183c:	8e 93       	st	-X, r24
    183e:	14 97       	sbiw	r26, 0x04	; 4
    ptr = parseString( ++ptr );
    1840:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_ZL11parseStringPc>
    1844:	8c 01       	movw	r16, r24
    if ( !ptr ) return 0;
    1846:	89 2b       	or	r24, r25
    1848:	09 f4       	brne	.+2      	; 0x184c <json_create+0x220>
    184a:	d6 c0       	rjmp	.+428    	; 0x19f8 <json_create+0x3cc>
    property->type = JSON_TEXT;
    184c:	f6 01       	movw	r30, r12
    184e:	46 82       	std	Z+6, r4	; 0x06
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1850:	64 01       	movw	r12, r8
    1852:	2b cf       	rjmp	.-426    	; 0x16aa <json_create+0x7e>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
    1854:	23 e0       	ldi	r18, 0x03	; 3
    1856:	49 e3       	ldi	r20, 0x39	; 57
    1858:	53 e0       	ldi	r21, 0x03	; 3
    185a:	b6 01       	movw	r22, r12
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1864:	8c 01       	movw	r16, r24
    1866:	b7 c0       	rjmp	.+366    	; 0x19d6 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
    1868:	23 e0       	ldi	r18, 0x03	; 3
    186a:	4e e3       	ldi	r20, 0x3E	; 62
    186c:	53 e0       	ldi	r21, 0x03	; 3
    186e:	b6 01       	movw	r22, r12
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1878:	8c 01       	movw	r16, r24
    187a:	ad c0       	rjmp	.+346    	; 0x19d6 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "null", JSON_NULL );
    187c:	26 e0       	ldi	r18, 0x06	; 6
    187e:	44 e4       	ldi	r20, 0x44	; 68
    1880:	53 e0       	ldi	r21, 0x03	; 3
    1882:	b6 01       	movw	r22, r12
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    188c:	8c 01       	movw	r16, r24
    188e:	a3 c0       	rjmp	.+326    	; 0x19d6 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
    if ( *ptr == '-' ) ++ptr;
    1890:	8d 32       	cpi	r24, 0x2D	; 45
    1892:	21 f4       	brne	.+8      	; 0x189c <json_create+0x270>
    1894:	ea 81       	ldd	r30, Y+2	; 0x02
    1896:	fb 81       	ldd	r31, Y+3	; 0x03
    1898:	31 96       	adiw	r30, 0x01	; 1
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <json_create+0x274>
    189c:	ea 81       	ldd	r30, Y+2	; 0x02
    189e:	fb 81       	ldd	r31, Y+3	; 0x03
    if ( !isNum( *ptr ) ) return 0;
    18a0:	80 81       	ld	r24, Z
    18a2:	90 ed       	ldi	r25, 0xD0	; 208
    18a4:	98 0f       	add	r25, r24
    18a6:	9a 30       	cpi	r25, 0x0A	; 10
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <json_create+0x280>
    18aa:	a6 c0       	rjmp	.+332    	; 0x19f8 <json_create+0x3cc>
    if ( *ptr != '0' ) {
    18ac:	80 33       	cpi	r24, 0x30	; 48
    18ae:	39 f0       	breq	.+14     	; 0x18be <json_create+0x292>
        ptr = goNum( ptr );
    18b0:	cf 01       	movw	r24, r30
    18b2:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZL5goNumPc>
    18b6:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
    18b8:	89 2b       	or	r24, r25
    18ba:	49 f4       	brne	.+18     	; 0x18ce <json_create+0x2a2>
    18bc:	9d c0       	rjmp	.+314    	; 0x19f8 <json_create+0x3cc>
    }
    else if ( isNum( *++ptr ) ) return 0;
    18be:	8f 01       	movw	r16, r30
    18c0:	0f 5f       	subi	r16, 0xFF	; 255
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
    18c4:	81 81       	ldd	r24, Z+1	; 0x01
    18c6:	80 53       	subi	r24, 0x30	; 48
    18c8:	8a 30       	cpi	r24, 0x0A	; 10
    18ca:	08 f4       	brcc	.+2      	; 0x18ce <json_create+0x2a2>
    18cc:	95 c0       	rjmp	.+298    	; 0x19f8 <json_create+0x3cc>
    property->type = JSON_INTEGER;
    18ce:	d6 01       	movw	r26, r12
    18d0:	16 96       	adiw	r26, 0x06	; 6
    18d2:	2c 92       	st	X, r2
    if ( *ptr == '.' ) {
    18d4:	f8 01       	movw	r30, r16
    18d6:	80 81       	ld	r24, Z
    18d8:	8e 32       	cpi	r24, 0x2E	; 46
    18da:	89 f4       	brne	.+34     	; 0x18fe <json_create+0x2d2>
/** Analyze the decimal part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
    if ( !isNum( *ptr ) ) return 0;
    18dc:	81 81       	ldd	r24, Z+1	; 0x01
    18de:	80 53       	subi	r24, 0x30	; 48
    18e0:	8a 30       	cpi	r24, 0x0A	; 10
    18e2:	08 f0       	brcs	.+2      	; 0x18e6 <json_create+0x2ba>
    18e4:	86 c0       	rjmp	.+268    	; 0x19f2 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    18e6:	c8 01       	movw	r24, r16
    18e8:	02 96       	adiw	r24, 0x02	; 2
    18ea:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZL5goNumPc>
    18ee:	8c 01       	movw	r16, r24
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    if ( *ptr == '.' ) {
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
    18f0:	89 2b       	or	r24, r25
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <json_create+0x2ca>
    18f4:	81 c0       	rjmp	.+258    	; 0x19f8 <json_create+0x3cc>
        property->type = JSON_REAL;
    18f6:	e5 e0       	ldi	r30, 0x05	; 5
    18f8:	d6 01       	movw	r26, r12
    18fa:	16 96       	adiw	r26, 0x06	; 6
    18fc:	ec 93       	st	X, r30
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
    18fe:	d8 01       	movw	r26, r16
    1900:	8c 91       	ld	r24, X
    1902:	8f 7d       	andi	r24, 0xDF	; 223
    1904:	85 34       	cpi	r24, 0x45	; 69
    1906:	11 f5       	brne	.+68     	; 0x194c <json_create+0x320>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    1908:	11 96       	adiw	r26, 0x01	; 1
    190a:	8c 91       	ld	r24, X
    190c:	8d 32       	cpi	r24, 0x2D	; 45
    190e:	29 f0       	breq	.+10     	; 0x191a <json_create+0x2ee>
    1910:	8b 32       	cpi	r24, 0x2B	; 43
    1912:	19 f0       	breq	.+6      	; 0x191a <json_create+0x2ee>
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
    1914:	f8 01       	movw	r30, r16
    1916:	31 96       	adiw	r30, 0x01	; 1
    1918:	02 c0       	rjmp	.+4      	; 0x191e <json_create+0x2f2>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    191a:	f8 01       	movw	r30, r16
    191c:	32 96       	adiw	r30, 0x02	; 2
    if ( !isNum( *ptr ) ) return 0;
    191e:	90 81       	ld	r25, Z
    1920:	90 53       	subi	r25, 0x30	; 48
    1922:	9a 30       	cpi	r25, 0x0A	; 10
    1924:	08 f0       	brcs	.+2      	; 0x1928 <json_create+0x2fc>
    1926:	65 c0       	rjmp	.+202    	; 0x19f2 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    1928:	cf 01       	movw	r24, r30
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZL5goNumPc>
    1930:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
        if ( !ptr ) return 0;
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	09 f4       	brne	.+2      	; 0x1938 <json_create+0x30c>
    1936:	60 c0       	rjmp	.+192    	; 0x19f8 <json_create+0x3cc>
        property->type = JSON_REAL;
    1938:	25 e0       	ldi	r18, 0x05	; 5
    193a:	f6 01       	movw	r30, r12
    193c:	26 83       	std	Z+6, r18	; 0x06
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
    193e:	dc 01       	movw	r26, r24
    1940:	8c 91       	ld	r24, X
    1942:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZL16isEndOfPrimitivec>
    1946:	81 11       	cpse	r24, r1
    1948:	3a c0       	rjmp	.+116    	; 0x19be <json_create+0x392>
    194a:	56 c0       	rjmp	.+172    	; 0x19f8 <json_create+0x3cc>
    194c:	f8 01       	movw	r30, r16
    194e:	f0 81       	ld	r31, Z
    1950:	f9 83       	std	Y+1, r31	; 0x01
    1952:	8f 2f       	mov	r24, r31
    1954:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZL16isEndOfPrimitivec>
    1958:	88 23       	and	r24, r24
    195a:	09 f4       	brne	.+2      	; 0x195e <json_create+0x332>
    195c:	4d c0       	rjmp	.+154    	; 0x19f8 <json_create+0x3cc>
    if ( JSON_INTEGER == property->type ) {
    195e:	d6 01       	movw	r26, r12
    1960:	16 96       	adiw	r26, 0x06	; 6
    1962:	8c 91       	ld	r24, X
    1964:	84 30       	cpi	r24, 0x04	; 4
    1966:	59 f5       	brne	.+86     	; 0x19be <json_create+0x392>
        char const* value = property->u.value;
        bool const negative = *value == '-';
    1968:	ea 81       	ldd	r30, Y+2	; 0x02
    196a:	fb 81       	ldd	r31, Y+3	; 0x03
    196c:	40 81       	ld	r20, Z
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
    196e:	4d 32       	cpi	r20, 0x2D	; 45
    1970:	19 f0       	breq	.+6      	; 0x1978 <json_create+0x34c>
    1972:	83 e1       	ldi	r24, 0x13	; 19
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 c0       	rjmp	.+4      	; 0x197c <json_create+0x350>
    1978:	84 e1       	ldi	r24, 0x14	; 20
    197a:	90 e0       	ldi	r25, 0x00	; 0
        unsigned int const len = ptr - value;
    197c:	98 01       	movw	r18, r16
    197e:	6a 81       	ldd	r22, Y+2	; 0x02
    1980:	7b 81       	ldd	r23, Y+3	; 0x03
    1982:	26 1b       	sub	r18, r22
    1984:	37 0b       	sbc	r19, r23
        if ( len > maxdigits ) return 0;
    1986:	82 17       	cp	r24, r18
    1988:	93 07       	cpc	r25, r19
    198a:	b0 f1       	brcs	.+108    	; 0x19f8 <json_create+0x3cc>
        if ( len == maxdigits ) {
    198c:	28 17       	cp	r18, r24
    198e:	39 07       	cpc	r19, r25
    1990:	b1 f4       	brne	.+44     	; 0x19be <json_create+0x392>
            char const tmp = *ptr;
            *ptr = '\0';
    1992:	d8 01       	movw	r26, r16
    1994:	1c 92       	st	X, r1
            char const* const threshold = negative ? min: max;
    1996:	4d 32       	cpi	r20, 0x2D	; 45
    1998:	29 f0       	breq	.+10     	; 0x19a4 <json_create+0x378>
    199a:	e9 e4       	ldi	r30, 0x49	; 73
    199c:	f3 e0       	ldi	r31, 0x03	; 3
    199e:	8e 2f       	mov	r24, r30
    19a0:	9f 2f       	mov	r25, r31
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <json_create+0x380>
    19a4:	2d e5       	ldi	r18, 0x5D	; 93
    19a6:	33 e0       	ldi	r19, 0x03	; 3
    19a8:	82 2f       	mov	r24, r18
    19aa:	93 2f       	mov	r25, r19
            if ( 0 > strcmp( threshold, value ) ) return 0;
    19ac:	6a 81       	ldd	r22, Y+2	; 0x02
    19ae:	7b 81       	ldd	r23, Y+3	; 0x03
    19b0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <strcmp>
    19b4:	99 23       	and	r25, r25
    19b6:	04 f1       	brlt	.+64     	; 0x19f8 <json_create+0x3cc>
            *ptr = tmp;
    19b8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ba:	d8 01       	movw	r26, r16
    19bc:	ec 93       	st	X, r30

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
    19be:	66 e3       	ldi	r22, 0x36	; 54
    19c0:	73 e0       	ldi	r23, 0x03	; 3
    19c2:	d8 01       	movw	r26, r16
    19c4:	8c 91       	ld	r24, X
    19c6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL11isOneOfThemcPKc>
    19ca:	81 11       	cpse	r24, r1
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <json_create+0x3aa>
    19ce:	f8 01       	movw	r30, r16
    19d0:	10 82       	st	Z, r1
    19d2:	0f 5f       	subi	r16, 0xFF	; 255
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
            case 't':  ptr = trueValue( ptr, property );  break;
            case 'f':  ptr = falseValue( ptr, property ); break;
            case 'n':  ptr = nullValue( ptr, property );  break;
            default:   ptr = numValue( ptr, property );   break;
        }
        if ( !ptr ) return 0;
    19d6:	01 15       	cp	r16, r1
    19d8:	11 05       	cpc	r17, r1
    19da:	59 f0       	breq	.+22     	; 0x19f2 <json_create+0x3c6>
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    19dc:	64 01       	movw	r12, r8
    19de:	65 ce       	rjmp	.-822    	; 0x16aa <json_create+0x7e>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0b c0       	rjmp	.+22     	; 0x19fc <json_create+0x3d0>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	08 c0       	rjmp	.+16     	; 0x19fc <json_create+0x3d0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <json_create+0x3d0>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <json_create+0x3d0>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    return obj;
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	cf 90       	pop	r12
    1a12:	bf 90       	pop	r11
    1a14:	af 90       	pop	r10
    1a16:	9f 90       	pop	r9
    1a18:	8f 90       	pop	r8
    1a1a:	7f 90       	pop	r7
    1a1c:	6f 90       	pop	r6
    1a1e:	5f 90       	pop	r5
    1a20:	4f 90       	pop	r4
    1a22:	3f 90       	pop	r3
    1a24:	2f 90       	pop	r2
    1a26:	08 95       	ret

00001a28 <_ZN4UART11GetMessagesEv>:
					bufferIndexes[nBuffer]=bufferIndex+1;
				}
			}
		}
	}
	Messages* UART::GetMessages(){
    1a28:	3f 92       	push	r3
    1a2a:	4f 92       	push	r4
    1a2c:	5f 92       	push	r5
    1a2e:	6f 92       	push	r6
    1a30:	7f 92       	push	r7
    1a32:	8f 92       	push	r8
    1a34:	9f 92       	push	r9
    1a36:	af 92       	push	r10
    1a38:	bf 92       	push	r11
    1a3a:	cf 92       	push	r12
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	5c 01       	movw	r10, r24
    1a5c:	e1 2c       	mov	r14, r1
    1a5e:	f1 2c       	mov	r15, r1
		char tempMessagesIndex=0;
    1a60:	31 2c       	mov	r3, r1
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1a62:	2c 01       	movw	r4, r24
    1a64:	84 ef       	ldi	r24, 0xF4	; 244
    1a66:	48 1a       	sub	r4, r24
    1a68:	8e ef       	ldi	r24, 0xFE	; 254
    1a6a:	58 0a       	sbc	r5, r24
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
					tempMessages[tempMessagesIndex]=new Message(buf, length);
					tempMessagesIndex++;
					bufferIndexes[i]=0;
					overflowedBuffers=false;
    1a6c:	f5 01       	movw	r30, r10
    1a6e:	e2 5f       	subi	r30, 0xF2	; 242
    1a70:	fe 4f       	sbci	r31, 0xFE	; 254
    1a72:	fa 87       	std	Y+10, r31	; 0x0a
    1a74:	e9 87       	std	Y+9, r30	; 0x09
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1a76:	f2 01       	movw	r30, r4
    1a78:	80 81       	ld	r24, Z
    1a7a:	8e 15       	cp	r24, r14
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <_ZN4UART11GetMessagesEv+0x58>
    1a7e:	4f c0       	rjmp	.+158    	; 0x1b1e <_ZN4UART11GetMessagesEv+0xf6>
				if(bufferIndexes[i]>0){
    1a80:	47 01       	movw	r8, r14
    1a82:	67 01       	movw	r12, r14
    1a84:	cc 0c       	add	r12, r12
    1a86:	dd 1c       	adc	r13, r13
    1a88:	ca 0c       	add	r12, r10
    1a8a:	db 1c       	adc	r13, r11
    1a8c:	f6 01       	movw	r30, r12
    1a8e:	84 81       	ldd	r24, Z+4	; 0x04
    1a90:	95 81       	ldd	r25, Z+5	; 0x05
    1a92:	18 16       	cp	r1, r24
    1a94:	19 06       	cpc	r1, r25
    1a96:	0c f0       	brlt	.+2      	; 0x1a9a <_ZN4UART11GetMessagesEv+0x72>
    1a98:	42 c0       	rjmp	.+132    	; 0x1b1e <_ZN4UART11GetMessagesEv+0xf6>

				unsigned int length = bufferIndexes[i];
    1a9a:	04 81       	ldd	r16, Z+4	; 0x04
    1a9c:	15 81       	ldd	r17, Z+5	; 0x05
					char* buf = new char[ length+1];
    1a9e:	c8 01       	movw	r24, r16
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	0e 94 83 09 	call	0x1306	; 0x1306 <_Znaj>
    1aa6:	3c 01       	movw	r6, r24
					for (int j = 0; j < length; j++)
    1aa8:	01 15       	cp	r16, r1
    1aaa:	11 05       	cpc	r17, r1
    1aac:	c1 f0       	breq	.+48     	; 0x1ade <_ZN4UART11GetMessagesEv+0xb6>
    1aae:	fc 01       	movw	r30, r24
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
					buf[j] = (char)buffer[i][j];
    1ab4:	00 24       	eor	r0, r0
    1ab6:	96 94       	lsr	r9
    1ab8:	87 94       	ror	r8
    1aba:	07 94       	ror	r0
    1abc:	96 94       	lsr	r9
    1abe:	87 94       	ror	r8
    1ac0:	07 94       	ror	r0
    1ac2:	98 2c       	mov	r9, r8
    1ac4:	80 2c       	mov	r8, r0
    1ac6:	8a 0c       	add	r8, r10
    1ac8:	9b 1c       	adc	r9, r11
    1aca:	d4 01       	movw	r26, r8
    1acc:	a8 0f       	add	r26, r24
    1ace:	b9 1f       	adc	r27, r25
    1ad0:	1c 96       	adiw	r26, 0x0c	; 12
    1ad2:	2c 91       	ld	r18, X
    1ad4:	21 93       	st	Z+, r18
			if(i!=nBuffer){
				if(bufferIndexes[i]>0){

				unsigned int length = bufferIndexes[i];
					char* buf = new char[ length+1];
					for (int j = 0; j < length; j++)
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	08 17       	cp	r16, r24
    1ada:	19 07       	cpc	r17, r25
    1adc:	b1 f7       	brne	.-20     	; 0x1aca <_ZN4UART11GetMessagesEv+0xa2>
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
    1ade:	f3 01       	movw	r30, r6
    1ae0:	e0 0f       	add	r30, r16
    1ae2:	f1 1f       	adc	r31, r17
    1ae4:	10 82       	st	Z, r1
					tempMessages[tempMessagesIndex]=new Message(buf, length);
    1ae6:	84 e0       	ldi	r24, 0x04	; 4
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
    1aee:	4c 01       	movw	r8, r24
    1af0:	a8 01       	movw	r20, r16
    1af2:	b3 01       	movw	r22, r6
    1af4:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN7MessageC1EPKcj>
    1af8:	e3 2d       	mov	r30, r3
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	ee 0f       	add	r30, r30
    1afe:	ff 1f       	adc	r31, r31
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	8c 0f       	add	r24, r28
    1b06:	9d 1f       	adc	r25, r29
    1b08:	e8 0f       	add	r30, r24
    1b0a:	f9 1f       	adc	r31, r25
    1b0c:	91 82       	std	Z+1, r9	; 0x01
    1b0e:	80 82       	st	Z, r8
					tempMessagesIndex++;
    1b10:	33 94       	inc	r3
					bufferIndexes[i]=0;
    1b12:	f6 01       	movw	r30, r12
    1b14:	15 82       	std	Z+5, r1	; 0x05
    1b16:	14 82       	std	Z+4, r1	; 0x04
					overflowedBuffers=false;
    1b18:	e9 85       	ldd	r30, Y+9	; 0x09
    1b1a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b1c:	10 82       	st	Z, r1
    1b1e:	ff ef       	ldi	r31, 0xFF	; 255
    1b20:	ef 1a       	sub	r14, r31
    1b22:	ff 0a       	sbc	r15, r31
		}
	}
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
    1b24:	84 e0       	ldi	r24, 0x04	; 4
    1b26:	e8 16       	cp	r14, r24
    1b28:	f1 04       	cpc	r15, r1
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <_ZN4UART11GetMessagesEv+0x106>
    1b2c:	a4 cf       	rjmp	.-184    	; 0x1a76 <_ZN4UART11GetMessagesEv+0x4e>
					bufferIndexes[i]=0;
					overflowedBuffers=false;
				}
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
    1b2e:	33 20       	and	r3, r3
    1b30:	61 f0       	breq	.+24     	; 0x1b4a <_ZN4UART11GetMessagesEv+0x122>
    1b32:	84 e0       	ldi	r24, 0x04	; 4
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 80 09 	call	0x1300	; 0x1300 <_Znwj>
    1b3a:	8c 01       	movw	r16, r24
    1b3c:	43 2d       	mov	r20, r3
    1b3e:	be 01       	movw	r22, r28
    1b40:	6f 5f       	subi	r22, 0xFF	; 255
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN8MessagesC1EPP7Messagec>
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <_ZN4UART11GetMessagesEv+0x126>
    1b4a:	00 e0       	ldi	r16, 0x00	; 0
    1b4c:	10 e0       	ldi	r17, 0x00	; 0
		return m;
}
    1b4e:	c8 01       	movw	r24, r16
    1b50:	2a 96       	adiw	r28, 0x0a	; 10
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	9f 90       	pop	r9
    1b72:	8f 90       	pop	r8
    1b74:	7f 90       	pop	r7
    1b76:	6f 90       	pop	r6
    1b78:	5f 90       	pop	r5
    1b7a:	4f 90       	pop	r4
    1b7c:	3f 90       	pop	r3
    1b7e:	08 95       	ret

00001b80 <_ZThn2_N4UART11GetMessagesEv>:
    1b80:	02 97       	sbiw	r24, 0x02	; 2
    1b82:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN4UART11GetMessagesEv>
    1b86:	08 95       	ret

00001b88 <_ZN4UART10InitializeEv>:
 initialized=true;
 }
	return _Singleton;
}
 void UART::Initialize ()
{
    1b88:	fc 01       	movw	r30, r24
	//volatile int bufferIndexes[UART_N_BUFFERS];
	//volatile char buffer[UART_N_BUFFERS][UART_BUFFER_SIZE] ;
	
	nBuffer=0;
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	a4 5f       	subi	r26, 0xF4	; 244
    1b8e:	be 4f       	sbci	r27, 0xFE	; 254
    1b90:	1c 92       	st	X, r1
	overflowedCurrentBuffer=false;
    1b92:	11 96       	adiw	r26, 0x01	; 1
    1b94:	1c 92       	st	X, r1
	overflowedBuffers=false;
    1b96:	11 96       	adiw	r26, 0x01	; 1
    1b98:	1c 92       	st	X, r1
	DDRD =DDRD&0xFE;
    1b9a:	50 98       	cbi	0x0a, 0	; 10
	DDRD = DDRD | 0x2;
    1b9c:	51 9a       	sbi	0x0a, 1	; 10
//PORTD=PORTD&0x1;
	for(char i=0; i<UART_N_BUFFERS; i++)
	{
		bufferIndexes[i]=0;
    1b9e:	15 82       	std	Z+5, r1	; 0x05
    1ba0:	14 82       	std	Z+4, r1	; 0x04
    1ba2:	17 82       	std	Z+7, r1	; 0x07
    1ba4:	16 82       	std	Z+6, r1	; 0x06
    1ba6:	11 86       	std	Z+9, r1	; 0x09
    1ba8:	10 86       	std	Z+8, r1	; 0x08
    1baa:	13 86       	std	Z+11, r1	; 0x0b
    1bac:	12 86       	std	Z+10, r1	; 0x0a
	}
	UBRR0H = UBRRH_VALUE;
    1bae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    1bb2:	83 e3       	ldi	r24, 0x33	; 51
    1bb4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#if USE_U2X
	UCSR0A |= (1<<U2X0);
	#else
	UCSR0A &= ~(1<<U2X0);
    1bb8:	e0 ec       	ldi	r30, 0xC0	; 192
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8d 7f       	andi	r24, 0xFD	; 253
    1bc0:	80 83       	st	Z, r24
	#endif
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|( 1<<RXCIE0);
    1bc2:	88 e9       	ldi	r24, 0x98	; 152
    1bc4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    1bc8:	e2 ec       	ldi	r30, 0xC2	; 194
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	86 60       	ori	r24, 0x06	; 6
    1bd0:	80 83       	st	Z, r24

	sei();
    1bd2:	78 94       	sei
    1bd4:	08 95       	ret

00001bd6 <_ZN4UART11GetInstanceEv>:
#include <util/setbaud.h>

 UART UART:: _Singleton;
  UART& UART::GetInstance(){
 static bool initialized=false;
 if(!initialized)
    1bd6:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <_ZZN4UART11GetInstanceEvE11initialized>
    1bda:	81 11       	cpse	r24, r1
    1bdc:	07 c0       	rjmp	.+14     	; 0x1bec <_ZN4UART11GetInstanceEv+0x16>
 {
 _Singleton.Initialize();
    1bde:	8c eb       	ldi	r24, 0xBC	; 188
    1be0:	93 e0       	ldi	r25, 0x03	; 3
    1be2:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN4UART10InitializeEv>
 initialized=true;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <_ZZN4UART11GetInstanceEvE11initialized>
 }
	return _Singleton;
}
    1bec:	8c eb       	ldi	r24, 0xBC	; 188
    1bee:	93 e0       	ldi	r25, 0x03	; 3
    1bf0:	08 95       	ret

00001bf2 <_ZN4UART8IncomingEv>:

	sei();
}

void UART::Incoming(){
	unsigned char data = UDR0;
    1bf2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(    data==13||data==10   )
    1bf6:	2d 30       	cpi	r18, 0x0D	; 13
    1bf8:	19 f0       	breq	.+6      	; 0x1c00 <_ZN4UART8IncomingEv+0xe>
    1bfa:	2a 30       	cpi	r18, 0x0A	; 10
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <_ZN4UART8IncomingEv+0xe>
    1bfe:	67 c0       	rjmp	.+206    	; 0x1cce <_ZN4UART8IncomingEv+0xdc>
	{
		if(bufferIndexes[nBuffer]!=0)
    1c00:	fc 01       	movw	r30, r24
    1c02:	e4 5f       	subi	r30, 0xF4	; 244
    1c04:	fe 4f       	sbci	r31, 0xFE	; 254
    1c06:	e0 81       	ld	r30, Z
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	32 96       	adiw	r30, 0x02	; 2
    1c0c:	ee 0f       	add	r30, r30
    1c0e:	ff 1f       	adc	r31, r31
    1c10:	e8 0f       	add	r30, r24
    1c12:	f9 1f       	adc	r31, r25
    1c14:	20 81       	ld	r18, Z
    1c16:	31 81       	ldd	r19, Z+1	; 0x01
    1c18:	23 2b       	or	r18, r19
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <_ZN4UART8IncomingEv+0x2c>
    1c1c:	94 c0       	rjmp	.+296    	; 0x1d46 <_ZN4UART8IncomingEv+0x154>
		{
			if(!overflowedCurrentBuffer)
    1c1e:	fc 01       	movw	r30, r24
    1c20:	e3 5f       	subi	r30, 0xF3	; 243
    1c22:	fe 4f       	sbci	r31, 0xFE	; 254
    1c24:	20 81       	ld	r18, Z
    1c26:	21 11       	cpse	r18, r1
    1c28:	41 c0       	rjmp	.+130    	; 0x1cac <_ZN4UART8IncomingEv+0xba>
			{
				if(nBuffer<UART_N_BUFFERS-1)
    1c2a:	31 97       	sbiw	r30, 0x01	; 1
    1c2c:	20 81       	ld	r18, Z
    1c2e:	23 30       	cpi	r18, 0x03	; 3
    1c30:	30 f0       	brcs	.+12     	; 0x1c3e <_ZN4UART8IncomingEv+0x4c>
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1c32:	fc 01       	movw	r30, r24
    1c34:	24 81       	ldd	r18, Z+4	; 0x04
    1c36:	35 81       	ldd	r19, Z+5	; 0x05
    1c38:	23 2b       	or	r18, r19
    1c3a:	a9 f4       	brne	.+42     	; 0x1c66 <_ZN4UART8IncomingEv+0x74>
    1c3c:	27 c0       	rjmp	.+78     	; 0x1c8c <_ZN4UART8IncomingEv+0x9a>
		{
			if(!overflowedCurrentBuffer)
			{
				if(nBuffer<UART_N_BUFFERS-1)
				{
					nBuffer++;
    1c3e:	fc 01       	movw	r30, r24
    1c40:	e4 5f       	subi	r30, 0xF4	; 244
    1c42:	fe 4f       	sbci	r31, 0xFE	; 254
    1c44:	20 81       	ld	r18, Z
    1c46:	2f 5f       	subi	r18, 0xFF	; 255
    1c48:	20 83       	st	Z, r18
					bufferIndexes[nBuffer]=0;
    1c4a:	e0 81       	ld	r30, Z
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	32 96       	adiw	r30, 0x02	; 2
    1c50:	ee 0f       	add	r30, r30
    1c52:	ff 1f       	adc	r31, r31
    1c54:	e8 0f       	add	r30, r24
    1c56:	f9 1f       	adc	r31, r25
    1c58:	11 82       	std	Z+1, r1	; 0x01
    1c5a:	10 82       	st	Z, r1
					overflowedCurrentBuffer=false;
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	e3 5f       	subi	r30, 0xF3	; 243
    1c60:	fe 4f       	sbci	r31, 0xFE	; 254
    1c62:	10 82       	st	Z, r1
    1c64:	08 95       	ret
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1c66:	fc 01       	movw	r30, r24
    1c68:	26 81       	ldd	r18, Z+6	; 0x06
    1c6a:	37 81       	ldd	r19, Z+7	; 0x07
    1c6c:	23 2b       	or	r18, r19
    1c6e:	51 f0       	breq	.+20     	; 0x1c84 <_ZN4UART8IncomingEv+0x92>
    1c70:	20 85       	ldd	r18, Z+8	; 0x08
    1c72:	31 85       	ldd	r19, Z+9	; 0x09
    1c74:	23 2b       	or	r18, r19
    1c76:	41 f0       	breq	.+16     	; 0x1c88 <_ZN4UART8IncomingEv+0x96>
    1c78:	22 85       	ldd	r18, Z+10	; 0x0a
    1c7a:	33 85       	ldd	r19, Z+11	; 0x0b
    1c7c:	23 2b       	or	r18, r19
    1c7e:	81 f4       	brne	.+32     	; 0x1ca0 <_ZN4UART8IncomingEv+0xae>
					overflowedCurrentBuffer=false;

				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
    1c80:	23 e0       	ldi	r18, 0x03	; 3
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <_ZN4UART8IncomingEv+0x9c>
    1c84:	21 e0       	ldi	r18, 0x01	; 1
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <_ZN4UART8IncomingEv+0x9c>
    1c88:	22 e0       	ldi	r18, 0x02	; 2
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <_ZN4UART8IncomingEv+0x9c>
					{
						if(bufferIndexes[i]==0)
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
						{
							nBuffer=i;
    1c8e:	fc 01       	movw	r30, r24
    1c90:	e4 5f       	subi	r30, 0xF4	; 244
    1c92:	fe 4f       	sbci	r31, 0xFE	; 254
    1c94:	20 83       	st	Z, r18
							overflowedCurrentBuffer=false;
    1c96:	31 96       	adiw	r30, 0x01	; 1
    1c98:	10 82       	st	Z, r1
							overflowedBuffers=false;
    1c9a:	31 96       	adiw	r30, 0x01	; 1
    1c9c:	10 82       	st	Z, r1
							return;
    1c9e:	08 95       	ret
						}
					}
					overflowedBuffers=true;
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	e2 5f       	subi	r30, 0xF2	; 242
    1ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca6:	21 e0       	ldi	r18, 0x01	; 1
    1ca8:	20 83       	st	Z, r18
    1caa:	08 95       	ret
				}
			}
			else
			{
				overflowedCurrentBuffer=false;
    1cac:	fc 01       	movw	r30, r24
    1cae:	e3 5f       	subi	r30, 0xF3	; 243
    1cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb2:	10 82       	st	Z, r1
				bufferIndexes[nBuffer]=0;
    1cb4:	31 97       	sbiw	r30, 0x01	; 1
    1cb6:	20 81       	ld	r18, Z
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	2e 5f       	subi	r18, 0xFE	; 254
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbe:	22 0f       	add	r18, r18
    1cc0:	33 1f       	adc	r19, r19
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e2 0f       	add	r30, r18
    1cc6:	f3 1f       	adc	r31, r19
    1cc8:	11 82       	std	Z+1, r1	; 0x01
    1cca:	10 82       	st	Z, r1
    1ccc:	08 95       	ret
			}
		}
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
    1cce:	fc 01       	movw	r30, r24
    1cd0:	e3 5f       	subi	r30, 0xF3	; 243
    1cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd4:	30 81       	ld	r19, Z
    1cd6:	31 11       	cpse	r19, r1
    1cd8:	36 c0       	rjmp	.+108    	; 0x1d46 <_ZN4UART8IncomingEv+0x154>
    1cda:	31 96       	adiw	r30, 0x01	; 1
    1cdc:	30 81       	ld	r19, Z
    1cde:	31 11       	cpse	r19, r1
    1ce0:	32 c0       	rjmp	.+100    	; 0x1d46 <_ZN4UART8IncomingEv+0x154>
    1ce2:	21 c0       	rjmp	.+66     	; 0x1d26 <_ZN4UART8IncomingEv+0x134>
		{
			int bufferIndex=bufferIndexes[nBuffer];
			if(bufferIndex>=UART_BUFFER_SIZE)
			{
				overflowedCurrentBuffer=true;
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	e3 5f       	subi	r30, 0xF3	; 243
    1ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cea:	21 e0       	ldi	r18, 0x01	; 1
    1cec:	20 83       	st	Z, r18
    1cee:	08 95       	ret
			}
			else{
					buffer[nBuffer][bufferIndex]=data;
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	a4 5f       	subi	r26, 0xF4	; 244
    1cf4:	be 4f       	sbci	r27, 0xFE	; 254
    1cf6:	3c 91       	ld	r19, X
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	60 e4       	ldi	r22, 0x40	; 64
    1cfc:	36 9f       	mul	r19, r22
    1cfe:	e0 0d       	add	r30, r0
    1d00:	f1 1d       	adc	r31, r1
    1d02:	11 24       	eor	r1, r1
    1d04:	e4 0f       	add	r30, r20
    1d06:	f5 1f       	adc	r31, r21
    1d08:	24 87       	std	Z+12, r18	; 0x0c
					bufferIndexes[nBuffer]=bufferIndex+1;
    1d0a:	2c 91       	ld	r18, X
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4f 5f       	subi	r20, 0xFF	; 255
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	2e 5f       	subi	r18, 0xFE	; 254
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	e2 0f       	add	r30, r18
    1d1e:	f3 1f       	adc	r31, r19
    1d20:	51 83       	std	Z+1, r21	; 0x01
    1d22:	40 83       	st	Z, r20
    1d24:	08 95       	ret
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
		{
			int bufferIndex=bufferIndexes[nBuffer];
    1d26:	fc 01       	movw	r30, r24
    1d28:	e4 5f       	subi	r30, 0xF4	; 244
    1d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2c:	e0 81       	ld	r30, Z
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	32 96       	adiw	r30, 0x02	; 2
    1d32:	ee 0f       	add	r30, r30
    1d34:	ff 1f       	adc	r31, r31
    1d36:	e8 0f       	add	r30, r24
    1d38:	f9 1f       	adc	r31, r25
    1d3a:	40 81       	ld	r20, Z
    1d3c:	51 81       	ldd	r21, Z+1	; 0x01
			if(bufferIndex>=UART_BUFFER_SIZE)
    1d3e:	40 34       	cpi	r20, 0x40	; 64
    1d40:	51 05       	cpc	r21, r1
    1d42:	b4 f2       	brlt	.-84     	; 0x1cf0 <_ZN4UART8IncomingEv+0xfe>
    1d44:	cf cf       	rjmp	.-98     	; 0x1ce4 <_ZN4UART8IncomingEv+0xf2>
    1d46:	08 95       	ret

00001d48 <__vector_18>:
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
		return m;
}
	ISR(USART_RX_vect){
    1d48:	1f 92       	push	r1
    1d4a:	0f 92       	push	r0
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	0f 92       	push	r0
    1d50:	11 24       	eor	r1, r1
    1d52:	2f 93       	push	r18
    1d54:	3f 93       	push	r19
    1d56:	4f 93       	push	r20
    1d58:	5f 93       	push	r21
    1d5a:	6f 93       	push	r22
    1d5c:	7f 93       	push	r23
    1d5e:	8f 93       	push	r24
    1d60:	9f 93       	push	r25
    1d62:	af 93       	push	r26
    1d64:	bf 93       	push	r27
    1d66:	ef 93       	push	r30
    1d68:	ff 93       	push	r31
		cli();
    1d6a:	f8 94       	cli
		UART::GetInstance().Incoming();
    1d6c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN4UART11GetInstanceEv>
    1d70:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN4UART8IncomingEv>
		sei();
    1d74:	78 94       	sei
	}
    1d76:	ff 91       	pop	r31
    1d78:	ef 91       	pop	r30
    1d7a:	bf 91       	pop	r27
    1d7c:	af 91       	pop	r26
    1d7e:	9f 91       	pop	r25
    1d80:	8f 91       	pop	r24
    1d82:	7f 91       	pop	r23
    1d84:	6f 91       	pop	r22
    1d86:	5f 91       	pop	r21
    1d88:	4f 91       	pop	r20
    1d8a:	3f 91       	pop	r19
    1d8c:	2f 91       	pop	r18
    1d8e:	0f 90       	pop	r0
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	0f 90       	pop	r0
    1d94:	1f 90       	pop	r1
    1d96:	18 95       	reti

00001d98 <_ZN4UART4SendEc>:
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
    1d98:	e0 ec       	ldi	r30, 0xC0	; 192
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	85 ff       	sbrs	r24, 5
    1da0:	fd cf       	rjmp	.-6      	; 0x1d9c <_ZN4UART4SendEc+0x4>
		UDR0=message;
    1da2:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1da6:	08 95       	ret

00001da8 <_ZN4UART11SendMessageEPKcj>:
	}
	void UART::SendMessage(const char* message, unsigned int length){
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
		for(unsigned int i=0; i<length; i++)
    1db4:	41 15       	cp	r20, r1
    1db6:	51 05       	cpc	r21, r1
    1db8:	61 f0       	breq	.+24     	; 0x1dd2 <_ZN4UART11SendMessageEPKcj+0x2a>
    1dba:	8b 01       	movw	r16, r22
    1dbc:	7c 01       	movw	r14, r24
    1dbe:	eb 01       	movw	r28, r22
    1dc0:	04 0f       	add	r16, r20
    1dc2:	15 1f       	adc	r17, r21
		Send(*(message+i));
    1dc4:	69 91       	ld	r22, Y+
    1dc6:	c7 01       	movw	r24, r14
    1dc8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN4UART4SendEc>
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
		UDR0=message;
	}
	void UART::SendMessage(const char* message, unsigned int length){
		for(unsigned int i=0; i<length; i++)
    1dcc:	c0 17       	cp	r28, r16
    1dce:	d1 07       	cpc	r29, r17
    1dd0:	c9 f7       	brne	.-14     	; 0x1dc4 <_ZN4UART11SendMessageEPKcj+0x1c>
		Send(*(message+i));
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	08 95       	ret

00001de0 <_GLOBAL__sub_I__ZN4UART10_SingletonE>:
void operator=(UART const&) = delete; // Don't implement
protected:
public:

private:
UART(){}
    1de0:	ec eb       	ldi	r30, 0xBC	; 188
    1de2:	f3 e0       	ldi	r31, 0x03	; 3
    1de4:	86 e8       	ldi	r24, 0x86	; 134
    1de6:	93 e0       	ldi	r25, 0x03	; 3
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	80 83       	st	Z, r24
    1dec:	8e e8       	ldi	r24, 0x8E	; 142
    1dee:	93 e0       	ldi	r25, 0x03	; 3
    1df0:	93 83       	std	Z+3, r25	; 0x03
    1df2:	82 83       	std	Z+2, r24	; 0x02
    1df4:	08 95       	ret

00001df6 <__tablejump2__>:
    1df6:	ee 0f       	add	r30, r30
    1df8:	ff 1f       	adc	r31, r31
    1dfa:	05 90       	lpm	r0, Z+
    1dfc:	f4 91       	lpm	r31, Z
    1dfe:	e0 2d       	mov	r30, r0
    1e00:	09 94       	ijmp

00001e02 <malloc>:
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	82 30       	cpi	r24, 0x02	; 2
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	10 f4       	brcc	.+4      	; 0x1e14 <malloc+0x12>
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <__flp>
    1e18:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <__flp+0x1>
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	a0 e0       	ldi	r26, 0x00	; 0
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	30 97       	sbiw	r30, 0x00	; 0
    1e26:	19 f1       	breq	.+70     	; 0x1e6e <malloc+0x6c>
    1e28:	40 81       	ld	r20, Z
    1e2a:	51 81       	ldd	r21, Z+1	; 0x01
    1e2c:	02 81       	ldd	r16, Z+2	; 0x02
    1e2e:	13 81       	ldd	r17, Z+3	; 0x03
    1e30:	48 17       	cp	r20, r24
    1e32:	59 07       	cpc	r21, r25
    1e34:	c8 f0       	brcs	.+50     	; 0x1e68 <malloc+0x66>
    1e36:	84 17       	cp	r24, r20
    1e38:	95 07       	cpc	r25, r21
    1e3a:	69 f4       	brne	.+26     	; 0x1e56 <malloc+0x54>
    1e3c:	10 97       	sbiw	r26, 0x00	; 0
    1e3e:	31 f0       	breq	.+12     	; 0x1e4c <malloc+0x4a>
    1e40:	12 96       	adiw	r26, 0x02	; 2
    1e42:	0c 93       	st	X, r16
    1e44:	12 97       	sbiw	r26, 0x02	; 2
    1e46:	13 96       	adiw	r26, 0x03	; 3
    1e48:	1c 93       	st	X, r17
    1e4a:	27 c0       	rjmp	.+78     	; 0x1e9a <malloc+0x98>
    1e4c:	00 93 cd 04 	sts	0x04CD, r16	; 0x8004cd <__flp>
    1e50:	10 93 ce 04 	sts	0x04CE, r17	; 0x8004ce <__flp+0x1>
    1e54:	22 c0       	rjmp	.+68     	; 0x1e9a <malloc+0x98>
    1e56:	21 15       	cp	r18, r1
    1e58:	31 05       	cpc	r19, r1
    1e5a:	19 f0       	breq	.+6      	; 0x1e62 <malloc+0x60>
    1e5c:	42 17       	cp	r20, r18
    1e5e:	53 07       	cpc	r21, r19
    1e60:	18 f4       	brcc	.+6      	; 0x1e68 <malloc+0x66>
    1e62:	9a 01       	movw	r18, r20
    1e64:	bd 01       	movw	r22, r26
    1e66:	ef 01       	movw	r28, r30
    1e68:	df 01       	movw	r26, r30
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	db cf       	rjmp	.-74     	; 0x1e24 <malloc+0x22>
    1e6e:	21 15       	cp	r18, r1
    1e70:	31 05       	cpc	r19, r1
    1e72:	f9 f0       	breq	.+62     	; 0x1eb2 <malloc+0xb0>
    1e74:	28 1b       	sub	r18, r24
    1e76:	39 0b       	sbc	r19, r25
    1e78:	24 30       	cpi	r18, 0x04	; 4
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	80 f4       	brcc	.+32     	; 0x1e9e <malloc+0x9c>
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	61 15       	cp	r22, r1
    1e84:	71 05       	cpc	r23, r1
    1e86:	21 f0       	breq	.+8      	; 0x1e90 <malloc+0x8e>
    1e88:	fb 01       	movw	r30, r22
    1e8a:	93 83       	std	Z+3, r25	; 0x03
    1e8c:	82 83       	std	Z+2, r24	; 0x02
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <malloc+0x96>
    1e90:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <__flp+0x1>
    1e94:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <__flp>
    1e98:	fe 01       	movw	r30, r28
    1e9a:	32 96       	adiw	r30, 0x02	; 2
    1e9c:	44 c0       	rjmp	.+136    	; 0x1f26 <malloc+0x124>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e2 0f       	add	r30, r18
    1ea2:	f3 1f       	adc	r31, r19
    1ea4:	81 93       	st	Z+, r24
    1ea6:	91 93       	st	Z+, r25
    1ea8:	22 50       	subi	r18, 0x02	; 2
    1eaa:	31 09       	sbc	r19, r1
    1eac:	39 83       	std	Y+1, r19	; 0x01
    1eae:	28 83       	st	Y, r18
    1eb0:	3a c0       	rjmp	.+116    	; 0x1f26 <malloc+0x124>
    1eb2:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <__brkval>
    1eb6:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <__brkval+0x1>
    1eba:	23 2b       	or	r18, r19
    1ebc:	41 f4       	brne	.+16     	; 0x1ece <malloc+0xcc>
    1ebe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1ec2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1ec6:	30 93 cc 04 	sts	0x04CC, r19	; 0x8004cc <__brkval+0x1>
    1eca:	20 93 cb 04 	sts	0x04CB, r18	; 0x8004cb <__brkval>
    1ece:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1ed2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1ed6:	21 15       	cp	r18, r1
    1ed8:	31 05       	cpc	r19, r1
    1eda:	41 f4       	brne	.+16     	; 0x1eec <malloc+0xea>
    1edc:	2d b7       	in	r18, 0x3d	; 61
    1ede:	3e b7       	in	r19, 0x3e	; 62
    1ee0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1ee4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1ee8:	24 1b       	sub	r18, r20
    1eea:	35 0b       	sbc	r19, r21
    1eec:	e0 91 cb 04 	lds	r30, 0x04CB	; 0x8004cb <__brkval>
    1ef0:	f0 91 cc 04 	lds	r31, 0x04CC	; 0x8004cc <__brkval+0x1>
    1ef4:	e2 17       	cp	r30, r18
    1ef6:	f3 07       	cpc	r31, r19
    1ef8:	a0 f4       	brcc	.+40     	; 0x1f22 <malloc+0x120>
    1efa:	2e 1b       	sub	r18, r30
    1efc:	3f 0b       	sbc	r19, r31
    1efe:	28 17       	cp	r18, r24
    1f00:	39 07       	cpc	r19, r25
    1f02:	78 f0       	brcs	.+30     	; 0x1f22 <malloc+0x120>
    1f04:	ac 01       	movw	r20, r24
    1f06:	4e 5f       	subi	r20, 0xFE	; 254
    1f08:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0a:	24 17       	cp	r18, r20
    1f0c:	35 07       	cpc	r19, r21
    1f0e:	48 f0       	brcs	.+18     	; 0x1f22 <malloc+0x120>
    1f10:	4e 0f       	add	r20, r30
    1f12:	5f 1f       	adc	r21, r31
    1f14:	50 93 cc 04 	sts	0x04CC, r21	; 0x8004cc <__brkval+0x1>
    1f18:	40 93 cb 04 	sts	0x04CB, r20	; 0x8004cb <__brkval>
    1f1c:	81 93       	st	Z+, r24
    1f1e:	91 93       	st	Z+, r25
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <malloc+0x124>
    1f22:	e0 e0       	ldi	r30, 0x00	; 0
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	cf 01       	movw	r24, r30
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	08 95       	ret

00001f32 <free>:
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <free+0xa>
    1f3a:	81 c0       	rjmp	.+258    	; 0x203e <free+0x10c>
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	32 97       	sbiw	r30, 0x02	; 2
    1f40:	13 82       	std	Z+3, r1	; 0x03
    1f42:	12 82       	std	Z+2, r1	; 0x02
    1f44:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <__flp>
    1f48:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <__flp+0x1>
    1f4c:	10 97       	sbiw	r26, 0x00	; 0
    1f4e:	81 f4       	brne	.+32     	; 0x1f70 <free+0x3e>
    1f50:	20 81       	ld	r18, Z
    1f52:	31 81       	ldd	r19, Z+1	; 0x01
    1f54:	82 0f       	add	r24, r18
    1f56:	93 1f       	adc	r25, r19
    1f58:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <__brkval>
    1f5c:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <__brkval+0x1>
    1f60:	28 17       	cp	r18, r24
    1f62:	39 07       	cpc	r19, r25
    1f64:	51 f5       	brne	.+84     	; 0x1fba <free+0x88>
    1f66:	f0 93 cc 04 	sts	0x04CC, r31	; 0x8004cc <__brkval+0x1>
    1f6a:	e0 93 cb 04 	sts	0x04CB, r30	; 0x8004cb <__brkval>
    1f6e:	67 c0       	rjmp	.+206    	; 0x203e <free+0x10c>
    1f70:	ed 01       	movw	r28, r26
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	ce 17       	cp	r28, r30
    1f78:	df 07       	cpc	r29, r31
    1f7a:	40 f4       	brcc	.+16     	; 0x1f8c <free+0x5a>
    1f7c:	4a 81       	ldd	r20, Y+2	; 0x02
    1f7e:	5b 81       	ldd	r21, Y+3	; 0x03
    1f80:	9e 01       	movw	r18, r28
    1f82:	41 15       	cp	r20, r1
    1f84:	51 05       	cpc	r21, r1
    1f86:	f1 f0       	breq	.+60     	; 0x1fc4 <free+0x92>
    1f88:	ea 01       	movw	r28, r20
    1f8a:	f5 cf       	rjmp	.-22     	; 0x1f76 <free+0x44>
    1f8c:	d3 83       	std	Z+3, r29	; 0x03
    1f8e:	c2 83       	std	Z+2, r28	; 0x02
    1f90:	40 81       	ld	r20, Z
    1f92:	51 81       	ldd	r21, Z+1	; 0x01
    1f94:	84 0f       	add	r24, r20
    1f96:	95 1f       	adc	r25, r21
    1f98:	c8 17       	cp	r28, r24
    1f9a:	d9 07       	cpc	r29, r25
    1f9c:	59 f4       	brne	.+22     	; 0x1fb4 <free+0x82>
    1f9e:	88 81       	ld	r24, Y
    1fa0:	99 81       	ldd	r25, Y+1	; 0x01
    1fa2:	84 0f       	add	r24, r20
    1fa4:	95 1f       	adc	r25, r21
    1fa6:	02 96       	adiw	r24, 0x02	; 2
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb0:	93 83       	std	Z+3, r25	; 0x03
    1fb2:	82 83       	std	Z+2, r24	; 0x02
    1fb4:	21 15       	cp	r18, r1
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	29 f4       	brne	.+10     	; 0x1fc4 <free+0x92>
    1fba:	f0 93 ce 04 	sts	0x04CE, r31	; 0x8004ce <__flp+0x1>
    1fbe:	e0 93 cd 04 	sts	0x04CD, r30	; 0x8004cd <__flp>
    1fc2:	3d c0       	rjmp	.+122    	; 0x203e <free+0x10c>
    1fc4:	e9 01       	movw	r28, r18
    1fc6:	fb 83       	std	Y+3, r31	; 0x03
    1fc8:	ea 83       	std	Y+2, r30	; 0x02
    1fca:	49 91       	ld	r20, Y+
    1fcc:	59 91       	ld	r21, Y+
    1fce:	c4 0f       	add	r28, r20
    1fd0:	d5 1f       	adc	r29, r21
    1fd2:	ec 17       	cp	r30, r28
    1fd4:	fd 07       	cpc	r31, r29
    1fd6:	61 f4       	brne	.+24     	; 0x1ff0 <free+0xbe>
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	84 0f       	add	r24, r20
    1fde:	95 1f       	adc	r25, r21
    1fe0:	02 96       	adiw	r24, 0x02	; 2
    1fe2:	e9 01       	movw	r28, r18
    1fe4:	99 83       	std	Y+1, r25	; 0x01
    1fe6:	88 83       	st	Y, r24
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	9b 83       	std	Y+3, r25	; 0x03
    1fee:	8a 83       	std	Y+2, r24	; 0x02
    1ff0:	e0 e0       	ldi	r30, 0x00	; 0
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	12 96       	adiw	r26, 0x02	; 2
    1ff6:	8d 91       	ld	r24, X+
    1ff8:	9c 91       	ld	r25, X
    1ffa:	13 97       	sbiw	r26, 0x03	; 3
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <free+0xd4>
    2000:	fd 01       	movw	r30, r26
    2002:	dc 01       	movw	r26, r24
    2004:	f7 cf       	rjmp	.-18     	; 0x1ff4 <free+0xc2>
    2006:	8d 91       	ld	r24, X+
    2008:	9c 91       	ld	r25, X
    200a:	11 97       	sbiw	r26, 0x01	; 1
    200c:	9d 01       	movw	r18, r26
    200e:	2e 5f       	subi	r18, 0xFE	; 254
    2010:	3f 4f       	sbci	r19, 0xFF	; 255
    2012:	82 0f       	add	r24, r18
    2014:	93 1f       	adc	r25, r19
    2016:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <__brkval>
    201a:	30 91 cc 04 	lds	r19, 0x04CC	; 0x8004cc <__brkval+0x1>
    201e:	28 17       	cp	r18, r24
    2020:	39 07       	cpc	r19, r25
    2022:	69 f4       	brne	.+26     	; 0x203e <free+0x10c>
    2024:	30 97       	sbiw	r30, 0x00	; 0
    2026:	29 f4       	brne	.+10     	; 0x2032 <free+0x100>
    2028:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <__flp+0x1>
    202c:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <__flp>
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <free+0x104>
    2032:	13 82       	std	Z+3, r1	; 0x03
    2034:	12 82       	std	Z+2, r1	; 0x02
    2036:	b0 93 cc 04 	sts	0x04CC, r27	; 0x8004cc <__brkval+0x1>
    203a:	a0 93 cb 04 	sts	0x04CB, r26	; 0x8004cb <__brkval>
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	08 95       	ret

00002044 <atol>:
    2044:	1f 93       	push	r17
    2046:	fc 01       	movw	r30, r24
    2048:	99 27       	eor	r25, r25
    204a:	88 27       	eor	r24, r24
    204c:	bc 01       	movw	r22, r24
    204e:	e8 94       	clt
    2050:	11 91       	ld	r17, Z+
    2052:	10 32       	cpi	r17, 0x20	; 32
    2054:	e9 f3       	breq	.-6      	; 0x2050 <atol+0xc>
    2056:	19 30       	cpi	r17, 0x09	; 9
    2058:	10 f0       	brcs	.+4      	; 0x205e <atol+0x1a>
    205a:	1e 30       	cpi	r17, 0x0E	; 14
    205c:	c8 f3       	brcs	.-14     	; 0x2050 <atol+0xc>
    205e:	1b 32       	cpi	r17, 0x2B	; 43
    2060:	51 f0       	breq	.+20     	; 0x2076 <atol+0x32>
    2062:	1d 32       	cpi	r17, 0x2D	; 45
    2064:	49 f4       	brne	.+18     	; 0x2078 <atol+0x34>
    2066:	68 94       	set
    2068:	06 c0       	rjmp	.+12     	; 0x2076 <atol+0x32>
    206a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__mulsi_const_10>
    206e:	61 0f       	add	r22, r17
    2070:	71 1d       	adc	r23, r1
    2072:	81 1d       	adc	r24, r1
    2074:	91 1d       	adc	r25, r1
    2076:	11 91       	ld	r17, Z+
    2078:	10 53       	subi	r17, 0x30	; 48
    207a:	1a 30       	cpi	r17, 0x0A	; 10
    207c:	b0 f3       	brcs	.-20     	; 0x206a <atol+0x26>
    207e:	3e f4       	brtc	.+14     	; 0x208e <atol+0x4a>
    2080:	90 95       	com	r25
    2082:	80 95       	com	r24
    2084:	70 95       	com	r23
    2086:	61 95       	neg	r22
    2088:	7f 4f       	sbci	r23, 0xFF	; 255
    208a:	8f 4f       	sbci	r24, 0xFF	; 255
    208c:	9f 4f       	sbci	r25, 0xFF	; 255
    208e:	1f 91       	pop	r17
    2090:	08 95       	ret

00002092 <memcpy>:
    2092:	fb 01       	movw	r30, r22
    2094:	dc 01       	movw	r26, r24
    2096:	02 c0       	rjmp	.+4      	; 0x209c <memcpy+0xa>
    2098:	01 90       	ld	r0, Z+
    209a:	0d 92       	st	X+, r0
    209c:	41 50       	subi	r20, 0x01	; 1
    209e:	50 40       	sbci	r21, 0x00	; 0
    20a0:	d8 f7       	brcc	.-10     	; 0x2098 <memcpy+0x6>
    20a2:	08 95       	ret

000020a4 <strcmp>:
    20a4:	fb 01       	movw	r30, r22
    20a6:	dc 01       	movw	r26, r24
    20a8:	8d 91       	ld	r24, X+
    20aa:	01 90       	ld	r0, Z+
    20ac:	80 19       	sub	r24, r0
    20ae:	01 10       	cpse	r0, r1
    20b0:	d9 f3       	breq	.-10     	; 0x20a8 <strcmp+0x4>
    20b2:	99 0b       	sbc	r25, r25
    20b4:	08 95       	ret

000020b6 <__mulsi_const_10>:
    20b6:	59 2f       	mov	r21, r25
    20b8:	48 2f       	mov	r20, r24
    20ba:	37 2f       	mov	r19, r23
    20bc:	26 2f       	mov	r18, r22
    20be:	66 0f       	add	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	88 1f       	adc	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	66 0f       	add	r22, r22
    20c8:	77 1f       	adc	r23, r23
    20ca:	88 1f       	adc	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	62 0f       	add	r22, r18
    20d0:	73 1f       	adc	r23, r19
    20d2:	84 1f       	adc	r24, r20
    20d4:	95 1f       	adc	r25, r21
    20d6:	66 0f       	add	r22, r22
    20d8:	77 1f       	adc	r23, r23
    20da:	88 1f       	adc	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	08 95       	ret

000020e0 <snprintf>:
    20e0:	ae e0       	ldi	r26, 0x0E	; 14
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e6 e7       	ldi	r30, 0x76	; 118
    20e6:	f0 e1       	ldi	r31, 0x10	; 16
    20e8:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x1c>
    20ec:	0d 89       	ldd	r16, Y+21	; 0x15
    20ee:	1e 89       	ldd	r17, Y+22	; 0x16
    20f0:	8f 89       	ldd	r24, Y+23	; 0x17
    20f2:	98 8d       	ldd	r25, Y+24	; 0x18
    20f4:	26 e0       	ldi	r18, 0x06	; 6
    20f6:	2c 83       	std	Y+4, r18	; 0x04
    20f8:	1a 83       	std	Y+2, r17	; 0x02
    20fa:	09 83       	std	Y+1, r16	; 0x01
    20fc:	97 ff       	sbrs	r25, 7
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <snprintf+0x24>
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	90 e8       	ldi	r25, 0x80	; 128
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	ae 01       	movw	r20, r28
    210c:	45 5e       	subi	r20, 0xE5	; 229
    210e:	5f 4f       	sbci	r21, 0xFF	; 255
    2110:	69 8d       	ldd	r22, Y+25	; 0x19
    2112:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	0e 94 a0 10 	call	0x2140	; 0x2140 <vfprintf>
    211c:	4d 81       	ldd	r20, Y+5	; 0x05
    211e:	5e 81       	ldd	r21, Y+6	; 0x06
    2120:	57 fd       	sbrc	r21, 7
    2122:	0a c0       	rjmp	.+20     	; 0x2138 <snprintf+0x58>
    2124:	2f 81       	ldd	r18, Y+7	; 0x07
    2126:	38 85       	ldd	r19, Y+8	; 0x08
    2128:	42 17       	cp	r20, r18
    212a:	53 07       	cpc	r21, r19
    212c:	0c f4       	brge	.+2      	; 0x2130 <snprintf+0x50>
    212e:	9a 01       	movw	r18, r20
    2130:	f8 01       	movw	r30, r16
    2132:	e2 0f       	add	r30, r18
    2134:	f3 1f       	adc	r31, r19
    2136:	10 82       	st	Z, r1
    2138:	2e 96       	adiw	r28, 0x0e	; 14
    213a:	e4 e0       	ldi	r30, 0x04	; 4
    213c:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x1c>

00002140 <vfprintf>:
    2140:	ab e0       	ldi	r26, 0x0B	; 11
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e6 ea       	ldi	r30, 0xA6	; 166
    2146:	f0 e1       	ldi	r31, 0x10	; 16
    2148:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__>
    214c:	6c 01       	movw	r12, r24
    214e:	7b 01       	movw	r14, r22
    2150:	8a 01       	movw	r16, r20
    2152:	fc 01       	movw	r30, r24
    2154:	17 82       	std	Z+7, r1	; 0x07
    2156:	16 82       	std	Z+6, r1	; 0x06
    2158:	83 81       	ldd	r24, Z+3	; 0x03
    215a:	81 ff       	sbrs	r24, 1
    215c:	cc c1       	rjmp	.+920    	; 0x24f6 <vfprintf+0x3b6>
    215e:	ce 01       	movw	r24, r28
    2160:	01 96       	adiw	r24, 0x01	; 1
    2162:	3c 01       	movw	r6, r24
    2164:	f6 01       	movw	r30, r12
    2166:	93 81       	ldd	r25, Z+3	; 0x03
    2168:	f7 01       	movw	r30, r14
    216a:	93 fd       	sbrc	r25, 3
    216c:	85 91       	lpm	r24, Z+
    216e:	93 ff       	sbrs	r25, 3
    2170:	81 91       	ld	r24, Z+
    2172:	7f 01       	movw	r14, r30
    2174:	88 23       	and	r24, r24
    2176:	09 f4       	brne	.+2      	; 0x217a <vfprintf+0x3a>
    2178:	ba c1       	rjmp	.+884    	; 0x24ee <vfprintf+0x3ae>
    217a:	85 32       	cpi	r24, 0x25	; 37
    217c:	39 f4       	brne	.+14     	; 0x218c <vfprintf+0x4c>
    217e:	93 fd       	sbrc	r25, 3
    2180:	85 91       	lpm	r24, Z+
    2182:	93 ff       	sbrs	r25, 3
    2184:	81 91       	ld	r24, Z+
    2186:	7f 01       	movw	r14, r30
    2188:	85 32       	cpi	r24, 0x25	; 37
    218a:	29 f4       	brne	.+10     	; 0x2196 <vfprintf+0x56>
    218c:	b6 01       	movw	r22, r12
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	0e 94 97 12 	call	0x252e	; 0x252e <fputc>
    2194:	e7 cf       	rjmp	.-50     	; 0x2164 <vfprintf+0x24>
    2196:	91 2c       	mov	r9, r1
    2198:	21 2c       	mov	r2, r1
    219a:	31 2c       	mov	r3, r1
    219c:	ff e1       	ldi	r31, 0x1F	; 31
    219e:	f3 15       	cp	r31, r3
    21a0:	d8 f0       	brcs	.+54     	; 0x21d8 <vfprintf+0x98>
    21a2:	8b 32       	cpi	r24, 0x2B	; 43
    21a4:	79 f0       	breq	.+30     	; 0x21c4 <vfprintf+0x84>
    21a6:	38 f4       	brcc	.+14     	; 0x21b6 <vfprintf+0x76>
    21a8:	80 32       	cpi	r24, 0x20	; 32
    21aa:	79 f0       	breq	.+30     	; 0x21ca <vfprintf+0x8a>
    21ac:	83 32       	cpi	r24, 0x23	; 35
    21ae:	a1 f4       	brne	.+40     	; 0x21d8 <vfprintf+0x98>
    21b0:	23 2d       	mov	r18, r3
    21b2:	20 61       	ori	r18, 0x10	; 16
    21b4:	1d c0       	rjmp	.+58     	; 0x21f0 <vfprintf+0xb0>
    21b6:	8d 32       	cpi	r24, 0x2D	; 45
    21b8:	61 f0       	breq	.+24     	; 0x21d2 <vfprintf+0x92>
    21ba:	80 33       	cpi	r24, 0x30	; 48
    21bc:	69 f4       	brne	.+26     	; 0x21d8 <vfprintf+0x98>
    21be:	23 2d       	mov	r18, r3
    21c0:	21 60       	ori	r18, 0x01	; 1
    21c2:	16 c0       	rjmp	.+44     	; 0x21f0 <vfprintf+0xb0>
    21c4:	83 2d       	mov	r24, r3
    21c6:	82 60       	ori	r24, 0x02	; 2
    21c8:	38 2e       	mov	r3, r24
    21ca:	e3 2d       	mov	r30, r3
    21cc:	e4 60       	ori	r30, 0x04	; 4
    21ce:	3e 2e       	mov	r3, r30
    21d0:	2a c0       	rjmp	.+84     	; 0x2226 <vfprintf+0xe6>
    21d2:	f3 2d       	mov	r31, r3
    21d4:	f8 60       	ori	r31, 0x08	; 8
    21d6:	1d c0       	rjmp	.+58     	; 0x2212 <vfprintf+0xd2>
    21d8:	37 fc       	sbrc	r3, 7
    21da:	2d c0       	rjmp	.+90     	; 0x2236 <vfprintf+0xf6>
    21dc:	20 ed       	ldi	r18, 0xD0	; 208
    21de:	28 0f       	add	r18, r24
    21e0:	2a 30       	cpi	r18, 0x0A	; 10
    21e2:	40 f0       	brcs	.+16     	; 0x21f4 <vfprintf+0xb4>
    21e4:	8e 32       	cpi	r24, 0x2E	; 46
    21e6:	b9 f4       	brne	.+46     	; 0x2216 <vfprintf+0xd6>
    21e8:	36 fc       	sbrc	r3, 6
    21ea:	81 c1       	rjmp	.+770    	; 0x24ee <vfprintf+0x3ae>
    21ec:	23 2d       	mov	r18, r3
    21ee:	20 64       	ori	r18, 0x40	; 64
    21f0:	32 2e       	mov	r3, r18
    21f2:	19 c0       	rjmp	.+50     	; 0x2226 <vfprintf+0xe6>
    21f4:	36 fe       	sbrs	r3, 6
    21f6:	06 c0       	rjmp	.+12     	; 0x2204 <vfprintf+0xc4>
    21f8:	8a e0       	ldi	r24, 0x0A	; 10
    21fa:	98 9e       	mul	r9, r24
    21fc:	20 0d       	add	r18, r0
    21fe:	11 24       	eor	r1, r1
    2200:	92 2e       	mov	r9, r18
    2202:	11 c0       	rjmp	.+34     	; 0x2226 <vfprintf+0xe6>
    2204:	ea e0       	ldi	r30, 0x0A	; 10
    2206:	2e 9e       	mul	r2, r30
    2208:	20 0d       	add	r18, r0
    220a:	11 24       	eor	r1, r1
    220c:	22 2e       	mov	r2, r18
    220e:	f3 2d       	mov	r31, r3
    2210:	f0 62       	ori	r31, 0x20	; 32
    2212:	3f 2e       	mov	r3, r31
    2214:	08 c0       	rjmp	.+16     	; 0x2226 <vfprintf+0xe6>
    2216:	8c 36       	cpi	r24, 0x6C	; 108
    2218:	21 f4       	brne	.+8      	; 0x2222 <vfprintf+0xe2>
    221a:	83 2d       	mov	r24, r3
    221c:	80 68       	ori	r24, 0x80	; 128
    221e:	38 2e       	mov	r3, r24
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <vfprintf+0xe6>
    2222:	88 36       	cpi	r24, 0x68	; 104
    2224:	41 f4       	brne	.+16     	; 0x2236 <vfprintf+0xf6>
    2226:	f7 01       	movw	r30, r14
    2228:	93 fd       	sbrc	r25, 3
    222a:	85 91       	lpm	r24, Z+
    222c:	93 ff       	sbrs	r25, 3
    222e:	81 91       	ld	r24, Z+
    2230:	7f 01       	movw	r14, r30
    2232:	81 11       	cpse	r24, r1
    2234:	b3 cf       	rjmp	.-154    	; 0x219c <vfprintf+0x5c>
    2236:	98 2f       	mov	r25, r24
    2238:	9f 7d       	andi	r25, 0xDF	; 223
    223a:	95 54       	subi	r25, 0x45	; 69
    223c:	93 30       	cpi	r25, 0x03	; 3
    223e:	28 f4       	brcc	.+10     	; 0x224a <vfprintf+0x10a>
    2240:	0c 5f       	subi	r16, 0xFC	; 252
    2242:	1f 4f       	sbci	r17, 0xFF	; 255
    2244:	9f e3       	ldi	r25, 0x3F	; 63
    2246:	99 83       	std	Y+1, r25	; 0x01
    2248:	0d c0       	rjmp	.+26     	; 0x2264 <vfprintf+0x124>
    224a:	83 36       	cpi	r24, 0x63	; 99
    224c:	31 f0       	breq	.+12     	; 0x225a <vfprintf+0x11a>
    224e:	83 37       	cpi	r24, 0x73	; 115
    2250:	71 f0       	breq	.+28     	; 0x226e <vfprintf+0x12e>
    2252:	83 35       	cpi	r24, 0x53	; 83
    2254:	09 f0       	breq	.+2      	; 0x2258 <vfprintf+0x118>
    2256:	59 c0       	rjmp	.+178    	; 0x230a <vfprintf+0x1ca>
    2258:	21 c0       	rjmp	.+66     	; 0x229c <vfprintf+0x15c>
    225a:	f8 01       	movw	r30, r16
    225c:	80 81       	ld	r24, Z
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	0e 5f       	subi	r16, 0xFE	; 254
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	88 24       	eor	r8, r8
    2266:	83 94       	inc	r8
    2268:	91 2c       	mov	r9, r1
    226a:	53 01       	movw	r10, r6
    226c:	13 c0       	rjmp	.+38     	; 0x2294 <vfprintf+0x154>
    226e:	28 01       	movw	r4, r16
    2270:	f2 e0       	ldi	r31, 0x02	; 2
    2272:	4f 0e       	add	r4, r31
    2274:	51 1c       	adc	r5, r1
    2276:	f8 01       	movw	r30, r16
    2278:	a0 80       	ld	r10, Z
    227a:	b1 80       	ldd	r11, Z+1	; 0x01
    227c:	36 fe       	sbrs	r3, 6
    227e:	03 c0       	rjmp	.+6      	; 0x2286 <vfprintf+0x146>
    2280:	69 2d       	mov	r22, r9
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	02 c0       	rjmp	.+4      	; 0x228a <vfprintf+0x14a>
    2286:	6f ef       	ldi	r22, 0xFF	; 255
    2288:	7f ef       	ldi	r23, 0xFF	; 255
    228a:	c5 01       	movw	r24, r10
    228c:	0e 94 8c 12 	call	0x2518	; 0x2518 <strnlen>
    2290:	4c 01       	movw	r8, r24
    2292:	82 01       	movw	r16, r4
    2294:	f3 2d       	mov	r31, r3
    2296:	ff 77       	andi	r31, 0x7F	; 127
    2298:	3f 2e       	mov	r3, r31
    229a:	16 c0       	rjmp	.+44     	; 0x22c8 <vfprintf+0x188>
    229c:	28 01       	movw	r4, r16
    229e:	22 e0       	ldi	r18, 0x02	; 2
    22a0:	42 0e       	add	r4, r18
    22a2:	51 1c       	adc	r5, r1
    22a4:	f8 01       	movw	r30, r16
    22a6:	a0 80       	ld	r10, Z
    22a8:	b1 80       	ldd	r11, Z+1	; 0x01
    22aa:	36 fe       	sbrs	r3, 6
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <vfprintf+0x174>
    22ae:	69 2d       	mov	r22, r9
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <vfprintf+0x178>
    22b4:	6f ef       	ldi	r22, 0xFF	; 255
    22b6:	7f ef       	ldi	r23, 0xFF	; 255
    22b8:	c5 01       	movw	r24, r10
    22ba:	0e 94 81 12 	call	0x2502	; 0x2502 <strnlen_P>
    22be:	4c 01       	movw	r8, r24
    22c0:	f3 2d       	mov	r31, r3
    22c2:	f0 68       	ori	r31, 0x80	; 128
    22c4:	3f 2e       	mov	r3, r31
    22c6:	82 01       	movw	r16, r4
    22c8:	33 fc       	sbrc	r3, 3
    22ca:	1b c0       	rjmp	.+54     	; 0x2302 <vfprintf+0x1c2>
    22cc:	82 2d       	mov	r24, r2
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	88 16       	cp	r8, r24
    22d2:	99 06       	cpc	r9, r25
    22d4:	b0 f4       	brcc	.+44     	; 0x2302 <vfprintf+0x1c2>
    22d6:	b6 01       	movw	r22, r12
    22d8:	80 e2       	ldi	r24, 0x20	; 32
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 97 12 	call	0x252e	; 0x252e <fputc>
    22e0:	2a 94       	dec	r2
    22e2:	f4 cf       	rjmp	.-24     	; 0x22cc <vfprintf+0x18c>
    22e4:	f5 01       	movw	r30, r10
    22e6:	37 fc       	sbrc	r3, 7
    22e8:	85 91       	lpm	r24, Z+
    22ea:	37 fe       	sbrs	r3, 7
    22ec:	81 91       	ld	r24, Z+
    22ee:	5f 01       	movw	r10, r30
    22f0:	b6 01       	movw	r22, r12
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	0e 94 97 12 	call	0x252e	; 0x252e <fputc>
    22f8:	21 10       	cpse	r2, r1
    22fa:	2a 94       	dec	r2
    22fc:	21 e0       	ldi	r18, 0x01	; 1
    22fe:	82 1a       	sub	r8, r18
    2300:	91 08       	sbc	r9, r1
    2302:	81 14       	cp	r8, r1
    2304:	91 04       	cpc	r9, r1
    2306:	71 f7       	brne	.-36     	; 0x22e4 <vfprintf+0x1a4>
    2308:	e8 c0       	rjmp	.+464    	; 0x24da <vfprintf+0x39a>
    230a:	84 36       	cpi	r24, 0x64	; 100
    230c:	11 f0       	breq	.+4      	; 0x2312 <vfprintf+0x1d2>
    230e:	89 36       	cpi	r24, 0x69	; 105
    2310:	41 f5       	brne	.+80     	; 0x2362 <vfprintf+0x222>
    2312:	f8 01       	movw	r30, r16
    2314:	37 fe       	sbrs	r3, 7
    2316:	07 c0       	rjmp	.+14     	; 0x2326 <vfprintf+0x1e6>
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	0c 5f       	subi	r16, 0xFC	; 252
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	08 c0       	rjmp	.+16     	; 0x2336 <vfprintf+0x1f6>
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	07 2e       	mov	r0, r23
    232c:	00 0c       	add	r0, r0
    232e:	88 0b       	sbc	r24, r24
    2330:	99 0b       	sbc	r25, r25
    2332:	0e 5f       	subi	r16, 0xFE	; 254
    2334:	1f 4f       	sbci	r17, 0xFF	; 255
    2336:	f3 2d       	mov	r31, r3
    2338:	ff 76       	andi	r31, 0x6F	; 111
    233a:	3f 2e       	mov	r3, r31
    233c:	97 ff       	sbrs	r25, 7
    233e:	09 c0       	rjmp	.+18     	; 0x2352 <vfprintf+0x212>
    2340:	90 95       	com	r25
    2342:	80 95       	com	r24
    2344:	70 95       	com	r23
    2346:	61 95       	neg	r22
    2348:	7f 4f       	sbci	r23, 0xFF	; 255
    234a:	8f 4f       	sbci	r24, 0xFF	; 255
    234c:	9f 4f       	sbci	r25, 0xFF	; 255
    234e:	f0 68       	ori	r31, 0x80	; 128
    2350:	3f 2e       	mov	r3, r31
    2352:	2a e0       	ldi	r18, 0x0A	; 10
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	a3 01       	movw	r20, r6
    2358:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__ultoa_invert>
    235c:	88 2e       	mov	r8, r24
    235e:	86 18       	sub	r8, r6
    2360:	45 c0       	rjmp	.+138    	; 0x23ec <vfprintf+0x2ac>
    2362:	85 37       	cpi	r24, 0x75	; 117
    2364:	31 f4       	brne	.+12     	; 0x2372 <vfprintf+0x232>
    2366:	23 2d       	mov	r18, r3
    2368:	2f 7e       	andi	r18, 0xEF	; 239
    236a:	b2 2e       	mov	r11, r18
    236c:	2a e0       	ldi	r18, 0x0A	; 10
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	25 c0       	rjmp	.+74     	; 0x23bc <vfprintf+0x27c>
    2372:	93 2d       	mov	r25, r3
    2374:	99 7f       	andi	r25, 0xF9	; 249
    2376:	b9 2e       	mov	r11, r25
    2378:	8f 36       	cpi	r24, 0x6F	; 111
    237a:	c1 f0       	breq	.+48     	; 0x23ac <vfprintf+0x26c>
    237c:	18 f4       	brcc	.+6      	; 0x2384 <vfprintf+0x244>
    237e:	88 35       	cpi	r24, 0x58	; 88
    2380:	79 f0       	breq	.+30     	; 0x23a0 <vfprintf+0x260>
    2382:	b5 c0       	rjmp	.+362    	; 0x24ee <vfprintf+0x3ae>
    2384:	80 37       	cpi	r24, 0x70	; 112
    2386:	19 f0       	breq	.+6      	; 0x238e <vfprintf+0x24e>
    2388:	88 37       	cpi	r24, 0x78	; 120
    238a:	21 f0       	breq	.+8      	; 0x2394 <vfprintf+0x254>
    238c:	b0 c0       	rjmp	.+352    	; 0x24ee <vfprintf+0x3ae>
    238e:	e9 2f       	mov	r30, r25
    2390:	e0 61       	ori	r30, 0x10	; 16
    2392:	be 2e       	mov	r11, r30
    2394:	b4 fe       	sbrs	r11, 4
    2396:	0d c0       	rjmp	.+26     	; 0x23b2 <vfprintf+0x272>
    2398:	fb 2d       	mov	r31, r11
    239a:	f4 60       	ori	r31, 0x04	; 4
    239c:	bf 2e       	mov	r11, r31
    239e:	09 c0       	rjmp	.+18     	; 0x23b2 <vfprintf+0x272>
    23a0:	34 fe       	sbrs	r3, 4
    23a2:	0a c0       	rjmp	.+20     	; 0x23b8 <vfprintf+0x278>
    23a4:	29 2f       	mov	r18, r25
    23a6:	26 60       	ori	r18, 0x06	; 6
    23a8:	b2 2e       	mov	r11, r18
    23aa:	06 c0       	rjmp	.+12     	; 0x23b8 <vfprintf+0x278>
    23ac:	28 e0       	ldi	r18, 0x08	; 8
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	05 c0       	rjmp	.+10     	; 0x23bc <vfprintf+0x27c>
    23b2:	20 e1       	ldi	r18, 0x10	; 16
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <vfprintf+0x27c>
    23b8:	20 e1       	ldi	r18, 0x10	; 16
    23ba:	32 e0       	ldi	r19, 0x02	; 2
    23bc:	f8 01       	movw	r30, r16
    23be:	b7 fe       	sbrs	r11, 7
    23c0:	07 c0       	rjmp	.+14     	; 0x23d0 <vfprintf+0x290>
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	0c 5f       	subi	r16, 0xFC	; 252
    23cc:	1f 4f       	sbci	r17, 0xFF	; 255
    23ce:	06 c0       	rjmp	.+12     	; 0x23dc <vfprintf+0x29c>
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 5f       	subi	r16, 0xFE	; 254
    23da:	1f 4f       	sbci	r17, 0xFF	; 255
    23dc:	a3 01       	movw	r20, r6
    23de:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__ultoa_invert>
    23e2:	88 2e       	mov	r8, r24
    23e4:	86 18       	sub	r8, r6
    23e6:	fb 2d       	mov	r31, r11
    23e8:	ff 77       	andi	r31, 0x7F	; 127
    23ea:	3f 2e       	mov	r3, r31
    23ec:	36 fe       	sbrs	r3, 6
    23ee:	0d c0       	rjmp	.+26     	; 0x240a <vfprintf+0x2ca>
    23f0:	23 2d       	mov	r18, r3
    23f2:	2e 7f       	andi	r18, 0xFE	; 254
    23f4:	a2 2e       	mov	r10, r18
    23f6:	89 14       	cp	r8, r9
    23f8:	58 f4       	brcc	.+22     	; 0x2410 <vfprintf+0x2d0>
    23fa:	34 fe       	sbrs	r3, 4
    23fc:	0b c0       	rjmp	.+22     	; 0x2414 <vfprintf+0x2d4>
    23fe:	32 fc       	sbrc	r3, 2
    2400:	09 c0       	rjmp	.+18     	; 0x2414 <vfprintf+0x2d4>
    2402:	83 2d       	mov	r24, r3
    2404:	8e 7e       	andi	r24, 0xEE	; 238
    2406:	a8 2e       	mov	r10, r24
    2408:	05 c0       	rjmp	.+10     	; 0x2414 <vfprintf+0x2d4>
    240a:	b8 2c       	mov	r11, r8
    240c:	a3 2c       	mov	r10, r3
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <vfprintf+0x2d6>
    2410:	b8 2c       	mov	r11, r8
    2412:	01 c0       	rjmp	.+2      	; 0x2416 <vfprintf+0x2d6>
    2414:	b9 2c       	mov	r11, r9
    2416:	a4 fe       	sbrs	r10, 4
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <vfprintf+0x2f8>
    241a:	fe 01       	movw	r30, r28
    241c:	e8 0d       	add	r30, r8
    241e:	f1 1d       	adc	r31, r1
    2420:	80 81       	ld	r24, Z
    2422:	80 33       	cpi	r24, 0x30	; 48
    2424:	21 f4       	brne	.+8      	; 0x242e <vfprintf+0x2ee>
    2426:	9a 2d       	mov	r25, r10
    2428:	99 7e       	andi	r25, 0xE9	; 233
    242a:	a9 2e       	mov	r10, r25
    242c:	09 c0       	rjmp	.+18     	; 0x2440 <vfprintf+0x300>
    242e:	a2 fe       	sbrs	r10, 2
    2430:	06 c0       	rjmp	.+12     	; 0x243e <vfprintf+0x2fe>
    2432:	b3 94       	inc	r11
    2434:	b3 94       	inc	r11
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <vfprintf+0x300>
    2438:	8a 2d       	mov	r24, r10
    243a:	86 78       	andi	r24, 0x86	; 134
    243c:	09 f0       	breq	.+2      	; 0x2440 <vfprintf+0x300>
    243e:	b3 94       	inc	r11
    2440:	a3 fc       	sbrc	r10, 3
    2442:	11 c0       	rjmp	.+34     	; 0x2466 <vfprintf+0x326>
    2444:	a0 fe       	sbrs	r10, 0
    2446:	06 c0       	rjmp	.+12     	; 0x2454 <vfprintf+0x314>
    2448:	b2 14       	cp	r11, r2
    244a:	88 f4       	brcc	.+34     	; 0x246e <vfprintf+0x32e>
    244c:	28 0c       	add	r2, r8
    244e:	92 2c       	mov	r9, r2
    2450:	9b 18       	sub	r9, r11
    2452:	0e c0       	rjmp	.+28     	; 0x2470 <vfprintf+0x330>
    2454:	b2 14       	cp	r11, r2
    2456:	60 f4       	brcc	.+24     	; 0x2470 <vfprintf+0x330>
    2458:	b6 01       	movw	r22, r12
    245a:	80 e2       	ldi	r24, 0x20	; 32
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 97 12 	call	0x252e	; 0x252e <fputc>
    2462:	b3 94       	inc	r11
    2464:	f7 cf       	rjmp	.-18     	; 0x2454 <vfprintf+0x314>
    2466:	b2 14       	cp	r11, r2
    2468:	18 f4       	brcc	.+6      	; 0x2470 <vfprintf+0x330>
    246a:	2b 18       	sub	r2, r11
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <vfprintf+0x332>
    246e:	98 2c       	mov	r9, r8
    2470:	21 2c       	mov	r2, r1
    2472:	a4 fe       	sbrs	r10, 4
    2474:	10 c0       	rjmp	.+32     	; 0x2496 <vfprintf+0x356>
    2476:	b6 01       	movw	r22, r12
    2478:	80 e3       	ldi	r24, 0x30	; 48
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0e 94 97 12 	call	0x252e	; 0x252e <fputc>
    2480:	a2 fe       	sbrs	r10, 2
    2482:	17 c0       	rjmp	.+46     	; 0x24b2 <vfprintf+0x372>
    2484:	a1 fc       	sbrc	r10, 1
    2486:	03 c0       	rjmp	.+6      	; 0x248e <vfprintf+0x34e>
    2488:	88 e7       	ldi	r24, 0x78	; 120
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <vfprintf+0x352>
    248e:	88 e5       	ldi	r24, 0x58	; 88
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	b6 01       	movw	r22, r12
    2494:	0c c0       	rjmp	.+24     	; 0x24ae <vfprintf+0x36e>
    2496:	8a 2d       	mov	r24, r10
    2498:	86 78       	andi	r24, 0x86	; 134
    249a:	59 f0       	breq	.+22     	; 0x24b2 <vfprintf+0x372>
    249c:	a1 fe       	sbrs	r10, 1
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <vfprintf+0x364>
    24a0:	8b e2       	ldi	r24, 0x2B	; 43
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <vfprintf+0x366>
    24a4:	80 e2       	ldi	r24, 0x20	; 32
    24a6:	a7 fc       	sbrc	r10, 7
    24a8:	8d e2       	ldi	r24, 0x2D	; 45
    24aa:	b6 01       	movw	r22, r12
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 97 12 	call	0x252e	; 0x252e <fputc>
    24b2:	89 14       	cp	r8, r9
    24b4:	38 f4       	brcc	.+14     	; 0x24c4 <vfprintf+0x384>
    24b6:	b6 01       	movw	r22, r12
    24b8:	80 e3       	ldi	r24, 0x30	; 48
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 97 12 	call	0x252e	; 0x252e <fputc>
    24c0:	9a 94       	dec	r9
    24c2:	f7 cf       	rjmp	.-18     	; 0x24b2 <vfprintf+0x372>
    24c4:	8a 94       	dec	r8
    24c6:	f3 01       	movw	r30, r6
    24c8:	e8 0d       	add	r30, r8
    24ca:	f1 1d       	adc	r31, r1
    24cc:	80 81       	ld	r24, Z
    24ce:	b6 01       	movw	r22, r12
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 97 12 	call	0x252e	; 0x252e <fputc>
    24d6:	81 10       	cpse	r8, r1
    24d8:	f5 cf       	rjmp	.-22     	; 0x24c4 <vfprintf+0x384>
    24da:	22 20       	and	r2, r2
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <vfprintf+0x3a0>
    24de:	42 ce       	rjmp	.-892    	; 0x2164 <vfprintf+0x24>
    24e0:	b6 01       	movw	r22, r12
    24e2:	80 e2       	ldi	r24, 0x20	; 32
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 97 12 	call	0x252e	; 0x252e <fputc>
    24ea:	2a 94       	dec	r2
    24ec:	f6 cf       	rjmp	.-20     	; 0x24da <vfprintf+0x39a>
    24ee:	f6 01       	movw	r30, r12
    24f0:	86 81       	ldd	r24, Z+6	; 0x06
    24f2:	97 81       	ldd	r25, Z+7	; 0x07
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <vfprintf+0x3ba>
    24f6:	8f ef       	ldi	r24, 0xFF	; 255
    24f8:	9f ef       	ldi	r25, 0xFF	; 255
    24fa:	2b 96       	adiw	r28, 0x0b	; 11
    24fc:	e2 e1       	ldi	r30, 0x12	; 18
    24fe:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__>

00002502 <strnlen_P>:
    2502:	fc 01       	movw	r30, r24
    2504:	05 90       	lpm	r0, Z+
    2506:	61 50       	subi	r22, 0x01	; 1
    2508:	70 40       	sbci	r23, 0x00	; 0
    250a:	01 10       	cpse	r0, r1
    250c:	d8 f7       	brcc	.-10     	; 0x2504 <strnlen_P+0x2>
    250e:	80 95       	com	r24
    2510:	90 95       	com	r25
    2512:	8e 0f       	add	r24, r30
    2514:	9f 1f       	adc	r25, r31
    2516:	08 95       	ret

00002518 <strnlen>:
    2518:	fc 01       	movw	r30, r24
    251a:	61 50       	subi	r22, 0x01	; 1
    251c:	70 40       	sbci	r23, 0x00	; 0
    251e:	01 90       	ld	r0, Z+
    2520:	01 10       	cpse	r0, r1
    2522:	d8 f7       	brcc	.-10     	; 0x251a <strnlen+0x2>
    2524:	80 95       	com	r24
    2526:	90 95       	com	r25
    2528:	8e 0f       	add	r24, r30
    252a:	9f 1f       	adc	r25, r31
    252c:	08 95       	ret

0000252e <fputc>:
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	fb 01       	movw	r30, r22
    2538:	23 81       	ldd	r18, Z+3	; 0x03
    253a:	21 fd       	sbrc	r18, 1
    253c:	03 c0       	rjmp	.+6      	; 0x2544 <fputc+0x16>
    253e:	8f ef       	ldi	r24, 0xFF	; 255
    2540:	9f ef       	ldi	r25, 0xFF	; 255
    2542:	2c c0       	rjmp	.+88     	; 0x259c <fputc+0x6e>
    2544:	22 ff       	sbrs	r18, 2
    2546:	16 c0       	rjmp	.+44     	; 0x2574 <fputc+0x46>
    2548:	46 81       	ldd	r20, Z+6	; 0x06
    254a:	57 81       	ldd	r21, Z+7	; 0x07
    254c:	24 81       	ldd	r18, Z+4	; 0x04
    254e:	35 81       	ldd	r19, Z+5	; 0x05
    2550:	42 17       	cp	r20, r18
    2552:	53 07       	cpc	r21, r19
    2554:	44 f4       	brge	.+16     	; 0x2566 <fputc+0x38>
    2556:	a0 81       	ld	r26, Z
    2558:	b1 81       	ldd	r27, Z+1	; 0x01
    255a:	9d 01       	movw	r18, r26
    255c:	2f 5f       	subi	r18, 0xFF	; 255
    255e:	3f 4f       	sbci	r19, 0xFF	; 255
    2560:	31 83       	std	Z+1, r19	; 0x01
    2562:	20 83       	st	Z, r18
    2564:	8c 93       	st	X, r24
    2566:	26 81       	ldd	r18, Z+6	; 0x06
    2568:	37 81       	ldd	r19, Z+7	; 0x07
    256a:	2f 5f       	subi	r18, 0xFF	; 255
    256c:	3f 4f       	sbci	r19, 0xFF	; 255
    256e:	37 83       	std	Z+7, r19	; 0x07
    2570:	26 83       	std	Z+6, r18	; 0x06
    2572:	14 c0       	rjmp	.+40     	; 0x259c <fputc+0x6e>
    2574:	8b 01       	movw	r16, r22
    2576:	ec 01       	movw	r28, r24
    2578:	fb 01       	movw	r30, r22
    257a:	00 84       	ldd	r0, Z+8	; 0x08
    257c:	f1 85       	ldd	r31, Z+9	; 0x09
    257e:	e0 2d       	mov	r30, r0
    2580:	09 95       	icall
    2582:	89 2b       	or	r24, r25
    2584:	e1 f6       	brne	.-72     	; 0x253e <fputc+0x10>
    2586:	d8 01       	movw	r26, r16
    2588:	16 96       	adiw	r26, 0x06	; 6
    258a:	8d 91       	ld	r24, X+
    258c:	9c 91       	ld	r25, X
    258e:	17 97       	sbiw	r26, 0x07	; 7
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	17 96       	adiw	r26, 0x07	; 7
    2594:	9c 93       	st	X, r25
    2596:	8e 93       	st	-X, r24
    2598:	16 97       	sbiw	r26, 0x06	; 6
    259a:	ce 01       	movw	r24, r28
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	1f 91       	pop	r17
    25a2:	0f 91       	pop	r16
    25a4:	08 95       	ret

000025a6 <__ultoa_invert>:
    25a6:	fa 01       	movw	r30, r20
    25a8:	aa 27       	eor	r26, r26
    25aa:	28 30       	cpi	r18, 0x08	; 8
    25ac:	51 f1       	breq	.+84     	; 0x2602 <__ultoa_invert+0x5c>
    25ae:	20 31       	cpi	r18, 0x10	; 16
    25b0:	81 f1       	breq	.+96     	; 0x2612 <__ultoa_invert+0x6c>
    25b2:	e8 94       	clt
    25b4:	6f 93       	push	r22
    25b6:	6e 7f       	andi	r22, 0xFE	; 254
    25b8:	6e 5f       	subi	r22, 0xFE	; 254
    25ba:	7f 4f       	sbci	r23, 0xFF	; 255
    25bc:	8f 4f       	sbci	r24, 0xFF	; 255
    25be:	9f 4f       	sbci	r25, 0xFF	; 255
    25c0:	af 4f       	sbci	r26, 0xFF	; 255
    25c2:	b1 e0       	ldi	r27, 0x01	; 1
    25c4:	3e d0       	rcall	.+124    	; 0x2642 <__ultoa_invert+0x9c>
    25c6:	b4 e0       	ldi	r27, 0x04	; 4
    25c8:	3c d0       	rcall	.+120    	; 0x2642 <__ultoa_invert+0x9c>
    25ca:	67 0f       	add	r22, r23
    25cc:	78 1f       	adc	r23, r24
    25ce:	89 1f       	adc	r24, r25
    25d0:	9a 1f       	adc	r25, r26
    25d2:	a1 1d       	adc	r26, r1
    25d4:	68 0f       	add	r22, r24
    25d6:	79 1f       	adc	r23, r25
    25d8:	8a 1f       	adc	r24, r26
    25da:	91 1d       	adc	r25, r1
    25dc:	a1 1d       	adc	r26, r1
    25de:	6a 0f       	add	r22, r26
    25e0:	71 1d       	adc	r23, r1
    25e2:	81 1d       	adc	r24, r1
    25e4:	91 1d       	adc	r25, r1
    25e6:	a1 1d       	adc	r26, r1
    25e8:	20 d0       	rcall	.+64     	; 0x262a <__ultoa_invert+0x84>
    25ea:	09 f4       	brne	.+2      	; 0x25ee <__ultoa_invert+0x48>
    25ec:	68 94       	set
    25ee:	3f 91       	pop	r19
    25f0:	2a e0       	ldi	r18, 0x0A	; 10
    25f2:	26 9f       	mul	r18, r22
    25f4:	11 24       	eor	r1, r1
    25f6:	30 19       	sub	r19, r0
    25f8:	30 5d       	subi	r19, 0xD0	; 208
    25fa:	31 93       	st	Z+, r19
    25fc:	de f6       	brtc	.-74     	; 0x25b4 <__ultoa_invert+0xe>
    25fe:	cf 01       	movw	r24, r30
    2600:	08 95       	ret
    2602:	46 2f       	mov	r20, r22
    2604:	47 70       	andi	r20, 0x07	; 7
    2606:	40 5d       	subi	r20, 0xD0	; 208
    2608:	41 93       	st	Z+, r20
    260a:	b3 e0       	ldi	r27, 0x03	; 3
    260c:	0f d0       	rcall	.+30     	; 0x262c <__ultoa_invert+0x86>
    260e:	c9 f7       	brne	.-14     	; 0x2602 <__ultoa_invert+0x5c>
    2610:	f6 cf       	rjmp	.-20     	; 0x25fe <__ultoa_invert+0x58>
    2612:	46 2f       	mov	r20, r22
    2614:	4f 70       	andi	r20, 0x0F	; 15
    2616:	40 5d       	subi	r20, 0xD0	; 208
    2618:	4a 33       	cpi	r20, 0x3A	; 58
    261a:	18 f0       	brcs	.+6      	; 0x2622 <__ultoa_invert+0x7c>
    261c:	49 5d       	subi	r20, 0xD9	; 217
    261e:	31 fd       	sbrc	r19, 1
    2620:	40 52       	subi	r20, 0x20	; 32
    2622:	41 93       	st	Z+, r20
    2624:	02 d0       	rcall	.+4      	; 0x262a <__ultoa_invert+0x84>
    2626:	a9 f7       	brne	.-22     	; 0x2612 <__ultoa_invert+0x6c>
    2628:	ea cf       	rjmp	.-44     	; 0x25fe <__ultoa_invert+0x58>
    262a:	b4 e0       	ldi	r27, 0x04	; 4
    262c:	a6 95       	lsr	r26
    262e:	97 95       	ror	r25
    2630:	87 95       	ror	r24
    2632:	77 95       	ror	r23
    2634:	67 95       	ror	r22
    2636:	ba 95       	dec	r27
    2638:	c9 f7       	brne	.-14     	; 0x262c <__ultoa_invert+0x86>
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	61 05       	cpc	r22, r1
    263e:	71 05       	cpc	r23, r1
    2640:	08 95       	ret
    2642:	9b 01       	movw	r18, r22
    2644:	ac 01       	movw	r20, r24
    2646:	0a 2e       	mov	r0, r26
    2648:	06 94       	lsr	r0
    264a:	57 95       	ror	r21
    264c:	47 95       	ror	r20
    264e:	37 95       	ror	r19
    2650:	27 95       	ror	r18
    2652:	ba 95       	dec	r27
    2654:	c9 f7       	brne	.-14     	; 0x2648 <__ultoa_invert+0xa2>
    2656:	62 0f       	add	r22, r18
    2658:	73 1f       	adc	r23, r19
    265a:	84 1f       	adc	r24, r20
    265c:	95 1f       	adc	r25, r21
    265e:	a0 1d       	adc	r26, r0
    2660:	08 95       	ret

00002662 <eeprom_read_byte>:
    2662:	f9 99       	sbic	0x1f, 1	; 31
    2664:	fe cf       	rjmp	.-4      	; 0x2662 <eeprom_read_byte>
    2666:	92 bd       	out	0x22, r25	; 34
    2668:	81 bd       	out	0x21, r24	; 33
    266a:	f8 9a       	sbi	0x1f, 0	; 31
    266c:	99 27       	eor	r25, r25
    266e:	80 b5       	in	r24, 0x20	; 32
    2670:	08 95       	ret

00002672 <eeprom_read_word>:
    2672:	a8 e1       	ldi	r26, 0x18	; 24
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	42 e0       	ldi	r20, 0x02	; 2
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <eeprom_read_blraw>

0000267e <eeprom_write_byte>:
    267e:	26 2f       	mov	r18, r22

00002680 <eeprom_write_r18>:
    2680:	f9 99       	sbic	0x1f, 1	; 31
    2682:	fe cf       	rjmp	.-4      	; 0x2680 <eeprom_write_r18>
    2684:	1f ba       	out	0x1f, r1	; 31
    2686:	92 bd       	out	0x22, r25	; 34
    2688:	81 bd       	out	0x21, r24	; 33
    268a:	20 bd       	out	0x20, r18	; 32
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	fa 9a       	sbi	0x1f, 2	; 31
    2692:	f9 9a       	sbi	0x1f, 1	; 31
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	08 95       	ret

0000269a <eeprom_write_word>:
    269a:	0e 94 3f 13 	call	0x267e	; 0x267e <eeprom_write_byte>
    269e:	27 2f       	mov	r18, r23
    26a0:	0c 94 40 13 	jmp	0x2680	; 0x2680 <eeprom_write_r18>

000026a4 <eeprom_read_block>:
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22

000026a8 <eeprom_read_blraw>:
    26a8:	fc 01       	movw	r30, r24
    26aa:	f9 99       	sbic	0x1f, 1	; 31
    26ac:	fe cf       	rjmp	.-4      	; 0x26aa <eeprom_read_blraw+0x2>
    26ae:	06 c0       	rjmp	.+12     	; 0x26bc <eeprom_read_blraw+0x14>
    26b0:	f2 bd       	out	0x22, r31	; 34
    26b2:	e1 bd       	out	0x21, r30	; 33
    26b4:	f8 9a       	sbi	0x1f, 0	; 31
    26b6:	31 96       	adiw	r30, 0x01	; 1
    26b8:	00 b4       	in	r0, 0x20	; 32
    26ba:	0d 92       	st	X+, r0
    26bc:	41 50       	subi	r20, 0x01	; 1
    26be:	50 40       	sbci	r21, 0x00	; 0
    26c0:	b8 f7       	brcc	.-18     	; 0x26b0 <eeprom_read_blraw+0x8>
    26c2:	08 95       	ret

000026c4 <__prologue_saves__>:
    26c4:	2f 92       	push	r2
    26c6:	3f 92       	push	r3
    26c8:	4f 92       	push	r4
    26ca:	5f 92       	push	r5
    26cc:	6f 92       	push	r6
    26ce:	7f 92       	push	r7
    26d0:	8f 92       	push	r8
    26d2:	9f 92       	push	r9
    26d4:	af 92       	push	r10
    26d6:	bf 92       	push	r11
    26d8:	cf 92       	push	r12
    26da:	df 92       	push	r13
    26dc:	ef 92       	push	r14
    26de:	ff 92       	push	r15
    26e0:	0f 93       	push	r16
    26e2:	1f 93       	push	r17
    26e4:	cf 93       	push	r28
    26e6:	df 93       	push	r29
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	ca 1b       	sub	r28, r26
    26ee:	db 0b       	sbc	r29, r27
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	09 94       	ijmp

000026fc <__epilogue_restores__>:
    26fc:	2a 88       	ldd	r2, Y+18	; 0x12
    26fe:	39 88       	ldd	r3, Y+17	; 0x11
    2700:	48 88       	ldd	r4, Y+16	; 0x10
    2702:	5f 84       	ldd	r5, Y+15	; 0x0f
    2704:	6e 84       	ldd	r6, Y+14	; 0x0e
    2706:	7d 84       	ldd	r7, Y+13	; 0x0d
    2708:	8c 84       	ldd	r8, Y+12	; 0x0c
    270a:	9b 84       	ldd	r9, Y+11	; 0x0b
    270c:	aa 84       	ldd	r10, Y+10	; 0x0a
    270e:	b9 84       	ldd	r11, Y+9	; 0x09
    2710:	c8 84       	ldd	r12, Y+8	; 0x08
    2712:	df 80       	ldd	r13, Y+7	; 0x07
    2714:	ee 80       	ldd	r14, Y+6	; 0x06
    2716:	fd 80       	ldd	r15, Y+5	; 0x05
    2718:	0c 81       	ldd	r16, Y+4	; 0x04
    271a:	1b 81       	ldd	r17, Y+3	; 0x03
    271c:	aa 81       	ldd	r26, Y+2	; 0x02
    271e:	b9 81       	ldd	r27, Y+1	; 0x01
    2720:	ce 0f       	add	r28, r30
    2722:	d1 1d       	adc	r29, r1
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	ed 01       	movw	r28, r26
    2730:	08 95       	ret

00002732 <__do_global_dtors>:
    2732:	10 e0       	ldi	r17, 0x00	; 0
    2734:	c9 e3       	ldi	r28, 0x39	; 57
    2736:	d0 e0       	ldi	r29, 0x00	; 0
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <__do_global_dtors+0x10>
    273a:	fe 01       	movw	r30, r28
    273c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__tablejump2__>
    2740:	21 96       	adiw	r28, 0x01	; 1
    2742:	ca 33       	cpi	r28, 0x3A	; 58
    2744:	d1 07       	cpc	r29, r17
    2746:	c9 f7       	brne	.-14     	; 0x273a <__do_global_dtors+0x8>
    2748:	f8 94       	cli

0000274a <__stop_program>:
    274a:	ff cf       	rjmp	.-2      	; 0x274a <__stop_program>
