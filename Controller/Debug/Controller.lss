
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c6  00800100  0000252a  000025de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000252a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  008002c6  008002c6  000027a4  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000027a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000024  00000000  00000000  000027a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000001e  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  000027ea  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002848  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000628  00000000  00000000  00002888  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a3e2  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000031ad  00000000  00000000  0000d292  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002eb7  00000000  00000000  0001043f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fb0  00000000  00000000  000132f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d9d  00000000  00000000  000142a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000043d1  00000000  00000000  00017045  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  0001b416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__dtors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_14>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__vector_18>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	75 05       	cpc	r23, r5
      6a:	76 08       	sbc	r7, r6
      6c:	d4 08       	sbc	r13, r4
      6e:	ed 0d       	add	r30, r13

00000070 <__ctors_end>:
      70:	e5 08       	sbc	r14, r5

00000072 <__dtors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf ef       	ldi	r28, 0xFF	; 255
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	12 e0       	ldi	r17, 0x02	; 2
      80:	a0 e0       	ldi	r26, 0x00	; 0
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	ea e2       	ldi	r30, 0x2A	; 42
      86:	f5 e2       	ldi	r31, 0x25	; 37
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a6 3c       	cpi	r26, 0xC6	; 198
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	23 e0       	ldi	r18, 0x03	; 3
      96:	a6 ec       	ldi	r26, 0xC6	; 198
      98:	b2 e0       	ldi	r27, 0x02	; 2
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	ac 3f       	cpi	r26, 0xFC	; 252
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>

000000a4 <__do_global_ctors>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	c8 e3       	ldi	r28, 0x38	; 56
      a8:	d0 e0       	ldi	r29, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_global_ctors+0x10>
      ac:	21 97       	sbiw	r28, 0x01	; 1
      ae:	fe 01       	movw	r30, r28
      b0:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__tablejump2__>
      b4:	c4 33       	cpi	r28, 0x34	; 52
      b6:	d1 07       	cpc	r29, r17
      b8:	c9 f7       	brne	.-14     	; 0xac <__do_global_ctors+0x8>
      ba:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
      be:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__do_global_dtors>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <i2c_delay_T2>:
	...
nop
nop
nop
nop
nop
nop
     10a:	00 00       	nop
	ret          ; 3   "
     10c:	08 95       	ret

0000010e <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     10e:	3d 98       	cbi	0x07, 5	; 7
	cbi SCL_DDR,SCL		;release SCL
     110:	3c 98       	cbi	0x07, 4	; 7
	cbi SDA_OUT,SDA
     112:	45 98       	cbi	0x08, 5	; 8
	cbi SCL_OUT,SCL
     114:	44 98       	cbi	0x08, 4	; 8
	ret
     116:	08 95       	ret

00000118 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     118:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     11a:	d5 df       	rcall	.-86     	; 0xc6 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     11c:	1d d0       	rcall	.+58     	; 0x158 <i2c_write>
	ret
     11e:	08 95       	ret

00000120 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     120:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     122:	d1 df       	rcall	.-94     	; 0xc6 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     124:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     126:	cf df       	rcall	.-98     	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     128:	3c 98       	cbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     12a:	cd df       	rcall	.-102    	; 0xc6 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     12c:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay	T/2
     12e:	cb df       	rcall	.-106    	; 0xc6 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     130:	13 d0       	rcall	.+38     	; 0x158 <i2c_write>
	ret
     132:	08 95       	ret

00000134 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     134:	08 2e       	mov	r0, r24

00000136 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     136:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     138:	c6 df       	rcall	.-116    	; 0xc6 <i2c_delay_T2>
	mov	r24,__tmp_reg__
     13a:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     13c:	0d d0       	rcall	.+26     	; 0x158 <i2c_write>
	tst	r24		;if device not busy -> done
     13e:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     140:	11 f0       	breq	.+4      	; 0x146 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     142:	02 d0       	rcall	.+4      	; 0x148 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     144:	f8 cf       	rjmp	.-16     	; 0x136 <i2c_start_wait1>

00000146 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     146:	08 95       	ret

00000148 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     148:	3c 9a       	sbi	0x07, 4	; 7
	sbi	SDA_DDR,SDA	;force SDA low
     14a:	3d 9a       	sbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     14c:	bc df       	rcall	.-136    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     14e:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     150:	ba df       	rcall	.-140    	; 0xc6 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     152:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     154:	b8 df       	rcall	.-144    	; 0xc6 <i2c_delay_T2>
	ret
     156:	08 95       	ret

00000158 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     158:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     15a:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     15c:	01 c0       	rjmp	.+2      	; 0x160 <i2c_write_first>

0000015e <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     15e:	88 0f       	add	r24, r24

00000160 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     160:	59 f0       	breq	.+22     	; 0x178 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     162:	3c 9a       	sbi	0x07, 4	; 7
	brcc	i2c_write_low
     164:	18 f4       	brcc	.+6      	; 0x16c <i2c_write_low>
	nop
     166:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     168:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16a:	02 c0       	rjmp	.+4      	; 0x170 <i2c_write_high>

0000016c <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     16c:	3d 9a       	sbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16e:	00 c0       	rjmp	.+0      	; 0x170 <i2c_write_high>

00000170 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     170:	aa df       	rcall	.-172    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     172:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     174:	a8 df       	rcall	.-176    	; 0xc6 <i2c_delay_T2>
	rjmp	i2c_write_bit
     176:	f3 cf       	rjmp	.-26     	; 0x15e <i2c_write_bit>

00000178 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     178:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA
     17a:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     17c:	a4 df       	rcall	.-184    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     17e:	3c 98       	cbi	0x07, 4	; 7

00000180 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     180:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_ack_wait
     182:	fe cf       	rjmp	.-4      	; 0x180 <i2c_ack_wait>
	
	clr	r24		;return 0
     184:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     186:	35 99       	sbic	0x06, 5	; 6
	ldi	r24,1
     188:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     18a:	9d df       	rcall	.-198    	; 0xc6 <i2c_delay_T2>
	clr	r25
     18c:	99 27       	eor	r25, r25
	ret
     18e:	08 95       	ret

00000190 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     190:	88 27       	eor	r24, r24
	rjmp	i2c_read
     192:	01 c0       	rjmp	.+2      	; 0x196 <i2c_read>

00000194 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     194:	81 e0       	ldi	r24, 0x01	; 1

00000196 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     196:	71 e0       	ldi	r23, 0x01	; 1

00000198 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     198:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     19a:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     19c:	94 df       	rcall	.-216    	; 0xc6 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     19e:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     1a0:	92 df       	rcall	.-220    	; 0xc6 <i2c_delay_T2>

000001a2 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     1a2:	34 9b       	sbis	0x06, 4	; 6
    rjmp	i2c_read_stretch
     1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <i2c_read_stretch>
    	
	clc			;clear carry flag
     1a6:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     1a8:	35 99       	sbic	0x06, 5	; 6
	sec			;  set carry flag
     1aa:	08 94       	sec
	
	rol	r23		;store bit
     1ac:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     1ae:	a0 f7       	brcc	.-24     	; 0x198 <i2c_read_bit>

000001b0 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     1b0:	3c 9a       	sbi	0x07, 4	; 7
	cpi	r24,1
     1b2:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     1b4:	11 f0       	breq	.+4      	; 0x1ba <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     1b6:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_put_ack_high
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <i2c_put_ack_high>

000001ba <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     1ba:	3d 9a       	sbi	0x07, 5	; 7

000001bc <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     1bc:	84 df       	rcall	.-248    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     1be:	3c 98       	cbi	0x07, 4	; 7

000001c0 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     1c0:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_put_ack_wait
     1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     1c4:	80 df       	rcall	.-256    	; 0xc6 <i2c_delay_T2>
	mov	r24,r23
     1c6:	87 2f       	mov	r24, r23
	clr	r25
     1c8:	99 27       	eor	r25, r25
	ret
     1ca:	08 95       	ret

000001cc <_ZN22CommunicationExceptionC1EPKc>:


#include "CommunicationException.h"

// default constructor
CommunicationException::CommunicationException(const char* deviceName):deviceName(deviceName)
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	ec 01       	movw	r28, r24
     1d6:	8b 01       	movw	r16, r22
     1d8:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN9ExceptionC1Ev>
     1dc:	19 83       	std	Y+1, r17	; 0x01
     1de:	08 83       	st	Y, r16
{
} //Outputs
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	1f 91       	pop	r17
     1e6:	0f 91       	pop	r16
     1e8:	08 95       	ret

000001ea <main>:
#include "i2cmaster.h"
#include "TC654.h"
#include "Fans.h"
using namespace std;
int main(void)
{
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	e9 97       	sbiw	r28, 0x39	; 57
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	f8 94       	cli
     1f8:	de bf       	out	0x3e, r29	; 62
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	cd bf       	out	0x3d, r28	; 61
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	a8 95       	wdr
     204:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     208:	88 61       	ori	r24, 0x18	; 24
     20a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     20e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     212:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	i2c_init();
     214:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_init>
	Outputs::Initialize();
     218:	0e 94 bc 04 	call	0x978	; 0x978 <_ZN7Outputs10InitializeEv>
	//Stopwatch stopWatch = Stopwatch();
	UART& uart = UART::GetInstance();
     21c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4UART11GetInstanceEv>
     220:	3c 01       	movw	r6, r24
	Settings& settings=Settings::GetInstance();
     222:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN8Settings11GetInstanceEv>
     226:	8c 01       	movw	r16, r24
	TC654 tc654 = TC654(0x01, 0x01);
     228:	41 e0       	ldi	r20, 0x01	; 1
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	ce 01       	movw	r24, r28
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN5TC654C1Ecc>
	IGetFanInfo* iGetFanInfos[]={tc654.GetIGetFan1Info(), tc654.GetIGetFan2Info()};
     234:	ce 01       	movw	r24, r28
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <_ZN5TC65415GetIGetFan1InfoEv>
     23c:	9b ab       	std	Y+51, r25	; 0x33
     23e:	8a ab       	std	Y+50, r24	; 0x32
     240:	ce 01       	movw	r24, r28
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_ZN5TC65415GetIGetFan2InfoEv>
     248:	9d ab       	std	Y+53, r25	; 0x35
     24a:	8c ab       	std	Y+52, r24	; 0x34
	Fans& fans = Fans::GetInstance();
     24c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN4Fans11GetInstanceEv>
	fans.SetInterfaces(iGetFanInfos, 0x02, &settings);
     250:	98 01       	movw	r18, r16
     252:	28 5f       	subi	r18, 0xF8	; 248
     254:	3f 4f       	sbci	r19, 0xFF	; 255
     256:	42 e0       	ldi	r20, 0x02	; 2
     258:	be 01       	movw	r22, r28
     25a:	6e 5c       	subi	r22, 0xCE	; 206
     25c:	7f 4f       	sbci	r23, 0xFF	; 255
     25e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>
	LM75* lm75_7= new LM75(0x07, "lm75_7");
     262:	8c e0       	ldi	r24, 0x0C	; 12
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     26a:	4c 01       	movw	r8, r24
     26c:	46 e0       	ldi	r20, 0x06	; 6
     26e:	51 e0       	ldi	r21, 0x01	; 1
     270:	67 e0       	ldi	r22, 0x07	; 7
     272:	0e 94 29 04 	call	0x852	; 0x852 <_ZN4LM75C1EcPc>
	LM75* lm75_6= new LM75(0x06, "lm75_6");
     276:	8c e0       	ldi	r24, 0x0C	; 12
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     27e:	5c 01       	movw	r10, r24
     280:	4d e0       	ldi	r20, 0x0D	; 13
     282:	51 e0       	ldi	r21, 0x01	; 1
     284:	66 e0       	ldi	r22, 0x06	; 6
     286:	0e 94 29 04 	call	0x852	; 0x852 <_ZN4LM75C1EcPc>
	IGetTemperatureInfo* lm75s[] = {lm75_7, lm75_6};
     28a:	9f aa       	std	Y+55, r9	; 0x37
     28c:	8e aa       	std	Y+54, r8	; 0x36
     28e:	b9 ae       	std	Y+57, r11	; 0x39
     290:	a8 ae       	std	Y+56, r10	; 0x38
	Temperatures& temperatures=Temperatures::GetInstance();
     292:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN12Temperatures11GetInstanceEv>
     296:	5c 01       	movw	r10, r24
	temperatures.SetInterfaces(lm75s, 0x2);
     298:	42 e0       	ldi	r20, 0x02	; 2
     29a:	be 01       	movw	r22, r28
     29c:	6a 5c       	subi	r22, 0xCA	; 202
     29e:	7f 4f       	sbci	r23, 0xFF	; 255
     2a0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>
	Leds::Main::SetGreen();		
     2a4:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN4Leds4Main8SetGreenEv>
	Endpoint* endpoint = new Endpoint(&uart, &uart, &settings, &settings, &settings, &settings, &temperatures);
     2a8:	80 e1       	ldi	r24, 0x10	; 16
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     2b0:	4c 01       	movw	r8, r24
     2b2:	68 01       	movw	r12, r16
     2b4:	84 e0       	ldi	r24, 0x04	; 4
     2b6:	c8 0e       	add	r12, r24
     2b8:	d1 1c       	adc	r13, r1
     2ba:	78 01       	movw	r14, r16
     2bc:	86 e0       	ldi	r24, 0x06	; 6
     2be:	e8 0e       	add	r14, r24
     2c0:	f1 1c       	adc	r15, r1
     2c2:	98 01       	movw	r18, r16
     2c4:	2e 5f       	subi	r18, 0xFE	; 254
     2c6:	3f 4f       	sbci	r19, 0xFF	; 255
     2c8:	b3 01       	movw	r22, r6
     2ca:	6e 5f       	subi	r22, 0xFE	; 254
     2cc:	7f 4f       	sbci	r23, 0xFF	; 255
     2ce:	a3 01       	movw	r20, r6
     2d0:	c4 01       	movw	r24, r8
     2d2:	0e 94 6f 01 	call	0x2de	; 0x2de <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperatures>
	while(1)
	{
	    endpoint->Run();
     2d6:	c4 01       	movw	r24, r8
     2d8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN8Endpoint3RunEv>
     2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <main+0xec>

000002de <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperatures>:
#include "Leds.h"
#include "Endpoint.h"
#include "UART.h"
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures){
     2de:	af 92       	push	r10
     2e0:	bf 92       	push	r11
     2e2:	cf 92       	push	r12
     2e4:	df 92       	push	r13
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	fc 01       	movw	r30, r24
     2f0:	71 83       	std	Z+1, r23	; 0x01
     2f2:	60 83       	st	Z, r22
     2f4:	53 83       	std	Z+3, r21	; 0x03
     2f6:	42 83       	std	Z+2, r20	; 0x02
     2f8:	35 83       	std	Z+5, r19	; 0x05
     2fa:	24 83       	std	Z+4, r18	; 0x04
     2fc:	17 83       	std	Z+7, r17	; 0x07
     2fe:	06 83       	std	Z+6, r16	; 0x06
     300:	f1 86       	std	Z+9, r15	; 0x09
     302:	e0 86       	std	Z+8, r14	; 0x08
     304:	d3 86       	std	Z+11, r13	; 0x0b
     306:	c2 86       	std	Z+10, r12	; 0x0a
     308:	b5 86       	std	Z+13, r11	; 0x0d
     30a:	a4 86       	std	Z+12, r10	; 0x0c
	
}
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	bf 90       	pop	r11
     31a:	af 90       	pop	r10
     31c:	08 95       	ret

0000031e <_ZN8Endpoint8GetPowerEv>:
		}
		delete messages;
	}
}

void Endpoint::GetPower(){
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	6e 97       	sbiw	r28, 0x1e	; 30
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	de bf       	out	0x3e, r29	; 62
     336:	0f be       	out	0x3f, r0	; 63
     338:	cd bf       	out	0x3d, r28	; 61
     33a:	7c 01       	movw	r14, r24
	uint16_t power = iGetPower->GetPower();
     33c:	dc 01       	movw	r26, r24
     33e:	1a 96       	adiw	r26, 0x0a	; 10
     340:	8d 91       	ld	r24, X+
     342:	9c 91       	ld	r25, X
     344:	1b 97       	sbiw	r26, 0x0b	; 11
     346:	dc 01       	movw	r26, r24
     348:	ed 91       	ld	r30, X+
     34a:	fc 91       	ld	r31, X
     34c:	01 90       	ld	r0, Z+
     34e:	f0 81       	ld	r31, Z
     350:	e0 2d       	mov	r30, r0
     352:	09 95       	icall
	char buf[30];
	sprintf(buf,"{\"type\":\"power\",\"power\":%04d}",power);
     354:	9f 93       	push	r25
     356:	8f 93       	push	r24
     358:	84 e1       	ldi	r24, 0x14	; 20
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	9f 93       	push	r25
     35e:	8f 93       	push	r24
     360:	8e 01       	movw	r16, r28
     362:	0f 5f       	subi	r16, 0xFF	; 255
     364:	1f 4f       	sbci	r17, 0xFF	; 255
     366:	1f 93       	push	r17
     368:	0f 93       	push	r16
     36a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <sprintf>
	iSendMessage->SendMessage(buf, 29);
     36e:	f7 01       	movw	r30, r14
     370:	82 81       	ldd	r24, Z+2	; 0x02
     372:	93 81       	ldd	r25, Z+3	; 0x03
     374:	dc 01       	movw	r26, r24
     376:	ed 91       	ld	r30, X+
     378:	fc 91       	ld	r31, X
     37a:	01 90       	ld	r0, Z+
     37c:	f0 81       	ld	r31, Z
     37e:	e0 2d       	mov	r30, r0
     380:	4d e1       	ldi	r20, 0x1D	; 29
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	b8 01       	movw	r22, r16
     386:	09 95       	icall
}
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	6e 96       	adiw	r28, 0x1e	; 30
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	08 95       	ret

000003ae <_ZN8Endpoint17GetTemperatureMaxEv>:
void Endpoint::GetTemperatureMax(){
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	e1 97       	sbiw	r28, 0x31	; 49
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	7c 01       	movw	r14, r24
	uint8_t temperatureMax = iGetTemperatureMax->GetTemperatureMax();
     3cc:	dc 01       	movw	r26, r24
     3ce:	16 96       	adiw	r26, 0x06	; 6
     3d0:	8d 91       	ld	r24, X+
     3d2:	9c 91       	ld	r25, X
     3d4:	17 97       	sbiw	r26, 0x07	; 7
     3d6:	dc 01       	movw	r26, r24
     3d8:	ed 91       	ld	r30, X+
     3da:	fc 91       	ld	r31, X
     3dc:	01 90       	ld	r0, Z+
     3de:	f0 81       	ld	r31, Z
     3e0:	e0 2d       	mov	r30, r0
     3e2:	09 95       	icall
	char buf[49];
	sprintf(buf,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}",temperatureMax);
     3e4:	1f 92       	push	r1
     3e6:	8f 93       	push	r24
     3e8:	82 e3       	ldi	r24, 0x32	; 50
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	9f 93       	push	r25
     3ee:	8f 93       	push	r24
     3f0:	8e 01       	movw	r16, r28
     3f2:	0f 5f       	subi	r16, 0xFF	; 255
     3f4:	1f 4f       	sbci	r17, 0xFF	; 255
     3f6:	1f 93       	push	r17
     3f8:	0f 93       	push	r16
     3fa:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <sprintf>
iSendMessage->SendMessage(buf, 48);}
     3fe:	f7 01       	movw	r30, r14
     400:	82 81       	ldd	r24, Z+2	; 0x02
     402:	93 81       	ldd	r25, Z+3	; 0x03
     404:	dc 01       	movw	r26, r24
     406:	ed 91       	ld	r30, X+
     408:	fc 91       	ld	r31, X
     40a:	01 90       	ld	r0, Z+
     40c:	f0 81       	ld	r31, Z
     40e:	e0 2d       	mov	r30, r0
     410:	40 e3       	ldi	r20, 0x30	; 48
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	b8 01       	movw	r22, r16
     416:	09 95       	icall
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	e1 96       	adiw	r28, 0x31	; 49
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	08 95       	ret

0000043e <_ZN8Endpoint17GetMaxTemperatureEv>:

void Endpoint::GetMaxTemperature(){
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	ae 97       	sbiw	r28, 0x2e	; 46
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	8c 01       	movw	r16, r24
	bool successful=true;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t temperature = iTemperatures->GetMaxTemperature(successful);
     460:	d8 01       	movw	r26, r16
     462:	1c 96       	adiw	r26, 0x0c	; 12
     464:	8d 91       	ld	r24, X+
     466:	9c 91       	ld	r25, X
     468:	1d 97       	sbiw	r26, 0x0d	; 13
     46a:	dc 01       	movw	r26, r24
     46c:	ed 91       	ld	r30, X+
     46e:	fc 91       	ld	r31, X
     470:	01 90       	ld	r0, Z+
     472:	f0 81       	ld	r31, Z
     474:	e0 2d       	mov	r30, r0
     476:	be 01       	movw	r22, r28
     478:	6f 5f       	subi	r22, 0xFF	; 255
     47a:	7f 4f       	sbci	r23, 0xFF	; 255
     47c:	09 95       	icall
     47e:	f8 2e       	mov	r15, r24
	if(successful){
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	88 23       	and	r24, r24
     484:	19 f1       	breq	.+70     	; 0x4cc <_ZN8Endpoint17GetMaxTemperatureEv+0x8e>
		Leds::Main::SetRed();
     486:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN4Leds4Main6SetRedEv>
		char buf[45];
		sprintf(buf,"{\"type\":\"max_temperature\",\"temperature\":%03d}",temperature);
     48a:	1f 92       	push	r1
     48c:	ff 92       	push	r15
     48e:	84 e6       	ldi	r24, 0x64	; 100
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	7e 01       	movw	r14, r28
     498:	b2 e0       	ldi	r27, 0x02	; 2
     49a:	eb 0e       	add	r14, r27
     49c:	f1 1c       	adc	r15, r1
     49e:	ff 92       	push	r15
     4a0:	ef 92       	push	r14
     4a2:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <sprintf>
     4a6:	f8 01       	movw	r30, r16
     4a8:	82 81       	ldd	r24, Z+2	; 0x02
     4aa:	93 81       	ldd	r25, Z+3	; 0x03
     4ac:	dc 01       	movw	r26, r24
     4ae:	ed 91       	ld	r30, X+
     4b0:	fc 91       	ld	r31, X
     4b2:	01 90       	ld	r0, Z+
     4b4:	f0 81       	ld	r31, Z
     4b6:	e0 2d       	mov	r30, r0
     4b8:	4c e2       	ldi	r20, 0x2C	; 44
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	b7 01       	movw	r22, r14
     4be:	09 95       	icall
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	ae 96       	adiw	r28, 0x2e	; 46
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	08 95       	ret

000004e6 <_ZN8Endpoint3RunEv>:
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures){
	
}
void Endpoint::Run(){
     4e6:	8f 92       	push	r8
     4e8:	9f 92       	push	r9
     4ea:	af 92       	push	r10
     4ec:	bf 92       	push	r11
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	c0 5c       	subi	r28, 0xC0	; 192
     504:	d1 40       	sbci	r29, 0x01	; 1
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	6c 01       	movw	r12, r24
	Messages* messages = iGetMessages->GetMessages();
     512:	dc 01       	movw	r26, r24
     514:	8d 91       	ld	r24, X+
     516:	9c 91       	ld	r25, X
     518:	dc 01       	movw	r26, r24
     51a:	ed 91       	ld	r30, X+
     51c:	fc 91       	ld	r31, X
     51e:	01 90       	ld	r0, Z+
     520:	f0 81       	ld	r31, Z
     522:	e0 2d       	mov	r30, r0
     524:	09 95       	icall
     526:	7c 01       	movw	r14, r24
	if(messages!=NULL){
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	09 f4       	brne	.+2      	; 0x52e <_ZN8Endpoint3RunEv+0x48>
     52c:	e2 c0       	rjmp	.+452    	; 0x6f2 <_ZN8Endpoint3RunEv+0x20c>
		if(messages->length>0)
     52e:	fc 01       	movw	r30, r24
     530:	82 81       	ldd	r24, Z+2	; 0x02
     532:	93 81       	ldd	r25, Z+3	; 0x03
     534:	18 16       	cp	r1, r24
     536:	19 06       	cpc	r1, r25
     538:	0c f0       	brlt	.+2      	; 0x53c <_ZN8Endpoint3RunEv+0x56>
     53a:	d5 c0       	rjmp	.+426    	; 0x6e6 <_ZN8Endpoint3RunEv+0x200>
		{
			Leds::Main::SetBlue();
     53c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN4Leds4Main7SetBlueEv>
			for(int i=0; i<messages->length; i++){
     540:	d7 01       	movw	r26, r14
     542:	12 96       	adiw	r26, 0x02	; 2
     544:	8d 91       	ld	r24, X+
     546:	9c 91       	ld	r25, X
     548:	13 97       	sbiw	r26, 0x03	; 3
     54a:	18 16       	cp	r1, r24
     54c:	19 06       	cpc	r1, r25
     54e:	0c f0       	brlt	.+2      	; 0x552 <_ZN8Endpoint3RunEv+0x6c>
     550:	ca c0       	rjmp	.+404    	; 0x6e6 <_ZN8Endpoint3RunEv+0x200>
     552:	00 e0       	ldi	r16, 0x00	; 0
     554:	10 e0       	ldi	r17, 0x00	; 0
				Message* message = messages->messages[i];
     556:	d7 01       	movw	r26, r14
     558:	ed 91       	ld	r30, X+
     55a:	fc 91       	ld	r31, X
     55c:	c8 01       	movw	r24, r16
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	e8 0f       	add	r30, r24
     564:	f9 1f       	adc	r31, r25
     566:	01 90       	ld	r0, Z+
     568:	f0 81       	ld	r31, Z
     56a:	e0 2d       	mov	r30, r0
				json_t pool[64];
				json_t const* root = json_create( (char*)message->buffer, pool, message->length );
     56c:	42 81       	ldd	r20, Z+2	; 0x02
     56e:	53 81       	ldd	r21, Z+3	; 0x03
     570:	be 01       	movw	r22, r28
     572:	6f 5f       	subi	r22, 0xFF	; 255
     574:	7f 4f       	sbci	r23, 0xFF	; 255
     576:	80 81       	ld	r24, Z
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	0e 94 13 0a 	call	0x1426	; 0x1426 <json_create>
     57e:	5c 01       	movw	r10, r24
				json_t const* jObjectType = json_getProperty( root, "type" );
     580:	62 e9       	ldi	r22, 0x92	; 146
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	0e 94 ee 09 	call	0x13dc	; 0x13dc <json_getProperty>
				if ( jObjectType && JSON_TEXT == json_getType(  jObjectType ) ) {
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	09 f4       	brne	.+2      	; 0x58e <_ZN8Endpoint3RunEv+0xa8>
     58c:	a1 c0       	rjmp	.+322    	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
     58e:	fc 01       	movw	r30, r24
     590:	26 81       	ldd	r18, Z+6	; 0x06
     592:	22 30       	cpi	r18, 0x02	; 2
     594:	09 f0       	breq	.+2      	; 0x598 <_ZN8Endpoint3RunEv+0xb2>
     596:	9c c0       	rjmp	.+312    	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
/** Get the value of a json property.
  * The type of property cannot be JSON_OBJ or JSON_ARRAY.
  * @param json A valid handler of a json property.
  * @return Pointer to null-terminated string with the value. */
static inline char const* json_getValue( json_t const* property ) {
    return property->u.value;
     598:	84 80       	ldd	r8, Z+4	; 0x04
     59a:	95 80       	ldd	r9, Z+5	; 0x05
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
     59c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4UART11GetInstanceEv>
     5a0:	f4 01       	movw	r30, r8
     5a2:	01 90       	ld	r0, Z+
     5a4:	00 20       	and	r0, r0
     5a6:	e9 f7       	brne	.-6      	; 0x5a2 <_ZN8Endpoint3RunEv+0xbc>
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	af 01       	movw	r20, r30
     5ac:	48 19       	sub	r20, r8
     5ae:	59 09       	sbc	r21, r9
     5b0:	dc 01       	movw	r26, r24
     5b2:	ed 91       	ld	r30, X+
     5b4:	fc 91       	ld	r31, X
     5b6:	01 90       	ld	r0, Z+
     5b8:	f0 81       	ld	r31, Z
     5ba:	e0 2d       	mov	r30, r0
     5bc:	b4 01       	movw	r22, r8
     5be:	09 95       	icall
					if(strcmp(type, "system_check")==0){
     5c0:	67 e9       	ldi	r22, 0x97	; 151
     5c2:	71 e0       	ldi	r23, 0x01	; 1
     5c4:	c4 01       	movw	r24, r8
     5c6:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
     5ca:	89 2b       	or	r24, r25
     5cc:	59 f4       	brne	.+22     	; 0x5e4 <_ZN8Endpoint3RunEv+0xfe>
						iSystemCheck->Check();
     5ce:	f6 01       	movw	r30, r12
     5d0:	86 85       	ldd	r24, Z+14	; 0x0e
     5d2:	97 85       	ldd	r25, Z+15	; 0x0f
     5d4:	dc 01       	movw	r26, r24
     5d6:	ed 91       	ld	r30, X+
     5d8:	fc 91       	ld	r31, X
     5da:	01 90       	ld	r0, Z+
     5dc:	f0 81       	ld	r31, Z
     5de:	e0 2d       	mov	r30, r0
     5e0:	09 95       	icall
     5e2:	76 c0       	rjmp	.+236    	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
						}else{
						if(strcmp(type,"run")==0){
     5e4:	64 ea       	ldi	r22, 0xA4	; 164
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	c4 01       	movw	r24, r8
     5ea:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
     5ee:	89 2b       	or	r24, r25
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <_ZN8Endpoint3RunEv+0x10e>
     5f2:	6e c0       	rjmp	.+220    	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
							
							}else{
							if(strcmp(type,"set_temperature_max")==0){
     5f4:	68 ea       	ldi	r22, 0xA8	; 168
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	c4 01       	movw	r24, r8
     5fa:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
     5fe:	89 2b       	or	r24, r25
     600:	f1 f4       	brne	.+60     	; 0x63e <_ZN8Endpoint3RunEv+0x158>
								json_t const* jObjectTemperatureMax = json_getProperty( root, "temperature_max" );
     602:	60 ec       	ldi	r22, 0xC0	; 192
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	c5 01       	movw	r24, r10
     608:	0e 94 ee 09 	call	0x13dc	; 0x13dc <json_getProperty>
								if ( jObjectTemperatureMax!=NULL && JSON_INTEGER == json_getType(  jObjectTemperatureMax ) ) {
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	09 f4       	brne	.+2      	; 0x612 <_ZN8Endpoint3RunEv+0x12c>
     610:	5f c0       	rjmp	.+190    	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
     612:	fc 01       	movw	r30, r24
     614:	26 81       	ldd	r18, Z+6	; 0x06
     616:	24 30       	cpi	r18, 0x04	; 4
     618:	09 f0       	breq	.+2      	; 0x61c <_ZN8Endpoint3RunEv+0x136>
     61a:	5a c0       	rjmp	.+180    	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
    return (int64_t)atol( property->u.value );
     61c:	84 81       	ldd	r24, Z+4	; 0x04
     61e:	95 81       	ldd	r25, Z+5	; 0x05
     620:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <atol>
									int temperatureMax = json_getInteger(jObjectTemperatureMax);
									iSetTemperatureMax->SetTemperatureMax(temperatureMax);
     624:	d6 01       	movw	r26, r12
     626:	14 96       	adiw	r26, 0x04	; 4
     628:	8d 91       	ld	r24, X+
     62a:	9c 91       	ld	r25, X
     62c:	15 97       	sbiw	r26, 0x05	; 5
     62e:	dc 01       	movw	r26, r24
     630:	ed 91       	ld	r30, X+
     632:	fc 91       	ld	r31, X
     634:	01 90       	ld	r0, Z+
     636:	f0 81       	ld	r31, Z
     638:	e0 2d       	mov	r30, r0
     63a:	09 95       	icall
     63c:	49 c0       	rjmp	.+146    	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
								}
								}else{
								if(strcmp(type,"get_temperature_max")==0){
     63e:	6c eb       	ldi	r22, 0xBC	; 188
     640:	71 e0       	ldi	r23, 0x01	; 1
     642:	c4 01       	movw	r24, r8
     644:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
     648:	89 2b       	or	r24, r25
     64a:	21 f4       	brne	.+8      	; 0x654 <_ZN8Endpoint3RunEv+0x16e>
									GetTemperatureMax();
     64c:	c6 01       	movw	r24, r12
     64e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN8Endpoint17GetTemperatureMaxEv>
     652:	3e c0       	rjmp	.+124    	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
									}else{
									if(strcmp(type,"set_power"  )==0){
     654:	60 ed       	ldi	r22, 0xD0	; 208
     656:	71 e0       	ldi	r23, 0x01	; 1
     658:	c4 01       	movw	r24, r8
     65a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
     65e:	89 2b       	or	r24, r25
     660:	d9 f4       	brne	.+54     	; 0x698 <_ZN8Endpoint3RunEv+0x1b2>
										json_t const* jObjectPower = json_getProperty( root, "power" );
     662:	6e ed       	ldi	r22, 0xDE	; 222
     664:	71 e0       	ldi	r23, 0x01	; 1
     666:	c5 01       	movw	r24, r10
     668:	0e 94 ee 09 	call	0x13dc	; 0x13dc <json_getProperty>
										if ( jObjectPower && JSON_INTEGER == json_getType(  jObjectPower ) ) {
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	81 f1       	breq	.+96     	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
     670:	fc 01       	movw	r30, r24
     672:	26 81       	ldd	r18, Z+6	; 0x06
     674:	24 30       	cpi	r18, 0x04	; 4
     676:	61 f5       	brne	.+88     	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
     678:	84 81       	ldd	r24, Z+4	; 0x04
     67a:	95 81       	ldd	r25, Z+5	; 0x05
     67c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <atol>
											int Power = json_getInteger(jObjectPower);
											iSetPower->SetPower(Power);
     680:	f6 01       	movw	r30, r12
     682:	a0 85       	ldd	r26, Z+8	; 0x08
     684:	b1 85       	ldd	r27, Z+9	; 0x09
     686:	ed 91       	ld	r30, X+
     688:	fc 91       	ld	r31, X
     68a:	11 97       	sbiw	r26, 0x01	; 1
     68c:	01 90       	ld	r0, Z+
     68e:	f0 81       	ld	r31, Z
     690:	e0 2d       	mov	r30, r0
     692:	cd 01       	movw	r24, r26
     694:	09 95       	icall
     696:	1c c0       	rjmp	.+56     	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
										}
										}else{
										if(strcmp(type,"get_power")==0){
     698:	6a ed       	ldi	r22, 0xDA	; 218
     69a:	71 e0       	ldi	r23, 0x01	; 1
     69c:	c4 01       	movw	r24, r8
     69e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
     6a2:	89 2b       	or	r24, r25
     6a4:	21 f4       	brne	.+8      	; 0x6ae <_ZN8Endpoint3RunEv+0x1c8>
											GetPower();
     6a6:	c6 01       	movw	r24, r12
     6a8:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN8Endpoint8GetPowerEv>
     6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
											}else{
											if(strcmp(type,"set_info_rate")==0){
     6ae:	64 ee       	ldi	r22, 0xE4	; 228
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	c4 01       	movw	r24, r8
     6b4:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
     6b8:	89 2b       	or	r24, r25
     6ba:	51 f0       	breq	.+20     	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>

												}else{
												if(strcmp(type, "get_max_temperature")==0 ){
     6bc:	62 ef       	ldi	r22, 0xF2	; 242
     6be:	71 e0       	ldi	r23, 0x01	; 1
     6c0:	c4 01       	movw	r24, r8
     6c2:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
     6c6:	89 2b       	or	r24, r25
     6c8:	19 f4       	brne	.+6      	; 0x6d0 <_ZN8Endpoint3RunEv+0x1ea>
													GetMaxTemperature();
     6ca:	c6 01       	movw	r24, r12
     6cc:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN8Endpoint17GetMaxTemperatureEv>
	Messages* messages = iGetMessages->GetMessages();
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetBlue();
			for(int i=0; i<messages->length; i++){
     6d0:	0f 5f       	subi	r16, 0xFF	; 255
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	d7 01       	movw	r26, r14
     6d6:	12 96       	adiw	r26, 0x02	; 2
     6d8:	8d 91       	ld	r24, X+
     6da:	9c 91       	ld	r25, X
     6dc:	13 97       	sbiw	r26, 0x03	; 3
     6de:	08 17       	cp	r16, r24
     6e0:	19 07       	cpc	r17, r25
     6e2:	0c f4       	brge	.+2      	; 0x6e6 <_ZN8Endpoint3RunEv+0x200>
     6e4:	38 cf       	rjmp	.-400    	; 0x556 <_ZN8Endpoint3RunEv+0x70>
						}
					}
				}
			}
		}
		delete messages;
     6e6:	c7 01       	movw	r24, r14
     6e8:	0e 94 83 04 	call	0x906	; 0x906 <_ZN8MessagesD1Ev>
     6ec:	c7 01       	movw	r24, r14
     6ee:	0e 94 83 08 	call	0x1106	; 0x1106 <_ZdlPv>
	}
}
     6f2:	c0 54       	subi	r28, 0x40	; 64
     6f4:	de 4f       	sbci	r29, 0xFE	; 254
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	9f 90       	pop	r9
     716:	8f 90       	pop	r8
     718:	08 95       	ret

0000071a <_ZN9ExceptionC1Ev>:

#include <avr/io.h>
#include "Exception.h"

// default constructor
Exception::Exception()
     71a:	08 95       	ret

0000071c <_ZN10ExceptionsC1Ev>:


#include "Exceptions.h"
#include <stdlib.h>
// default constructor
Exceptions::Exceptions(){
     71c:	fc 01       	movw	r30, r24
		for(size_t i=0; i<d_size; i++){
			if(d==d_data[i])return true;
		}
		return false;
	}
	   simple_vector() : d_size(0), d_capacity(0), d_data(0) {
     71e:	11 82       	std	Z+1, r1	; 0x01
     720:	10 82       	st	Z, r1
     722:	13 82       	std	Z+3, r1	; 0x03
     724:	12 82       	std	Z+2, r1	; 0x02
     726:	15 82       	std	Z+5, r1	; 0x05
     728:	14 82       	std	Z+4, r1	; 0x04
     72a:	08 95       	ret

0000072c <_ZN10Exceptions3AddEP9Exception>:
		this->exceptions.push_back(exception);
		exceptions->exceptions[i]=NULL;
	}
	delete exceptions;
}
void Exceptions::Add(Exception* exception){
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
     742:	7b 01       	movw	r14, r22
	   simple_vector(   simple_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) {
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
	   simple_vector &operator=(   simple_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x)  { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
     744:	0a 81       	ldd	r16, Y+2	; 0x02
     746:	1b 81       	ldd	r17, Y+3	; 0x03
     748:	88 81       	ld	r24, Y
     74a:	99 81       	ldd	r25, Y+1	; 0x01
     74c:	08 17       	cp	r16, r24
     74e:	19 07       	cpc	r17, r25
     750:	e9 f4       	brne	.+58     	; 0x78c <_ZN10Exceptions3AddEP9Exception+0x60>
	size_t size()  const { return d_size; }; // Size getter
	Data const &operator[](size_t idx) const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx) { return d_data[idx]; }; // Changeable getter
	private:
	void resize()  { d_capacity = d_capacity ? d_capacity*2 : 1; Data *newdata = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(newdata, d_data, d_size * sizeof(Data)); free(d_data); d_data = newdata; };// Allocates double the old space
     752:	01 15       	cp	r16, r1
     754:	11 05       	cpc	r17, r1
     756:	21 f0       	breq	.+8      	; 0x760 <_ZN10Exceptions3AddEP9Exception+0x34>
     758:	c8 01       	movw	r24, r16
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	02 c0       	rjmp	.+4      	; 0x764 <_ZN10Exceptions3AddEP9Exception+0x38>
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	9b 83       	std	Y+3, r25	; 0x03
     766:	8a 83       	std	Y+2, r24	; 0x02
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <malloc>
     770:	6c 01       	movw	r12, r24
     772:	ac 80       	ldd	r10, Y+4	; 0x04
     774:	bd 80       	ldd	r11, Y+5	; 0x05
     776:	a8 01       	movw	r20, r16
     778:	44 0f       	add	r20, r20
     77a:	55 1f       	adc	r21, r21
     77c:	b5 01       	movw	r22, r10
     77e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <memcpy>
     782:	c5 01       	movw	r24, r10
     784:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <free>
     788:	dd 82       	std	Y+5, r13	; 0x05
     78a:	cc 82       	std	Y+4, r12	; 0x04
	   simple_vector(   simple_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) {
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
	   simple_vector &operator=(   simple_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x)  { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
     78c:	ec 81       	ldd	r30, Y+4	; 0x04
     78e:	fd 81       	ldd	r31, Y+5	; 0x05
     790:	88 81       	ld	r24, Y
     792:	99 81       	ldd	r25, Y+1	; 0x01
     794:	9c 01       	movw	r18, r24
     796:	2f 5f       	subi	r18, 0xFF	; 255
     798:	3f 4f       	sbci	r19, 0xFF	; 255
     79a:	39 83       	std	Y+1, r19	; 0x01
     79c:	28 83       	st	Y, r18
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	e8 0f       	add	r30, r24
     7a4:	f9 1f       	adc	r31, r25
     7a6:	f1 82       	std	Z+1, r15	; 0x01
     7a8:	e0 82       	st	Z, r14
exceptions.push_back(exception);}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	bf 90       	pop	r11
     7bc:	af 90       	pop	r10
     7be:	08 95       	ret

000007c0 <_ZN4Fans11GetInstanceEv>:
#include "Exceptions.h"
#include "PassFailCleanup.h"

Fans& Fans::GetInstance(){
	
} void Fans::SetInterfaces(IGetFanInfo** iGetFanInfos, unsigned char nIGetFanInfos, IGetFanSpeedMin*iGetFanSpeedMin)
     7c0:	08 95       	ret

000007c2 <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>:
{
     7c2:	fc 01       	movw	r30, r24
	this->iGetFanInfos=iGetFanInfos;
     7c4:	75 83       	std	Z+5, r23	; 0x05
     7c6:	64 83       	std	Z+4, r22	; 0x04
	this->nIGetFanInfos=nIGetFanInfos;
     7c8:	46 83       	std	Z+6, r20	; 0x06
	this->iGetFanSpeedMin = iGetFanSpeedMin;
     7ca:	30 87       	std	Z+8, r19	; 0x08
     7cc:	27 83       	std	Z+7, r18	; 0x07
     7ce:	08 95       	ret

000007d0 <_ZN4Leds4Main6SetRedEv>:
#include "Outputs.h"



void Leds::Main::SetRed(){
	Outputs::PD::_2::SetLow();
     7d0:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetLow();
     7d4:	0e 94 c6 04 	call	0x98c	; 0x98c <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetHigh();
     7d8:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN7Outputs2PD2_47SetHighEv>
     7dc:	08 95       	ret

000007de <_ZN4Leds4Main8SetGreenEv>:
}
void Leds::Main::SetGreen(){
	Outputs::PD::_2::SetLow();
     7de:	0e 94 c2 04 	call	0x984	; 0x984 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetHigh();
     7e2:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN7Outputs2PD2_37SetHighEv>
	Outputs::PD::_4::SetLow();
     7e6:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN7Outputs2PD2_46SetLowEv>
     7ea:	08 95       	ret

000007ec <_ZN4Leds4Main7SetBlueEv>:
}
void Leds::Main::SetBlue(){
	Outputs::PD::_2::SetHigh();
     7ec:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN7Outputs2PD2_27SetHighEv>
	Outputs::PD::_3::SetLow();
     7f0:	0e 94 c6 04 	call	0x98c	; 0x98c <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetLow();
     7f4:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN7Outputs2PD2_46SetLowEv>
     7f8:	08 95       	ret

000007fa <_ZN4LM757GetNameEv>:
	addressWrite =0x90|(shifted&0x0e);
	addressRead =0x91|(shifted&0x0e);
} //LM75
const char* LM75::GetName(){
	return name;
}
     7fa:	fc 01       	movw	r30, r24
     7fc:	80 85       	ldd	r24, Z+8	; 0x08
     7fe:	91 85       	ldd	r25, Z+9	; 0x09
     800:	08 95       	ret

00000802 <_ZN4LM7514GetTemperatureERb>:
int8_t LM75::GetTemperature(bool& successful){
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	ec 01       	movw	r28, r24
     80e:	7b 01       	movw	r14, r22
	i2c_start_wait(addressWrite);
     810:	8b 85       	ldd	r24, Y+11	; 0x0b
     812:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
	char r=i2c_write(TEMPERATURE_ADDRESS);
     816:	8c 81       	ldd	r24, Y+4	; 0x04
     818:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_write>
     81c:	18 2f       	mov	r17, r24
	i2c_stop();
     81e:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
	if(r!=0){
     822:	11 23       	and	r17, r17
     824:	11 f0       	breq	.+4      	; 0x82a <_ZN4LM7514GetTemperatureERb+0x28>
		successful=false;
     826:	f7 01       	movw	r30, r14
     828:	10 82       	st	Z, r1
	}

	i2c_start_wait(addressRead);
     82a:	8a 85       	ldd	r24, Y+10	; 0x0a
     82c:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
	char most = i2c_readAck();
     830:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readAck>
     834:	c8 2f       	mov	r28, r24
	char least = i2c_readAck();
     836:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readAck>
	sei();
     83a:	78 94       	sei
	return static_cast<int8_t>(most);
	i2c_stop();
	return 0;
}
     83c:	8c 2f       	mov	r24, r28
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	08 95       	ret

0000084a <_ZThn2_N4LM757GetNameEv>:
     84a:	fc 01       	movw	r30, r24
     84c:	86 81       	ldd	r24, Z+6	; 0x06
     84e:	97 81       	ldd	r25, Z+7	; 0x07
     850:	08 95       	ret

00000852 <_ZN4LM75C1EcPc>:
*/
#include "i2cmaster.h"
#include "LM75.h"
#include <avr/interrupt.h>
// default constructor
LM75::LM75(char address, char* name):name(name)
     852:	fc 01       	movw	r30, r24
     854:	8a e0       	ldi	r24, 0x0A	; 10
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	91 83       	std	Z+1, r25	; 0x01
     85a:	80 83       	st	Z, r24
     85c:	82 e1       	ldi	r24, 0x12	; 18
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	93 83       	std	Z+3, r25	; 0x03
     862:	82 83       	std	Z+2, r24	; 0x02
     864:	14 82       	std	Z+4, r1	; 0x04
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	85 83       	std	Z+5, r24	; 0x05
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	86 83       	std	Z+6, r24	; 0x06
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	87 83       	std	Z+7, r24	; 0x07
     872:	51 87       	std	Z+9, r21	; 0x09
     874:	40 87       	std	Z+8, r20	; 0x08
{
	char shifted = (address<<1);
	addressWrite =0x90|(shifted&0x0e);
     876:	66 0f       	add	r22, r22
     878:	6e 70       	andi	r22, 0x0E	; 14
     87a:	86 2f       	mov	r24, r22
     87c:	80 69       	ori	r24, 0x90	; 144
     87e:	83 87       	std	Z+11, r24	; 0x0b
	addressRead =0x91|(shifted&0x0e);
     880:	61 69       	ori	r22, 0x91	; 145
     882:	62 87       	std	Z+10, r22	; 0x0a
     884:	08 95       	ret

00000886 <_ZN7MessageC1EPKcj>:
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include <stdlib.h>
#include "Message.h"
Message::Message(const char* bufferIn, unsigned int lengthIn):length(lengthIn), buffer(bufferIn){
     886:	fc 01       	movw	r30, r24
     888:	71 83       	std	Z+1, r23	; 0x01
     88a:	60 83       	st	Z, r22
     88c:	53 83       	std	Z+3, r21	; 0x03
     88e:	42 83       	std	Z+2, r20	; 0x02
     890:	08 95       	ret

00000892 <_ZN7MessageD1Ev>:
	
}
Message::~Message(){
	delete[] this->buffer;
     892:	fc 01       	movw	r30, r24
     894:	80 81       	ld	r24, Z
     896:	91 81       	ldd	r25, Z+1	; 0x01
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	11 f0       	breq	.+4      	; 0x8a0 <_ZN7MessageD1Ev+0xe>
     89c:	0e 94 86 08 	call	0x110c	; 0x110c <_ZdaPv>
     8a0:	08 95       	ret

000008a2 <_ZN8MessagesC1EPP7Messagec>:
*
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
     8ae:	f6 2e       	mov	r15, r22
     8b0:	07 2f       	mov	r16, r23
     8b2:	14 2f       	mov	r17, r20
     8b4:	84 2f       	mov	r24, r20
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	9b 83       	std	Y+3, r25	; 0x03
     8ba:	8a 83       	std	Y+2, r24	; 0x02
	messages = new Message*[lengthIn];
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	0e 94 80 08 	call	0x1100	; 0x1100 <_Znaj>
     8c4:	99 83       	std	Y+1, r25	; 0x01
     8c6:	88 83       	st	Y, r24
	for(char i=0; i<lengthIn; i++)
     8c8:	11 23       	and	r17, r17
     8ca:	b9 f0       	breq	.+46     	; 0x8fa <_ZN8MessagesC1EPP7Messagec+0x58>
     8cc:	af 2d       	mov	r26, r15
     8ce:	b0 2f       	mov	r27, r16
     8d0:	11 50       	subi	r17, 0x01	; 1
     8d2:	21 2f       	mov	r18, r17
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	2f 5f       	subi	r18, 0xFF	; 255
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	22 0f       	add	r18, r18
     8dc:	33 1f       	adc	r19, r19
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
	messages[i]= messagesIn[i];
     8e2:	4d 91       	ld	r20, X+
     8e4:	5d 91       	ld	r21, X+
     8e6:	e8 81       	ld	r30, Y
     8e8:	f9 81       	ldd	r31, Y+1	; 0x01
     8ea:	e8 0f       	add	r30, r24
     8ec:	f9 1f       	adc	r31, r25
     8ee:	51 83       	std	Z+1, r21	; 0x01
     8f0:	40 83       	st	Z, r20
     8f2:	02 96       	adiw	r24, 0x02	; 2
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
	messages = new Message*[lengthIn];
	for(char i=0; i<lengthIn; i++)
     8f4:	82 17       	cp	r24, r18
     8f6:	93 07       	cpc	r25, r19
     8f8:	a1 f7       	brne	.-24     	; 0x8e2 <_ZN8MessagesC1EPP7Messagec+0x40>
	messages[i]= messagesIn[i];
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	08 95       	ret

00000906 <_ZN8MessagesD1Ev>:
Messages::~Messages(){
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	7c 01       	movw	r14, r24

	for(char i=0; i<length; i++)
     912:	dc 01       	movw	r26, r24
     914:	12 96       	adiw	r26, 0x02	; 2
     916:	8d 91       	ld	r24, X+
     918:	9c 91       	ld	r25, X
     91a:	13 97       	sbiw	r26, 0x03	; 3
     91c:	18 16       	cp	r1, r24
     91e:	19 06       	cpc	r1, r25
     920:	f4 f4       	brge	.+60     	; 0x95e <_ZN8MessagesD1Ev+0x58>
     922:	c0 e0       	ldi	r28, 0x00	; 0
	{
		delete messages[i];
     924:	ec 2f       	mov	r30, r28
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	ee 0f       	add	r30, r30
     92a:	ff 1f       	adc	r31, r31
     92c:	d7 01       	movw	r26, r14
     92e:	8d 91       	ld	r24, X+
     930:	9c 91       	ld	r25, X
     932:	e8 0f       	add	r30, r24
     934:	f9 1f       	adc	r31, r25
     936:	00 81       	ld	r16, Z
     938:	11 81       	ldd	r17, Z+1	; 0x01
     93a:	01 15       	cp	r16, r1
     93c:	11 05       	cpc	r17, r1
     93e:	31 f0       	breq	.+12     	; 0x94c <_ZN8MessagesD1Ev+0x46>
     940:	c8 01       	movw	r24, r16
     942:	0e 94 49 04 	call	0x892	; 0x892 <_ZN7MessageD1Ev>
     946:	c8 01       	movw	r24, r16
     948:	0e 94 83 08 	call	0x1106	; 0x1106 <_ZdlPv>
	for(char i=0; i<lengthIn; i++)
	messages[i]= messagesIn[i];
}
Messages::~Messages(){

	for(char i=0; i<length; i++)
     94c:	cf 5f       	subi	r28, 0xFF	; 255
     94e:	2c 2f       	mov	r18, r28
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f7 01       	movw	r30, r14
     954:	82 81       	ldd	r24, Z+2	; 0x02
     956:	93 81       	ldd	r25, Z+3	; 0x03
     958:	28 17       	cp	r18, r24
     95a:	39 07       	cpc	r19, r25
     95c:	1c f3       	brlt	.-58     	; 0x924 <_ZN8MessagesD1Ev+0x1e>
	{
		delete messages[i];
	}
	delete[] messages;
     95e:	d7 01       	movw	r26, r14
     960:	8d 91       	ld	r24, X+
     962:	9c 91       	ld	r25, X
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	11 f0       	breq	.+4      	; 0x96c <_ZN8MessagesD1Ev+0x66>
     968:	0e 94 86 08 	call	0x110c	; 0x110c <_ZdaPv>
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	08 95       	ret

00000978 <_ZN7Outputs10InitializeEv>:
}
void Outputs::PB::_5::SetHigh(){
	PORTB = PORTB|0x20;
}
void Outputs::PB::_5::SetLow(){
	PORTB= PORTB&0xFB;
     978:	8a b1       	in	r24, 0x0a	; 10
     97a:	8c 61       	ori	r24, 0x1C	; 28
     97c:	8a b9       	out	0x0a, r24	; 10
     97e:	08 95       	ret

00000980 <_ZN7Outputs2PD2_27SetHighEv>:
}
void Outputs::PD::_2::SetHigh(){
	PORTD = PORTD|0x04;
     980:	5a 9a       	sbi	0x0b, 2	; 11
     982:	08 95       	ret

00000984 <_ZN7Outputs2PD2_26SetLowEv>:
}
void Outputs::PD::_2::SetLow(){
	PORTD= PORTD&0xFB;
     984:	5a 98       	cbi	0x0b, 2	; 11
     986:	08 95       	ret

00000988 <_ZN7Outputs2PD2_37SetHighEv>:
}
void Outputs::PD::_3::SetHigh(){
	PORTD = PORTD|0x08;
     988:	5b 9a       	sbi	0x0b, 3	; 11
     98a:	08 95       	ret

0000098c <_ZN7Outputs2PD2_36SetLowEv>:
}
void Outputs::PD::_3::SetLow(){
	PORTD= PORTD&0xF7;
     98c:	5b 98       	cbi	0x0b, 3	; 11
     98e:	08 95       	ret

00000990 <_ZN7Outputs2PD2_47SetHighEv>:
}
void Outputs::PD::_4::SetHigh(){
	PORTD = PORTD|0x10;
     990:	5c 9a       	sbi	0x0b, 4	; 11
     992:	08 95       	ret

00000994 <_ZN7Outputs2PD2_46SetLowEv>:
}
void Outputs::PD::_4::SetLow(){
	PORTD= PORTD&0xEF;
     994:	5c 98       	cbi	0x0b, 4	; 11
     996:	08 95       	ret

00000998 <_ZN8Settings17GetTemperatureMaxEv>:
		if(a<POWER_MIN)
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
     998:	fc 01       	movw	r30, r24
     99a:	82 85       	ldd	r24, Z+10	; 0x0a
     99c:	08 95       	ret

0000099e <_ZN8Settings8GetPowerEv>:
	temperatureMax=a;
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
}
uint16_t Settings::GetPower(){
	return power;
}
     99e:	fc 01       	movw	r30, r24
     9a0:	83 85       	ldd	r24, Z+11	; 0x0b
     9a2:	94 85       	ldd	r25, Z+12	; 0x0c
     9a4:	08 95       	ret

000009a6 <_ZN8Settings14GetFanSpeedMinEv>:
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
     9a6:	fc 01       	movw	r30, r24
     9a8:	85 85       	ldd	r24, Z+13	; 0x0d
     9aa:	96 85       	ldd	r25, Z+14	; 0x0e
     9ac:	08 95       	ret

000009ae <_ZThn8_N8Settings14GetFanSpeedMinEv>:
     9ae:	fc 01       	movw	r30, r24
     9b0:	85 81       	ldd	r24, Z+5	; 0x05
     9b2:	96 81       	ldd	r25, Z+6	; 0x06
     9b4:	08 95       	ret

000009b6 <_ZThn4_N8Settings8GetPowerEv>:
     9b6:	fc 01       	movw	r30, r24
     9b8:	87 81       	ldd	r24, Z+7	; 0x07
     9ba:	90 85       	ldd	r25, Z+8	; 0x08
     9bc:	08 95       	ret

000009be <_ZN8Settings17CapTemperatureMaxERh>:
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
	CapPower(a);
	power=a;
}
void Settings::CapTemperatureMax(uint8_t& a){
	if(a>TEMPERATURE_MAX_MAX)
     9be:	fb 01       	movw	r30, r22
     9c0:	80 81       	ld	r24, Z
     9c2:	8e 37       	cpi	r24, 0x7E	; 126
     9c4:	18 f0       	brcs	.+6      	; 0x9cc <_ZN8Settings17CapTemperatureMaxERh+0xe>
		a=TEMPERATURE_MAX_MAX;
     9c6:	8d e7       	ldi	r24, 0x7D	; 125
     9c8:	80 83       	st	Z, r24
     9ca:	08 95       	ret
	else
		if(a<TEMPERTURE_MAX_MIN)
     9cc:	88 32       	cpi	r24, 0x28	; 40
     9ce:	18 f4       	brcc	.+6      	; 0x9d6 <_ZN8Settings17CapTemperatureMaxERh+0x18>
			a=TEMPERTURE_MAX_MIN;
     9d0:	88 e2       	ldi	r24, 0x28	; 40
     9d2:	fb 01       	movw	r30, r22
     9d4:	80 83       	st	Z, r24
     9d6:	08 95       	ret

000009d8 <_ZN8Settings17SetTemperatureMaxEh>:
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
void Settings::SetTemperatureMax(uint8_t a){
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	1f 92       	push	r1
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	8c 01       	movw	r16, r24
     9e8:	69 83       	std	Y+1, r22	; 0x01
	CapTemperatureMax(a);
     9ea:	be 01       	movw	r22, r28
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN8Settings17CapTemperatureMaxERh>
	temperatureMax=a;
     9f4:	69 81       	ldd	r22, Y+1	; 0x01
     9f6:	f8 01       	movw	r30, r16
     9f8:	62 87       	std	Z+10, r22	; 0x0a
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 2e 12 	call	0x245c	; 0x245c <eeprom_write_byte>
}
     a02:	0f 90       	pop	r0
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	08 95       	ret

00000a0e <_ZThn2_N8Settings17SetTemperatureMaxEh>:
     a0e:	02 97       	sbiw	r24, 0x02	; 2
     a10:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_ZN8Settings17SetTemperatureMaxEh>
     a14:	08 95       	ret

00000a16 <_ZN8Settings8CapPowerERj>:
		if(a<TEMPERTURE_MAX_MIN)
			a=TEMPERTURE_MAX_MIN;
}	
void Settings::CapPower(uint16_t& a){
	
	if(a>POWER_MAX)
     a16:	fb 01       	movw	r30, r22
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	8d 3d       	cpi	r24, 0xDD	; 221
     a1e:	f5 e0       	ldi	r31, 0x05	; 5
     a20:	9f 07       	cpc	r25, r31
     a22:	30 f0       	brcs	.+12     	; 0xa30 <_ZN8Settings8CapPowerERj+0x1a>
		a=POWER_MAX;
     a24:	8c ed       	ldi	r24, 0xDC	; 220
     a26:	95 e0       	ldi	r25, 0x05	; 5
     a28:	fb 01       	movw	r30, r22
     a2a:	91 83       	std	Z+1, r25	; 0x01
     a2c:	80 83       	st	Z, r24
     a2e:	08 95       	ret
	else
		if(a<POWER_MIN)
     a30:	4e 97       	sbiw	r24, 0x1e	; 30
     a32:	28 f4       	brcc	.+10     	; 0xa3e <_ZN8Settings8CapPowerERj+0x28>
			a=POWER_MIN;
     a34:	8e e1       	ldi	r24, 0x1E	; 30
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	fb 01       	movw	r30, r22
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
     a3e:	08 95       	ret

00000a40 <_ZN8Settings10InitializeEv>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void Settings::Initialize(){
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	00 d0       	rcall	.+0      	; 0xa4a <_ZN8Settings10InitializeEv+0xa>
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	8c 01       	movw	r16, r24
	temperatureMax= eeprom_read_byte(&ADDRESS_TEMPERATURE_MAX);
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 20 12 	call	0x2440	; 0x2440 <eeprom_read_byte>
     a58:	f8 01       	movw	r30, r16
     a5a:	82 87       	std	Z+10, r24	; 0x0a
	CapTemperatureMax(temperatureMax);
     a5c:	b8 01       	movw	r22, r16
     a5e:	66 5f       	subi	r22, 0xF6	; 246
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	c8 01       	movw	r24, r16
     a64:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN8Settings17CapTemperatureMaxERh>
	
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 28 12 	call	0x2450	; 0x2450 <eeprom_read_word>
     a70:	9a 83       	std	Y+2, r25	; 0x02
     a72:	89 83       	std	Y+1, r24	; 0x01
	CapPower(a);
     a74:	be 01       	movw	r22, r28
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	c8 01       	movw	r24, r16
     a7c:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN8Settings8CapPowerERj>
	power=a;
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	9a 81       	ldd	r25, Y+2	; 0x02
     a84:	f8 01       	movw	r30, r16
     a86:	94 87       	std	Z+12, r25	; 0x0c
     a88:	83 87       	std	Z+11, r24	; 0x0b
}
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <_ZN8Settings11GetInstanceEv>:
uint8_t EEMEM  ADDRESS_TEMPERATURE_MAX;
uint16_t EEMEM  ADDRESS_POWER;
Settings Settings:: _Singleton;
Settings& Settings::GetInstance(){
	static bool initialized=false;
	if(!initialized)
     a98:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <__data_end>
     a9c:	81 11       	cpse	r24, r1
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <_ZN8Settings11GetInstanceEv+0x16>
	{
		_Singleton.Initialize();
     aa0:	87 ec       	ldi	r24, 0xC7	; 199
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN8Settings10InitializeEv>
		initialized=true;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <__data_end>
	}
	return _Singleton;
}
     aae:	87 ec       	ldi	r24, 0xC7	; 199
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	08 95       	ret

00000ab4 <_ZN8Settings8SetPowerEj>:
	return power;
}
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
void Settings::SetPower(uint16_t a){
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	00 d0       	rcall	.+0      	; 0xaba <_ZN8Settings8SetPowerEj+0x6>
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	7a 83       	std	Y+2, r23	; 0x02
     ac0:	69 83       	std	Y+1, r22	; 0x01
	CapPower(a);
     ac2:	be 01       	movw	r22, r28
     ac4:	6f 5f       	subi	r22, 0xFF	; 255
     ac6:	7f 4f       	sbci	r23, 0xFF	; 255
     ac8:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN8Settings8CapPowerERj>
	eeprom_write_word(&ADDRESS_POWER, a);
     acc:	69 81       	ldd	r22, Y+1	; 0x01
     ace:	7a 81       	ldd	r23, Y+2	; 0x02
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 3c 12 	call	0x2478	; 0x2478 <eeprom_write_word>
}
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <_ZThn6_N8Settings8SetPowerEj>:
     ae2:	06 97       	sbiw	r24, 0x06	; 6
     ae4:	0e 94 5a 05 	call	0xab4	; 0xab4 <_ZN8Settings8SetPowerEj>
     ae8:	08 95       	ret

00000aea <_GLOBAL__sub_I_ADDRESS_TEMPERATURE_MAX>:
#include "IGetFanSpeedMin.h"
#define TEMPERATURE_MAX_MAX 125
#define TEMPERTURE_MAX_MIN 40
#define POWER_MIN 30
#define POWER_MAX 1500
class Settings:public  IGetTemperatureMax, public  ISetTemperatureMax, public  IGetPower, public  ISetPower, public IGetFanSpeedMin
     aea:	e7 ec       	ldi	r30, 0xC7	; 199
     aec:	f2 e0       	ldi	r31, 0x02	; 2
     aee:	88 e1       	ldi	r24, 0x18	; 24
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	80 83       	st	Z, r24
     af6:	86 e2       	ldi	r24, 0x26	; 38
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	93 83       	std	Z+3, r25	; 0x03
     afc:	82 83       	std	Z+2, r24	; 0x02
     afe:	8c e2       	ldi	r24, 0x2C	; 44
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	95 83       	std	Z+5, r25	; 0x05
     b04:	84 83       	std	Z+4, r24	; 0x04
     b06:	82 e3       	ldi	r24, 0x32	; 50
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	97 83       	std	Z+7, r25	; 0x07
     b0c:	86 83       	std	Z+6, r24	; 0x06
     b0e:	88 e3       	ldi	r24, 0x38	; 56
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	91 87       	std	Z+9, r25	; 0x09
     b14:	80 87       	std	Z+8, r24	; 0x08
     b16:	87 e7       	ldi	r24, 0x77	; 119
     b18:	82 87       	std	Z+10, r24	; 0x0a
     b1a:	8a e0       	ldi	r24, 0x0A	; 10
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	94 87       	std	Z+12, r25	; 0x0c
     b20:	83 87       	std	Z+11, r24	; 0x0b
     b22:	88 ee       	ldi	r24, 0xE8	; 232
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	96 87       	std	Z+14, r25	; 0x0e
     b28:	85 87       	std	Z+13, r24	; 0x0d
     b2a:	08 95       	ret

00000b2c <_ZN5TC6543Fan7GetNameEv>:
}
unsigned char TC654::GetDutyCycle(bool& successful){
	return ReadRegister(successful, DUTY_CYCLE_ADDRESS);
}
void TC654::SetDutyCycle(bool& successful, unsigned char value){
	WriteRegister(successful, DUTY_CYCLE_ADDRESS, value);
     b2c:	fc 01       	movw	r30, r24
     b2e:	86 81       	ldd	r24, Z+6	; 0x06
     b30:	97 81       	ldd	r25, Z+7	; 0x07
     b32:	08 95       	ret

00000b34 <_ZN5TC6543Fan11GetFanSpeedERb>:
     b34:	dc 01       	movw	r26, r24
     b36:	1c 96       	adiw	r26, 0x0c	; 12
     b38:	2d 91       	ld	r18, X+
     b3a:	3c 91       	ld	r19, X
     b3c:	1d 97       	sbiw	r26, 0x0d	; 13
     b3e:	20 fd       	sbrc	r18, 0
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <_ZN5TC6543Fan11GetFanSpeedERb+0x18>
     b42:	1a 96       	adiw	r26, 0x0a	; 10
     b44:	ed 91       	ld	r30, X+
     b46:	fc 91       	ld	r31, X
     b48:	1b 97       	sbiw	r26, 0x0b	; 11
     b4a:	15 c0       	rjmp	.+42     	; 0xb76 <_ZN5TC6543Fan11GetFanSpeedERb+0x42>
     b4c:	18 96       	adiw	r26, 0x08	; 8
     b4e:	ed 91       	ld	r30, X+
     b50:	fc 91       	ld	r31, X
     b52:	19 97       	sbiw	r26, 0x09	; 9
     b54:	c9 01       	movw	r24, r18
     b56:	95 95       	asr	r25
     b58:	87 95       	ror	r24
     b5a:	e8 0f       	add	r30, r24
     b5c:	f9 1f       	adc	r31, r25
     b5e:	01 90       	ld	r0, Z+
     b60:	f0 81       	ld	r31, Z
     b62:	e0 2d       	mov	r30, r0
     b64:	1a 96       	adiw	r26, 0x0a	; 10
     b66:	8d 91       	ld	r24, X+
     b68:	9c 91       	ld	r25, X
     b6a:	1b 97       	sbiw	r26, 0x0b	; 11
     b6c:	e8 0f       	add	r30, r24
     b6e:	f9 1f       	adc	r31, r25
     b70:	01 90       	ld	r0, Z+
     b72:	f0 81       	ld	r31, Z
     b74:	e0 2d       	mov	r30, r0
     b76:	35 95       	asr	r19
     b78:	27 95       	ror	r18
     b7a:	18 96       	adiw	r26, 0x08	; 8
     b7c:	8d 91       	ld	r24, X+
     b7e:	9c 91       	ld	r25, X
     b80:	19 97       	sbiw	r26, 0x09	; 9
     b82:	82 0f       	add	r24, r18
     b84:	93 1f       	adc	r25, r19
     b86:	09 95       	icall
     b88:	22 e3       	ldi	r18, 0x32	; 50
     b8a:	82 9f       	mul	r24, r18
     b8c:	c0 01       	movw	r24, r0
     b8e:	11 24       	eor	r1, r1
     b90:	08 95       	ret

00000b92 <_ZN5TC6543Fan5CheckEv>:
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	ec 01       	movw	r28, r24
     b98:	db 01       	movw	r26, r22
     b9a:	50 96       	adiw	r26, 0x10	; 16
     b9c:	8d 91       	ld	r24, X+
     b9e:	9c 91       	ld	r25, X
     ba0:	51 97       	sbiw	r26, 0x11	; 17
     ba2:	80 fd       	sbrc	r24, 0
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <_ZN5TC6543Fan5CheckEv+0x1e>
     ba6:	1e 96       	adiw	r26, 0x0e	; 14
     ba8:	ed 91       	ld	r30, X+
     baa:	fc 91       	ld	r31, X
     bac:	1f 97       	sbiw	r26, 0x0f	; 15
     bae:	15 c0       	rjmp	.+42     	; 0xbda <_ZN5TC6543Fan5CheckEv+0x48>
     bb0:	18 96       	adiw	r26, 0x08	; 8
     bb2:	ed 91       	ld	r30, X+
     bb4:	fc 91       	ld	r31, X
     bb6:	19 97       	sbiw	r26, 0x09	; 9
     bb8:	9c 01       	movw	r18, r24
     bba:	35 95       	asr	r19
     bbc:	27 95       	ror	r18
     bbe:	e2 0f       	add	r30, r18
     bc0:	f3 1f       	adc	r31, r19
     bc2:	01 90       	ld	r0, Z+
     bc4:	f0 81       	ld	r31, Z
     bc6:	e0 2d       	mov	r30, r0
     bc8:	1e 96       	adiw	r26, 0x0e	; 14
     bca:	2d 91       	ld	r18, X+
     bcc:	3c 91       	ld	r19, X
     bce:	1f 97       	sbiw	r26, 0x0f	; 15
     bd0:	e2 0f       	add	r30, r18
     bd2:	f3 1f       	adc	r31, r19
     bd4:	01 90       	ld	r0, Z+
     bd6:	f0 81       	ld	r31, Z
     bd8:	e0 2d       	mov	r30, r0
     bda:	16 96       	adiw	r26, 0x06	; 6
     bdc:	4d 91       	ld	r20, X+
     bde:	5c 91       	ld	r21, X
     be0:	17 97       	sbiw	r26, 0x07	; 7
     be2:	95 95       	asr	r25
     be4:	87 95       	ror	r24
     be6:	18 96       	adiw	r26, 0x08	; 8
     be8:	6d 91       	ld	r22, X+
     bea:	7c 91       	ld	r23, X
     bec:	19 97       	sbiw	r26, 0x09	; 9
     bee:	68 0f       	add	r22, r24
     bf0:	79 1f       	adc	r23, r25
     bf2:	ce 01       	movw	r24, r28
     bf4:	09 95       	icall
     bf6:	ce 01       	movw	r24, r28
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <_ZThn4_N5TC6543Fan5CheckEv>:
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
     c04:	64 50       	subi	r22, 0x04	; 4
     c06:	71 09       	sbc	r23, r1
     c08:	0e 94 c9 05 	call	0xb92	; 0xb92 <_ZN5TC6543Fan5CheckEv>
     c0c:	ce 01       	movw	r24, r28
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <_ZThn2_N5TC6543Fan7GetNameEv>:
     c14:	fc 01       	movw	r30, r24
     c16:	84 81       	ldd	r24, Z+4	; 0x04
     c18:	95 81       	ldd	r25, Z+5	; 0x05
     c1a:	08 95       	ret

00000c1c <_ZN5TC6546Status6GetF2FEv>:
     c1c:	fc 01       	movw	r30, r24
     c1e:	90 81       	ld	r25, Z
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	91 ff       	sbrs	r25, 1
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	08 95       	ret

00000c28 <_ZN5TC6546Status7GetR1COEv>:
     c28:	fc 01       	movw	r30, r24
     c2a:	90 81       	ld	r25, Z
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	93 ff       	sbrs	r25, 3
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	08 95       	ret

00000c34 <_ZN5TC6546Status7GetR2COEv>:
     c34:	fc 01       	movw	r30, r24
     c36:	90 81       	ld	r25, Z
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	94 ff       	sbrs	r25, 4
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	08 95       	ret

00000c40 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_F15PassFailCleanupIP10ExceptionsEPKcEPc>:
     c40:	cf 92       	push	r12
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	fc 01       	movw	r30, r24
     c4e:	8e e4       	ldi	r24, 0x4E	; 78
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
     c56:	88 e5       	ldi	r24, 0x58	; 88
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	93 83       	std	Z+3, r25	; 0x03
     c5c:	82 83       	std	Z+2, r24	; 0x02
     c5e:	8e e5       	ldi	r24, 0x5E	; 94
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	95 83       	std	Z+5, r25	; 0x05
     c64:	84 83       	std	Z+4, r24	; 0x04
     c66:	d7 82       	std	Z+7, r13	; 0x07
     c68:	c6 82       	std	Z+6, r12	; 0x06
     c6a:	71 87       	std	Z+9, r23	; 0x09
     c6c:	60 87       	std	Z+8, r22	; 0x08
     c6e:	e6 86       	std	Z+14, r14	; 0x0e
     c70:	f7 86       	std	Z+15, r15	; 0x0f
     c72:	00 8b       	std	Z+16, r16	; 0x10
     c74:	11 8b       	std	Z+17, r17	; 0x11
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
     c82:	08 95       	ret

00000c84 <_ZN5TC654C1Ecc>:
     c84:	af 92       	push	r10
     c86:	bf 92       	push	r11
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
     c9a:	b6 2e       	mov	r11, r22
     c9c:	a4 2e       	mov	r10, r20
     c9e:	86 e3       	ldi	r24, 0x36	; 54
     ca0:	88 83       	st	Y, r24
     ca2:	87 e3       	ldi	r24, 0x37	; 55
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	1a 82       	std	Y+2, r1	; 0x02
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	8c 83       	std	Y+4, r24	; 0x04
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	8e 83       	std	Y+6, r24	; 0x06
     cb8:	85 e0       	ldi	r24, 0x05	; 5
     cba:	8f 83       	std	Y+7, r24	; 0x07
     cbc:	86 e0       	ldi	r24, 0x06	; 6
     cbe:	88 87       	std	Y+8, r24	; 0x08
     cc0:	87 e0       	ldi	r24, 0x07	; 7
     cc2:	89 87       	std	Y+9, r24	; 0x09
     cc4:	88 e0       	ldi	r24, 0x08	; 8
     cc6:	8a 87       	std	Y+10, r24	; 0x0a
     cc8:	0f 2e       	mov	r0, r31
     cca:	f6 ee       	ldi	r31, 0xE6	; 230
     ccc:	ef 2e       	mov	r14, r31
     cce:	f6 e0       	ldi	r31, 0x06	; 6
     cd0:	ff 2e       	mov	r15, r31
     cd2:	f0 2d       	mov	r31, r0
     cd4:	00 e0       	ldi	r16, 0x00	; 0
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	27 ed       	ldi	r18, 0xD7	; 215
     cda:	36 e0       	ldi	r19, 0x06	; 6
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0f 2e       	mov	r0, r31
     ce2:	fa e3       	ldi	r31, 0x3A	; 58
     ce4:	cf 2e       	mov	r12, r31
     ce6:	f2 e0       	ldi	r31, 0x02	; 2
     ce8:	df 2e       	mov	r13, r31
     cea:	f0 2d       	mov	r31, r0
     cec:	be 01       	movw	r22, r28
     cee:	ce 01       	movw	r24, r28
     cf0:	0d 96       	adiw	r24, 0x0d	; 13
     cf2:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_F15PassFailCleanupIP10ExceptionsEPKcEPc>
     cf6:	0f 2e       	mov	r0, r31
     cf8:	fc e6       	ldi	r31, 0x6C	; 108
     cfa:	ef 2e       	mov	r14, r31
     cfc:	f7 e0       	ldi	r31, 0x07	; 7
     cfe:	ff 2e       	mov	r15, r31
     d00:	f0 2d       	mov	r31, r0
     d02:	00 e0       	ldi	r16, 0x00	; 0
     d04:	10 e0       	ldi	r17, 0x00	; 0
     d06:	2c ed       	ldi	r18, 0xDC	; 220
     d08:	36 e0       	ldi	r19, 0x06	; 6
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	0f 2e       	mov	r0, r31
     d10:	f2 e4       	ldi	r31, 0x42	; 66
     d12:	cf 2e       	mov	r12, r31
     d14:	f2 e0       	ldi	r31, 0x02	; 2
     d16:	df 2e       	mov	r13, r31
     d18:	f0 2d       	mov	r31, r0
     d1a:	be 01       	movw	r22, r28
     d1c:	ce 01       	movw	r24, r28
     d1e:	4f 96       	adiw	r24, 0x1f	; 31
     d20:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_F15PassFailCleanupIP10ExceptionsEPKcEPc>
     d24:	8b 2d       	mov	r24, r11
     d26:	8f 70       	andi	r24, 0x0F	; 15
     d28:	b8 2e       	mov	r11, r24
     d2a:	bb 0c       	add	r11, r11
     d2c:	bb 0c       	add	r11, r11
     d2e:	bb 86       	std	Y+11, r11	; 0x0b
     d30:	aa 0c       	add	r10, r10
     d32:	aa 0c       	add	r10, r10
     d34:	aa 0c       	add	r10, r10
     d36:	aa 0c       	add	r10, r10
     d38:	aa 0c       	add	r10, r10
     d3a:	aa 0c       	add	r10, r10
     d3c:	ac 86       	std	Y+12, r10	; 0x0c
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	df 90       	pop	r13
     d4c:	cf 90       	pop	r12
     d4e:	bf 90       	pop	r11
     d50:	af 90       	pop	r10
     d52:	08 95       	ret

00000d54 <_ZN5TC65412ReadRegisterERbc>:
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	ec 01       	movw	r28, r24
     d60:	7b 01       	movw	r14, r22
     d62:	14 2f       	mov	r17, r20
     d64:	88 81       	ld	r24, Y
     d66:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
     d6a:	81 2f       	mov	r24, r17
     d6c:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_write>
     d70:	88 23       	and	r24, r24
     d72:	31 f0       	breq	.+12     	; 0xd80 <_ZN5TC65412ReadRegisterERbc+0x2c>
     d74:	f7 01       	movw	r30, r14
     d76:	10 82       	st	Z, r1
     d78:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	11 c0       	rjmp	.+34     	; 0xda2 <_ZN5TC65412ReadRegisterERbc+0x4e>
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	0e 94 90 00 	call	0x120	; 0x120 <i2c_rep_start>
     d86:	88 23       	and	r24, r24
     d88:	31 f0       	breq	.+12     	; 0xd96 <_ZN5TC65412ReadRegisterERbc+0x42>
     d8a:	f7 01       	movw	r30, r14
     d8c:	10 82       	st	Z, r1
     d8e:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	06 c0       	rjmp	.+12     	; 0xda2 <_ZN5TC65412ReadRegisterERbc+0x4e>
     d96:	0e 94 c8 00 	call	0x190	; 0x190 <i2c_readNak>
     d9a:	c8 2f       	mov	r28, r24
     d9c:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
     da0:	8c 2f       	mov	r24, r28
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	08 95       	ret

00000dae <_ZN5TC6547GetRPM1ERb>:
     dae:	fc 01       	movw	r30, r24
     db0:	42 81       	ldd	r20, Z+2	; 0x02
     db2:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5TC65412ReadRegisterERbc>
     db6:	08 95       	ret

00000db8 <_ZN5TC6547GetRPM2ERb>:
     db8:	fc 01       	movw	r30, r24
     dba:	43 81       	ldd	r20, Z+3	; 0x03
     dbc:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5TC65412ReadRegisterERbc>
     dc0:	08 95       	ret

00000dc2 <_ZN5TC6549GetStatusERb>:
}
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
     dc2:	fc 01       	movw	r30, r24
     dc4:	47 81       	ldd	r20, Z+7	; 0x07
     dc6:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5TC65412ReadRegisterERbc>
}
     dca:	08 95       	ret

00000dcc <_ZN5TC6549CheckFan1EPKc>:
	return ReadRegister(successful, RPM1_ADDRESS);
}
unsigned char TC654::GetRPM2(bool& successful){
	return ReadRegister(successful, RPM2_ADDRESS);
}
PassFailCleanup<Exceptions*> TC654::CheckFan1(const char* name){
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	00 d0       	rcall	.+0      	; 0xde2 <_ZN5TC6549CheckFan1EPKc+0x16>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	8c 01       	movw	r16, r24
     de8:	cb 01       	movw	r24, r22
     dea:	7a 01       	movw	r14, r20
	bool successful=true;
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	29 83       	std	Y+1, r18	; 0x01
	Status status = GetStatus(successful);
     df0:	be 01       	movw	r22, r28
     df2:	6f 5f       	subi	r22, 0xFF	; 255
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN5TC6549GetStatusERb>
     dfa:	8a 83       	std	Y+2, r24	; 0x02
	if(!successful)
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	81 11       	cpse	r24, r1
     e00:	18 c0       	rjmp	.+48     	; 0xe32 <_ZN5TC6549CheckFan1EPKc+0x66>
	{
		Exceptions* exceptions = new Exceptions();
     e02:	86 e0       	ldi	r24, 0x06	; 6
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     e0a:	6c 01       	movw	r12, r24
     e0c:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN10ExceptionsC1Ev>
		exceptions->Add(new CommunicationException(name));
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     e18:	5c 01       	movw	r10, r24
     e1a:	b7 01       	movw	r22, r14
     e1c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZN22CommunicationExceptionC1EPKc>
     e20:	b5 01       	movw	r22, r10
     e22:	c6 01       	movw	r24, r12
     e24:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN10Exceptions3AddEP9Exception>
	const T payload;
	protected:
	private:
	//functions
	public:
	PassFailCleanup(T payload):payload(payload), successful(false)
     e28:	f8 01       	movw	r30, r16
     e2a:	10 82       	st	Z, r1
     e2c:	d2 82       	std	Z+2, r13	; 0x02
     e2e:	c1 82       	std	Z+1, r12	; 0x01
     e30:	45 c0       	rjmp	.+138    	; 0xebc <_ZN5TC6549CheckFan1EPKc+0xf0>
		return PassFailCleanup<Exceptions*>(exceptions);
	}
	if(status.GetF1F()||status.GetR1CO())
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	80 fd       	sbrc	r24, 0
     e36:	25 c0       	rjmp	.+74     	; 0xe82 <_ZN5TC6549CheckFan1EPKc+0xb6>
     e38:	ce 01       	movw	r24, r28
     e3a:	02 96       	adiw	r24, 0x02	; 2
     e3c:	0e 94 14 06 	call	0xc28	; 0xc28 <_ZN5TC6546Status7GetR1COEv>
     e40:	88 23       	and	r24, r24
     e42:	c9 f0       	breq	.+50     	; 0xe76 <_ZN5TC6549CheckFan1EPKc+0xaa>
     e44:	33 c0       	rjmp	.+102    	; 0xeac <_ZN5TC6549CheckFan1EPKc+0xe0>
	{
		Exceptions* exceptions = new Exceptions();
		if(status.GetF1F())
		exceptions->Add(new TC654Exception(name, TC654Exception::Fault));
		if(status.GetR1CO())
     e46:	ce 01       	movw	r24, r28
     e48:	02 96       	adiw	r24, 0x02	; 2
     e4a:	0e 94 14 06 	call	0xc28	; 0xc28 <_ZN5TC6546Status7GetR1COEv>
     e4e:	88 23       	and	r24, r24
     e50:	69 f0       	breq	.+26     	; 0xe6c <_ZN5TC6549CheckFan1EPKc+0xa0>
		exceptions->Add(new TC654Exception(name, TC654Exception::CounterOverflow));
     e52:	85 e0       	ldi	r24, 0x05	; 5
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     e5a:	5c 01       	movw	r10, r24
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	b7 01       	movw	r22, r14
     e60:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
     e64:	b5 01       	movw	r22, r10
     e66:	c6 01       	movw	r24, r12
     e68:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN10Exceptions3AddEP9Exception>
     e6c:	f8 01       	movw	r30, r16
     e6e:	10 82       	st	Z, r1
     e70:	d2 82       	std	Z+2, r13	; 0x02
     e72:	c1 82       	std	Z+1, r12	; 0x01
     e74:	23 c0       	rjmp	.+70     	; 0xebc <_ZN5TC6549CheckFan1EPKc+0xf0>
	{
	}
	//successful constructor
PassFailCleanup():successful(true), payload(NULL)
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	f8 01       	movw	r30, r16
     e7a:	80 83       	st	Z, r24
     e7c:	12 82       	std	Z+2, r1	; 0x02
     e7e:	11 82       	std	Z+1, r1	; 0x01
     e80:	1d c0       	rjmp	.+58     	; 0xebc <_ZN5TC6549CheckFan1EPKc+0xf0>
		exceptions->Add(new CommunicationException(name));
		return PassFailCleanup<Exceptions*>(exceptions);
	}
	if(status.GetF1F()||status.GetR1CO())
	{
		Exceptions* exceptions = new Exceptions();
     e82:	86 e0       	ldi	r24, 0x06	; 6
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     e8a:	6c 01       	movw	r12, r24
     e8c:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN10ExceptionsC1Ev>
		if(status.GetF1F())
		exceptions->Add(new TC654Exception(name, TC654Exception::Fault));
     e90:	85 e0       	ldi	r24, 0x05	; 5
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     e98:	5c 01       	movw	r10, r24
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	b7 01       	movw	r22, r14
     e9e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
     ea2:	b5 01       	movw	r22, r10
     ea4:	c6 01       	movw	r24, r12
     ea6:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN10Exceptions3AddEP9Exception>
     eaa:	cd cf       	rjmp	.-102    	; 0xe46 <_ZN5TC6549CheckFan1EPKc+0x7a>
		exceptions->Add(new CommunicationException(name));
		return PassFailCleanup<Exceptions*>(exceptions);
	}
	if(status.GetF1F()||status.GetR1CO())
	{
		Exceptions* exceptions = new Exceptions();
     eac:	86 e0       	ldi	r24, 0x06	; 6
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     eb4:	6c 01       	movw	r12, r24
     eb6:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN10ExceptionsC1Ev>
     eba:	c5 cf       	rjmp	.-118    	; 0xe46 <_ZN5TC6549CheckFan1EPKc+0x7a>
		exceptions->Add(new TC654Exception(name, TC654Exception::CounterOverflow));
		return PassFailCleanup<Exceptions*>(exceptions);

	}
	return PassFailCleanup<Exceptions*>();
}
     ebc:	c8 01       	movw	r24, r16
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	bf 90       	pop	r11
     ed4:	af 90       	pop	r10
     ed6:	08 95       	ret

00000ed8 <_ZN5TC6549CheckFan2EPKc>:
PassFailCleanup<Exceptions*> TC654::CheckFan2(const char* name){
     ed8:	af 92       	push	r10
     eda:	bf 92       	push	r11
     edc:	cf 92       	push	r12
     ede:	df 92       	push	r13
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	00 d0       	rcall	.+0      	; 0xeee <_ZN5TC6549CheckFan2EPKc+0x16>
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	8c 01       	movw	r16, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	7a 01       	movw	r14, r20
	bool successful=true;
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	29 83       	std	Y+1, r18	; 0x01
	Status status = GetStatus(successful);
     efc:	be 01       	movw	r22, r28
     efe:	6f 5f       	subi	r22, 0xFF	; 255
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN5TC6549GetStatusERb>
     f06:	8a 83       	std	Y+2, r24	; 0x02
	if(!successful)
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	81 11       	cpse	r24, r1
     f0c:	18 c0       	rjmp	.+48     	; 0xf3e <_ZN5TC6549CheckFan2EPKc+0x66>
	{
		Exceptions* exceptions = new Exceptions();
     f0e:	86 e0       	ldi	r24, 0x06	; 6
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     f16:	6c 01       	movw	r12, r24
     f18:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN10ExceptionsC1Ev>
		exceptions->Add(new CommunicationException(name));
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     f24:	5c 01       	movw	r10, r24
     f26:	b7 01       	movw	r22, r14
     f28:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZN22CommunicationExceptionC1EPKc>
     f2c:	b5 01       	movw	r22, r10
     f2e:	c6 01       	movw	r24, r12
     f30:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN10Exceptions3AddEP9Exception>
	const T payload;
	protected:
	private:
	//functions
	public:
	PassFailCleanup(T payload):payload(payload), successful(false)
     f34:	f8 01       	movw	r30, r16
     f36:	10 82       	st	Z, r1
     f38:	d2 82       	std	Z+2, r13	; 0x02
     f3a:	c1 82       	std	Z+1, r12	; 0x01
     f3c:	43 c0       	rjmp	.+134    	; 0xfc4 <_ZN5TC6549CheckFan2EPKc+0xec>
		return PassFailCleanup<Exceptions*>(exceptions);
	}
	if(status.GetF2F()||status.GetR2CO())
     f3e:	ce 01       	movw	r24, r28
     f40:	02 96       	adiw	r24, 0x02	; 2
     f42:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN5TC6546Status6GetF2FEv>
     f46:	81 11       	cpse	r24, r1
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <_ZN5TC6549CheckFan2EPKc+0x7e>
     f4a:	ce 01       	movw	r24, r28
     f4c:	02 96       	adiw	r24, 0x02	; 2
     f4e:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN5TC6546Status7GetR2COEv>
     f52:	88 23       	and	r24, r24
     f54:	91 f1       	breq	.+100    	; 0xfba <_ZN5TC6549CheckFan2EPKc+0xe2>
	{
		Exceptions* exceptions = new Exceptions();
     f56:	86 e0       	ldi	r24, 0x06	; 6
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     f5e:	6c 01       	movw	r12, r24
     f60:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN10ExceptionsC1Ev>
		if(status.GetF2F())
     f64:	ce 01       	movw	r24, r28
     f66:	02 96       	adiw	r24, 0x02	; 2
     f68:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN5TC6546Status6GetF2FEv>
     f6c:	88 23       	and	r24, r24
     f6e:	69 f0       	breq	.+26     	; 0xf8a <_ZN5TC6549CheckFan2EPKc+0xb2>
		exceptions->Add(new TC654Exception(name, TC654Exception::Fault));
     f70:	85 e0       	ldi	r24, 0x05	; 5
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     f78:	5c 01       	movw	r10, r24
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	b7 01       	movw	r22, r14
     f7e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
     f82:	b5 01       	movw	r22, r10
     f84:	c6 01       	movw	r24, r12
     f86:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN10Exceptions3AddEP9Exception>
		if(status.GetR2CO())
     f8a:	ce 01       	movw	r24, r28
     f8c:	02 96       	adiw	r24, 0x02	; 2
     f8e:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN5TC6546Status7GetR2COEv>
     f92:	88 23       	and	r24, r24
     f94:	69 f0       	breq	.+26     	; 0xfb0 <_ZN5TC6549CheckFan2EPKc+0xd8>
		exceptions->Add(new TC654Exception(name, TC654Exception::CounterOverflow));
     f96:	85 e0       	ldi	r24, 0x05	; 5
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
     f9e:	5c 01       	movw	r10, r24
     fa0:	41 e0       	ldi	r20, 0x01	; 1
     fa2:	b7 01       	movw	r22, r14
     fa4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
     fa8:	b5 01       	movw	r22, r10
     faa:	c6 01       	movw	r24, r12
     fac:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN10Exceptions3AddEP9Exception>
     fb0:	f8 01       	movw	r30, r16
     fb2:	10 82       	st	Z, r1
     fb4:	d2 82       	std	Z+2, r13	; 0x02
     fb6:	c1 82       	std	Z+1, r12	; 0x01
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <_ZN5TC6549CheckFan2EPKc+0xec>
	{
	}
	//successful constructor
PassFailCleanup():successful(true), payload(NULL)
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	f8 01       	movw	r30, r16
     fbe:	80 83       	st	Z, r24
     fc0:	12 82       	std	Z+2, r1	; 0x02
     fc2:	11 82       	std	Z+1, r1	; 0x01
		return PassFailCleanup<Exceptions*>(exceptions);

	}
	return PassFailCleanup<Exceptions*>();
}
     fc4:	c8 01       	movw	r24, r16
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	cf 90       	pop	r12
     fda:	bf 90       	pop	r11
     fdc:	af 90       	pop	r10
     fde:	08 95       	ret

00000fe0 <_ZN5TC65415GetIGetFan1InfoEv>:
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
}
IGetFanInfo* TC654::GetIGetFan1Info(){
	return &fan1;
}
     fe0:	0d 96       	adiw	r24, 0x0d	; 13
     fe2:	08 95       	ret

00000fe4 <_ZN5TC65415GetIGetFan2InfoEv>:
IGetFanInfo* TC654::GetIGetFan2Info(){
	return &fan2;
}
     fe4:	4f 96       	adiw	r24, 0x1f	; 31
     fe6:	08 95       	ret

00000fe8 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>:
#include <stdio.h>
#include <stdlib.h>
#include "TC654Exception.h"

// default constructor
TC654Exception::TC654Exception(const char* name, Type type):name(name), type(type)
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	ec 01       	movw	r28, r24
     ff4:	8b 01       	movw	r16, r22
     ff6:	f4 2e       	mov	r15, r20
     ff8:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN9ExceptionC1Ev>
     ffc:	f8 82       	st	Y, r15
     ffe:	1a 83       	std	Y+2, r17	; 0x02
    1000:	09 83       	std	Y+1, r16	; 0x01
    1002:	1c 82       	std	Y+4, r1	; 0x04
    1004:	1b 82       	std	Y+3, r1	; 0x03
{
	
} //TC654Exception
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	08 95       	ret

00001012 <_ZN12Temperatures17GetMaxTemperatureERb>:
}
void Temperatures::SetInterfaces(IGetTemperatureInfo** iGetTemperatureInfos, unsigned char  nIGetTemperatureInfos){
	this->iGetTemperatureInfos=iGetTemperatureInfos;
	this->nIGetTemperatureInfos=nIGetTemperatureInfos;
}
void Temperatures::Initialize(){
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	dc 01       	movw	r26, r24
    1022:	14 96       	adiw	r26, 0x04	; 4
    1024:	2c 91       	ld	r18, X
    1026:	14 97       	sbiw	r26, 0x04	; 4
    1028:	22 23       	and	r18, r18
    102a:	09 f4       	brne	.+2      	; 0x102e <_ZN12Temperatures17GetMaxTemperatureERb+0x1c>
    102c:	41 c0       	rjmp	.+130    	; 0x10b0 <_ZN12Temperatures17GetMaxTemperatureERb+0x9e>
    102e:	7b 01       	movw	r14, r22
    1030:	8c 01       	movw	r16, r24
    1032:	12 96       	adiw	r26, 0x02	; 2
    1034:	ed 91       	ld	r30, X+
    1036:	fc 91       	ld	r31, X
    1038:	13 97       	sbiw	r26, 0x03	; 3
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	dc 01       	movw	r26, r24
    1040:	ed 91       	ld	r30, X+
    1042:	fc 91       	ld	r31, X
    1044:	01 90       	ld	r0, Z+
    1046:	f0 81       	ld	r31, Z
    1048:	e0 2d       	mov	r30, r0
    104a:	09 95       	icall
    104c:	d8 2e       	mov	r13, r24
    104e:	f7 01       	movw	r30, r14
    1050:	80 81       	ld	r24, Z
    1052:	88 23       	and	r24, r24
    1054:	79 f1       	breq	.+94     	; 0x10b4 <_ZN12Temperatures17GetMaxTemperatureERb+0xa2>
    1056:	d8 01       	movw	r26, r16
    1058:	14 96       	adiw	r26, 0x04	; 4
    105a:	8c 91       	ld	r24, X
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 97       	sbiw	r24, 0x02	; 2
    1060:	5c f1       	brlt	.+86     	; 0x10b8 <_ZN12Temperatures17GetMaxTemperatureERb+0xa6>
    1062:	c1 e0       	ldi	r28, 0x01	; 1
    1064:	d0 e0       	ldi	r29, 0x00	; 0
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <_ZN12Temperatures17GetMaxTemperatureERb+0x62>
    1068:	f8 01       	movw	r30, r16
    106a:	24 81       	ldd	r18, Z+4	; 0x04
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	c2 17       	cp	r28, r18
    1070:	d3 07       	cpc	r29, r19
    1072:	24 f5       	brge	.+72     	; 0x10bc <_ZN12Temperatures17GetMaxTemperatureERb+0xaa>
    1074:	d8 01       	movw	r26, r16
    1076:	12 96       	adiw	r26, 0x02	; 2
    1078:	ed 91       	ld	r30, X+
    107a:	fc 91       	ld	r31, X
    107c:	13 97       	sbiw	r26, 0x03	; 3
    107e:	9e 01       	movw	r18, r28
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	e2 0f       	add	r30, r18
    1086:	f3 1f       	adc	r31, r19
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	dc 01       	movw	r26, r24
    108e:	ed 91       	ld	r30, X+
    1090:	fc 91       	ld	r31, X
    1092:	01 90       	ld	r0, Z+
    1094:	f0 81       	ld	r31, Z
    1096:	e0 2d       	mov	r30, r0
    1098:	b7 01       	movw	r22, r14
    109a:	09 95       	icall
    109c:	d8 16       	cp	r13, r24
    109e:	0c f4       	brge	.+2      	; 0x10a2 <_ZN12Temperatures17GetMaxTemperatureERb+0x90>
    10a0:	d8 2e       	mov	r13, r24
    10a2:	21 96       	adiw	r28, 0x01	; 1
    10a4:	f7 01       	movw	r30, r14
    10a6:	80 81       	ld	r24, Z
    10a8:	81 11       	cpse	r24, r1
    10aa:	de cf       	rjmp	.-68     	; 0x1068 <_ZN12Temperatures17GetMaxTemperatureERb+0x56>
    10ac:	8d 2d       	mov	r24, r13
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
    10b0:	8b e0       	ldi	r24, 0x0B	; 11
    10b2:	05 c0       	rjmp	.+10     	; 0x10be <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
    10b4:	8d 2d       	mov	r24, r13
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
    10b8:	8d 2d       	mov	r24, r13
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
    10bc:	8d 2d       	mov	r24, r13
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	08 95       	ret

000010ce <_ZN12Temperatures11GetInstanceEv>:
    10ce:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    10d2:	81 11       	cpse	r24, r1
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <_ZN12Temperatures11GetInstanceEv+0xe>
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    10dc:	87 ed       	ldi	r24, 0xD7	; 215
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	08 95       	ret

000010e2 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>:
    10e2:	fc 01       	movw	r30, r24
    10e4:	73 83       	std	Z+3, r23	; 0x03
    10e6:	62 83       	std	Z+2, r22	; 0x02
    10e8:	44 83       	std	Z+4, r20	; 0x04
    10ea:	08 95       	ret

000010ec <_GLOBAL__sub_I__ZN12Temperatures10_SingletonE>:
#ifndef __Temperatures_H__
#define __Temperatures_H__
#include "IGetTemperatureInfo.h"
#include "ITemperatures.h"

class Temperatures:
    10ec:	84 e6       	ldi	r24, 0x64	; 100
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <_ZN12Temperatures10_SingletonE+0x1>
    10f4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <_ZN12Temperatures10_SingletonE>
    10f8:	08 95       	ret

000010fa <_Znwj>:
		if(!Ticker::tickerCallbacksMilliseconds.contains(callback)){
		Ticker::tickerCallbacksMilliseconds.push_back(callback);}
	}
	else
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
    10fa:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <malloc>
    10fe:	08 95       	ret

00001100 <_Znaj>:
    1100:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <malloc>
    1104:	08 95       	ret

00001106 <_ZdlPv>:
    1106:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <free>
    110a:	08 95       	ret

0000110c <_ZdaPv>:
    110c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <free>
    1110:	08 95       	ret

00001112 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	2f 93       	push	r18
    1122:	3f 93       	push	r19
    1124:	4f 93       	push	r20
    1126:	5f 93       	push	r21
    1128:	6f 93       	push	r22
    112a:	7f 93       	push	r23
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
	cli();
    113c:	f8 94       	cli
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    113e:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <_ZN6Ticker27tickerCallbacksMillisecondsE>
    1142:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x1>
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    1146:	89 2b       	or	r24, r25
    1148:	c9 f0       	breq	.+50     	; 0x117c <__vector_14+0x6a>
    114a:	c0 e0       	ldi	r28, 0x00	; 0
    114c:	d0 e0       	ldi	r29, 0x00	; 0
	Data const &operator[](size_t idx)volatile const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx)volatile { return d_data[idx]; }; // Changeable getter
    114e:	02 ee       	ldi	r16, 0xE2	; 226
    1150:	12 e0       	ldi	r17, 0x02	; 2
    1152:	d8 01       	movw	r26, r16
    1154:	14 96       	adiw	r26, 0x04	; 4
    1156:	ed 91       	ld	r30, X+
    1158:	fc 91       	ld	r31, X
    115a:	15 97       	sbiw	r26, 0x05	; 5
	{
		Ticker::tickerCallbacksMilliseconds[i]();
    115c:	ce 01       	movw	r24, r28
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	e8 0f       	add	r30, r24
    1164:	f9 1f       	adc	r31, r25
    1166:	01 90       	ld	r0, Z+
    1168:	f0 81       	ld	r31, Z
    116a:	e0 2d       	mov	r30, r0
    116c:	09 95       	icall
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
ISR(TIMER0_COMPA_vect)
{
	cli();
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    116e:	21 96       	adiw	r28, 0x01	; 1
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    1170:	f8 01       	movw	r30, r16
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	c8 17       	cp	r28, r24
    1178:	d9 07       	cpc	r29, r25
    117a:	58 f3       	brcs	.-42     	; 0x1152 <__vector_14+0x40>
	{
		Ticker::tickerCallbacksMilliseconds[i]();
	}
	sei();
    117c:	78 94       	sei
}
    117e:	ff 91       	pop	r31
    1180:	ef 91       	pop	r30
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	bf 91       	pop	r27
    1188:	af 91       	pop	r26
    118a:	9f 91       	pop	r25
    118c:	8f 91       	pop	r24
    118e:	7f 91       	pop	r23
    1190:	6f 91       	pop	r22
    1192:	5f 91       	pop	r21
    1194:	4f 91       	pop	r20
    1196:	3f 91       	pop	r19
    1198:	2f 91       	pop	r18
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	0f 90       	pop	r0
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	0f 90       	pop	r0
    11a4:	1f 90       	pop	r1
    11a6:	18 95       	reti

000011a8 <_GLOBAL__sub_I__Znwj>:
 for(size_t i=0; i<d_size; i++){
	if(d==d_data[i])return true;
 }
 return false;
	}
	volatile_vector() : d_size(0), d_capacity(0), d_data(0) {
    11a8:	e2 ee       	ldi	r30, 0xE2	; 226
    11aa:	f2 e0       	ldi	r31, 0x02	; 2
    11ac:	11 82       	std	Z+1, r1	; 0x01
    11ae:	10 82       	st	Z, r1
    11b0:	13 82       	std	Z+3, r1	; 0x03
    11b2:	12 82       	std	Z+2, r1	; 0x02
    11b4:	15 82       	std	Z+5, r1	; 0x05
    11b6:	14 82       	std	Z+4, r1	; 0x04
    11b8:	ec ed       	ldi	r30, 0xDC	; 220
    11ba:	f2 e0       	ldi	r31, 0x02	; 2
    11bc:	11 82       	std	Z+1, r1	; 0x01
    11be:	10 82       	st	Z, r1
    11c0:	13 82       	std	Z+3, r1	; 0x03
    11c2:	12 82       	std	Z+2, r1	; 0x02
    11c4:	15 82       	std	Z+5, r1	; 0x05
    11c6:	14 82       	std	Z+4, r1	; 0x04
    11c8:	08 95       	ret

000011ca <_GLOBAL__sub_D__Znwj>:

	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
    11ca:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <_ZN6Ticker22tickerCallbacksSecondsE+0x4>
    11ce:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <_ZN6Ticker22tickerCallbacksSecondsE+0x5>
    11d2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <free>
    11d6:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x4>
    11da:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x5>
    11de:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <free>
    11e2:	08 95       	ret

000011e4 <_ZL11parseStringPc>:
	json_t const* field = json_getProperty( obj, property );
	if ( !field ) return 0;
        jsonType_t type = json_getType( field );
        if ( JSON_ARRAY >= type ) return 0;
	return json_getValue( field );
}
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
    11ea:	98 81       	ld	r25, Y
    11ec:	90 32       	cpi	r25, 0x20	; 32
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <_ZL11parseStringPc+0xe>
    11f0:	57 c0       	rjmp	.+174    	; 0x12a0 <_ZL11parseStringPc+0xbc>
    11f2:	92 32       	cpi	r25, 0x22	; 34
    11f4:	31 f0       	breq	.+12     	; 0x1202 <_ZL11parseStringPc+0x1e>
    11f6:	de 01       	movw	r26, r28
    11f8:	4f e3       	ldi	r20, 0x3F	; 63
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <_ZL11parseStringPc+0x28>
    11fc:	92 32       	cpi	r25, 0x22	; 34
    11fe:	31 f4       	brne	.+12     	; 0x120c <_ZL11parseStringPc+0x28>
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <_ZL11parseStringPc+0x20>
    1202:	de 01       	movw	r26, r28
    1204:	1c 92       	st	X, r1
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	5b c0       	rjmp	.+182    	; 0x12c2 <_ZL11parseStringPc+0xde>
    120c:	9c 35       	cpi	r25, 0x5C	; 92
    120e:	e1 f5       	brne	.+120    	; 0x1288 <_ZL11parseStringPc+0xa4>
    1210:	99 81       	ldd	r25, Y+1	; 0x01
    1212:	95 37       	cpi	r25, 0x75	; 117
    1214:	19 f0       	breq	.+6      	; 0x121c <_ZL11parseStringPc+0x38>
    1216:	92 32       	cpi	r25, 0x22	; 34
    1218:	c9 f4       	brne	.+50     	; 0x124c <_ZL11parseStringPc+0x68>
    121a:	20 c0       	rjmp	.+64     	; 0x125c <_ZL11parseStringPc+0x78>
    121c:	fe 01       	movw	r30, r28
    121e:	32 96       	adiw	r30, 0x02	; 2
    1220:	9e 01       	movw	r18, r28
    1222:	2a 5f       	subi	r18, 0xFA	; 250
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	81 91       	ld	r24, Z+
    1228:	80 33       	cpi	r24, 0x30	; 48
    122a:	e8 f1       	brcs	.+122    	; 0x12a6 <_ZL11parseStringPc+0xc2>
    122c:	8a 33       	cpi	r24, 0x3A	; 58
    122e:	38 f0       	brcs	.+14     	; 0x123e <_ZL11parseStringPc+0x5a>
    1230:	81 34       	cpi	r24, 0x41	; 65
    1232:	e0 f1       	brcs	.+120    	; 0x12ac <_ZL11parseStringPc+0xc8>
    1234:	87 34       	cpi	r24, 0x47	; 71
    1236:	18 f0       	brcs	.+6      	; 0x123e <_ZL11parseStringPc+0x5a>
    1238:	81 56       	subi	r24, 0x61	; 97
    123a:	86 30       	cpi	r24, 0x06	; 6
    123c:	d0 f5       	brcc	.+116    	; 0x12b2 <_ZL11parseStringPc+0xce>
    123e:	e2 17       	cp	r30, r18
    1240:	f3 07       	cpc	r31, r19
    1242:	89 f7       	brne	.-30     	; 0x1226 <_ZL11parseStringPc+0x42>
    1244:	4c 93       	st	X, r20
    1246:	fe 01       	movw	r30, r28
    1248:	35 96       	adiw	r30, 0x05	; 5
    124a:	20 c0       	rjmp	.+64     	; 0x128c <_ZL11parseStringPc+0xa8>
    124c:	e8 ea       	ldi	r30, 0xA8	; 168
    124e:	f2 e0       	ldi	r31, 0x02	; 2
    1250:	21 e0       	ldi	r18, 0x01	; 1
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	98 13       	cpse	r25, r24
    1258:	0c c0       	rjmp	.+24     	; 0x1272 <_ZL11parseStringPc+0x8e>
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <_ZL11parseStringPc+0x7c>
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	22 0f       	add	r18, r18
    1262:	33 1f       	adc	r19, r19
    1264:	f9 01       	movw	r30, r18
    1266:	e8 55       	subi	r30, 0x58	; 88
    1268:	fd 4f       	sbci	r31, 0xFD	; 253
    126a:	81 81       	ldd	r24, Z+1	; 0x01
    126c:	81 11       	cpse	r24, r1
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <_ZL11parseStringPc+0x9c>
    1270:	23 c0       	rjmp	.+70     	; 0x12b8 <_ZL11parseStringPc+0xd4>
    1272:	2f 5f       	subi	r18, 0xFF	; 255
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	32 96       	adiw	r30, 0x02	; 2
    1278:	28 30       	cpi	r18, 0x08	; 8
    127a:	31 05       	cpc	r19, r1
    127c:	59 f7       	brne	.-42     	; 0x1254 <_ZL11parseStringPc+0x70>
    127e:	1f c0       	rjmp	.+62     	; 0x12be <_ZL11parseStringPc+0xda>
    1280:	fe 01       	movw	r30, r28
    1282:	31 96       	adiw	r30, 0x01	; 1
    1284:	8c 93       	st	X, r24
    1286:	02 c0       	rjmp	.+4      	; 0x128c <_ZL11parseStringPc+0xa8>
    1288:	9c 93       	st	X, r25
    128a:	fe 01       	movw	r30, r28
    128c:	ef 01       	movw	r28, r30
    128e:	21 96       	adiw	r28, 0x01	; 1
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	90 32       	cpi	r25, 0x20	; 32
    1296:	08 f0       	brcs	.+2      	; 0x129a <_ZL11parseStringPc+0xb6>
    1298:	b1 cf       	rjmp	.-158    	; 0x11fc <_ZL11parseStringPc+0x18>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	11 c0       	rjmp	.+34     	; 0x12c2 <_ZL11parseStringPc+0xde>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e c0       	rjmp	.+28     	; 0x12c2 <_ZL11parseStringPc+0xde>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0b c0       	rjmp	.+22     	; 0x12c2 <_ZL11parseStringPc+0xde>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <_ZL11parseStringPc+0xde>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <_ZL11parseStringPc+0xde>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <_ZL11parseStringPc+0xde>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <_ZL11isOneOfThemcPKc>:
    12c8:	fb 01       	movw	r30, r22
    12ca:	91 91       	ld	r25, Z+
    12cc:	99 23       	and	r25, r25
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <_ZL11isOneOfThemcPKc+0x10>
    12d0:	98 13       	cpse	r25, r24
    12d2:	fb cf       	rjmp	.-10     	; 0x12ca <_ZL11isOneOfThemcPKc+0x2>
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	08 95       	ret
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	08 95       	ret

000012dc <_ZL7goWhilePcPKc>:
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	ec 01       	movw	r28, r24
    12e6:	8b 01       	movw	r16, r22
    12e8:	88 81       	ld	r24, Y
    12ea:	88 23       	and	r24, r24
    12ec:	59 f0       	breq	.+22     	; 0x1304 <_ZL7goWhilePcPKc+0x28>
    12ee:	b8 01       	movw	r22, r16
    12f0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZL11isOneOfThemcPKc>
    12f4:	88 23       	and	r24, r24
    12f6:	49 f0       	breq	.+18     	; 0x130a <_ZL7goWhilePcPKc+0x2e>
    12f8:	21 96       	adiw	r28, 0x01	; 1
    12fa:	88 81       	ld	r24, Y
    12fc:	81 11       	cpse	r24, r1
    12fe:	f7 cf       	rjmp	.-18     	; 0x12ee <_ZL7goWhilePcPKc+0x12>
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	05 c0       	rjmp	.+10     	; 0x130e <_ZL7goWhilePcPKc+0x32>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <_ZL7goWhilePcPKc+0x32>
    130a:	8c 2f       	mov	r24, r28
    130c:	9d 2f       	mov	r25, r29
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <_ZL5goNumPc>:
    1318:	fc 01       	movw	r30, r24
    131a:	80 81       	ld	r24, Z
    131c:	88 23       	and	r24, r24
    131e:	81 f0       	breq	.+32     	; 0x1340 <_ZL5goNumPc+0x28>
    1320:	80 53       	subi	r24, 0x30	; 48
    1322:	8a 30       	cpi	r24, 0x0A	; 10
    1324:	80 f4       	brcc	.+32     	; 0x1346 <_ZL5goNumPc+0x2e>
    1326:	31 96       	adiw	r30, 0x01	; 1
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <_ZL5goNumPc+0x18>
    132a:	20 53       	subi	r18, 0x30	; 48
    132c:	2a 30       	cpi	r18, 0x0A	; 10
    132e:	68 f4       	brcc	.+26     	; 0x134a <_ZL5goNumPc+0x32>
    1330:	8e 2f       	mov	r24, r30
    1332:	9f 2f       	mov	r25, r31
    1334:	21 91       	ld	r18, Z+
    1336:	21 11       	cpse	r18, r1
    1338:	f8 cf       	rjmp	.-16     	; 0x132a <_ZL5goNumPc+0x12>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	08 95       	ret
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	08 95       	ret
    1346:	8e 2f       	mov	r24, r30
    1348:	9f 2f       	mov	r25, r31
    134a:	08 95       	ret

0000134c <_ZL16isEndOfPrimitivec>:
    134c:	cf 93       	push	r28
    134e:	8c 32       	cpi	r24, 0x2C	; 44
    1350:	69 f0       	breq	.+26     	; 0x136c <_ZL16isEndOfPrimitivec+0x20>
    1352:	c8 2f       	mov	r28, r24
    1354:	66 e6       	ldi	r22, 0x66	; 102
    1356:	72 e0       	ldi	r23, 0x02	; 2
    1358:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZL11isOneOfThemcPKc>
    135c:	81 11       	cpse	r24, r1
    135e:	07 c0       	rjmp	.+14     	; 0x136e <_ZL16isEndOfPrimitivec+0x22>
    1360:	6c e6       	ldi	r22, 0x6C	; 108
    1362:	72 e0       	ldi	r23, 0x02	; 2
    1364:	8c 2f       	mov	r24, r28
    1366:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZL11isOneOfThemcPKc>
    136a:	01 c0       	rjmp	.+2      	; 0x136e <_ZL16isEndOfPrimitivec+0x22>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>:
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	8b 01       	movw	r16, r22
    137e:	f2 2e       	mov	r15, r18
    1380:	e4 2f       	mov	r30, r20
    1382:	f5 2f       	mov	r31, r21
    1384:	ec 01       	movw	r28, r24
    1386:	21 91       	ld	r18, Z+
    1388:	22 23       	and	r18, r18
    138a:	29 f0       	breq	.+10     	; 0x1396 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x24>
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	38 81       	ld	r19, Y
    1390:	23 17       	cp	r18, r19
    1392:	c1 f3       	breq	.-16     	; 0x1384 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x12>
    1394:	15 c0       	rjmp	.+42     	; 0x13c0 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x4e>
    1396:	89 2b       	or	r24, r25
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x54>
    139a:	88 81       	ld	r24, Y
    139c:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZL16isEndOfPrimitivec>
    13a0:	88 23       	and	r24, r24
    13a2:	a1 f0       	breq	.+40     	; 0x13cc <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5a>
    13a4:	6c e6       	ldi	r22, 0x6C	; 108
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	88 81       	ld	r24, Y
    13aa:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZL11isOneOfThemcPKc>
    13ae:	81 11       	cpse	r24, r1
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x44>
    13b2:	18 82       	st	Y, r1
    13b4:	21 96       	adiw	r28, 0x01	; 1
    13b6:	f8 01       	movw	r30, r16
    13b8:	f6 82       	std	Z+6, r15	; 0x06
    13ba:	8c 2f       	mov	r24, r28
    13bc:	9d 2f       	mov	r25, r29
    13be:	08 c0       	rjmp	.+16     	; 0x13d0 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	05 c0       	rjmp	.+10     	; 0x13d0 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	08 95       	ret

000013dc <json_getProperty>:
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	8b 01       	movw	r16, r22
    13e6:	fc 01       	movw	r30, r24
    13e8:	c4 81       	ldd	r28, Z+4	; 0x04
    13ea:	d5 81       	ldd	r29, Z+5	; 0x05
    13ec:	20 97       	sbiw	r28, 0x00	; 0
    13ee:	89 f0       	breq	.+34     	; 0x1412 <json_getProperty+0x36>
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	29 f0       	breq	.+10     	; 0x1402 <json_getProperty+0x26>
    13f8:	b8 01       	movw	r22, r16
    13fa:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
    13fe:	89 2b       	or	r24, r25
    1400:	59 f0       	breq	.+22     	; 0x1418 <json_getProperty+0x3c>
    1402:	09 90       	ld	r0, Y+
    1404:	d8 81       	ld	r29, Y
    1406:	c0 2d       	mov	r28, r0
    1408:	20 97       	sbiw	r28, 0x00	; 0
    140a:	91 f7       	brne	.-28     	; 0x13f0 <json_getProperty+0x14>
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	05 c0       	rjmp	.+10     	; 0x141c <json_getProperty+0x40>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <json_getProperty+0x40>
    1418:	8c 2f       	mov	r24, r28
    141a:	9d 2f       	mov	r25, r29
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <json_create>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    1426:	2f 92       	push	r2
    1428:	3f 92       	push	r3
    142a:	4f 92       	push	r4
    142c:	5f 92       	push	r5
    142e:	6f 92       	push	r6
    1430:	7f 92       	push	r7
    1432:	8f 92       	push	r8
    1434:	9f 92       	push	r9
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	00 d0       	rcall	.+0      	; 0x144c <json_create+0x26>
    144c:	1f 92       	push	r1
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	5b 01       	movw	r10, r22
    1454:	3a 01       	movw	r6, r20

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1456:	66 e6       	ldi	r22, 0x66	; 102
    1458:	72 e0       	ldi	r23, 0x02	; 2
    145a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZL7goWhilePcPKc>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	09 f4       	brne	.+2      	; 0x1464 <json_create+0x3e>
    1462:	bb c1       	rjmp	.+886    	; 0x17da <json_create+0x3b4>
    1464:	dc 01       	movw	r26, r24
    1466:	2c 91       	ld	r18, X
    1468:	2b 37       	cpi	r18, 0x7B	; 123
    146a:	09 f0       	breq	.+2      	; 0x146e <json_create+0x48>
    146c:	b9 c1       	rjmp	.+882    	; 0x17e0 <json_create+0x3ba>
    jsonPool_t pool = { .mem = mem, .qty = qty };
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    146e:	f5 01       	movw	r30, r10
    1470:	13 82       	std	Z+3, r1	; 0x03
    1472:	12 82       	std	Z+2, r1	; 0x02
    obj->sibling = 0;
    1474:	11 82       	std	Z+1, r1	; 0x01
    1476:	10 82       	st	Z, r1
    obj->u.child = 0;
    1478:	15 82       	std	Z+5, r1	; 0x05
    147a:	14 82       	std	Z+4, r1	; 0x04
  * @param str Pointer to first character.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
    obj->type    = JSON_OBJ;
    147c:	16 82       	std	Z+6, r1	; 0x06
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    147e:	8c 01       	movw	r16, r24
    1480:	0f 5f       	subi	r16, 0xFF	; 255
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	75 01       	movw	r14, r10

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
    pool->nextFree = 1;
    1486:	cc 24       	eor	r12, r12
    1488:	c3 94       	inc	r12
    148a:	d1 2c       	mov	r13, r1
    if ( *ptr != '0' ) {
        ptr = goNum( ptr );
        if ( !ptr ) return 0;
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    148c:	68 94       	set
    148e:	22 24       	eor	r2, r2
    1490:	22 f8       	bld	r2, 2
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    ptr = parseString( ++ptr );
    if ( !ptr ) return 0;
    property->type = JSON_TEXT;
    1492:	68 94       	set
    1494:	44 24       	eor	r4, r4
    1496:	41 f8       	bld	r4, 1
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    1498:	33 24       	eor	r3, r3
    149a:	33 94       	inc	r3
        if ( !ptr ) return 0;
        if ( *ptr == ',' ) {
            ++ptr;
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    149c:	0f 2e       	mov	r0, r31
    149e:	fd e7       	ldi	r31, 0x7D	; 125
    14a0:	5f 2e       	mov	r5, r31
    14a2:	f0 2d       	mov	r31, r0

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    14a4:	66 e6       	ldi	r22, 0x66	; 102
    14a6:	72 e0       	ldi	r23, 0x02	; 2
    14a8:	c8 01       	movw	r24, r16
    14aa:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZL7goWhilePcPKc>
    14ae:	9b 83       	std	Y+3, r25	; 0x03
    14b0:	8a 83       	std	Y+2, r24	; 0x02
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    for(;;) {
        ptr = goBlank( ptr );
        if ( !ptr ) return 0;
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <json_create+0x92>
    14b6:	9a c1       	rjmp	.+820    	; 0x17ec <json_create+0x3c6>
        if ( *ptr == ',' ) {
    14b8:	dc 01       	movw	r26, r24
    14ba:	8c 91       	ld	r24, X
    14bc:	8c 32       	cpi	r24, 0x2C	; 44
    14be:	21 f4       	brne	.+8      	; 0x14c8 <json_create+0xa2>
            ++ptr;
    14c0:	8d 01       	movw	r16, r26
    14c2:	0f 5f       	subi	r16, 0xFF	; 255
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	ee cf       	rjmp	.-36     	; 0x14a4 <json_create+0x7e>
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    14c8:	f7 01       	movw	r30, r14
    14ca:	96 81       	ldd	r25, Z+6	; 0x06
    14cc:	99 23       	and	r25, r25
    14ce:	11 f0       	breq	.+4      	; 0x14d4 <json_create+0xae>
    14d0:	2d e5       	ldi	r18, 0x5D	; 93
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <json_create+0xb0>
    14d4:	25 2d       	mov	r18, r5
        if ( *ptr == endchar ) {
    14d6:	82 13       	cpse	r24, r18
    14d8:	16 c0       	rjmp	.+44     	; 0x1506 <json_create+0xe0>
            *ptr = '\0';
    14da:	aa 81       	ldd	r26, Y+2	; 0x02
    14dc:	bb 81       	ldd	r27, Y+3	; 0x03
    14de:	1c 92       	st	X, r1
            json_t* parentObj = obj->sibling;
    14e0:	f7 01       	movw	r30, r14
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
            if ( !parentObj ) return ++ptr;
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	31 f4       	brne	.+12     	; 0x14f6 <json_create+0xd0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    14ea:	11 96       	adiw	r26, 0x01	; 1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <json_create+0xca>
    14ee:	7b c1       	rjmp	.+758    	; 0x17e6 <json_create+0x3c0>
    return obj;
    14f0:	8a 2d       	mov	r24, r10
    14f2:	9b 2d       	mov	r25, r11
    14f4:	80 c1       	rjmp	.+768    	; 0x17f6 <json_create+0x3d0>
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
    14f6:	11 82       	std	Z+1, r1	; 0x01
    14f8:	10 82       	st	Z, r1
            obj = parentObj;
            ++ptr;
    14fa:	0a 81       	ldd	r16, Y+2	; 0x02
    14fc:	1b 81       	ldd	r17, Y+3	; 0x03
    14fe:	0f 5f       	subi	r16, 0xFF	; 255
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
            obj = parentObj;
    1502:	7c 01       	movw	r14, r24
    1504:	cf cf       	rjmp	.-98     	; 0x14a4 <json_create+0x7e>
/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    1506:	c6 14       	cp	r12, r6
    1508:	d7 04       	cpc	r13, r7
    150a:	08 f0       	brcs	.+2      	; 0x150e <json_create+0xe8>
    150c:	72 c1       	rjmp	.+740    	; 0x17f2 <json_create+0x3cc>
    return &pool->mem[pool->nextFree++];
    150e:	46 01       	movw	r8, r12
    1510:	bf ef       	ldi	r27, 0xFF	; 255
    1512:	8b 1a       	sub	r8, r27
    1514:	9b 0a       	sbc	r9, r27
    1516:	96 01       	movw	r18, r12
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	f9 01       	movw	r30, r18
    1526:	ec 19       	sub	r30, r12
    1528:	fd 09       	sbc	r31, r13
    152a:	6f 01       	movw	r12, r30
    152c:	ca 0c       	add	r12, r10
    152e:	db 1c       	adc	r13, r11
            obj = parentObj;
            ++ptr;
            continue;
        }
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
    1530:	c1 14       	cp	r12, r1
    1532:	d1 04       	cpc	r13, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <json_create+0x112>
    1536:	5a c1       	rjmp	.+692    	; 0x17ec <json_create+0x3c6>
        if( obj->type != JSON_ARRAY ) {
    1538:	91 30       	cpi	r25, 0x01	; 1
    153a:	31 f1       	breq	.+76     	; 0x1588 <json_create+0x162>
            if ( *ptr != '\"' ) return 0;
    153c:	82 32       	cpi	r24, 0x22	; 34
    153e:	09 f0       	breq	.+2      	; 0x1542 <json_create+0x11c>
    1540:	55 c1       	rjmp	.+682    	; 0x17ec <json_create+0x3c6>
  * @param str Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	9b 81       	ldd	r25, Y+3	; 0x03
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	d6 01       	movw	r26, r12
    154a:	13 96       	adiw	r26, 0x03	; 3
    154c:	9c 93       	st	X, r25
    154e:	8e 93       	st	-X, r24
    1550:	12 97       	sbiw	r26, 0x02	; 2
    ptr = parseString( ptr );
    1552:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZL11parseStringPc>
    if ( !ptr ) return 0;
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	09 f4       	brne	.+2      	; 0x155c <json_create+0x136>
    155a:	4b c1       	rjmp	.+662    	; 0x17f2 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    155c:	66 e6       	ldi	r22, 0x66	; 102
    155e:	72 e0       	ldi	r23, 0x02	; 2
    1560:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZL7goWhilePcPKc>
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    ptr = parseString( ptr );
    if ( !ptr ) return 0;
    ptr = goBlank( ptr );
    if ( !ptr ) return 0;
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	09 f4       	brne	.+2      	; 0x156a <json_create+0x144>
    1568:	44 c1       	rjmp	.+648    	; 0x17f2 <json_create+0x3cc>
    if ( *ptr++ != ':' ) return 0;
    156a:	fc 01       	movw	r30, r24
    156c:	20 81       	ld	r18, Z
    156e:	2a 33       	cpi	r18, 0x3A	; 58
    1570:	09 f0       	breq	.+2      	; 0x1574 <json_create+0x14e>
    1572:	3f c1       	rjmp	.+638    	; 0x17f2 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1574:	66 e6       	ldi	r22, 0x66	; 102
    1576:	72 e0       	ldi	r23, 0x02	; 2
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZL7goWhilePcPKc>
    157e:	9b 83       	std	Y+3, r25	; 0x03
    1580:	8a 83       	std	Y+2, r24	; 0x02
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
        if( obj->type != JSON_ARRAY ) {
            if ( *ptr != '\"' ) return 0;
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
    1582:	89 2b       	or	r24, r25
    1584:	31 f4       	brne	.+12     	; 0x1592 <json_create+0x16c>
    1586:	32 c1       	rjmp	.+612    	; 0x17ec <json_create+0x3c6>
        }
        else property->name = 0;
    1588:	d6 01       	movw	r26, r12
    158a:	13 96       	adiw	r26, 0x03	; 3
    158c:	1c 92       	st	X, r1
    158e:	1e 92       	st	-X, r1
    1590:	12 97       	sbiw	r26, 0x02	; 2

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
    property->sibling = 0;
    1592:	f6 01       	movw	r30, r12
    1594:	11 82       	std	Z+1, r1	; 0x01
    1596:	10 82       	st	Z, r1
    if ( !obj->u.child ) obj->u.child = property;
    1598:	d7 01       	movw	r26, r14
    159a:	14 96       	adiw	r26, 0x04	; 4
    159c:	ed 91       	ld	r30, X+
    159e:	fc 91       	ld	r31, X
    15a0:	15 97       	sbiw	r26, 0x05	; 5
    15a2:	30 97       	sbiw	r30, 0x00	; 0
    15a4:	39 f4       	brne	.+14     	; 0x15b4 <json_create+0x18e>
    15a6:	15 96       	adiw	r26, 0x05	; 5
    15a8:	dc 92       	st	X, r13
    15aa:	ce 92       	st	-X, r12
    15ac:	14 97       	sbiw	r26, 0x04	; 4
    15ae:	08 c0       	rjmp	.+16     	; 0x15c0 <json_create+0x19a>
    else {
        json_t* iter;
        for( iter = obj->u.child; iter->sibling; iter = iter->sibling );
    15b0:	fc 01       	movw	r30, r24
    15b2:	00 c0       	rjmp	.+0      	; 0x15b4 <json_create+0x18e>
    15b4:	80 81       	ld	r24, Z
    15b6:	91 81       	ldd	r25, Z+1	; 0x01
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	d1 f7       	brne	.-12     	; 0x15b0 <json_create+0x18a>
        iter->sibling = property;
    15bc:	d1 82       	std	Z+1, r13	; 0x01
    15be:	c0 82       	st	Z, r12
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
        }
        else property->name = 0;
        add( obj, property );
        property->u.value = ptr;
    15c0:	ea 81       	ldd	r30, Y+2	; 0x02
    15c2:	fb 81       	ldd	r31, Y+3	; 0x03
    15c4:	d6 01       	movw	r26, r12
    15c6:	15 96       	adiw	r26, 0x05	; 5
    15c8:	fc 93       	st	X, r31
    15ca:	ee 93       	st	-X, r30
    15cc:	14 97       	sbiw	r26, 0x04	; 4
        switch( *ptr ) {
    15ce:	80 81       	ld	r24, Z
    15d0:	86 36       	cpi	r24, 0x66	; 102
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <json_create+0x1b0>
    15d4:	46 c0       	rjmp	.+140    	; 0x1662 <json_create+0x23c>
    15d6:	28 f4       	brcc	.+10     	; 0x15e2 <json_create+0x1bc>
    15d8:	82 32       	cpi	r24, 0x22	; 34
    15da:	39 f1       	breq	.+78     	; 0x162a <json_create+0x204>
    15dc:	8b 35       	cpi	r24, 0x5B	; 91
    15de:	c9 f0       	breq	.+50     	; 0x1612 <json_create+0x1ec>
    15e0:	54 c0       	rjmp	.+168    	; 0x168a <json_create+0x264>
    15e2:	84 37       	cpi	r24, 0x74	; 116
    15e4:	a1 f1       	breq	.+104    	; 0x164e <json_create+0x228>
    15e6:	8b 37       	cpi	r24, 0x7B	; 123
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <json_create+0x1cc>
    15ea:	8e 36       	cpi	r24, 0x6E	; 110
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <json_create+0x1ca>
    15ee:	4d c0       	rjmp	.+154    	; 0x168a <json_create+0x264>
    15f0:	42 c0       	rjmp	.+132    	; 0x1676 <json_create+0x250>
            case '{':
                property->type    = JSON_OBJ;
    15f2:	d6 01       	movw	r26, r12
    15f4:	16 96       	adiw	r26, 0x06	; 6
    15f6:	1c 92       	st	X, r1
    15f8:	16 97       	sbiw	r26, 0x06	; 6
                property->u.child = 0;
    15fa:	15 96       	adiw	r26, 0x05	; 5
    15fc:	1c 92       	st	X, r1
    15fe:	1e 92       	st	-X, r1
    1600:	14 97       	sbiw	r26, 0x04	; 4
                property->sibling = obj;
    1602:	ed 92       	st	X+, r14
    1604:	fc 92       	st	X, r15
                obj = property;
                ++ptr;
    1606:	0a 81       	ldd	r16, Y+2	; 0x02
    1608:	1b 81       	ldd	r17, Y+3	; 0x03
    160a:	0f 5f       	subi	r16, 0xFF	; 255
    160c:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    160e:	76 01       	movw	r14, r12
    1610:	df c0       	rjmp	.+446    	; 0x17d0 <json_create+0x3aa>
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    1612:	f6 01       	movw	r30, r12
    1614:	36 82       	std	Z+6, r3	; 0x06
                property->u.child = 0;
    1616:	15 82       	std	Z+5, r1	; 0x05
    1618:	14 82       	std	Z+4, r1	; 0x04
                property->sibling = obj;
    161a:	f1 82       	std	Z+1, r15	; 0x01
    161c:	e0 82       	st	Z, r14
                obj = property;
                ++ptr;
    161e:	0a 81       	ldd	r16, Y+2	; 0x02
    1620:	1b 81       	ldd	r17, Y+3	; 0x03
    1622:	0f 5f       	subi	r16, 0xFF	; 255
    1624:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1626:	76 01       	movw	r14, r12
    1628:	d3 c0       	rjmp	.+422    	; 0x17d0 <json_create+0x3aa>
  * @param str Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	9b 81       	ldd	r25, Y+3	; 0x03
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	d6 01       	movw	r26, r12
    1632:	15 96       	adiw	r26, 0x05	; 5
    1634:	9c 93       	st	X, r25
    1636:	8e 93       	st	-X, r24
    1638:	14 97       	sbiw	r26, 0x04	; 4
    ptr = parseString( ++ptr );
    163a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZL11parseStringPc>
    163e:	8c 01       	movw	r16, r24
    if ( !ptr ) return 0;
    1640:	89 2b       	or	r24, r25
    1642:	09 f4       	brne	.+2      	; 0x1646 <json_create+0x220>
    1644:	d6 c0       	rjmp	.+428    	; 0x17f2 <json_create+0x3cc>
    property->type = JSON_TEXT;
    1646:	f6 01       	movw	r30, r12
    1648:	46 82       	std	Z+6, r4	; 0x06
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    164a:	64 01       	movw	r12, r8
    164c:	2b cf       	rjmp	.-426    	; 0x14a4 <json_create+0x7e>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
    164e:	23 e0       	ldi	r18, 0x03	; 3
    1650:	4f e6       	ldi	r20, 0x6F	; 111
    1652:	52 e0       	ldi	r21, 0x02	; 2
    1654:	b6 01       	movw	r22, r12
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	0e 94 b9 09 	call	0x1372	; 0x1372 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    165e:	8c 01       	movw	r16, r24
    1660:	b7 c0       	rjmp	.+366    	; 0x17d0 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
    1662:	23 e0       	ldi	r18, 0x03	; 3
    1664:	44 e7       	ldi	r20, 0x74	; 116
    1666:	52 e0       	ldi	r21, 0x02	; 2
    1668:	b6 01       	movw	r22, r12
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	9b 81       	ldd	r25, Y+3	; 0x03
    166e:	0e 94 b9 09 	call	0x1372	; 0x1372 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1672:	8c 01       	movw	r16, r24
    1674:	ad c0       	rjmp	.+346    	; 0x17d0 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "null", JSON_NULL );
    1676:	26 e0       	ldi	r18, 0x06	; 6
    1678:	4a e7       	ldi	r20, 0x7A	; 122
    167a:	52 e0       	ldi	r21, 0x02	; 2
    167c:	b6 01       	movw	r22, r12
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	9b 81       	ldd	r25, Y+3	; 0x03
    1682:	0e 94 b9 09 	call	0x1372	; 0x1372 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1686:	8c 01       	movw	r16, r24
    1688:	a3 c0       	rjmp	.+326    	; 0x17d0 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
    if ( *ptr == '-' ) ++ptr;
    168a:	8d 32       	cpi	r24, 0x2D	; 45
    168c:	21 f4       	brne	.+8      	; 0x1696 <json_create+0x270>
    168e:	ea 81       	ldd	r30, Y+2	; 0x02
    1690:	fb 81       	ldd	r31, Y+3	; 0x03
    1692:	31 96       	adiw	r30, 0x01	; 1
    1694:	02 c0       	rjmp	.+4      	; 0x169a <json_create+0x274>
    1696:	ea 81       	ldd	r30, Y+2	; 0x02
    1698:	fb 81       	ldd	r31, Y+3	; 0x03
    if ( !isNum( *ptr ) ) return 0;
    169a:	80 81       	ld	r24, Z
    169c:	90 ed       	ldi	r25, 0xD0	; 208
    169e:	98 0f       	add	r25, r24
    16a0:	9a 30       	cpi	r25, 0x0A	; 10
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <json_create+0x280>
    16a4:	a6 c0       	rjmp	.+332    	; 0x17f2 <json_create+0x3cc>
    if ( *ptr != '0' ) {
    16a6:	80 33       	cpi	r24, 0x30	; 48
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <json_create+0x292>
        ptr = goNum( ptr );
    16aa:	cf 01       	movw	r24, r30
    16ac:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZL5goNumPc>
    16b0:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
    16b2:	89 2b       	or	r24, r25
    16b4:	49 f4       	brne	.+18     	; 0x16c8 <json_create+0x2a2>
    16b6:	9d c0       	rjmp	.+314    	; 0x17f2 <json_create+0x3cc>
    }
    else if ( isNum( *++ptr ) ) return 0;
    16b8:	8f 01       	movw	r16, r30
    16ba:	0f 5f       	subi	r16, 0xFF	; 255
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	81 81       	ldd	r24, Z+1	; 0x01
    16c0:	80 53       	subi	r24, 0x30	; 48
    16c2:	8a 30       	cpi	r24, 0x0A	; 10
    16c4:	08 f4       	brcc	.+2      	; 0x16c8 <json_create+0x2a2>
    16c6:	95 c0       	rjmp	.+298    	; 0x17f2 <json_create+0x3cc>
    property->type = JSON_INTEGER;
    16c8:	d6 01       	movw	r26, r12
    16ca:	16 96       	adiw	r26, 0x06	; 6
    16cc:	2c 92       	st	X, r2
    if ( *ptr == '.' ) {
    16ce:	f8 01       	movw	r30, r16
    16d0:	80 81       	ld	r24, Z
    16d2:	8e 32       	cpi	r24, 0x2E	; 46
    16d4:	89 f4       	brne	.+34     	; 0x16f8 <json_create+0x2d2>
/** Analyze the decimal part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
    if ( !isNum( *ptr ) ) return 0;
    16d6:	81 81       	ldd	r24, Z+1	; 0x01
    16d8:	80 53       	subi	r24, 0x30	; 48
    16da:	8a 30       	cpi	r24, 0x0A	; 10
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <json_create+0x2ba>
    16de:	86 c0       	rjmp	.+268    	; 0x17ec <json_create+0x3c6>
    ptr = goNum( ++ptr );
    16e0:	c8 01       	movw	r24, r16
    16e2:	02 96       	adiw	r24, 0x02	; 2
    16e4:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZL5goNumPc>
    16e8:	8c 01       	movw	r16, r24
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    if ( *ptr == '.' ) {
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
    16ea:	89 2b       	or	r24, r25
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <json_create+0x2ca>
    16ee:	81 c0       	rjmp	.+258    	; 0x17f2 <json_create+0x3cc>
        property->type = JSON_REAL;
    16f0:	e5 e0       	ldi	r30, 0x05	; 5
    16f2:	d6 01       	movw	r26, r12
    16f4:	16 96       	adiw	r26, 0x06	; 6
    16f6:	ec 93       	st	X, r30
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
    16f8:	d8 01       	movw	r26, r16
    16fa:	8c 91       	ld	r24, X
    16fc:	8f 7d       	andi	r24, 0xDF	; 223
    16fe:	85 34       	cpi	r24, 0x45	; 69
    1700:	11 f5       	brne	.+68     	; 0x1746 <json_create+0x320>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    1702:	11 96       	adiw	r26, 0x01	; 1
    1704:	8c 91       	ld	r24, X
    1706:	8d 32       	cpi	r24, 0x2D	; 45
    1708:	29 f0       	breq	.+10     	; 0x1714 <json_create+0x2ee>
    170a:	8b 32       	cpi	r24, 0x2B	; 43
    170c:	19 f0       	breq	.+6      	; 0x1714 <json_create+0x2ee>
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
    170e:	f8 01       	movw	r30, r16
    1710:	31 96       	adiw	r30, 0x01	; 1
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <json_create+0x2f2>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    1714:	f8 01       	movw	r30, r16
    1716:	32 96       	adiw	r30, 0x02	; 2
    if ( !isNum( *ptr ) ) return 0;
    1718:	90 81       	ld	r25, Z
    171a:	90 53       	subi	r25, 0x30	; 48
    171c:	9a 30       	cpi	r25, 0x0A	; 10
    171e:	08 f0       	brcs	.+2      	; 0x1722 <json_create+0x2fc>
    1720:	65 c0       	rjmp	.+202    	; 0x17ec <json_create+0x3c6>
    ptr = goNum( ++ptr );
    1722:	cf 01       	movw	r24, r30
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZL5goNumPc>
    172a:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
        if ( !ptr ) return 0;
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	09 f4       	brne	.+2      	; 0x1732 <json_create+0x30c>
    1730:	60 c0       	rjmp	.+192    	; 0x17f2 <json_create+0x3cc>
        property->type = JSON_REAL;
    1732:	25 e0       	ldi	r18, 0x05	; 5
    1734:	f6 01       	movw	r30, r12
    1736:	26 83       	std	Z+6, r18	; 0x06
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
    1738:	dc 01       	movw	r26, r24
    173a:	8c 91       	ld	r24, X
    173c:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZL16isEndOfPrimitivec>
    1740:	81 11       	cpse	r24, r1
    1742:	3a c0       	rjmp	.+116    	; 0x17b8 <json_create+0x392>
    1744:	56 c0       	rjmp	.+172    	; 0x17f2 <json_create+0x3cc>
    1746:	f8 01       	movw	r30, r16
    1748:	f0 81       	ld	r31, Z
    174a:	f9 83       	std	Y+1, r31	; 0x01
    174c:	8f 2f       	mov	r24, r31
    174e:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZL16isEndOfPrimitivec>
    1752:	88 23       	and	r24, r24
    1754:	09 f4       	brne	.+2      	; 0x1758 <json_create+0x332>
    1756:	4d c0       	rjmp	.+154    	; 0x17f2 <json_create+0x3cc>
    if ( JSON_INTEGER == property->type ) {
    1758:	d6 01       	movw	r26, r12
    175a:	16 96       	adiw	r26, 0x06	; 6
    175c:	8c 91       	ld	r24, X
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	59 f5       	brne	.+86     	; 0x17b8 <json_create+0x392>
        char const* value = property->u.value;
        bool const negative = *value == '-';
    1762:	ea 81       	ldd	r30, Y+2	; 0x02
    1764:	fb 81       	ldd	r31, Y+3	; 0x03
    1766:	40 81       	ld	r20, Z
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
    1768:	4d 32       	cpi	r20, 0x2D	; 45
    176a:	19 f0       	breq	.+6      	; 0x1772 <json_create+0x34c>
    176c:	83 e1       	ldi	r24, 0x13	; 19
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <json_create+0x350>
    1772:	84 e1       	ldi	r24, 0x14	; 20
    1774:	90 e0       	ldi	r25, 0x00	; 0
        unsigned int const len = ptr - value;
    1776:	98 01       	movw	r18, r16
    1778:	6a 81       	ldd	r22, Y+2	; 0x02
    177a:	7b 81       	ldd	r23, Y+3	; 0x03
    177c:	26 1b       	sub	r18, r22
    177e:	37 0b       	sbc	r19, r23
        if ( len > maxdigits ) return 0;
    1780:	82 17       	cp	r24, r18
    1782:	93 07       	cpc	r25, r19
    1784:	b0 f1       	brcs	.+108    	; 0x17f2 <json_create+0x3cc>
        if ( len == maxdigits ) {
    1786:	28 17       	cp	r18, r24
    1788:	39 07       	cpc	r19, r25
    178a:	b1 f4       	brne	.+44     	; 0x17b8 <json_create+0x392>
            char const tmp = *ptr;
            *ptr = '\0';
    178c:	d8 01       	movw	r26, r16
    178e:	1c 92       	st	X, r1
            char const* const threshold = negative ? min: max;
    1790:	4d 32       	cpi	r20, 0x2D	; 45
    1792:	29 f0       	breq	.+10     	; 0x179e <json_create+0x378>
    1794:	ef e7       	ldi	r30, 0x7F	; 127
    1796:	f2 e0       	ldi	r31, 0x02	; 2
    1798:	8e 2f       	mov	r24, r30
    179a:	9f 2f       	mov	r25, r31
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <json_create+0x380>
    179e:	23 e9       	ldi	r18, 0x93	; 147
    17a0:	32 e0       	ldi	r19, 0x02	; 2
    17a2:	82 2f       	mov	r24, r18
    17a4:	93 2f       	mov	r25, r19
            if ( 0 > strcmp( threshold, value ) ) return 0;
    17a6:	6a 81       	ldd	r22, Y+2	; 0x02
    17a8:	7b 81       	ldd	r23, Y+3	; 0x03
    17aa:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <strcmp>
    17ae:	99 23       	and	r25, r25
    17b0:	04 f1       	brlt	.+64     	; 0x17f2 <json_create+0x3cc>
            *ptr = tmp;
    17b2:	e9 81       	ldd	r30, Y+1	; 0x01
    17b4:	d8 01       	movw	r26, r16
    17b6:	ec 93       	st	X, r30

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
    17b8:	6c e6       	ldi	r22, 0x6C	; 108
    17ba:	72 e0       	ldi	r23, 0x02	; 2
    17bc:	d8 01       	movw	r26, r16
    17be:	8c 91       	ld	r24, X
    17c0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZL11isOneOfThemcPKc>
    17c4:	81 11       	cpse	r24, r1
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <json_create+0x3aa>
    17c8:	f8 01       	movw	r30, r16
    17ca:	10 82       	st	Z, r1
    17cc:	0f 5f       	subi	r16, 0xFF	; 255
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
            case 't':  ptr = trueValue( ptr, property );  break;
            case 'f':  ptr = falseValue( ptr, property ); break;
            case 'n':  ptr = nullValue( ptr, property );  break;
            default:   ptr = numValue( ptr, property );   break;
        }
        if ( !ptr ) return 0;
    17d0:	01 15       	cp	r16, r1
    17d2:	11 05       	cpc	r17, r1
    17d4:	59 f0       	breq	.+22     	; 0x17ec <json_create+0x3c6>
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    17d6:	64 01       	movw	r12, r8
    17d8:	65 ce       	rjmp	.-822    	; 0x14a4 <json_create+0x7e>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0b c0       	rjmp	.+22     	; 0x17f6 <json_create+0x3d0>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <json_create+0x3d0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <json_create+0x3d0>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <json_create+0x3d0>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    return obj;
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	bf 90       	pop	r11
    180e:	af 90       	pop	r10
    1810:	9f 90       	pop	r9
    1812:	8f 90       	pop	r8
    1814:	7f 90       	pop	r7
    1816:	6f 90       	pop	r6
    1818:	5f 90       	pop	r5
    181a:	4f 90       	pop	r4
    181c:	3f 90       	pop	r3
    181e:	2f 90       	pop	r2
    1820:	08 95       	ret

00001822 <_ZN4UART11GetMessagesEv>:
					bufferIndexes[nBuffer]=bufferIndex+1;
				}
			}
		}
	}
	Messages* UART::GetMessages(){
    1822:	3f 92       	push	r3
    1824:	4f 92       	push	r4
    1826:	5f 92       	push	r5
    1828:	6f 92       	push	r6
    182a:	7f 92       	push	r7
    182c:	8f 92       	push	r8
    182e:	9f 92       	push	r9
    1830:	af 92       	push	r10
    1832:	bf 92       	push	r11
    1834:	cf 92       	push	r12
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	2a 97       	sbiw	r28, 0x0a	; 10
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	5c 01       	movw	r10, r24
    1856:	e1 2c       	mov	r14, r1
    1858:	f1 2c       	mov	r15, r1
		char tempMessagesIndex=0;
    185a:	31 2c       	mov	r3, r1
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    185c:	2c 01       	movw	r4, r24
    185e:	84 ef       	ldi	r24, 0xF4	; 244
    1860:	48 1a       	sub	r4, r24
    1862:	8e ef       	ldi	r24, 0xFE	; 254
    1864:	58 0a       	sbc	r5, r24
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
					tempMessages[tempMessagesIndex]=new Message(buf, length);
					tempMessagesIndex++;
					bufferIndexes[i]=0;
					overflowedBuffers=false;
    1866:	f5 01       	movw	r30, r10
    1868:	e2 5f       	subi	r30, 0xF2	; 242
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	fa 87       	std	Y+10, r31	; 0x0a
    186e:	e9 87       	std	Y+9, r30	; 0x09
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1870:	f2 01       	movw	r30, r4
    1872:	80 81       	ld	r24, Z
    1874:	8e 15       	cp	r24, r14
    1876:	09 f4       	brne	.+2      	; 0x187a <_ZN4UART11GetMessagesEv+0x58>
    1878:	4f c0       	rjmp	.+158    	; 0x1918 <_ZN4UART11GetMessagesEv+0xf6>
				if(bufferIndexes[i]>0){
    187a:	47 01       	movw	r8, r14
    187c:	67 01       	movw	r12, r14
    187e:	cc 0c       	add	r12, r12
    1880:	dd 1c       	adc	r13, r13
    1882:	ca 0c       	add	r12, r10
    1884:	db 1c       	adc	r13, r11
    1886:	f6 01       	movw	r30, r12
    1888:	84 81       	ldd	r24, Z+4	; 0x04
    188a:	95 81       	ldd	r25, Z+5	; 0x05
    188c:	18 16       	cp	r1, r24
    188e:	19 06       	cpc	r1, r25
    1890:	0c f0       	brlt	.+2      	; 0x1894 <_ZN4UART11GetMessagesEv+0x72>
    1892:	42 c0       	rjmp	.+132    	; 0x1918 <_ZN4UART11GetMessagesEv+0xf6>

				unsigned int length = bufferIndexes[i];
    1894:	04 81       	ldd	r16, Z+4	; 0x04
    1896:	15 81       	ldd	r17, Z+5	; 0x05
					char* buf = new char[ length+1];
    1898:	c8 01       	movw	r24, r16
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	0e 94 80 08 	call	0x1100	; 0x1100 <_Znaj>
    18a0:	3c 01       	movw	r6, r24
					for (int j = 0; j < length; j++)
    18a2:	01 15       	cp	r16, r1
    18a4:	11 05       	cpc	r17, r1
    18a6:	c1 f0       	breq	.+48     	; 0x18d8 <_ZN4UART11GetMessagesEv+0xb6>
    18a8:	fc 01       	movw	r30, r24
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
					buf[j] = (char)buffer[i][j];
    18ae:	00 24       	eor	r0, r0
    18b0:	96 94       	lsr	r9
    18b2:	87 94       	ror	r8
    18b4:	07 94       	ror	r0
    18b6:	96 94       	lsr	r9
    18b8:	87 94       	ror	r8
    18ba:	07 94       	ror	r0
    18bc:	98 2c       	mov	r9, r8
    18be:	80 2c       	mov	r8, r0
    18c0:	8a 0c       	add	r8, r10
    18c2:	9b 1c       	adc	r9, r11
    18c4:	d4 01       	movw	r26, r8
    18c6:	a8 0f       	add	r26, r24
    18c8:	b9 1f       	adc	r27, r25
    18ca:	1c 96       	adiw	r26, 0x0c	; 12
    18cc:	2c 91       	ld	r18, X
    18ce:	21 93       	st	Z+, r18
			if(i!=nBuffer){
				if(bufferIndexes[i]>0){

				unsigned int length = bufferIndexes[i];
					char* buf = new char[ length+1];
					for (int j = 0; j < length; j++)
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	08 17       	cp	r16, r24
    18d4:	19 07       	cpc	r17, r25
    18d6:	b1 f7       	brne	.-20     	; 0x18c4 <_ZN4UART11GetMessagesEv+0xa2>
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
    18d8:	f3 01       	movw	r30, r6
    18da:	e0 0f       	add	r30, r16
    18dc:	f1 1f       	adc	r31, r17
    18de:	10 82       	st	Z, r1
					tempMessages[tempMessagesIndex]=new Message(buf, length);
    18e0:	84 e0       	ldi	r24, 0x04	; 4
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
    18e8:	4c 01       	movw	r8, r24
    18ea:	a8 01       	movw	r20, r16
    18ec:	b3 01       	movw	r22, r6
    18ee:	0e 94 43 04 	call	0x886	; 0x886 <_ZN7MessageC1EPKcj>
    18f2:	e3 2d       	mov	r30, r3
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	8c 0f       	add	r24, r28
    1900:	9d 1f       	adc	r25, r29
    1902:	e8 0f       	add	r30, r24
    1904:	f9 1f       	adc	r31, r25
    1906:	91 82       	std	Z+1, r9	; 0x01
    1908:	80 82       	st	Z, r8
					tempMessagesIndex++;
    190a:	33 94       	inc	r3
					bufferIndexes[i]=0;
    190c:	f6 01       	movw	r30, r12
    190e:	15 82       	std	Z+5, r1	; 0x05
    1910:	14 82       	std	Z+4, r1	; 0x04
					overflowedBuffers=false;
    1912:	e9 85       	ldd	r30, Y+9	; 0x09
    1914:	fa 85       	ldd	r31, Y+10	; 0x0a
    1916:	10 82       	st	Z, r1
    1918:	ff ef       	ldi	r31, 0xFF	; 255
    191a:	ef 1a       	sub	r14, r31
    191c:	ff 0a       	sbc	r15, r31
		}
	}
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	e8 16       	cp	r14, r24
    1922:	f1 04       	cpc	r15, r1
    1924:	09 f0       	breq	.+2      	; 0x1928 <_ZN4UART11GetMessagesEv+0x106>
    1926:	a4 cf       	rjmp	.-184    	; 0x1870 <_ZN4UART11GetMessagesEv+0x4e>
					bufferIndexes[i]=0;
					overflowedBuffers=false;
				}
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
    1928:	33 20       	and	r3, r3
    192a:	61 f0       	breq	.+24     	; 0x1944 <_ZN4UART11GetMessagesEv+0x122>
    192c:	84 e0       	ldi	r24, 0x04	; 4
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_Znwj>
    1934:	8c 01       	movw	r16, r24
    1936:	43 2d       	mov	r20, r3
    1938:	be 01       	movw	r22, r28
    193a:	6f 5f       	subi	r22, 0xFF	; 255
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN8MessagesC1EPP7Messagec>
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <_ZN4UART11GetMessagesEv+0x126>
    1944:	00 e0       	ldi	r16, 0x00	; 0
    1946:	10 e0       	ldi	r17, 0x00	; 0
		return m;
}
    1948:	c8 01       	movw	r24, r16
    194a:	2a 96       	adiw	r28, 0x0a	; 10
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	bf 90       	pop	r11
    1968:	af 90       	pop	r10
    196a:	9f 90       	pop	r9
    196c:	8f 90       	pop	r8
    196e:	7f 90       	pop	r7
    1970:	6f 90       	pop	r6
    1972:	5f 90       	pop	r5
    1974:	4f 90       	pop	r4
    1976:	3f 90       	pop	r3
    1978:	08 95       	ret

0000197a <_ZThn2_N4UART11GetMessagesEv>:
    197a:	02 97       	sbiw	r24, 0x02	; 2
    197c:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN4UART11GetMessagesEv>
    1980:	08 95       	ret

00001982 <_ZN4UART10InitializeEv>:
 initialized=true;
 }
	return _Singleton;
}
 void UART::Initialize ()
{
    1982:	fc 01       	movw	r30, r24
	//volatile int bufferIndexes[UART_N_BUFFERS];
	//volatile char buffer[UART_N_BUFFERS][UART_BUFFER_SIZE] ;
	
	nBuffer=0;
    1984:	dc 01       	movw	r26, r24
    1986:	a4 5f       	subi	r26, 0xF4	; 244
    1988:	be 4f       	sbci	r27, 0xFE	; 254
    198a:	1c 92       	st	X, r1
	overflowedCurrentBuffer=false;
    198c:	11 96       	adiw	r26, 0x01	; 1
    198e:	1c 92       	st	X, r1
	overflowedBuffers=false;
    1990:	11 96       	adiw	r26, 0x01	; 1
    1992:	1c 92       	st	X, r1
	DDRD =DDRD&0xFE;
    1994:	50 98       	cbi	0x0a, 0	; 10
	DDRD = DDRD | 0x2;
    1996:	51 9a       	sbi	0x0a, 1	; 10
//PORTD=PORTD&0x1;
	for(char i=0; i<UART_N_BUFFERS; i++)
	{
		bufferIndexes[i]=0;
    1998:	15 82       	std	Z+5, r1	; 0x05
    199a:	14 82       	std	Z+4, r1	; 0x04
    199c:	17 82       	std	Z+7, r1	; 0x07
    199e:	16 82       	std	Z+6, r1	; 0x06
    19a0:	11 86       	std	Z+9, r1	; 0x09
    19a2:	10 86       	std	Z+8, r1	; 0x08
    19a4:	13 86       	std	Z+11, r1	; 0x0b
    19a6:	12 86       	std	Z+10, r1	; 0x0a
	}
	UBRR0H = UBRRH_VALUE;
    19a8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    19ac:	83 e3       	ldi	r24, 0x33	; 51
    19ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#if USE_U2X
	UCSR0A |= (1<<U2X0);
	#else
	UCSR0A &= ~(1<<U2X0);
    19b2:	e0 ec       	ldi	r30, 0xC0	; 192
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8d 7f       	andi	r24, 0xFD	; 253
    19ba:	80 83       	st	Z, r24
	#endif
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|( 1<<RXCIE0);
    19bc:	88 e9       	ldi	r24, 0x98	; 152
    19be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    19c2:	e2 ec       	ldi	r30, 0xC2	; 194
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	86 60       	ori	r24, 0x06	; 6
    19ca:	80 83       	st	Z, r24

	sei();
    19cc:	78 94       	sei
    19ce:	08 95       	ret

000019d0 <_ZN4UART11GetInstanceEv>:
#include <util/setbaud.h>

 UART UART:: _Singleton;
  UART& UART::GetInstance(){
 static bool initialized=false;
 if(!initialized)
    19d0:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZZN4UART11GetInstanceEvE11initialized>
    19d4:	81 11       	cpse	r24, r1
    19d6:	07 c0       	rjmp	.+14     	; 0x19e6 <_ZN4UART11GetInstanceEv+0x16>
 {
 _Singleton.Initialize();
    19d8:	89 ee       	ldi	r24, 0xE9	; 233
    19da:	92 e0       	ldi	r25, 0x02	; 2
    19dc:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN4UART10InitializeEv>
 initialized=true;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <_ZZN4UART11GetInstanceEvE11initialized>
 }
	return _Singleton;
}
    19e6:	89 ee       	ldi	r24, 0xE9	; 233
    19e8:	92 e0       	ldi	r25, 0x02	; 2
    19ea:	08 95       	ret

000019ec <_ZN4UART8IncomingEv>:

	sei();
}

void UART::Incoming(){
	unsigned char data = UDR0;
    19ec:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(    data==13||data==10   )
    19f0:	2d 30       	cpi	r18, 0x0D	; 13
    19f2:	19 f0       	breq	.+6      	; 0x19fa <_ZN4UART8IncomingEv+0xe>
    19f4:	2a 30       	cpi	r18, 0x0A	; 10
    19f6:	09 f0       	breq	.+2      	; 0x19fa <_ZN4UART8IncomingEv+0xe>
    19f8:	67 c0       	rjmp	.+206    	; 0x1ac8 <_ZN4UART8IncomingEv+0xdc>
	{
		if(bufferIndexes[nBuffer]!=0)
    19fa:	fc 01       	movw	r30, r24
    19fc:	e4 5f       	subi	r30, 0xF4	; 244
    19fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1a00:	e0 81       	ld	r30, Z
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	32 96       	adiw	r30, 0x02	; 2
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	e8 0f       	add	r30, r24
    1a0c:	f9 1f       	adc	r31, r25
    1a0e:	20 81       	ld	r18, Z
    1a10:	31 81       	ldd	r19, Z+1	; 0x01
    1a12:	23 2b       	or	r18, r19
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <_ZN4UART8IncomingEv+0x2c>
    1a16:	94 c0       	rjmp	.+296    	; 0x1b40 <_ZN4UART8IncomingEv+0x154>
		{
			if(!overflowedCurrentBuffer)
    1a18:	fc 01       	movw	r30, r24
    1a1a:	e3 5f       	subi	r30, 0xF3	; 243
    1a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1e:	20 81       	ld	r18, Z
    1a20:	21 11       	cpse	r18, r1
    1a22:	41 c0       	rjmp	.+130    	; 0x1aa6 <_ZN4UART8IncomingEv+0xba>
			{
				if(nBuffer<UART_N_BUFFERS-1)
    1a24:	31 97       	sbiw	r30, 0x01	; 1
    1a26:	20 81       	ld	r18, Z
    1a28:	23 30       	cpi	r18, 0x03	; 3
    1a2a:	30 f0       	brcs	.+12     	; 0x1a38 <_ZN4UART8IncomingEv+0x4c>
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	24 81       	ldd	r18, Z+4	; 0x04
    1a30:	35 81       	ldd	r19, Z+5	; 0x05
    1a32:	23 2b       	or	r18, r19
    1a34:	a9 f4       	brne	.+42     	; 0x1a60 <_ZN4UART8IncomingEv+0x74>
    1a36:	27 c0       	rjmp	.+78     	; 0x1a86 <_ZN4UART8IncomingEv+0x9a>
		{
			if(!overflowedCurrentBuffer)
			{
				if(nBuffer<UART_N_BUFFERS-1)
				{
					nBuffer++;
    1a38:	fc 01       	movw	r30, r24
    1a3a:	e4 5f       	subi	r30, 0xF4	; 244
    1a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3e:	20 81       	ld	r18, Z
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	20 83       	st	Z, r18
					bufferIndexes[nBuffer]=0;
    1a44:	e0 81       	ld	r30, Z
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	32 96       	adiw	r30, 0x02	; 2
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	e8 0f       	add	r30, r24
    1a50:	f9 1f       	adc	r31, r25
    1a52:	11 82       	std	Z+1, r1	; 0x01
    1a54:	10 82       	st	Z, r1
					overflowedCurrentBuffer=false;
    1a56:	fc 01       	movw	r30, r24
    1a58:	e3 5f       	subi	r30, 0xF3	; 243
    1a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5c:	10 82       	st	Z, r1
    1a5e:	08 95       	ret
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1a60:	fc 01       	movw	r30, r24
    1a62:	26 81       	ldd	r18, Z+6	; 0x06
    1a64:	37 81       	ldd	r19, Z+7	; 0x07
    1a66:	23 2b       	or	r18, r19
    1a68:	51 f0       	breq	.+20     	; 0x1a7e <_ZN4UART8IncomingEv+0x92>
    1a6a:	20 85       	ldd	r18, Z+8	; 0x08
    1a6c:	31 85       	ldd	r19, Z+9	; 0x09
    1a6e:	23 2b       	or	r18, r19
    1a70:	41 f0       	breq	.+16     	; 0x1a82 <_ZN4UART8IncomingEv+0x96>
    1a72:	22 85       	ldd	r18, Z+10	; 0x0a
    1a74:	33 85       	ldd	r19, Z+11	; 0x0b
    1a76:	23 2b       	or	r18, r19
    1a78:	81 f4       	brne	.+32     	; 0x1a9a <_ZN4UART8IncomingEv+0xae>
					overflowedCurrentBuffer=false;

				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
    1a7a:	23 e0       	ldi	r18, 0x03	; 3
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <_ZN4UART8IncomingEv+0x9c>
    1a7e:	21 e0       	ldi	r18, 0x01	; 1
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <_ZN4UART8IncomingEv+0x9c>
    1a82:	22 e0       	ldi	r18, 0x02	; 2
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <_ZN4UART8IncomingEv+0x9c>
					{
						if(bufferIndexes[i]==0)
    1a86:	20 e0       	ldi	r18, 0x00	; 0
						{
							nBuffer=i;
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e4 5f       	subi	r30, 0xF4	; 244
    1a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8e:	20 83       	st	Z, r18
							overflowedCurrentBuffer=false;
    1a90:	31 96       	adiw	r30, 0x01	; 1
    1a92:	10 82       	st	Z, r1
							overflowedBuffers=false;
    1a94:	31 96       	adiw	r30, 0x01	; 1
    1a96:	10 82       	st	Z, r1
							return;
    1a98:	08 95       	ret
						}
					}
					overflowedBuffers=true;
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	e2 5f       	subi	r30, 0xF2	; 242
    1a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa0:	21 e0       	ldi	r18, 0x01	; 1
    1aa2:	20 83       	st	Z, r18
    1aa4:	08 95       	ret
				}
			}
			else
			{
				overflowedCurrentBuffer=false;
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	e3 5f       	subi	r30, 0xF3	; 243
    1aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    1aac:	10 82       	st	Z, r1
				bufferIndexes[nBuffer]=0;
    1aae:	31 97       	sbiw	r30, 0x01	; 1
    1ab0:	20 81       	ld	r18, Z
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	2e 5f       	subi	r18, 0xFE	; 254
    1ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab8:	22 0f       	add	r18, r18
    1aba:	33 1f       	adc	r19, r19
    1abc:	fc 01       	movw	r30, r24
    1abe:	e2 0f       	add	r30, r18
    1ac0:	f3 1f       	adc	r31, r19
    1ac2:	11 82       	std	Z+1, r1	; 0x01
    1ac4:	10 82       	st	Z, r1
    1ac6:	08 95       	ret
			}
		}
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
    1ac8:	fc 01       	movw	r30, r24
    1aca:	e3 5f       	subi	r30, 0xF3	; 243
    1acc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ace:	30 81       	ld	r19, Z
    1ad0:	31 11       	cpse	r19, r1
    1ad2:	36 c0       	rjmp	.+108    	; 0x1b40 <_ZN4UART8IncomingEv+0x154>
    1ad4:	31 96       	adiw	r30, 0x01	; 1
    1ad6:	30 81       	ld	r19, Z
    1ad8:	31 11       	cpse	r19, r1
    1ada:	32 c0       	rjmp	.+100    	; 0x1b40 <_ZN4UART8IncomingEv+0x154>
    1adc:	21 c0       	rjmp	.+66     	; 0x1b20 <_ZN4UART8IncomingEv+0x134>
		{
			int bufferIndex=bufferIndexes[nBuffer];
			if(bufferIndex>=UART_BUFFER_SIZE)
			{
				overflowedCurrentBuffer=true;
    1ade:	fc 01       	movw	r30, r24
    1ae0:	e3 5f       	subi	r30, 0xF3	; 243
    1ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae4:	21 e0       	ldi	r18, 0x01	; 1
    1ae6:	20 83       	st	Z, r18
    1ae8:	08 95       	ret
			}
			else{
					buffer[nBuffer][bufferIndex]=data;
    1aea:	dc 01       	movw	r26, r24
    1aec:	a4 5f       	subi	r26, 0xF4	; 244
    1aee:	be 4f       	sbci	r27, 0xFE	; 254
    1af0:	3c 91       	ld	r19, X
    1af2:	fc 01       	movw	r30, r24
    1af4:	60 e4       	ldi	r22, 0x40	; 64
    1af6:	36 9f       	mul	r19, r22
    1af8:	e0 0d       	add	r30, r0
    1afa:	f1 1d       	adc	r31, r1
    1afc:	11 24       	eor	r1, r1
    1afe:	e4 0f       	add	r30, r20
    1b00:	f5 1f       	adc	r31, r21
    1b02:	24 87       	std	Z+12, r18	; 0x0c
					bufferIndexes[nBuffer]=bufferIndex+1;
    1b04:	2c 91       	ld	r18, X
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4f 5f       	subi	r20, 0xFF	; 255
    1b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0c:	2e 5f       	subi	r18, 0xFE	; 254
    1b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b10:	22 0f       	add	r18, r18
    1b12:	33 1f       	adc	r19, r19
    1b14:	fc 01       	movw	r30, r24
    1b16:	e2 0f       	add	r30, r18
    1b18:	f3 1f       	adc	r31, r19
    1b1a:	51 83       	std	Z+1, r21	; 0x01
    1b1c:	40 83       	st	Z, r20
    1b1e:	08 95       	ret
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
		{
			int bufferIndex=bufferIndexes[nBuffer];
    1b20:	fc 01       	movw	r30, r24
    1b22:	e4 5f       	subi	r30, 0xF4	; 244
    1b24:	fe 4f       	sbci	r31, 0xFE	; 254
    1b26:	e0 81       	ld	r30, Z
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	32 96       	adiw	r30, 0x02	; 2
    1b2c:	ee 0f       	add	r30, r30
    1b2e:	ff 1f       	adc	r31, r31
    1b30:	e8 0f       	add	r30, r24
    1b32:	f9 1f       	adc	r31, r25
    1b34:	40 81       	ld	r20, Z
    1b36:	51 81       	ldd	r21, Z+1	; 0x01
			if(bufferIndex>=UART_BUFFER_SIZE)
    1b38:	40 34       	cpi	r20, 0x40	; 64
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	b4 f2       	brlt	.-84     	; 0x1aea <_ZN4UART8IncomingEv+0xfe>
    1b3e:	cf cf       	rjmp	.-98     	; 0x1ade <_ZN4UART8IncomingEv+0xf2>
    1b40:	08 95       	ret

00001b42 <__vector_18>:
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
		return m;
}
	ISR(USART_RX_vect){
    1b42:	1f 92       	push	r1
    1b44:	0f 92       	push	r0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	0f 92       	push	r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	2f 93       	push	r18
    1b4e:	3f 93       	push	r19
    1b50:	4f 93       	push	r20
    1b52:	5f 93       	push	r21
    1b54:	6f 93       	push	r22
    1b56:	7f 93       	push	r23
    1b58:	8f 93       	push	r24
    1b5a:	9f 93       	push	r25
    1b5c:	af 93       	push	r26
    1b5e:	bf 93       	push	r27
    1b60:	ef 93       	push	r30
    1b62:	ff 93       	push	r31
		cli();
    1b64:	f8 94       	cli
		UART::GetInstance().Incoming();
    1b66:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4UART11GetInstanceEv>
    1b6a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN4UART8IncomingEv>
		sei();
    1b6e:	78 94       	sei
	}
    1b70:	ff 91       	pop	r31
    1b72:	ef 91       	pop	r30
    1b74:	bf 91       	pop	r27
    1b76:	af 91       	pop	r26
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	7f 91       	pop	r23
    1b7e:	6f 91       	pop	r22
    1b80:	5f 91       	pop	r21
    1b82:	4f 91       	pop	r20
    1b84:	3f 91       	pop	r19
    1b86:	2f 91       	pop	r18
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	0f 90       	pop	r0
    1b8e:	1f 90       	pop	r1
    1b90:	18 95       	reti

00001b92 <_ZN4UART4SendEc>:
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
    1b92:	e0 ec       	ldi	r30, 0xC0	; 192
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	85 ff       	sbrs	r24, 5
    1b9a:	fd cf       	rjmp	.-6      	; 0x1b96 <_ZN4UART4SendEc+0x4>
		UDR0=message;
    1b9c:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1ba0:	08 95       	ret

00001ba2 <_ZN4UART11SendMessageEPKcj>:
	}
	void UART::SendMessage(const char* message, unsigned int length){
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
		for(unsigned int i=0; i<length; i++)
    1bae:	41 15       	cp	r20, r1
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <_ZN4UART11SendMessageEPKcj+0x2a>
    1bb4:	8b 01       	movw	r16, r22
    1bb6:	7c 01       	movw	r14, r24
    1bb8:	eb 01       	movw	r28, r22
    1bba:	04 0f       	add	r16, r20
    1bbc:	15 1f       	adc	r17, r21
		Send(*(message+i));
    1bbe:	69 91       	ld	r22, Y+
    1bc0:	c7 01       	movw	r24, r14
    1bc2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN4UART4SendEc>
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
		UDR0=message;
	}
	void UART::SendMessage(const char* message, unsigned int length){
		for(unsigned int i=0; i<length; i++)
    1bc6:	c0 17       	cp	r28, r16
    1bc8:	d1 07       	cpc	r29, r17
    1bca:	c9 f7       	brne	.-14     	; 0x1bbe <_ZN4UART11SendMessageEPKcj+0x1c>
		Send(*(message+i));
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	08 95       	ret

00001bda <_GLOBAL__sub_I__ZN4UART10_SingletonE>:
void operator=(UART const&) = delete; // Don't implement
protected:
public:

private:
UART(){}
    1bda:	e9 ee       	ldi	r30, 0xE9	; 233
    1bdc:	f2 e0       	ldi	r31, 0x02	; 2
    1bde:	8c eb       	ldi	r24, 0xBC	; 188
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	84 ec       	ldi	r24, 0xC4	; 196
    1be8:	92 e0       	ldi	r25, 0x02	; 2
    1bea:	93 83       	std	Z+3, r25	; 0x03
    1bec:	82 83       	std	Z+2, r24	; 0x02
    1bee:	08 95       	ret

00001bf0 <__tablejump2__>:
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	05 90       	lpm	r0, Z+
    1bf6:	f4 91       	lpm	r31, Z
    1bf8:	e0 2d       	mov	r30, r0
    1bfa:	09 94       	ijmp

00001bfc <malloc>:
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	82 30       	cpi	r24, 0x02	; 2
    1c06:	91 05       	cpc	r25, r1
    1c08:	10 f4       	brcc	.+4      	; 0x1c0e <malloc+0x12>
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <__flp>
    1c12:	f0 91 fb 03 	lds	r31, 0x03FB	; 0x8003fb <__flp+0x1>
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	a0 e0       	ldi	r26, 0x00	; 0
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	30 97       	sbiw	r30, 0x00	; 0
    1c20:	19 f1       	breq	.+70     	; 0x1c68 <malloc+0x6c>
    1c22:	40 81       	ld	r20, Z
    1c24:	51 81       	ldd	r21, Z+1	; 0x01
    1c26:	02 81       	ldd	r16, Z+2	; 0x02
    1c28:	13 81       	ldd	r17, Z+3	; 0x03
    1c2a:	48 17       	cp	r20, r24
    1c2c:	59 07       	cpc	r21, r25
    1c2e:	c8 f0       	brcs	.+50     	; 0x1c62 <malloc+0x66>
    1c30:	84 17       	cp	r24, r20
    1c32:	95 07       	cpc	r25, r21
    1c34:	69 f4       	brne	.+26     	; 0x1c50 <malloc+0x54>
    1c36:	10 97       	sbiw	r26, 0x00	; 0
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <malloc+0x4a>
    1c3a:	12 96       	adiw	r26, 0x02	; 2
    1c3c:	0c 93       	st	X, r16
    1c3e:	12 97       	sbiw	r26, 0x02	; 2
    1c40:	13 96       	adiw	r26, 0x03	; 3
    1c42:	1c 93       	st	X, r17
    1c44:	27 c0       	rjmp	.+78     	; 0x1c94 <malloc+0x98>
    1c46:	00 93 fa 03 	sts	0x03FA, r16	; 0x8003fa <__flp>
    1c4a:	10 93 fb 03 	sts	0x03FB, r17	; 0x8003fb <__flp+0x1>
    1c4e:	22 c0       	rjmp	.+68     	; 0x1c94 <malloc+0x98>
    1c50:	21 15       	cp	r18, r1
    1c52:	31 05       	cpc	r19, r1
    1c54:	19 f0       	breq	.+6      	; 0x1c5c <malloc+0x60>
    1c56:	42 17       	cp	r20, r18
    1c58:	53 07       	cpc	r21, r19
    1c5a:	18 f4       	brcc	.+6      	; 0x1c62 <malloc+0x66>
    1c5c:	9a 01       	movw	r18, r20
    1c5e:	bd 01       	movw	r22, r26
    1c60:	ef 01       	movw	r28, r30
    1c62:	df 01       	movw	r26, r30
    1c64:	f8 01       	movw	r30, r16
    1c66:	db cf       	rjmp	.-74     	; 0x1c1e <malloc+0x22>
    1c68:	21 15       	cp	r18, r1
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	f9 f0       	breq	.+62     	; 0x1cac <malloc+0xb0>
    1c6e:	28 1b       	sub	r18, r24
    1c70:	39 0b       	sbc	r19, r25
    1c72:	24 30       	cpi	r18, 0x04	; 4
    1c74:	31 05       	cpc	r19, r1
    1c76:	80 f4       	brcc	.+32     	; 0x1c98 <malloc+0x9c>
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7c:	61 15       	cp	r22, r1
    1c7e:	71 05       	cpc	r23, r1
    1c80:	21 f0       	breq	.+8      	; 0x1c8a <malloc+0x8e>
    1c82:	fb 01       	movw	r30, r22
    1c84:	93 83       	std	Z+3, r25	; 0x03
    1c86:	82 83       	std	Z+2, r24	; 0x02
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <malloc+0x96>
    1c8a:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <__flp+0x1>
    1c8e:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <__flp>
    1c92:	fe 01       	movw	r30, r28
    1c94:	32 96       	adiw	r30, 0x02	; 2
    1c96:	44 c0       	rjmp	.+136    	; 0x1d20 <malloc+0x124>
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e2 0f       	add	r30, r18
    1c9c:	f3 1f       	adc	r31, r19
    1c9e:	81 93       	st	Z+, r24
    1ca0:	91 93       	st	Z+, r25
    1ca2:	22 50       	subi	r18, 0x02	; 2
    1ca4:	31 09       	sbc	r19, r1
    1ca6:	39 83       	std	Y+1, r19	; 0x01
    1ca8:	28 83       	st	Y, r18
    1caa:	3a c0       	rjmp	.+116    	; 0x1d20 <malloc+0x124>
    1cac:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <__brkval>
    1cb0:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <__brkval+0x1>
    1cb4:	23 2b       	or	r18, r19
    1cb6:	41 f4       	brne	.+16     	; 0x1cc8 <malloc+0xcc>
    1cb8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1cbc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1cc0:	30 93 f9 03 	sts	0x03F9, r19	; 0x8003f9 <__brkval+0x1>
    1cc4:	20 93 f8 03 	sts	0x03F8, r18	; 0x8003f8 <__brkval>
    1cc8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1ccc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1cd0:	21 15       	cp	r18, r1
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	41 f4       	brne	.+16     	; 0x1ce6 <malloc+0xea>
    1cd6:	2d b7       	in	r18, 0x3d	; 61
    1cd8:	3e b7       	in	r19, 0x3e	; 62
    1cda:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1cde:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1ce2:	24 1b       	sub	r18, r20
    1ce4:	35 0b       	sbc	r19, r21
    1ce6:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <__brkval>
    1cea:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <__brkval+0x1>
    1cee:	e2 17       	cp	r30, r18
    1cf0:	f3 07       	cpc	r31, r19
    1cf2:	a0 f4       	brcc	.+40     	; 0x1d1c <malloc+0x120>
    1cf4:	2e 1b       	sub	r18, r30
    1cf6:	3f 0b       	sbc	r19, r31
    1cf8:	28 17       	cp	r18, r24
    1cfa:	39 07       	cpc	r19, r25
    1cfc:	78 f0       	brcs	.+30     	; 0x1d1c <malloc+0x120>
    1cfe:	ac 01       	movw	r20, r24
    1d00:	4e 5f       	subi	r20, 0xFE	; 254
    1d02:	5f 4f       	sbci	r21, 0xFF	; 255
    1d04:	24 17       	cp	r18, r20
    1d06:	35 07       	cpc	r19, r21
    1d08:	48 f0       	brcs	.+18     	; 0x1d1c <malloc+0x120>
    1d0a:	4e 0f       	add	r20, r30
    1d0c:	5f 1f       	adc	r21, r31
    1d0e:	50 93 f9 03 	sts	0x03F9, r21	; 0x8003f9 <__brkval+0x1>
    1d12:	40 93 f8 03 	sts	0x03F8, r20	; 0x8003f8 <__brkval>
    1d16:	81 93       	st	Z+, r24
    1d18:	91 93       	st	Z+, r25
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <malloc+0x124>
    1d1c:	e0 e0       	ldi	r30, 0x00	; 0
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	cf 01       	movw	r24, r30
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	08 95       	ret

00001d2c <free>:
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <free+0xa>
    1d34:	81 c0       	rjmp	.+258    	; 0x1e38 <free+0x10c>
    1d36:	fc 01       	movw	r30, r24
    1d38:	32 97       	sbiw	r30, 0x02	; 2
    1d3a:	13 82       	std	Z+3, r1	; 0x03
    1d3c:	12 82       	std	Z+2, r1	; 0x02
    1d3e:	a0 91 fa 03 	lds	r26, 0x03FA	; 0x8003fa <__flp>
    1d42:	b0 91 fb 03 	lds	r27, 0x03FB	; 0x8003fb <__flp+0x1>
    1d46:	10 97       	sbiw	r26, 0x00	; 0
    1d48:	81 f4       	brne	.+32     	; 0x1d6a <free+0x3e>
    1d4a:	20 81       	ld	r18, Z
    1d4c:	31 81       	ldd	r19, Z+1	; 0x01
    1d4e:	82 0f       	add	r24, r18
    1d50:	93 1f       	adc	r25, r19
    1d52:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <__brkval>
    1d56:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <__brkval+0x1>
    1d5a:	28 17       	cp	r18, r24
    1d5c:	39 07       	cpc	r19, r25
    1d5e:	51 f5       	brne	.+84     	; 0x1db4 <free+0x88>
    1d60:	f0 93 f9 03 	sts	0x03F9, r31	; 0x8003f9 <__brkval+0x1>
    1d64:	e0 93 f8 03 	sts	0x03F8, r30	; 0x8003f8 <__brkval>
    1d68:	67 c0       	rjmp	.+206    	; 0x1e38 <free+0x10c>
    1d6a:	ed 01       	movw	r28, r26
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	ce 17       	cp	r28, r30
    1d72:	df 07       	cpc	r29, r31
    1d74:	40 f4       	brcc	.+16     	; 0x1d86 <free+0x5a>
    1d76:	4a 81       	ldd	r20, Y+2	; 0x02
    1d78:	5b 81       	ldd	r21, Y+3	; 0x03
    1d7a:	9e 01       	movw	r18, r28
    1d7c:	41 15       	cp	r20, r1
    1d7e:	51 05       	cpc	r21, r1
    1d80:	f1 f0       	breq	.+60     	; 0x1dbe <free+0x92>
    1d82:	ea 01       	movw	r28, r20
    1d84:	f5 cf       	rjmp	.-22     	; 0x1d70 <free+0x44>
    1d86:	d3 83       	std	Z+3, r29	; 0x03
    1d88:	c2 83       	std	Z+2, r28	; 0x02
    1d8a:	40 81       	ld	r20, Z
    1d8c:	51 81       	ldd	r21, Z+1	; 0x01
    1d8e:	84 0f       	add	r24, r20
    1d90:	95 1f       	adc	r25, r21
    1d92:	c8 17       	cp	r28, r24
    1d94:	d9 07       	cpc	r29, r25
    1d96:	59 f4       	brne	.+22     	; 0x1dae <free+0x82>
    1d98:	88 81       	ld	r24, Y
    1d9a:	99 81       	ldd	r25, Y+1	; 0x01
    1d9c:	84 0f       	add	r24, r20
    1d9e:	95 1f       	adc	r25, r21
    1da0:	02 96       	adiw	r24, 0x02	; 2
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	9b 81       	ldd	r25, Y+3	; 0x03
    1daa:	93 83       	std	Z+3, r25	; 0x03
    1dac:	82 83       	std	Z+2, r24	; 0x02
    1dae:	21 15       	cp	r18, r1
    1db0:	31 05       	cpc	r19, r1
    1db2:	29 f4       	brne	.+10     	; 0x1dbe <free+0x92>
    1db4:	f0 93 fb 03 	sts	0x03FB, r31	; 0x8003fb <__flp+0x1>
    1db8:	e0 93 fa 03 	sts	0x03FA, r30	; 0x8003fa <__flp>
    1dbc:	3d c0       	rjmp	.+122    	; 0x1e38 <free+0x10c>
    1dbe:	e9 01       	movw	r28, r18
    1dc0:	fb 83       	std	Y+3, r31	; 0x03
    1dc2:	ea 83       	std	Y+2, r30	; 0x02
    1dc4:	49 91       	ld	r20, Y+
    1dc6:	59 91       	ld	r21, Y+
    1dc8:	c4 0f       	add	r28, r20
    1dca:	d5 1f       	adc	r29, r21
    1dcc:	ec 17       	cp	r30, r28
    1dce:	fd 07       	cpc	r31, r29
    1dd0:	61 f4       	brne	.+24     	; 0x1dea <free+0xbe>
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	84 0f       	add	r24, r20
    1dd8:	95 1f       	adc	r25, r21
    1dda:	02 96       	adiw	r24, 0x02	; 2
    1ddc:	e9 01       	movw	r28, r18
    1dde:	99 83       	std	Y+1, r25	; 0x01
    1de0:	88 83       	st	Y, r24
    1de2:	82 81       	ldd	r24, Z+2	; 0x02
    1de4:	93 81       	ldd	r25, Z+3	; 0x03
    1de6:	9b 83       	std	Y+3, r25	; 0x03
    1de8:	8a 83       	std	Y+2, r24	; 0x02
    1dea:	e0 e0       	ldi	r30, 0x00	; 0
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	12 96       	adiw	r26, 0x02	; 2
    1df0:	8d 91       	ld	r24, X+
    1df2:	9c 91       	ld	r25, X
    1df4:	13 97       	sbiw	r26, 0x03	; 3
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	19 f0       	breq	.+6      	; 0x1e00 <free+0xd4>
    1dfa:	fd 01       	movw	r30, r26
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	f7 cf       	rjmp	.-18     	; 0x1dee <free+0xc2>
    1e00:	8d 91       	ld	r24, X+
    1e02:	9c 91       	ld	r25, X
    1e04:	11 97       	sbiw	r26, 0x01	; 1
    1e06:	9d 01       	movw	r18, r26
    1e08:	2e 5f       	subi	r18, 0xFE	; 254
    1e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0c:	82 0f       	add	r24, r18
    1e0e:	93 1f       	adc	r25, r19
    1e10:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <__brkval>
    1e14:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <__brkval+0x1>
    1e18:	28 17       	cp	r18, r24
    1e1a:	39 07       	cpc	r19, r25
    1e1c:	69 f4       	brne	.+26     	; 0x1e38 <free+0x10c>
    1e1e:	30 97       	sbiw	r30, 0x00	; 0
    1e20:	29 f4       	brne	.+10     	; 0x1e2c <free+0x100>
    1e22:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <__flp+0x1>
    1e26:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <__flp>
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <free+0x104>
    1e2c:	13 82       	std	Z+3, r1	; 0x03
    1e2e:	12 82       	std	Z+2, r1	; 0x02
    1e30:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <__brkval+0x1>
    1e34:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <__brkval>
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <atol>:
    1e3e:	1f 93       	push	r17
    1e40:	fc 01       	movw	r30, r24
    1e42:	99 27       	eor	r25, r25
    1e44:	88 27       	eor	r24, r24
    1e46:	bc 01       	movw	r22, r24
    1e48:	e8 94       	clt
    1e4a:	11 91       	ld	r17, Z+
    1e4c:	10 32       	cpi	r17, 0x20	; 32
    1e4e:	e9 f3       	breq	.-6      	; 0x1e4a <atol+0xc>
    1e50:	19 30       	cpi	r17, 0x09	; 9
    1e52:	10 f0       	brcs	.+4      	; 0x1e58 <atol+0x1a>
    1e54:	1e 30       	cpi	r17, 0x0E	; 14
    1e56:	c8 f3       	brcs	.-14     	; 0x1e4a <atol+0xc>
    1e58:	1b 32       	cpi	r17, 0x2B	; 43
    1e5a:	51 f0       	breq	.+20     	; 0x1e70 <atol+0x32>
    1e5c:	1d 32       	cpi	r17, 0x2D	; 45
    1e5e:	49 f4       	brne	.+18     	; 0x1e72 <atol+0x34>
    1e60:	68 94       	set
    1e62:	06 c0       	rjmp	.+12     	; 0x1e70 <atol+0x32>
    1e64:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__mulsi_const_10>
    1e68:	61 0f       	add	r22, r17
    1e6a:	71 1d       	adc	r23, r1
    1e6c:	81 1d       	adc	r24, r1
    1e6e:	91 1d       	adc	r25, r1
    1e70:	11 91       	ld	r17, Z+
    1e72:	10 53       	subi	r17, 0x30	; 48
    1e74:	1a 30       	cpi	r17, 0x0A	; 10
    1e76:	b0 f3       	brcs	.-20     	; 0x1e64 <atol+0x26>
    1e78:	3e f4       	brtc	.+14     	; 0x1e88 <atol+0x4a>
    1e7a:	90 95       	com	r25
    1e7c:	80 95       	com	r24
    1e7e:	70 95       	com	r23
    1e80:	61 95       	neg	r22
    1e82:	7f 4f       	sbci	r23, 0xFF	; 255
    1e84:	8f 4f       	sbci	r24, 0xFF	; 255
    1e86:	9f 4f       	sbci	r25, 0xFF	; 255
    1e88:	1f 91       	pop	r17
    1e8a:	08 95       	ret

00001e8c <memcpy>:
    1e8c:	fb 01       	movw	r30, r22
    1e8e:	dc 01       	movw	r26, r24
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <memcpy+0xa>
    1e92:	01 90       	ld	r0, Z+
    1e94:	0d 92       	st	X+, r0
    1e96:	41 50       	subi	r20, 0x01	; 1
    1e98:	50 40       	sbci	r21, 0x00	; 0
    1e9a:	d8 f7       	brcc	.-10     	; 0x1e92 <memcpy+0x6>
    1e9c:	08 95       	ret

00001e9e <strcmp>:
    1e9e:	fb 01       	movw	r30, r22
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	8d 91       	ld	r24, X+
    1ea4:	01 90       	ld	r0, Z+
    1ea6:	80 19       	sub	r24, r0
    1ea8:	01 10       	cpse	r0, r1
    1eaa:	d9 f3       	breq	.-10     	; 0x1ea2 <strcmp+0x4>
    1eac:	99 0b       	sbc	r25, r25
    1eae:	08 95       	ret

00001eb0 <__mulsi_const_10>:
    1eb0:	59 2f       	mov	r21, r25
    1eb2:	48 2f       	mov	r20, r24
    1eb4:	37 2f       	mov	r19, r23
    1eb6:	26 2f       	mov	r18, r22
    1eb8:	66 0f       	add	r22, r22
    1eba:	77 1f       	adc	r23, r23
    1ebc:	88 1f       	adc	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	66 0f       	add	r22, r22
    1ec2:	77 1f       	adc	r23, r23
    1ec4:	88 1f       	adc	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	62 0f       	add	r22, r18
    1eca:	73 1f       	adc	r23, r19
    1ecc:	84 1f       	adc	r24, r20
    1ece:	95 1f       	adc	r25, r21
    1ed0:	66 0f       	add	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	08 95       	ret

00001eda <sprintf>:
    1eda:	ae e0       	ldi	r26, 0x0E	; 14
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e3 e7       	ldi	r30, 0x73	; 115
    1ee0:	ff e0       	ldi	r31, 0x0F	; 15
    1ee2:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x1c>
    1ee6:	0d 89       	ldd	r16, Y+21	; 0x15
    1ee8:	1e 89       	ldd	r17, Y+22	; 0x16
    1eea:	86 e0       	ldi	r24, 0x06	; 6
    1eec:	8c 83       	std	Y+4, r24	; 0x04
    1eee:	1a 83       	std	Y+2, r17	; 0x02
    1ef0:	09 83       	std	Y+1, r16	; 0x01
    1ef2:	8f ef       	ldi	r24, 0xFF	; 255
    1ef4:	9f e7       	ldi	r25, 0x7F	; 127
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	ae 01       	movw	r20, r28
    1efc:	47 5e       	subi	r20, 0xE7	; 231
    1efe:	5f 4f       	sbci	r21, 0xFF	; 255
    1f00:	6f 89       	ldd	r22, Y+23	; 0x17
    1f02:	78 8d       	ldd	r23, Y+24	; 0x18
    1f04:	ce 01       	movw	r24, r28
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <vfprintf>
    1f0c:	ef 81       	ldd	r30, Y+7	; 0x07
    1f0e:	f8 85       	ldd	r31, Y+8	; 0x08
    1f10:	e0 0f       	add	r30, r16
    1f12:	f1 1f       	adc	r31, r17
    1f14:	10 82       	st	Z, r1
    1f16:	2e 96       	adiw	r28, 0x0e	; 14
    1f18:	e4 e0       	ldi	r30, 0x04	; 4
    1f1a:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x1c>

00001f1e <vfprintf>:
    1f1e:	ab e0       	ldi	r26, 0x0B	; 11
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e5 e9       	ldi	r30, 0x95	; 149
    1f24:	ff e0       	ldi	r31, 0x0F	; 15
    1f26:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__prologue_saves__>
    1f2a:	6c 01       	movw	r12, r24
    1f2c:	7b 01       	movw	r14, r22
    1f2e:	8a 01       	movw	r16, r20
    1f30:	fc 01       	movw	r30, r24
    1f32:	17 82       	std	Z+7, r1	; 0x07
    1f34:	16 82       	std	Z+6, r1	; 0x06
    1f36:	83 81       	ldd	r24, Z+3	; 0x03
    1f38:	81 ff       	sbrs	r24, 1
    1f3a:	cc c1       	rjmp	.+920    	; 0x22d4 <vfprintf+0x3b6>
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	3c 01       	movw	r6, r24
    1f42:	f6 01       	movw	r30, r12
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	f7 01       	movw	r30, r14
    1f48:	93 fd       	sbrc	r25, 3
    1f4a:	85 91       	lpm	r24, Z+
    1f4c:	93 ff       	sbrs	r25, 3
    1f4e:	81 91       	ld	r24, Z+
    1f50:	7f 01       	movw	r14, r30
    1f52:	88 23       	and	r24, r24
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <vfprintf+0x3a>
    1f56:	ba c1       	rjmp	.+884    	; 0x22cc <vfprintf+0x3ae>
    1f58:	85 32       	cpi	r24, 0x25	; 37
    1f5a:	39 f4       	brne	.+14     	; 0x1f6a <vfprintf+0x4c>
    1f5c:	93 fd       	sbrc	r25, 3
    1f5e:	85 91       	lpm	r24, Z+
    1f60:	93 ff       	sbrs	r25, 3
    1f62:	81 91       	ld	r24, Z+
    1f64:	7f 01       	movw	r14, r30
    1f66:	85 32       	cpi	r24, 0x25	; 37
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <vfprintf+0x56>
    1f6a:	b6 01       	movw	r22, r12
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 86 11 	call	0x230c	; 0x230c <fputc>
    1f72:	e7 cf       	rjmp	.-50     	; 0x1f42 <vfprintf+0x24>
    1f74:	91 2c       	mov	r9, r1
    1f76:	21 2c       	mov	r2, r1
    1f78:	31 2c       	mov	r3, r1
    1f7a:	ff e1       	ldi	r31, 0x1F	; 31
    1f7c:	f3 15       	cp	r31, r3
    1f7e:	d8 f0       	brcs	.+54     	; 0x1fb6 <vfprintf+0x98>
    1f80:	8b 32       	cpi	r24, 0x2B	; 43
    1f82:	79 f0       	breq	.+30     	; 0x1fa2 <vfprintf+0x84>
    1f84:	38 f4       	brcc	.+14     	; 0x1f94 <vfprintf+0x76>
    1f86:	80 32       	cpi	r24, 0x20	; 32
    1f88:	79 f0       	breq	.+30     	; 0x1fa8 <vfprintf+0x8a>
    1f8a:	83 32       	cpi	r24, 0x23	; 35
    1f8c:	a1 f4       	brne	.+40     	; 0x1fb6 <vfprintf+0x98>
    1f8e:	23 2d       	mov	r18, r3
    1f90:	20 61       	ori	r18, 0x10	; 16
    1f92:	1d c0       	rjmp	.+58     	; 0x1fce <vfprintf+0xb0>
    1f94:	8d 32       	cpi	r24, 0x2D	; 45
    1f96:	61 f0       	breq	.+24     	; 0x1fb0 <vfprintf+0x92>
    1f98:	80 33       	cpi	r24, 0x30	; 48
    1f9a:	69 f4       	brne	.+26     	; 0x1fb6 <vfprintf+0x98>
    1f9c:	23 2d       	mov	r18, r3
    1f9e:	21 60       	ori	r18, 0x01	; 1
    1fa0:	16 c0       	rjmp	.+44     	; 0x1fce <vfprintf+0xb0>
    1fa2:	83 2d       	mov	r24, r3
    1fa4:	82 60       	ori	r24, 0x02	; 2
    1fa6:	38 2e       	mov	r3, r24
    1fa8:	e3 2d       	mov	r30, r3
    1faa:	e4 60       	ori	r30, 0x04	; 4
    1fac:	3e 2e       	mov	r3, r30
    1fae:	2a c0       	rjmp	.+84     	; 0x2004 <vfprintf+0xe6>
    1fb0:	f3 2d       	mov	r31, r3
    1fb2:	f8 60       	ori	r31, 0x08	; 8
    1fb4:	1d c0       	rjmp	.+58     	; 0x1ff0 <vfprintf+0xd2>
    1fb6:	37 fc       	sbrc	r3, 7
    1fb8:	2d c0       	rjmp	.+90     	; 0x2014 <vfprintf+0xf6>
    1fba:	20 ed       	ldi	r18, 0xD0	; 208
    1fbc:	28 0f       	add	r18, r24
    1fbe:	2a 30       	cpi	r18, 0x0A	; 10
    1fc0:	40 f0       	brcs	.+16     	; 0x1fd2 <vfprintf+0xb4>
    1fc2:	8e 32       	cpi	r24, 0x2E	; 46
    1fc4:	b9 f4       	brne	.+46     	; 0x1ff4 <vfprintf+0xd6>
    1fc6:	36 fc       	sbrc	r3, 6
    1fc8:	81 c1       	rjmp	.+770    	; 0x22cc <vfprintf+0x3ae>
    1fca:	23 2d       	mov	r18, r3
    1fcc:	20 64       	ori	r18, 0x40	; 64
    1fce:	32 2e       	mov	r3, r18
    1fd0:	19 c0       	rjmp	.+50     	; 0x2004 <vfprintf+0xe6>
    1fd2:	36 fe       	sbrs	r3, 6
    1fd4:	06 c0       	rjmp	.+12     	; 0x1fe2 <vfprintf+0xc4>
    1fd6:	8a e0       	ldi	r24, 0x0A	; 10
    1fd8:	98 9e       	mul	r9, r24
    1fda:	20 0d       	add	r18, r0
    1fdc:	11 24       	eor	r1, r1
    1fde:	92 2e       	mov	r9, r18
    1fe0:	11 c0       	rjmp	.+34     	; 0x2004 <vfprintf+0xe6>
    1fe2:	ea e0       	ldi	r30, 0x0A	; 10
    1fe4:	2e 9e       	mul	r2, r30
    1fe6:	20 0d       	add	r18, r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	22 2e       	mov	r2, r18
    1fec:	f3 2d       	mov	r31, r3
    1fee:	f0 62       	ori	r31, 0x20	; 32
    1ff0:	3f 2e       	mov	r3, r31
    1ff2:	08 c0       	rjmp	.+16     	; 0x2004 <vfprintf+0xe6>
    1ff4:	8c 36       	cpi	r24, 0x6C	; 108
    1ff6:	21 f4       	brne	.+8      	; 0x2000 <vfprintf+0xe2>
    1ff8:	83 2d       	mov	r24, r3
    1ffa:	80 68       	ori	r24, 0x80	; 128
    1ffc:	38 2e       	mov	r3, r24
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <vfprintf+0xe6>
    2000:	88 36       	cpi	r24, 0x68	; 104
    2002:	41 f4       	brne	.+16     	; 0x2014 <vfprintf+0xf6>
    2004:	f7 01       	movw	r30, r14
    2006:	93 fd       	sbrc	r25, 3
    2008:	85 91       	lpm	r24, Z+
    200a:	93 ff       	sbrs	r25, 3
    200c:	81 91       	ld	r24, Z+
    200e:	7f 01       	movw	r14, r30
    2010:	81 11       	cpse	r24, r1
    2012:	b3 cf       	rjmp	.-154    	; 0x1f7a <vfprintf+0x5c>
    2014:	98 2f       	mov	r25, r24
    2016:	9f 7d       	andi	r25, 0xDF	; 223
    2018:	95 54       	subi	r25, 0x45	; 69
    201a:	93 30       	cpi	r25, 0x03	; 3
    201c:	28 f4       	brcc	.+10     	; 0x2028 <vfprintf+0x10a>
    201e:	0c 5f       	subi	r16, 0xFC	; 252
    2020:	1f 4f       	sbci	r17, 0xFF	; 255
    2022:	9f e3       	ldi	r25, 0x3F	; 63
    2024:	99 83       	std	Y+1, r25	; 0x01
    2026:	0d c0       	rjmp	.+26     	; 0x2042 <vfprintf+0x124>
    2028:	83 36       	cpi	r24, 0x63	; 99
    202a:	31 f0       	breq	.+12     	; 0x2038 <vfprintf+0x11a>
    202c:	83 37       	cpi	r24, 0x73	; 115
    202e:	71 f0       	breq	.+28     	; 0x204c <vfprintf+0x12e>
    2030:	83 35       	cpi	r24, 0x53	; 83
    2032:	09 f0       	breq	.+2      	; 0x2036 <vfprintf+0x118>
    2034:	59 c0       	rjmp	.+178    	; 0x20e8 <vfprintf+0x1ca>
    2036:	21 c0       	rjmp	.+66     	; 0x207a <vfprintf+0x15c>
    2038:	f8 01       	movw	r30, r16
    203a:	80 81       	ld	r24, Z
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	0e 5f       	subi	r16, 0xFE	; 254
    2040:	1f 4f       	sbci	r17, 0xFF	; 255
    2042:	88 24       	eor	r8, r8
    2044:	83 94       	inc	r8
    2046:	91 2c       	mov	r9, r1
    2048:	53 01       	movw	r10, r6
    204a:	13 c0       	rjmp	.+38     	; 0x2072 <vfprintf+0x154>
    204c:	28 01       	movw	r4, r16
    204e:	f2 e0       	ldi	r31, 0x02	; 2
    2050:	4f 0e       	add	r4, r31
    2052:	51 1c       	adc	r5, r1
    2054:	f8 01       	movw	r30, r16
    2056:	a0 80       	ld	r10, Z
    2058:	b1 80       	ldd	r11, Z+1	; 0x01
    205a:	36 fe       	sbrs	r3, 6
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <vfprintf+0x146>
    205e:	69 2d       	mov	r22, r9
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <vfprintf+0x14a>
    2064:	6f ef       	ldi	r22, 0xFF	; 255
    2066:	7f ef       	ldi	r23, 0xFF	; 255
    2068:	c5 01       	movw	r24, r10
    206a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <strnlen>
    206e:	4c 01       	movw	r8, r24
    2070:	82 01       	movw	r16, r4
    2072:	f3 2d       	mov	r31, r3
    2074:	ff 77       	andi	r31, 0x7F	; 127
    2076:	3f 2e       	mov	r3, r31
    2078:	16 c0       	rjmp	.+44     	; 0x20a6 <vfprintf+0x188>
    207a:	28 01       	movw	r4, r16
    207c:	22 e0       	ldi	r18, 0x02	; 2
    207e:	42 0e       	add	r4, r18
    2080:	51 1c       	adc	r5, r1
    2082:	f8 01       	movw	r30, r16
    2084:	a0 80       	ld	r10, Z
    2086:	b1 80       	ldd	r11, Z+1	; 0x01
    2088:	36 fe       	sbrs	r3, 6
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <vfprintf+0x174>
    208c:	69 2d       	mov	r22, r9
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <vfprintf+0x178>
    2092:	6f ef       	ldi	r22, 0xFF	; 255
    2094:	7f ef       	ldi	r23, 0xFF	; 255
    2096:	c5 01       	movw	r24, r10
    2098:	0e 94 70 11 	call	0x22e0	; 0x22e0 <strnlen_P>
    209c:	4c 01       	movw	r8, r24
    209e:	f3 2d       	mov	r31, r3
    20a0:	f0 68       	ori	r31, 0x80	; 128
    20a2:	3f 2e       	mov	r3, r31
    20a4:	82 01       	movw	r16, r4
    20a6:	33 fc       	sbrc	r3, 3
    20a8:	1b c0       	rjmp	.+54     	; 0x20e0 <vfprintf+0x1c2>
    20aa:	82 2d       	mov	r24, r2
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	88 16       	cp	r8, r24
    20b0:	99 06       	cpc	r9, r25
    20b2:	b0 f4       	brcc	.+44     	; 0x20e0 <vfprintf+0x1c2>
    20b4:	b6 01       	movw	r22, r12
    20b6:	80 e2       	ldi	r24, 0x20	; 32
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 86 11 	call	0x230c	; 0x230c <fputc>
    20be:	2a 94       	dec	r2
    20c0:	f4 cf       	rjmp	.-24     	; 0x20aa <vfprintf+0x18c>
    20c2:	f5 01       	movw	r30, r10
    20c4:	37 fc       	sbrc	r3, 7
    20c6:	85 91       	lpm	r24, Z+
    20c8:	37 fe       	sbrs	r3, 7
    20ca:	81 91       	ld	r24, Z+
    20cc:	5f 01       	movw	r10, r30
    20ce:	b6 01       	movw	r22, r12
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 94 86 11 	call	0x230c	; 0x230c <fputc>
    20d6:	21 10       	cpse	r2, r1
    20d8:	2a 94       	dec	r2
    20da:	21 e0       	ldi	r18, 0x01	; 1
    20dc:	82 1a       	sub	r8, r18
    20de:	91 08       	sbc	r9, r1
    20e0:	81 14       	cp	r8, r1
    20e2:	91 04       	cpc	r9, r1
    20e4:	71 f7       	brne	.-36     	; 0x20c2 <vfprintf+0x1a4>
    20e6:	e8 c0       	rjmp	.+464    	; 0x22b8 <vfprintf+0x39a>
    20e8:	84 36       	cpi	r24, 0x64	; 100
    20ea:	11 f0       	breq	.+4      	; 0x20f0 <vfprintf+0x1d2>
    20ec:	89 36       	cpi	r24, 0x69	; 105
    20ee:	41 f5       	brne	.+80     	; 0x2140 <vfprintf+0x222>
    20f0:	f8 01       	movw	r30, r16
    20f2:	37 fe       	sbrs	r3, 7
    20f4:	07 c0       	rjmp	.+14     	; 0x2104 <vfprintf+0x1e6>
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	0c 5f       	subi	r16, 0xFC	; 252
    2100:	1f 4f       	sbci	r17, 0xFF	; 255
    2102:	08 c0       	rjmp	.+16     	; 0x2114 <vfprintf+0x1f6>
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	07 2e       	mov	r0, r23
    210a:	00 0c       	add	r0, r0
    210c:	88 0b       	sbc	r24, r24
    210e:	99 0b       	sbc	r25, r25
    2110:	0e 5f       	subi	r16, 0xFE	; 254
    2112:	1f 4f       	sbci	r17, 0xFF	; 255
    2114:	f3 2d       	mov	r31, r3
    2116:	ff 76       	andi	r31, 0x6F	; 111
    2118:	3f 2e       	mov	r3, r31
    211a:	97 ff       	sbrs	r25, 7
    211c:	09 c0       	rjmp	.+18     	; 0x2130 <vfprintf+0x212>
    211e:	90 95       	com	r25
    2120:	80 95       	com	r24
    2122:	70 95       	com	r23
    2124:	61 95       	neg	r22
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	8f 4f       	sbci	r24, 0xFF	; 255
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	f0 68       	ori	r31, 0x80	; 128
    212e:	3f 2e       	mov	r3, r31
    2130:	2a e0       	ldi	r18, 0x0A	; 10
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	a3 01       	movw	r20, r6
    2136:	0e 94 c2 11 	call	0x2384	; 0x2384 <__ultoa_invert>
    213a:	88 2e       	mov	r8, r24
    213c:	86 18       	sub	r8, r6
    213e:	45 c0       	rjmp	.+138    	; 0x21ca <vfprintf+0x2ac>
    2140:	85 37       	cpi	r24, 0x75	; 117
    2142:	31 f4       	brne	.+12     	; 0x2150 <vfprintf+0x232>
    2144:	23 2d       	mov	r18, r3
    2146:	2f 7e       	andi	r18, 0xEF	; 239
    2148:	b2 2e       	mov	r11, r18
    214a:	2a e0       	ldi	r18, 0x0A	; 10
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	25 c0       	rjmp	.+74     	; 0x219a <vfprintf+0x27c>
    2150:	93 2d       	mov	r25, r3
    2152:	99 7f       	andi	r25, 0xF9	; 249
    2154:	b9 2e       	mov	r11, r25
    2156:	8f 36       	cpi	r24, 0x6F	; 111
    2158:	c1 f0       	breq	.+48     	; 0x218a <vfprintf+0x26c>
    215a:	18 f4       	brcc	.+6      	; 0x2162 <vfprintf+0x244>
    215c:	88 35       	cpi	r24, 0x58	; 88
    215e:	79 f0       	breq	.+30     	; 0x217e <vfprintf+0x260>
    2160:	b5 c0       	rjmp	.+362    	; 0x22cc <vfprintf+0x3ae>
    2162:	80 37       	cpi	r24, 0x70	; 112
    2164:	19 f0       	breq	.+6      	; 0x216c <vfprintf+0x24e>
    2166:	88 37       	cpi	r24, 0x78	; 120
    2168:	21 f0       	breq	.+8      	; 0x2172 <vfprintf+0x254>
    216a:	b0 c0       	rjmp	.+352    	; 0x22cc <vfprintf+0x3ae>
    216c:	e9 2f       	mov	r30, r25
    216e:	e0 61       	ori	r30, 0x10	; 16
    2170:	be 2e       	mov	r11, r30
    2172:	b4 fe       	sbrs	r11, 4
    2174:	0d c0       	rjmp	.+26     	; 0x2190 <vfprintf+0x272>
    2176:	fb 2d       	mov	r31, r11
    2178:	f4 60       	ori	r31, 0x04	; 4
    217a:	bf 2e       	mov	r11, r31
    217c:	09 c0       	rjmp	.+18     	; 0x2190 <vfprintf+0x272>
    217e:	34 fe       	sbrs	r3, 4
    2180:	0a c0       	rjmp	.+20     	; 0x2196 <vfprintf+0x278>
    2182:	29 2f       	mov	r18, r25
    2184:	26 60       	ori	r18, 0x06	; 6
    2186:	b2 2e       	mov	r11, r18
    2188:	06 c0       	rjmp	.+12     	; 0x2196 <vfprintf+0x278>
    218a:	28 e0       	ldi	r18, 0x08	; 8
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	05 c0       	rjmp	.+10     	; 0x219a <vfprintf+0x27c>
    2190:	20 e1       	ldi	r18, 0x10	; 16
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	02 c0       	rjmp	.+4      	; 0x219a <vfprintf+0x27c>
    2196:	20 e1       	ldi	r18, 0x10	; 16
    2198:	32 e0       	ldi	r19, 0x02	; 2
    219a:	f8 01       	movw	r30, r16
    219c:	b7 fe       	sbrs	r11, 7
    219e:	07 c0       	rjmp	.+14     	; 0x21ae <vfprintf+0x290>
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	0c 5f       	subi	r16, 0xFC	; 252
    21aa:	1f 4f       	sbci	r17, 0xFF	; 255
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <vfprintf+0x29c>
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 5f       	subi	r16, 0xFE	; 254
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	a3 01       	movw	r20, r6
    21bc:	0e 94 c2 11 	call	0x2384	; 0x2384 <__ultoa_invert>
    21c0:	88 2e       	mov	r8, r24
    21c2:	86 18       	sub	r8, r6
    21c4:	fb 2d       	mov	r31, r11
    21c6:	ff 77       	andi	r31, 0x7F	; 127
    21c8:	3f 2e       	mov	r3, r31
    21ca:	36 fe       	sbrs	r3, 6
    21cc:	0d c0       	rjmp	.+26     	; 0x21e8 <vfprintf+0x2ca>
    21ce:	23 2d       	mov	r18, r3
    21d0:	2e 7f       	andi	r18, 0xFE	; 254
    21d2:	a2 2e       	mov	r10, r18
    21d4:	89 14       	cp	r8, r9
    21d6:	58 f4       	brcc	.+22     	; 0x21ee <vfprintf+0x2d0>
    21d8:	34 fe       	sbrs	r3, 4
    21da:	0b c0       	rjmp	.+22     	; 0x21f2 <vfprintf+0x2d4>
    21dc:	32 fc       	sbrc	r3, 2
    21de:	09 c0       	rjmp	.+18     	; 0x21f2 <vfprintf+0x2d4>
    21e0:	83 2d       	mov	r24, r3
    21e2:	8e 7e       	andi	r24, 0xEE	; 238
    21e4:	a8 2e       	mov	r10, r24
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <vfprintf+0x2d4>
    21e8:	b8 2c       	mov	r11, r8
    21ea:	a3 2c       	mov	r10, r3
    21ec:	03 c0       	rjmp	.+6      	; 0x21f4 <vfprintf+0x2d6>
    21ee:	b8 2c       	mov	r11, r8
    21f0:	01 c0       	rjmp	.+2      	; 0x21f4 <vfprintf+0x2d6>
    21f2:	b9 2c       	mov	r11, r9
    21f4:	a4 fe       	sbrs	r10, 4
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <vfprintf+0x2f8>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e8 0d       	add	r30, r8
    21fc:	f1 1d       	adc	r31, r1
    21fe:	80 81       	ld	r24, Z
    2200:	80 33       	cpi	r24, 0x30	; 48
    2202:	21 f4       	brne	.+8      	; 0x220c <vfprintf+0x2ee>
    2204:	9a 2d       	mov	r25, r10
    2206:	99 7e       	andi	r25, 0xE9	; 233
    2208:	a9 2e       	mov	r10, r25
    220a:	09 c0       	rjmp	.+18     	; 0x221e <vfprintf+0x300>
    220c:	a2 fe       	sbrs	r10, 2
    220e:	06 c0       	rjmp	.+12     	; 0x221c <vfprintf+0x2fe>
    2210:	b3 94       	inc	r11
    2212:	b3 94       	inc	r11
    2214:	04 c0       	rjmp	.+8      	; 0x221e <vfprintf+0x300>
    2216:	8a 2d       	mov	r24, r10
    2218:	86 78       	andi	r24, 0x86	; 134
    221a:	09 f0       	breq	.+2      	; 0x221e <vfprintf+0x300>
    221c:	b3 94       	inc	r11
    221e:	a3 fc       	sbrc	r10, 3
    2220:	11 c0       	rjmp	.+34     	; 0x2244 <vfprintf+0x326>
    2222:	a0 fe       	sbrs	r10, 0
    2224:	06 c0       	rjmp	.+12     	; 0x2232 <vfprintf+0x314>
    2226:	b2 14       	cp	r11, r2
    2228:	88 f4       	brcc	.+34     	; 0x224c <vfprintf+0x32e>
    222a:	28 0c       	add	r2, r8
    222c:	92 2c       	mov	r9, r2
    222e:	9b 18       	sub	r9, r11
    2230:	0e c0       	rjmp	.+28     	; 0x224e <vfprintf+0x330>
    2232:	b2 14       	cp	r11, r2
    2234:	60 f4       	brcc	.+24     	; 0x224e <vfprintf+0x330>
    2236:	b6 01       	movw	r22, r12
    2238:	80 e2       	ldi	r24, 0x20	; 32
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	0e 94 86 11 	call	0x230c	; 0x230c <fputc>
    2240:	b3 94       	inc	r11
    2242:	f7 cf       	rjmp	.-18     	; 0x2232 <vfprintf+0x314>
    2244:	b2 14       	cp	r11, r2
    2246:	18 f4       	brcc	.+6      	; 0x224e <vfprintf+0x330>
    2248:	2b 18       	sub	r2, r11
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <vfprintf+0x332>
    224c:	98 2c       	mov	r9, r8
    224e:	21 2c       	mov	r2, r1
    2250:	a4 fe       	sbrs	r10, 4
    2252:	10 c0       	rjmp	.+32     	; 0x2274 <vfprintf+0x356>
    2254:	b6 01       	movw	r22, r12
    2256:	80 e3       	ldi	r24, 0x30	; 48
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 86 11 	call	0x230c	; 0x230c <fputc>
    225e:	a2 fe       	sbrs	r10, 2
    2260:	17 c0       	rjmp	.+46     	; 0x2290 <vfprintf+0x372>
    2262:	a1 fc       	sbrc	r10, 1
    2264:	03 c0       	rjmp	.+6      	; 0x226c <vfprintf+0x34e>
    2266:	88 e7       	ldi	r24, 0x78	; 120
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <vfprintf+0x352>
    226c:	88 e5       	ldi	r24, 0x58	; 88
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	b6 01       	movw	r22, r12
    2272:	0c c0       	rjmp	.+24     	; 0x228c <vfprintf+0x36e>
    2274:	8a 2d       	mov	r24, r10
    2276:	86 78       	andi	r24, 0x86	; 134
    2278:	59 f0       	breq	.+22     	; 0x2290 <vfprintf+0x372>
    227a:	a1 fe       	sbrs	r10, 1
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <vfprintf+0x364>
    227e:	8b e2       	ldi	r24, 0x2B	; 43
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <vfprintf+0x366>
    2282:	80 e2       	ldi	r24, 0x20	; 32
    2284:	a7 fc       	sbrc	r10, 7
    2286:	8d e2       	ldi	r24, 0x2D	; 45
    2288:	b6 01       	movw	r22, r12
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 86 11 	call	0x230c	; 0x230c <fputc>
    2290:	89 14       	cp	r8, r9
    2292:	38 f4       	brcc	.+14     	; 0x22a2 <vfprintf+0x384>
    2294:	b6 01       	movw	r22, r12
    2296:	80 e3       	ldi	r24, 0x30	; 48
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	0e 94 86 11 	call	0x230c	; 0x230c <fputc>
    229e:	9a 94       	dec	r9
    22a0:	f7 cf       	rjmp	.-18     	; 0x2290 <vfprintf+0x372>
    22a2:	8a 94       	dec	r8
    22a4:	f3 01       	movw	r30, r6
    22a6:	e8 0d       	add	r30, r8
    22a8:	f1 1d       	adc	r31, r1
    22aa:	80 81       	ld	r24, Z
    22ac:	b6 01       	movw	r22, r12
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 86 11 	call	0x230c	; 0x230c <fputc>
    22b4:	81 10       	cpse	r8, r1
    22b6:	f5 cf       	rjmp	.-22     	; 0x22a2 <vfprintf+0x384>
    22b8:	22 20       	and	r2, r2
    22ba:	09 f4       	brne	.+2      	; 0x22be <vfprintf+0x3a0>
    22bc:	42 ce       	rjmp	.-892    	; 0x1f42 <vfprintf+0x24>
    22be:	b6 01       	movw	r22, r12
    22c0:	80 e2       	ldi	r24, 0x20	; 32
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 86 11 	call	0x230c	; 0x230c <fputc>
    22c8:	2a 94       	dec	r2
    22ca:	f6 cf       	rjmp	.-20     	; 0x22b8 <vfprintf+0x39a>
    22cc:	f6 01       	movw	r30, r12
    22ce:	86 81       	ldd	r24, Z+6	; 0x06
    22d0:	97 81       	ldd	r25, Z+7	; 0x07
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <vfprintf+0x3ba>
    22d4:	8f ef       	ldi	r24, 0xFF	; 255
    22d6:	9f ef       	ldi	r25, 0xFF	; 255
    22d8:	2b 96       	adiw	r28, 0x0b	; 11
    22da:	e2 e1       	ldi	r30, 0x12	; 18
    22dc:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__epilogue_restores__>

000022e0 <strnlen_P>:
    22e0:	fc 01       	movw	r30, r24
    22e2:	05 90       	lpm	r0, Z+
    22e4:	61 50       	subi	r22, 0x01	; 1
    22e6:	70 40       	sbci	r23, 0x00	; 0
    22e8:	01 10       	cpse	r0, r1
    22ea:	d8 f7       	brcc	.-10     	; 0x22e2 <strnlen_P+0x2>
    22ec:	80 95       	com	r24
    22ee:	90 95       	com	r25
    22f0:	8e 0f       	add	r24, r30
    22f2:	9f 1f       	adc	r25, r31
    22f4:	08 95       	ret

000022f6 <strnlen>:
    22f6:	fc 01       	movw	r30, r24
    22f8:	61 50       	subi	r22, 0x01	; 1
    22fa:	70 40       	sbci	r23, 0x00	; 0
    22fc:	01 90       	ld	r0, Z+
    22fe:	01 10       	cpse	r0, r1
    2300:	d8 f7       	brcc	.-10     	; 0x22f8 <strnlen+0x2>
    2302:	80 95       	com	r24
    2304:	90 95       	com	r25
    2306:	8e 0f       	add	r24, r30
    2308:	9f 1f       	adc	r25, r31
    230a:	08 95       	ret

0000230c <fputc>:
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	fb 01       	movw	r30, r22
    2316:	23 81       	ldd	r18, Z+3	; 0x03
    2318:	21 fd       	sbrc	r18, 1
    231a:	03 c0       	rjmp	.+6      	; 0x2322 <fputc+0x16>
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	9f ef       	ldi	r25, 0xFF	; 255
    2320:	2c c0       	rjmp	.+88     	; 0x237a <fputc+0x6e>
    2322:	22 ff       	sbrs	r18, 2
    2324:	16 c0       	rjmp	.+44     	; 0x2352 <fputc+0x46>
    2326:	46 81       	ldd	r20, Z+6	; 0x06
    2328:	57 81       	ldd	r21, Z+7	; 0x07
    232a:	24 81       	ldd	r18, Z+4	; 0x04
    232c:	35 81       	ldd	r19, Z+5	; 0x05
    232e:	42 17       	cp	r20, r18
    2330:	53 07       	cpc	r21, r19
    2332:	44 f4       	brge	.+16     	; 0x2344 <fputc+0x38>
    2334:	a0 81       	ld	r26, Z
    2336:	b1 81       	ldd	r27, Z+1	; 0x01
    2338:	9d 01       	movw	r18, r26
    233a:	2f 5f       	subi	r18, 0xFF	; 255
    233c:	3f 4f       	sbci	r19, 0xFF	; 255
    233e:	31 83       	std	Z+1, r19	; 0x01
    2340:	20 83       	st	Z, r18
    2342:	8c 93       	st	X, r24
    2344:	26 81       	ldd	r18, Z+6	; 0x06
    2346:	37 81       	ldd	r19, Z+7	; 0x07
    2348:	2f 5f       	subi	r18, 0xFF	; 255
    234a:	3f 4f       	sbci	r19, 0xFF	; 255
    234c:	37 83       	std	Z+7, r19	; 0x07
    234e:	26 83       	std	Z+6, r18	; 0x06
    2350:	14 c0       	rjmp	.+40     	; 0x237a <fputc+0x6e>
    2352:	8b 01       	movw	r16, r22
    2354:	ec 01       	movw	r28, r24
    2356:	fb 01       	movw	r30, r22
    2358:	00 84       	ldd	r0, Z+8	; 0x08
    235a:	f1 85       	ldd	r31, Z+9	; 0x09
    235c:	e0 2d       	mov	r30, r0
    235e:	09 95       	icall
    2360:	89 2b       	or	r24, r25
    2362:	e1 f6       	brne	.-72     	; 0x231c <fputc+0x10>
    2364:	d8 01       	movw	r26, r16
    2366:	16 96       	adiw	r26, 0x06	; 6
    2368:	8d 91       	ld	r24, X+
    236a:	9c 91       	ld	r25, X
    236c:	17 97       	sbiw	r26, 0x07	; 7
    236e:	01 96       	adiw	r24, 0x01	; 1
    2370:	17 96       	adiw	r26, 0x07	; 7
    2372:	9c 93       	st	X, r25
    2374:	8e 93       	st	-X, r24
    2376:	16 97       	sbiw	r26, 0x06	; 6
    2378:	ce 01       	movw	r24, r28
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	08 95       	ret

00002384 <__ultoa_invert>:
    2384:	fa 01       	movw	r30, r20
    2386:	aa 27       	eor	r26, r26
    2388:	28 30       	cpi	r18, 0x08	; 8
    238a:	51 f1       	breq	.+84     	; 0x23e0 <__ultoa_invert+0x5c>
    238c:	20 31       	cpi	r18, 0x10	; 16
    238e:	81 f1       	breq	.+96     	; 0x23f0 <__ultoa_invert+0x6c>
    2390:	e8 94       	clt
    2392:	6f 93       	push	r22
    2394:	6e 7f       	andi	r22, 0xFE	; 254
    2396:	6e 5f       	subi	r22, 0xFE	; 254
    2398:	7f 4f       	sbci	r23, 0xFF	; 255
    239a:	8f 4f       	sbci	r24, 0xFF	; 255
    239c:	9f 4f       	sbci	r25, 0xFF	; 255
    239e:	af 4f       	sbci	r26, 0xFF	; 255
    23a0:	b1 e0       	ldi	r27, 0x01	; 1
    23a2:	3e d0       	rcall	.+124    	; 0x2420 <__ultoa_invert+0x9c>
    23a4:	b4 e0       	ldi	r27, 0x04	; 4
    23a6:	3c d0       	rcall	.+120    	; 0x2420 <__ultoa_invert+0x9c>
    23a8:	67 0f       	add	r22, r23
    23aa:	78 1f       	adc	r23, r24
    23ac:	89 1f       	adc	r24, r25
    23ae:	9a 1f       	adc	r25, r26
    23b0:	a1 1d       	adc	r26, r1
    23b2:	68 0f       	add	r22, r24
    23b4:	79 1f       	adc	r23, r25
    23b6:	8a 1f       	adc	r24, r26
    23b8:	91 1d       	adc	r25, r1
    23ba:	a1 1d       	adc	r26, r1
    23bc:	6a 0f       	add	r22, r26
    23be:	71 1d       	adc	r23, r1
    23c0:	81 1d       	adc	r24, r1
    23c2:	91 1d       	adc	r25, r1
    23c4:	a1 1d       	adc	r26, r1
    23c6:	20 d0       	rcall	.+64     	; 0x2408 <__ultoa_invert+0x84>
    23c8:	09 f4       	brne	.+2      	; 0x23cc <__ultoa_invert+0x48>
    23ca:	68 94       	set
    23cc:	3f 91       	pop	r19
    23ce:	2a e0       	ldi	r18, 0x0A	; 10
    23d0:	26 9f       	mul	r18, r22
    23d2:	11 24       	eor	r1, r1
    23d4:	30 19       	sub	r19, r0
    23d6:	30 5d       	subi	r19, 0xD0	; 208
    23d8:	31 93       	st	Z+, r19
    23da:	de f6       	brtc	.-74     	; 0x2392 <__ultoa_invert+0xe>
    23dc:	cf 01       	movw	r24, r30
    23de:	08 95       	ret
    23e0:	46 2f       	mov	r20, r22
    23e2:	47 70       	andi	r20, 0x07	; 7
    23e4:	40 5d       	subi	r20, 0xD0	; 208
    23e6:	41 93       	st	Z+, r20
    23e8:	b3 e0       	ldi	r27, 0x03	; 3
    23ea:	0f d0       	rcall	.+30     	; 0x240a <__ultoa_invert+0x86>
    23ec:	c9 f7       	brne	.-14     	; 0x23e0 <__ultoa_invert+0x5c>
    23ee:	f6 cf       	rjmp	.-20     	; 0x23dc <__ultoa_invert+0x58>
    23f0:	46 2f       	mov	r20, r22
    23f2:	4f 70       	andi	r20, 0x0F	; 15
    23f4:	40 5d       	subi	r20, 0xD0	; 208
    23f6:	4a 33       	cpi	r20, 0x3A	; 58
    23f8:	18 f0       	brcs	.+6      	; 0x2400 <__ultoa_invert+0x7c>
    23fa:	49 5d       	subi	r20, 0xD9	; 217
    23fc:	31 fd       	sbrc	r19, 1
    23fe:	40 52       	subi	r20, 0x20	; 32
    2400:	41 93       	st	Z+, r20
    2402:	02 d0       	rcall	.+4      	; 0x2408 <__ultoa_invert+0x84>
    2404:	a9 f7       	brne	.-22     	; 0x23f0 <__ultoa_invert+0x6c>
    2406:	ea cf       	rjmp	.-44     	; 0x23dc <__ultoa_invert+0x58>
    2408:	b4 e0       	ldi	r27, 0x04	; 4
    240a:	a6 95       	lsr	r26
    240c:	97 95       	ror	r25
    240e:	87 95       	ror	r24
    2410:	77 95       	ror	r23
    2412:	67 95       	ror	r22
    2414:	ba 95       	dec	r27
    2416:	c9 f7       	brne	.-14     	; 0x240a <__ultoa_invert+0x86>
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	61 05       	cpc	r22, r1
    241c:	71 05       	cpc	r23, r1
    241e:	08 95       	ret
    2420:	9b 01       	movw	r18, r22
    2422:	ac 01       	movw	r20, r24
    2424:	0a 2e       	mov	r0, r26
    2426:	06 94       	lsr	r0
    2428:	57 95       	ror	r21
    242a:	47 95       	ror	r20
    242c:	37 95       	ror	r19
    242e:	27 95       	ror	r18
    2430:	ba 95       	dec	r27
    2432:	c9 f7       	brne	.-14     	; 0x2426 <__ultoa_invert+0xa2>
    2434:	62 0f       	add	r22, r18
    2436:	73 1f       	adc	r23, r19
    2438:	84 1f       	adc	r24, r20
    243a:	95 1f       	adc	r25, r21
    243c:	a0 1d       	adc	r26, r0
    243e:	08 95       	ret

00002440 <eeprom_read_byte>:
    2440:	f9 99       	sbic	0x1f, 1	; 31
    2442:	fe cf       	rjmp	.-4      	; 0x2440 <eeprom_read_byte>
    2444:	92 bd       	out	0x22, r25	; 34
    2446:	81 bd       	out	0x21, r24	; 33
    2448:	f8 9a       	sbi	0x1f, 0	; 31
    244a:	99 27       	eor	r25, r25
    244c:	80 b5       	in	r24, 0x20	; 32
    244e:	08 95       	ret

00002450 <eeprom_read_word>:
    2450:	a8 e1       	ldi	r26, 0x18	; 24
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	42 e0       	ldi	r20, 0x02	; 2
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	0c 94 43 12 	jmp	0x2486	; 0x2486 <eeprom_read_blraw>

0000245c <eeprom_write_byte>:
    245c:	26 2f       	mov	r18, r22

0000245e <eeprom_write_r18>:
    245e:	f9 99       	sbic	0x1f, 1	; 31
    2460:	fe cf       	rjmp	.-4      	; 0x245e <eeprom_write_r18>
    2462:	1f ba       	out	0x1f, r1	; 31
    2464:	92 bd       	out	0x22, r25	; 34
    2466:	81 bd       	out	0x21, r24	; 33
    2468:	20 bd       	out	0x20, r18	; 32
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	fa 9a       	sbi	0x1f, 2	; 31
    2470:	f9 9a       	sbi	0x1f, 1	; 31
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	08 95       	ret

00002478 <eeprom_write_word>:
    2478:	0e 94 2e 12 	call	0x245c	; 0x245c <eeprom_write_byte>
    247c:	27 2f       	mov	r18, r23
    247e:	0c 94 2f 12 	jmp	0x245e	; 0x245e <eeprom_write_r18>

00002482 <eeprom_read_block>:
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22

00002486 <eeprom_read_blraw>:
    2486:	fc 01       	movw	r30, r24
    2488:	f9 99       	sbic	0x1f, 1	; 31
    248a:	fe cf       	rjmp	.-4      	; 0x2488 <eeprom_read_blraw+0x2>
    248c:	06 c0       	rjmp	.+12     	; 0x249a <eeprom_read_blraw+0x14>
    248e:	f2 bd       	out	0x22, r31	; 34
    2490:	e1 bd       	out	0x21, r30	; 33
    2492:	f8 9a       	sbi	0x1f, 0	; 31
    2494:	31 96       	adiw	r30, 0x01	; 1
    2496:	00 b4       	in	r0, 0x20	; 32
    2498:	0d 92       	st	X+, r0
    249a:	41 50       	subi	r20, 0x01	; 1
    249c:	50 40       	sbci	r21, 0x00	; 0
    249e:	b8 f7       	brcc	.-18     	; 0x248e <eeprom_read_blraw+0x8>
    24a0:	08 95       	ret

000024a2 <__prologue_saves__>:
    24a2:	2f 92       	push	r2
    24a4:	3f 92       	push	r3
    24a6:	4f 92       	push	r4
    24a8:	5f 92       	push	r5
    24aa:	6f 92       	push	r6
    24ac:	7f 92       	push	r7
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	ca 1b       	sub	r28, r26
    24cc:	db 0b       	sbc	r29, r27
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	09 94       	ijmp

000024da <__epilogue_restores__>:
    24da:	2a 88       	ldd	r2, Y+18	; 0x12
    24dc:	39 88       	ldd	r3, Y+17	; 0x11
    24de:	48 88       	ldd	r4, Y+16	; 0x10
    24e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    24e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    24e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    24ec:	b9 84       	ldd	r11, Y+9	; 0x09
    24ee:	c8 84       	ldd	r12, Y+8	; 0x08
    24f0:	df 80       	ldd	r13, Y+7	; 0x07
    24f2:	ee 80       	ldd	r14, Y+6	; 0x06
    24f4:	fd 80       	ldd	r15, Y+5	; 0x05
    24f6:	0c 81       	ldd	r16, Y+4	; 0x04
    24f8:	1b 81       	ldd	r17, Y+3	; 0x03
    24fa:	aa 81       	ldd	r26, Y+2	; 0x02
    24fc:	b9 81       	ldd	r27, Y+1	; 0x01
    24fe:	ce 0f       	add	r28, r30
    2500:	d1 1d       	adc	r29, r1
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	ed 01       	movw	r28, r26
    250e:	08 95       	ret

00002510 <__do_global_dtors>:
    2510:	10 e0       	ldi	r17, 0x00	; 0
    2512:	c8 e3       	ldi	r28, 0x38	; 56
    2514:	d0 e0       	ldi	r29, 0x00	; 0
    2516:	04 c0       	rjmp	.+8      	; 0x2520 <__do_global_dtors+0x10>
    2518:	fe 01       	movw	r30, r28
    251a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__tablejump2__>
    251e:	21 96       	adiw	r28, 0x01	; 1
    2520:	c9 33       	cpi	r28, 0x39	; 57
    2522:	d1 07       	cpc	r29, r17
    2524:	c9 f7       	brne	.-14     	; 0x2518 <__do_global_dtors+0x8>
    2526:	f8 94       	cli

00002528 <__stop_program>:
    2528:	ff cf       	rjmp	.-2      	; 0x2528 <__stop_program>
