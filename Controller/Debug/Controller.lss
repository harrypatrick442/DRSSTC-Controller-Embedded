
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000334  00800100  00002afc  00002bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002afc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000149  00800434  00800434  00002ee4  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00002ee4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000024  00000000  00000000  00002ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000001e  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  00002f2a  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f88  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000698  00000000  00000000  00002fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b7c2  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000037d3  00000000  00000000  0000ee22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003402  00000000  00000000  000125f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001134  00000000  00000000  000159f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030c1  00000000  00000000  00016b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000048c2  00000000  00000000  00019bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  0001e4af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__dtors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__vector_14>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	31 05       	cpc	r19, r1
      6a:	cd 06       	cpc	r12, r29
      6c:	2b 07       	cpc	r18, r27
      6e:	51 0b       	sbc	r21, r17
      70:	af 0b       	sbc	r26, r31
      72:	c8 10       	cpse	r12, r8

00000074 <__ctors_end>:
      74:	c0 0b       	sbc	r28, r16

00000076 <__dtors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf ef       	ldi	r28, 0xFF	; 255
      7c:	d8 e0       	ldi	r29, 0x08	; 8
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
      82:	14 e0       	ldi	r17, 0x04	; 4
      84:	a0 e0       	ldi	r26, 0x00	; 0
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	ec ef       	ldi	r30, 0xFC	; 252
      8a:	fa e2       	ldi	r31, 0x2A	; 42
      8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
      8e:	05 90       	lpm	r0, Z+
      90:	0d 92       	st	X+, r0
      92:	a4 33       	cpi	r26, 0x34	; 52
      94:	b1 07       	cpc	r27, r17
      96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
      98:	25 e0       	ldi	r18, 0x05	; 5
      9a:	a4 e3       	ldi	r26, 0x34	; 52
      9c:	b4 e0       	ldi	r27, 0x04	; 4
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	ad 37       	cpi	r26, 0x7D	; 125
      a4:	b2 07       	cpc	r27, r18
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>

000000a8 <__do_global_ctors>:
      a8:	10 e0       	ldi	r17, 0x00	; 0
      aa:	ca e3       	ldi	r28, 0x3A	; 58
      ac:	d0 e0       	ldi	r29, 0x00	; 0
      ae:	04 c0       	rjmp	.+8      	; 0xb8 <__do_global_ctors+0x10>
      b0:	21 97       	sbiw	r28, 0x01	; 1
      b2:	fe 01       	movw	r30, r28
      b4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__tablejump2__>
      b8:	c4 33       	cpi	r28, 0x34	; 52
      ba:	d1 07       	cpc	r29, r17
      bc:	c9 f7       	brne	.-14     	; 0xb0 <__do_global_ctors+0x8>
      be:	0e 94 37 01 	call	0x26e	; 0x26e <main>
      c2:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__do_global_dtors>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <i2c_delay_T2>:
	...
nop
nop
nop
nop
nop
nop
     10e:	00 00       	nop
	ret          ; 3   "
     110:	08 95       	ret

00000112 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     112:	3d 98       	cbi	0x07, 5	; 7
	cbi SCL_DDR,SCL		;release SCL
     114:	3c 98       	cbi	0x07, 4	; 7
	cbi SDA_OUT,SDA
     116:	45 98       	cbi	0x08, 5	; 8
	cbi SCL_OUT,SCL
     118:	44 98       	cbi	0x08, 4	; 8
	ret
     11a:	08 95       	ret

0000011c <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     11c:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     11e:	d5 df       	rcall	.-86     	; 0xca <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     120:	1d d0       	rcall	.+58     	; 0x15c <i2c_write>
	ret
     122:	08 95       	ret

00000124 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     124:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     126:	d1 df       	rcall	.-94     	; 0xca <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     128:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     12a:	cf df       	rcall	.-98     	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     12c:	3c 98       	cbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     12e:	cd df       	rcall	.-102    	; 0xca <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     130:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay	T/2
     132:	cb df       	rcall	.-106    	; 0xca <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     134:	13 d0       	rcall	.+38     	; 0x15c <i2c_write>
	ret
     136:	08 95       	ret

00000138 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     138:	08 2e       	mov	r0, r24

0000013a <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     13a:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     13c:	c6 df       	rcall	.-116    	; 0xca <i2c_delay_T2>
	mov	r24,__tmp_reg__
     13e:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     140:	0d d0       	rcall	.+26     	; 0x15c <i2c_write>
	tst	r24		;if device not busy -> done
     142:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     144:	11 f0       	breq	.+4      	; 0x14a <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     146:	02 d0       	rcall	.+4      	; 0x14c <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     148:	f8 cf       	rjmp	.-16     	; 0x13a <i2c_start_wait1>

0000014a <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     14a:	08 95       	ret

0000014c <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     14c:	3c 9a       	sbi	0x07, 4	; 7
	sbi	SDA_DDR,SDA	;force SDA low
     14e:	3d 9a       	sbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     150:	bc df       	rcall	.-136    	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     152:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     154:	ba df       	rcall	.-140    	; 0xca <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     156:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     158:	b8 df       	rcall	.-144    	; 0xca <i2c_delay_T2>
	ret
     15a:	08 95       	ret

0000015c <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     15c:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     15e:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     160:	01 c0       	rjmp	.+2      	; 0x164 <i2c_write_first>

00000162 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     162:	88 0f       	add	r24, r24

00000164 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     164:	59 f0       	breq	.+22     	; 0x17c <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     166:	3c 9a       	sbi	0x07, 4	; 7
	brcc	i2c_write_low
     168:	18 f4       	brcc	.+6      	; 0x170 <i2c_write_low>
	nop
     16a:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     16c:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16e:	02 c0       	rjmp	.+4      	; 0x174 <i2c_write_high>

00000170 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     170:	3d 9a       	sbi	0x07, 5	; 7
	rjmp	i2c_write_high
     172:	00 c0       	rjmp	.+0      	; 0x174 <i2c_write_high>

00000174 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     174:	aa df       	rcall	.-172    	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     176:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     178:	a8 df       	rcall	.-176    	; 0xca <i2c_delay_T2>
	rjmp	i2c_write_bit
     17a:	f3 cf       	rjmp	.-26     	; 0x162 <i2c_write_bit>

0000017c <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     17c:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA
     17e:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     180:	a4 df       	rcall	.-184    	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     182:	3c 98       	cbi	0x07, 4	; 7

00000184 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     184:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_ack_wait
     186:	fe cf       	rjmp	.-4      	; 0x184 <i2c_ack_wait>
	
	clr	r24		;return 0
     188:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     18a:	35 99       	sbic	0x06, 5	; 6
	ldi	r24,1
     18c:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     18e:	9d df       	rcall	.-198    	; 0xca <i2c_delay_T2>
	clr	r25
     190:	99 27       	eor	r25, r25
	ret
     192:	08 95       	ret

00000194 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     194:	88 27       	eor	r24, r24
	rjmp	i2c_read
     196:	01 c0       	rjmp	.+2      	; 0x19a <i2c_read>

00000198 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     198:	81 e0       	ldi	r24, 0x01	; 1

0000019a <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     19a:	71 e0       	ldi	r23, 0x01	; 1

0000019c <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     19c:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     19e:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     1a0:	94 df       	rcall	.-216    	; 0xca <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     1a2:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     1a4:	92 df       	rcall	.-220    	; 0xca <i2c_delay_T2>

000001a6 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     1a6:	34 9b       	sbis	0x06, 4	; 6
    rjmp	i2c_read_stretch
     1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <i2c_read_stretch>
    	
	clc			;clear carry flag
     1aa:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     1ac:	35 99       	sbic	0x06, 5	; 6
	sec			;  set carry flag
     1ae:	08 94       	sec
	
	rol	r23		;store bit
     1b0:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     1b2:	a0 f7       	brcc	.-24     	; 0x19c <i2c_read_bit>

000001b4 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     1b4:	3c 9a       	sbi	0x07, 4	; 7
	cpi	r24,1
     1b6:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     1b8:	11 f0       	breq	.+4      	; 0x1be <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     1ba:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_put_ack_high
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <i2c_put_ack_high>

000001be <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     1be:	3d 9a       	sbi	0x07, 5	; 7

000001c0 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     1c0:	84 df       	rcall	.-248    	; 0xca <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     1c2:	3c 98       	cbi	0x07, 4	; 7

000001c4 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     1c4:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_put_ack_wait
     1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     1c8:	80 df       	rcall	.-256    	; 0xca <i2c_delay_T2>
	mov	r24,r23
     1ca:	87 2f       	mov	r24, r23
	clr	r25
     1cc:	99 27       	eor	r25, r25
	ret
     1ce:	08 95       	ret

000001d0 <_ZN22CommunicationException8ToStringEv>:

CommunicationException::~CommunicationException()
{
	if(message!=NULL) delete message;
}
const char* CommunicationException::ToString(){
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	ec 01       	movw	r28, r24

	if(message==NULL){
     1de:	8e 81       	ldd	r24, Y+6	; 0x06
     1e0:	9f 81       	ldd	r25, Y+7	; 0x07
     1e2:	89 2b       	or	r24, r25
     1e4:	41 f5       	brne	.+80     	; 0x236 <_ZN22CommunicationException8ToStringEv+0x66>
		size_t totalLength = strlen(deviceName)+27;
     1e6:	fc 80       	ldd	r15, Y+4	; 0x04
     1e8:	ed 80       	ldd	r14, Y+5	; 0x05
     1ea:	ef 2d       	mov	r30, r15
     1ec:	fe 2d       	mov	r31, r14
     1ee:	df 01       	movw	r26, r30
     1f0:	0d 90       	ld	r0, X+
     1f2:	00 20       	and	r0, r0
     1f4:	e9 f7       	brne	.-6      	; 0x1f0 <_ZN22CommunicationException8ToStringEv+0x20>
     1f6:	8d 01       	movw	r16, r26
     1f8:	0e 1b       	sub	r16, r30
     1fa:	1f 0b       	sbc	r17, r31
     1fc:	06 5e       	subi	r16, 0xE6	; 230
     1fe:	1f 4f       	sbci	r17, 0xFF	; 255
		message=(char*)malloc(sizeof(char)*totalLength);
     200:	c8 01       	movw	r24, r16
     202:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <malloc>
     206:	9f 83       	std	Y+7, r25	; 0x07
     208:	8e 83       	std	Y+6, r24	; 0x06
		if(message!=NULL){
     20a:	00 97       	sbiw	r24, 0x00	; 0
     20c:	a1 f0       	breq	.+40     	; 0x236 <_ZN22CommunicationException8ToStringEv+0x66>
			snprintf(message,totalLength, "Communication with %s failed", deviceName);
     20e:	ef 92       	push	r14
     210:	ff 92       	push	r15
     212:	26 e0       	ldi	r18, 0x06	; 6
     214:	31 e0       	ldi	r19, 0x01	; 1
     216:	3f 93       	push	r19
     218:	2f 93       	push	r18
     21a:	1f 93       	push	r17
     21c:	0f 93       	push	r16
     21e:	9f 93       	push	r25
     220:	8f 93       	push	r24
     222:	0e 94 48 12 	call	0x2490	; 0x2490 <snprintf>
     226:	8d b7       	in	r24, 0x3d	; 61
     228:	9e b7       	in	r25, 0x3e	; 62
     22a:	08 96       	adiw	r24, 0x08	; 8
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	f8 94       	cli
     230:	9e bf       	out	0x3e, r25	; 62
     232:	0f be       	out	0x3f, r0	; 63
     234:	8d bf       	out	0x3d, r24	; 61
		}
	}
	return message;
     236:	8e 81       	ldd	r24, Y+6	; 0x06
     238:	9f 81       	ldd	r25, Y+7	; 0x07
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	08 95       	ret

00000248 <_ZN22CommunicationExceptionC1EPKc>:
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "CommunicationException.h"

CommunicationException::CommunicationException(const char* deviceName):deviceName(deviceName)
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	ec 01       	movw	r28, r24
     252:	8b 01       	movw	r16, r22
     254:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN9ExceptionC1Ev>
     258:	87 e2       	ldi	r24, 0x27	; 39
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	99 83       	std	Y+1, r25	; 0x01
     25e:	88 83       	st	Y, r24
     260:	1d 83       	std	Y+5, r17	; 0x05
     262:	0c 83       	std	Y+4, r16	; 0x04
{
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	08 95       	ret

0000026e <main>:
#include "TC654.h"
#include "Fans.h"
#include "SystemCheck.h"
using namespace std;
int main(void)
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	c2 54       	subi	r28, 0x42	; 66
     278:	d1 09       	sbc	r29, r1
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	a8 95       	wdr
     28a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     28e:	88 61       	ori	r24, 0x18	; 24
     290:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     294:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     298:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	i2c_init();
     29a:	0e 94 89 00 	call	0x112	; 0x112 <i2c_init>
	Outputs::Initialize();
     29e:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN7Outputs10InitializeEv>
	//Stopwatch stopWatch = Stopwatch();
	UART& uart = UART::GetInstance();
     2a2:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN4UART11GetInstanceEv>
     2a6:	2c 01       	movw	r4, r24
	Settings& settings=Settings::GetInstance();
     2a8:	0e 94 a4 06 	call	0xd48	; 0xd48 <_ZN8Settings11GetInstanceEv>
     2ac:	8c 01       	movw	r16, r24
	TC654 tc654 = TC654(0x01, 0x01);
     2ae:	41 e0       	ldi	r20, 0x01	; 1
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	ce 01       	movw	r24, r28
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN5TC654C1Ecc>
	IGetFanInfo* iGetFanInfos[]={tc654.GetIGetFan1Info(), tc654.GetIGetFan2Info()};
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 45 0a 	call	0x148a	; 0x148a <_ZN5TC65415GetIGetFan1InfoEv>
     2c2:	9c af       	std	Y+60, r25	; 0x3c
     2c4:	8b af       	std	Y+59, r24	; 0x3b
     2c6:	ce 01       	movw	r24, r28
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	0e 94 47 0a 	call	0x148e	; 0x148e <_ZN5TC65415GetIGetFan2InfoEv>
     2ce:	9e af       	std	Y+62, r25	; 0x3e
     2d0:	8d af       	std	Y+61, r24	; 0x3d
	Fans& fans = Fans::GetInstance();
     2d2:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN4Fans11GetInstanceEv>
     2d6:	3c 01       	movw	r6, r24
	fans.SetInterfaces(iGetFanInfos, 0x02, &settings);
     2d8:	98 01       	movw	r18, r16
     2da:	28 5f       	subi	r18, 0xF8	; 248
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	42 e0       	ldi	r20, 0x02	; 2
     2e0:	be 01       	movw	r22, r28
     2e2:	65 5c       	subi	r22, 0xC5	; 197
     2e4:	7f 4f       	sbci	r23, 0xFF	; 255
     2e6:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>
	LM75* lm75_7= new LM75(0x07, "lm75_7");
     2ea:	8c e0       	ldi	r24, 0x0C	; 12
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
     2f2:	4c 01       	movw	r8, r24
     2f4:	49 e2       	ldi	r20, 0x29	; 41
     2f6:	51 e0       	ldi	r21, 0x01	; 1
     2f8:	67 e0       	ldi	r22, 0x07	; 7
     2fa:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN4LM75C1EcPc>
	LM75* lm75_6= new LM75(0x06, "lm75_6");
     2fe:	8c e0       	ldi	r24, 0x0C	; 12
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
     306:	5c 01       	movw	r10, r24
     308:	40 e3       	ldi	r20, 0x30	; 48
     30a:	51 e0       	ldi	r21, 0x01	; 1
     30c:	66 e0       	ldi	r22, 0x06	; 6
     30e:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN4LM75C1EcPc>
	IGetTemperatureInfo* lm75s[] = {lm75_7, lm75_6};
     312:	21 96       	adiw	r28, 0x01	; 1
     314:	9f ae       	std	Y+63, r9	; 0x3f
     316:	8e ae       	std	Y+62, r8	; 0x3e
     318:	21 97       	sbiw	r28, 0x01	; 1
     31a:	23 96       	adiw	r28, 0x03	; 3
     31c:	bf ae       	std	Y+63, r11	; 0x3f
     31e:	ae ae       	std	Y+62, r10	; 0x3e
     320:	23 97       	sbiw	r28, 0x03	; 3
	Temperatures& temperatures=Temperatures::GetInstance();
     322:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN12Temperatures11GetInstanceEv>
     326:	5c 01       	movw	r10, r24
	temperatures.SetInterfaces(lm75s, 0x2);
     328:	42 e0       	ldi	r20, 0x02	; 2
     32a:	be 01       	movw	r22, r28
     32c:	61 5c       	subi	r22, 0xC1	; 193
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	0e 94 4c 0b 	call	0x1698	; 0x1698 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>
	SystemCheck& systemCheck = SystemCheck::GetInstance();
     334:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN11SystemCheck11GetInstanceEv>
     338:	4c 01       	movw	r8, r24
	systemCheck.SetInterfaces(&temperatures, &settings, &fans);
     33a:	93 01       	movw	r18, r6
     33c:	a8 01       	movw	r20, r16
     33e:	b5 01       	movw	r22, r10
     340:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN11SystemCheck13SetInterfacesEP13ITemperaturesP18IGetTemperatureMaxP5IFans>
	Leds::Main::SetGreen();		
     344:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN4Leds4Main8SetGreenEv>
	Endpoint* endpoint = new Endpoint(&uart, &uart, &settings, &settings, &settings, &settings, &temperatures, &systemCheck);
     348:	80 e1       	ldi	r24, 0x10	; 16
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
     350:	3c 01       	movw	r6, r24
     352:	68 01       	movw	r12, r16
     354:	84 e0       	ldi	r24, 0x04	; 4
     356:	c8 0e       	add	r12, r24
     358:	d1 1c       	adc	r13, r1
     35a:	78 01       	movw	r14, r16
     35c:	86 e0       	ldi	r24, 0x06	; 6
     35e:	e8 0e       	add	r14, r24
     360:	f1 1c       	adc	r15, r1
     362:	98 01       	movw	r18, r16
     364:	2e 5f       	subi	r18, 0xFE	; 254
     366:	3f 4f       	sbci	r19, 0xFF	; 255
     368:	b2 01       	movw	r22, r4
     36a:	6e 5f       	subi	r22, 0xFE	; 254
     36c:	7f 4f       	sbci	r23, 0xFF	; 255
     36e:	a2 01       	movw	r20, r4
     370:	c3 01       	movw	r24, r6
     372:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperaturesP12ISystemCheck>
	while(1)
	{
	    endpoint->Run();
     376:	c3 01       	movw	r24, r6
     378:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_ZN8Endpoint3RunEv>
     37c:	fc cf       	rjmp	.-8      	; 0x376 <main+0x108>

0000037e <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperaturesP12ISystemCheck>:
#include "Leds.h"
#include "Endpoint.h"
#include "UART.h"
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures, ISystemCheck* iSystemCheck):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures), iSystemCheck(iSystemCheck){
     37e:	8f 92       	push	r8
     380:	9f 92       	push	r9
     382:	af 92       	push	r10
     384:	bf 92       	push	r11
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	fc 01       	movw	r30, r24
     39c:	71 83       	std	Z+1, r23	; 0x01
     39e:	60 83       	st	Z, r22
     3a0:	53 83       	std	Z+3, r21	; 0x03
     3a2:	42 83       	std	Z+2, r20	; 0x02
     3a4:	35 83       	std	Z+5, r19	; 0x05
     3a6:	24 83       	std	Z+4, r18	; 0x04
     3a8:	17 83       	std	Z+7, r17	; 0x07
     3aa:	06 83       	std	Z+6, r16	; 0x06
     3ac:	f1 86       	std	Z+9, r15	; 0x09
     3ae:	e0 86       	std	Z+8, r14	; 0x08
     3b0:	d3 86       	std	Z+11, r13	; 0x0b
     3b2:	c2 86       	std	Z+10, r12	; 0x0a
     3b4:	b5 86       	std	Z+13, r11	; 0x0d
     3b6:	a4 86       	std	Z+12, r10	; 0x0c
     3b8:	97 86       	std	Z+15, r9	; 0x0f
     3ba:	86 86       	std	Z+14, r8	; 0x0e
	
}
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	bf 90       	pop	r11
     3ce:	af 90       	pop	r10
     3d0:	9f 90       	pop	r9
     3d2:	8f 90       	pop	r8
     3d4:	08 95       	ret

000003d6 <_ZN8Endpoint8GetPowerEv>:
		}
		delete messages;
	}
}

void Endpoint::GetPower(){
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	6f 97       	sbiw	r28, 0x1f	; 31
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	7c 01       	movw	r14, r24
	uint16_t power = iGetPower->GetPower();
     3f4:	dc 01       	movw	r26, r24
     3f6:	1a 96       	adiw	r26, 0x0a	; 10
     3f8:	8d 91       	ld	r24, X+
     3fa:	9c 91       	ld	r25, X
     3fc:	1b 97       	sbiw	r26, 0x0b	; 11
     3fe:	dc 01       	movw	r26, r24
     400:	ed 91       	ld	r30, X+
     402:	fc 91       	ld	r31, X
     404:	01 90       	ld	r0, Z+
     406:	f0 81       	ld	r31, Z
     408:	e0 2d       	mov	r30, r0
     40a:	09 95       	icall
	char buf[31];
	snprintf(buf,31,"{\"type\":\"power\",\"power\":%04d}\n",power);
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	87 e3       	ldi	r24, 0x37	; 55
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	1f 92       	push	r1
     41a:	8f e1       	ldi	r24, 0x1F	; 31
     41c:	8f 93       	push	r24
     41e:	8e 01       	movw	r16, r28
     420:	0f 5f       	subi	r16, 0xFF	; 255
     422:	1f 4f       	sbci	r17, 0xFF	; 255
     424:	1f 93       	push	r17
     426:	0f 93       	push	r16
     428:	0e 94 48 12 	call	0x2490	; 0x2490 <snprintf>
	iSendMessage->SendMessage(buf, 30);
     42c:	f7 01       	movw	r30, r14
     42e:	82 81       	ldd	r24, Z+2	; 0x02
     430:	93 81       	ldd	r25, Z+3	; 0x03
     432:	dc 01       	movw	r26, r24
     434:	ed 91       	ld	r30, X+
     436:	fc 91       	ld	r31, X
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	4e e1       	ldi	r20, 0x1E	; 30
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	b8 01       	movw	r22, r16
     444:	09 95       	icall
}
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	6f 96       	adiw	r28, 0x1f	; 31
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	08 95       	ret

0000046a <_ZN8Endpoint17GetTemperatureMaxEv>:
void Endpoint::GetTemperatureMax(){
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	e2 97       	sbiw	r28, 0x32	; 50
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	7c 01       	movw	r14, r24
	uint8_t temperatureMax = iGetTemperatureMax->GetTemperatureMax();
     488:	dc 01       	movw	r26, r24
     48a:	16 96       	adiw	r26, 0x06	; 6
     48c:	8d 91       	ld	r24, X+
     48e:	9c 91       	ld	r25, X
     490:	17 97       	sbiw	r26, 0x07	; 7
     492:	dc 01       	movw	r26, r24
     494:	ed 91       	ld	r30, X+
     496:	fc 91       	ld	r31, X
     498:	01 90       	ld	r0, Z+
     49a:	f0 81       	ld	r31, Z
     49c:	e0 2d       	mov	r30, r0
     49e:	09 95       	icall
	char buf[50];
	snprintf(buf,50,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}\n",temperatureMax);
     4a0:	1f 92       	push	r1
     4a2:	8f 93       	push	r24
     4a4:	86 e5       	ldi	r24, 0x56	; 86
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	1f 92       	push	r1
     4ae:	82 e3       	ldi	r24, 0x32	; 50
     4b0:	8f 93       	push	r24
     4b2:	8e 01       	movw	r16, r28
     4b4:	0f 5f       	subi	r16, 0xFF	; 255
     4b6:	1f 4f       	sbci	r17, 0xFF	; 255
     4b8:	1f 93       	push	r17
     4ba:	0f 93       	push	r16
     4bc:	0e 94 48 12 	call	0x2490	; 0x2490 <snprintf>
iSendMessage->SendMessage(buf, 49);}
     4c0:	f7 01       	movw	r30, r14
     4c2:	82 81       	ldd	r24, Z+2	; 0x02
     4c4:	93 81       	ldd	r25, Z+3	; 0x03
     4c6:	dc 01       	movw	r26, r24
     4c8:	ed 91       	ld	r30, X+
     4ca:	fc 91       	ld	r31, X
     4cc:	01 90       	ld	r0, Z+
     4ce:	f0 81       	ld	r31, Z
     4d0:	e0 2d       	mov	r30, r0
     4d2:	41 e3       	ldi	r20, 0x31	; 49
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	b8 01       	movw	r22, r16
     4d8:	09 95       	icall
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
     4e4:	e2 96       	adiw	r28, 0x32	; 50
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	08 95       	ret

000004fe <_ZN8Endpoint17GetMaxTemperatureEv>:

void Endpoint::GetMaxTemperature(){
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	e5 97       	sbiw	r28, 0x35	; 53
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	8c 01       	movw	r16, r24
	bool successful=true;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	89 83       	std	Y+1, r24	; 0x01
	Exceptions exceptions;
     520:	ce 01       	movw	r24, r28
     522:	02 96       	adiw	r24, 0x02	; 2
     524:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN10ExceptionsC1Ev>
	 
	int8_t temperature = iTemperatures->GetMaxTemperature(successful, exceptions);
     528:	d8 01       	movw	r26, r16
     52a:	1c 96       	adiw	r26, 0x0c	; 12
     52c:	8d 91       	ld	r24, X+
     52e:	9c 91       	ld	r25, X
     530:	1d 97       	sbiw	r26, 0x0d	; 13
     532:	dc 01       	movw	r26, r24
     534:	ed 91       	ld	r30, X+
     536:	fc 91       	ld	r31, X
     538:	01 90       	ld	r0, Z+
     53a:	f0 81       	ld	r31, Z
     53c:	e0 2d       	mov	r30, r0
     53e:	ae 01       	movw	r20, r28
     540:	4e 5f       	subi	r20, 0xFE	; 254
     542:	5f 4f       	sbci	r21, 0xFF	; 255
     544:	be 01       	movw	r22, r28
     546:	6f 5f       	subi	r22, 0xFF	; 255
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	09 95       	icall
     54c:	f8 2e       	mov	r15, r24
	if(successful){
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	88 23       	and	r24, r24
     552:	49 f1       	breq	.+82     	; 0x5a6 <_ZN8Endpoint17GetMaxTemperatureEv+0xa8>
		Leds::Main::SetRed();
     554:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN4Leds4Main6SetRedEv>
		char buf[46];
		snprintf(buf,46,"{\"type\":\"max_temperature\",\"temperature\":%03d}\n",temperature);
     558:	8f 2d       	mov	r24, r15
     55a:	0f 2c       	mov	r0, r15
     55c:	00 0c       	add	r0, r0
     55e:	99 0b       	sbc	r25, r25
     560:	9f 93       	push	r25
     562:	ff 92       	push	r15
     564:	89 e8       	ldi	r24, 0x89	; 137
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	9f 93       	push	r25
     56a:	8f 93       	push	r24
     56c:	1f 92       	push	r1
     56e:	8e e2       	ldi	r24, 0x2E	; 46
     570:	8f 93       	push	r24
     572:	7e 01       	movw	r14, r28
     574:	b8 e0       	ldi	r27, 0x08	; 8
     576:	eb 0e       	add	r14, r27
     578:	f1 1c       	adc	r15, r1
     57a:	ff 92       	push	r15
     57c:	ef 92       	push	r14
     57e:	0e 94 48 12 	call	0x2490	; 0x2490 <snprintf>
	iSendMessage->SendMessage(buf, 45);}
     582:	f8 01       	movw	r30, r16
     584:	82 81       	ldd	r24, Z+2	; 0x02
     586:	93 81       	ldd	r25, Z+3	; 0x03
     588:	dc 01       	movw	r26, r24
     58a:	ed 91       	ld	r30, X+
     58c:	fc 91       	ld	r31, X
     58e:	01 90       	ld	r0, Z+
     590:	f0 81       	ld	r31, Z
     592:	e0 2d       	mov	r30, r0
     594:	4d e2       	ldi	r20, 0x2D	; 45
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	b7 01       	movw	r22, r14
     59a:	09 95       	icall
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
	snprintf(buf,50,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}\n",temperatureMax);
iSendMessage->SendMessage(buf, 49);}

void Endpoint::GetMaxTemperature(){
	bool successful=true;
	Exceptions exceptions;
     5a6:	ce 01       	movw	r24, r28
     5a8:	02 96       	adiw	r24, 0x02	; 2
     5aa:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN10ExceptionsD1Ev>
		char buf[46];
		snprintf(buf,46,"{\"type\":\"max_temperature\",\"temperature\":%03d}\n",temperature);
	iSendMessage->SendMessage(buf, 45);}
	else
	SendExceptions(exceptions);
	}
     5ae:	e5 96       	adiw	r28, 0x35	; 53
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	08 95       	ret

000005c8 <_ZN8Endpoint3RunEv>:
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures, ISystemCheck* iSystemCheck):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures), iSystemCheck(iSystemCheck){
	
}
void Endpoint::Run(){
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	c7 5c       	subi	r28, 0xC7	; 199
     5e8:	d1 40       	sbci	r29, 0x01	; 1
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	6c 01       	movw	r12, r24
	Messages* messages = iGetMessages->GetMessages();
     5f6:	dc 01       	movw	r26, r24
     5f8:	8d 91       	ld	r24, X+
     5fa:	9c 91       	ld	r25, X
     5fc:	dc 01       	movw	r26, r24
     5fe:	ed 91       	ld	r30, X+
     600:	fc 91       	ld	r31, X
     602:	01 90       	ld	r0, Z+
     604:	f0 81       	ld	r31, Z
     606:	e0 2d       	mov	r30, r0
     608:	09 95       	icall
     60a:	7c 01       	movw	r14, r24
	if(messages!=NULL){
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	09 f4       	brne	.+2      	; 0x612 <_ZN8Endpoint3RunEv+0x4a>
     610:	1e c1       	rjmp	.+572    	; 0x84e <_ZN8Endpoint3RunEv+0x286>
		if(messages->length>0)
     612:	fc 01       	movw	r30, r24
     614:	82 81       	ldd	r24, Z+2	; 0x02
     616:	93 81       	ldd	r25, Z+3	; 0x03
     618:	18 16       	cp	r1, r24
     61a:	19 06       	cpc	r1, r25
     61c:	0c f0       	brlt	.+2      	; 0x620 <_ZN8Endpoint3RunEv+0x58>
     61e:	11 c1       	rjmp	.+546    	; 0x842 <_ZN8Endpoint3RunEv+0x27a>
		{
			Leds::Main::SetGreen();
     620:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN4Leds4Main8SetGreenEv>
			for(int i=0; i<messages->length; i++){
     624:	d7 01       	movw	r26, r14
     626:	12 96       	adiw	r26, 0x02	; 2
     628:	8d 91       	ld	r24, X+
     62a:	9c 91       	ld	r25, X
     62c:	13 97       	sbiw	r26, 0x03	; 3
     62e:	18 16       	cp	r1, r24
     630:	19 06       	cpc	r1, r25
     632:	0c f0       	brlt	.+2      	; 0x636 <_ZN8Endpoint3RunEv+0x6e>
     634:	06 c1       	rjmp	.+524    	; 0x842 <_ZN8Endpoint3RunEv+0x27a>
     636:	00 e0       	ldi	r16, 0x00	; 0
     638:	10 e0       	ldi	r17, 0x00	; 0
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
					if(strcmp(type, "system_check")==0){
					Exceptions exceptions;
						  bool successful=true;
     63a:	77 24       	eor	r7, r7
     63c:	73 94       	inc	r7
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetGreen();
			for(int i=0; i<messages->length; i++){
				Message* message = messages->messages[i];
     63e:	d7 01       	movw	r26, r14
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	c8 01       	movw	r24, r16
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	e8 0f       	add	r30, r24
     64c:	f9 1f       	adc	r31, r25
     64e:	01 90       	ld	r0, Z+
     650:	f0 81       	ld	r31, Z
     652:	e0 2d       	mov	r30, r0
				json_t pool[64];
				json_t const* root = json_create( (char*)message->buffer, pool, message->length );
     654:	42 81       	ldd	r20, Z+2	; 0x02
     656:	53 81       	ldd	r21, Z+3	; 0x03
     658:	be 01       	movw	r22, r28
     65a:	6f 5f       	subi	r22, 0xFF	; 255
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <json_create>
     666:	5c 01       	movw	r10, r24
				json_t const* jObjectType = json_getProperty( root, "type" );
     668:	68 eb       	ldi	r22, 0xB8	; 184
     66a:	71 e0       	ldi	r23, 0x01	; 1
     66c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <json_getProperty>
				if ( jObjectType && JSON_TEXT == json_getType(  jObjectType ) ) {
     670:	00 97       	sbiw	r24, 0x00	; 0
     672:	09 f4       	brne	.+2      	; 0x676 <_ZN8Endpoint3RunEv+0xae>
     674:	db c0       	rjmp	.+438    	; 0x82c <_ZN8Endpoint3RunEv+0x264>
     676:	fc 01       	movw	r30, r24
     678:	26 81       	ldd	r18, Z+6	; 0x06
     67a:	22 30       	cpi	r18, 0x02	; 2
     67c:	09 f0       	breq	.+2      	; 0x680 <_ZN8Endpoint3RunEv+0xb8>
     67e:	d6 c0       	rjmp	.+428    	; 0x82c <_ZN8Endpoint3RunEv+0x264>
/** Get the value of a json property.
  * The type of property cannot be JSON_OBJ or JSON_ARRAY.
  * @param json A valid handler of a json property.
  * @return Pointer to null-terminated string with the value. */
static inline char const* json_getValue( json_t const* property ) {
    return property->u.value;
     680:	84 80       	ldd	r8, Z+4	; 0x04
     682:	95 80       	ldd	r9, Z+5	; 0x05
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
     684:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN4UART11GetInstanceEv>
     688:	f4 01       	movw	r30, r8
     68a:	01 90       	ld	r0, Z+
     68c:	00 20       	and	r0, r0
     68e:	e9 f7       	brne	.-6      	; 0x68a <_ZN8Endpoint3RunEv+0xc2>
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	af 01       	movw	r20, r30
     694:	48 19       	sub	r20, r8
     696:	59 09       	sbc	r21, r9
     698:	dc 01       	movw	r26, r24
     69a:	ed 91       	ld	r30, X+
     69c:	fc 91       	ld	r31, X
     69e:	01 90       	ld	r0, Z+
     6a0:	f0 81       	ld	r31, Z
     6a2:	e0 2d       	mov	r30, r0
     6a4:	b4 01       	movw	r22, r8
     6a6:	09 95       	icall
					if(strcmp(type, "system_check")==0){
     6a8:	6d eb       	ldi	r22, 0xBD	; 189
     6aa:	71 e0       	ldi	r23, 0x01	; 1
     6ac:	c4 01       	movw	r24, r8
     6ae:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
     6b2:	89 2b       	or	r24, r25
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <_ZN8Endpoint3RunEv+0xf0>
     6b6:	44 c0       	rjmp	.+136    	; 0x740 <_ZN8Endpoint3RunEv+0x178>
					Exceptions exceptions;
     6b8:	ce 01       	movw	r24, r28
     6ba:	8f 53       	subi	r24, 0x3F	; 63
     6bc:	9e 4f       	sbci	r25, 0xFE	; 254
     6be:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN10ExceptionsC1Ev>
						  bool successful=true;
     6c2:	c9 53       	subi	r28, 0x39	; 57
     6c4:	de 4f       	sbci	r29, 0xFE	; 254
     6c6:	78 82       	st	Y, r7
     6c8:	c7 5c       	subi	r28, 0xC7	; 199
     6ca:	d1 40       	sbci	r29, 0x01	; 1
						   iSystemCheck->Check(successful, exceptions);
     6cc:	f6 01       	movw	r30, r12
     6ce:	86 85       	ldd	r24, Z+14	; 0x0e
     6d0:	97 85       	ldd	r25, Z+15	; 0x0f
     6d2:	dc 01       	movw	r26, r24
     6d4:	ed 91       	ld	r30, X+
     6d6:	fc 91       	ld	r31, X
     6d8:	01 90       	ld	r0, Z+
     6da:	f0 81       	ld	r31, Z
     6dc:	e0 2d       	mov	r30, r0
     6de:	ae 01       	movw	r20, r28
     6e0:	4f 53       	subi	r20, 0x3F	; 63
     6e2:	5e 4f       	sbci	r21, 0xFE	; 254
     6e4:	be 01       	movw	r22, r28
     6e6:	69 53       	subi	r22, 0x39	; 57
     6e8:	7e 4f       	sbci	r23, 0xFE	; 254
     6ea:	09 95       	icall
						   if(successful){
     6ec:	c9 53       	subi	r28, 0x39	; 57
     6ee:	de 4f       	sbci	r29, 0xFE	; 254
     6f0:	88 81       	ld	r24, Y
     6f2:	c7 5c       	subi	r28, 0xC7	; 199
     6f4:	d1 40       	sbci	r29, 0x01	; 1
     6f6:	88 23       	and	r24, r24
     6f8:	79 f0       	breq	.+30     	; 0x718 <_ZN8Endpoint3RunEv+0x150>
						   iSendMessage->SendMessage("{\"type\":\"system_check\",\"passed\":true}\n", 38);
     6fa:	f6 01       	movw	r30, r12
     6fc:	82 81       	ldd	r24, Z+2	; 0x02
     6fe:	93 81       	ldd	r25, Z+3	; 0x03
     700:	dc 01       	movw	r26, r24
     702:	ed 91       	ld	r30, X+
     704:	fc 91       	ld	r31, X
     706:	01 90       	ld	r0, Z+
     708:	f0 81       	ld	r31, Z
     70a:	e0 2d       	mov	r30, r0
     70c:	46 e2       	ldi	r20, 0x26	; 38
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	6a ec       	ldi	r22, 0xCA	; 202
     712:	71 e0       	ldi	r23, 0x01	; 1
     714:	09 95       	icall
     716:	0e c0       	rjmp	.+28     	; 0x734 <_ZN8Endpoint3RunEv+0x16c>
						   }
						   else{
						   iSendMessage->SendMessage("{\"type\":\"system_check\",\"passed\":false}\n", 39);
     718:	f6 01       	movw	r30, r12
     71a:	82 81       	ldd	r24, Z+2	; 0x02
     71c:	93 81       	ldd	r25, Z+3	; 0x03
     71e:	dc 01       	movw	r26, r24
     720:	ed 91       	ld	r30, X+
     722:	fc 91       	ld	r31, X
     724:	01 90       	ld	r0, Z+
     726:	f0 81       	ld	r31, Z
     728:	e0 2d       	mov	r30, r0
     72a:	47 e2       	ldi	r20, 0x27	; 39
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	61 ef       	ldi	r22, 0xF1	; 241
     730:	71 e0       	ldi	r23, 0x01	; 1
     732:	09 95       	icall
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
					if(strcmp(type, "system_check")==0){
					Exceptions exceptions;
     734:	ce 01       	movw	r24, r28
     736:	8f 53       	subi	r24, 0x3F	; 63
     738:	9e 4f       	sbci	r25, 0xFE	; 254
     73a:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN10ExceptionsD1Ev>
     73e:	76 c0       	rjmp	.+236    	; 0x82c <_ZN8Endpoint3RunEv+0x264>
						   }
						   else{
						   iSendMessage->SendMessage("{\"type\":\"system_check\",\"passed\":false}\n", 39);
						   }
						}else{
						if(strcmp(type,"run")==0){
     740:	69 e1       	ldi	r22, 0x19	; 25
     742:	72 e0       	ldi	r23, 0x02	; 2
     744:	c4 01       	movw	r24, r8
     746:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
     74a:	89 2b       	or	r24, r25
     74c:	09 f4       	brne	.+2      	; 0x750 <_ZN8Endpoint3RunEv+0x188>
     74e:	6e c0       	rjmp	.+220    	; 0x82c <_ZN8Endpoint3RunEv+0x264>
							
							}else{
							if(strcmp(type,"set_temperature_max")==0){
     750:	6d e1       	ldi	r22, 0x1D	; 29
     752:	72 e0       	ldi	r23, 0x02	; 2
     754:	c4 01       	movw	r24, r8
     756:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
     75a:	89 2b       	or	r24, r25
     75c:	f1 f4       	brne	.+60     	; 0x79a <_ZN8Endpoint3RunEv+0x1d2>
								json_t const* jObjectTemperatureMax = json_getProperty( root, "temperature_max" );
     75e:	65 e3       	ldi	r22, 0x35	; 53
     760:	72 e0       	ldi	r23, 0x02	; 2
     762:	c5 01       	movw	r24, r10
     764:	0e 94 c9 0c 	call	0x1992	; 0x1992 <json_getProperty>
								if ( jObjectTemperatureMax!=NULL && JSON_INTEGER == json_getType(  jObjectTemperatureMax ) ) {
     768:	00 97       	sbiw	r24, 0x00	; 0
     76a:	09 f4       	brne	.+2      	; 0x76e <_ZN8Endpoint3RunEv+0x1a6>
     76c:	5f c0       	rjmp	.+190    	; 0x82c <_ZN8Endpoint3RunEv+0x264>
     76e:	fc 01       	movw	r30, r24
     770:	26 81       	ldd	r18, Z+6	; 0x06
     772:	24 30       	cpi	r18, 0x04	; 4
     774:	09 f0       	breq	.+2      	; 0x778 <_ZN8Endpoint3RunEv+0x1b0>
     776:	5a c0       	rjmp	.+180    	; 0x82c <_ZN8Endpoint3RunEv+0x264>

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
    return (int64_t)atol( property->u.value );
     778:	84 81       	ldd	r24, Z+4	; 0x04
     77a:	95 81       	ldd	r25, Z+5	; 0x05
     77c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <atol>
									int temperatureMax = json_getInteger(jObjectTemperatureMax);
									iSetTemperatureMax->SetTemperatureMax(temperatureMax);
     780:	d6 01       	movw	r26, r12
     782:	14 96       	adiw	r26, 0x04	; 4
     784:	8d 91       	ld	r24, X+
     786:	9c 91       	ld	r25, X
     788:	15 97       	sbiw	r26, 0x05	; 5
     78a:	dc 01       	movw	r26, r24
     78c:	ed 91       	ld	r30, X+
     78e:	fc 91       	ld	r31, X
     790:	01 90       	ld	r0, Z+
     792:	f0 81       	ld	r31, Z
     794:	e0 2d       	mov	r30, r0
     796:	09 95       	icall
     798:	49 c0       	rjmp	.+146    	; 0x82c <_ZN8Endpoint3RunEv+0x264>
								}
								}else{
								if(strcmp(type,"get_temperature_max")==0){
     79a:	61 e3       	ldi	r22, 0x31	; 49
     79c:	72 e0       	ldi	r23, 0x02	; 2
     79e:	c4 01       	movw	r24, r8
     7a0:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
     7a4:	89 2b       	or	r24, r25
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <_ZN8Endpoint3RunEv+0x1e8>
									GetTemperatureMax();
     7a8:	c6 01       	movw	r24, r12
     7aa:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN8Endpoint17GetTemperatureMaxEv>
     7ae:	3e c0       	rjmp	.+124    	; 0x82c <_ZN8Endpoint3RunEv+0x264>
									}else{
									if(strcmp(type,"set_power"  )==0){
     7b0:	65 e4       	ldi	r22, 0x45	; 69
     7b2:	72 e0       	ldi	r23, 0x02	; 2
     7b4:	c4 01       	movw	r24, r8
     7b6:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
     7ba:	89 2b       	or	r24, r25
     7bc:	d9 f4       	brne	.+54     	; 0x7f4 <_ZN8Endpoint3RunEv+0x22c>
										json_t const* jObjectPower = json_getProperty( root, "power" );
     7be:	63 e5       	ldi	r22, 0x53	; 83
     7c0:	72 e0       	ldi	r23, 0x02	; 2
     7c2:	c5 01       	movw	r24, r10
     7c4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <json_getProperty>
										if ( jObjectPower && JSON_INTEGER == json_getType(  jObjectPower ) ) {
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	81 f1       	breq	.+96     	; 0x82c <_ZN8Endpoint3RunEv+0x264>
     7cc:	fc 01       	movw	r30, r24
     7ce:	26 81       	ldd	r18, Z+6	; 0x06
     7d0:	24 30       	cpi	r18, 0x04	; 4
     7d2:	61 f5       	brne	.+88     	; 0x82c <_ZN8Endpoint3RunEv+0x264>
     7d4:	84 81       	ldd	r24, Z+4	; 0x04
     7d6:	95 81       	ldd	r25, Z+5	; 0x05
     7d8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <atol>
											int Power = json_getInteger(jObjectPower);
											iSetPower->SetPower(Power);
     7dc:	f6 01       	movw	r30, r12
     7de:	a0 85       	ldd	r26, Z+8	; 0x08
     7e0:	b1 85       	ldd	r27, Z+9	; 0x09
     7e2:	ed 91       	ld	r30, X+
     7e4:	fc 91       	ld	r31, X
     7e6:	11 97       	sbiw	r26, 0x01	; 1
     7e8:	01 90       	ld	r0, Z+
     7ea:	f0 81       	ld	r31, Z
     7ec:	e0 2d       	mov	r30, r0
     7ee:	cd 01       	movw	r24, r26
     7f0:	09 95       	icall
     7f2:	1c c0       	rjmp	.+56     	; 0x82c <_ZN8Endpoint3RunEv+0x264>
										}
										}else{
										if(strcmp(type,"get_power")==0){
     7f4:	6f e4       	ldi	r22, 0x4F	; 79
     7f6:	72 e0       	ldi	r23, 0x02	; 2
     7f8:	c4 01       	movw	r24, r8
     7fa:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
     7fe:	89 2b       	or	r24, r25
     800:	21 f4       	brne	.+8      	; 0x80a <_ZN8Endpoint3RunEv+0x242>
											GetPower();
     802:	c6 01       	movw	r24, r12
     804:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_ZN8Endpoint8GetPowerEv>
     808:	11 c0       	rjmp	.+34     	; 0x82c <_ZN8Endpoint3RunEv+0x264>
											}else{
											if(strcmp(type,"set_info_rate")==0){
     80a:	69 e5       	ldi	r22, 0x59	; 89
     80c:	72 e0       	ldi	r23, 0x02	; 2
     80e:	c4 01       	movw	r24, r8
     810:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
     814:	89 2b       	or	r24, r25
     816:	51 f0       	breq	.+20     	; 0x82c <_ZN8Endpoint3RunEv+0x264>

												}else{
												if(strcmp(type, "get_max_temperature")==0 ){
     818:	67 e6       	ldi	r22, 0x67	; 103
     81a:	72 e0       	ldi	r23, 0x02	; 2
     81c:	c4 01       	movw	r24, r8
     81e:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
     822:	89 2b       	or	r24, r25
     824:	19 f4       	brne	.+6      	; 0x82c <_ZN8Endpoint3RunEv+0x264>
													GetMaxTemperature();
     826:	c6 01       	movw	r24, r12
     828:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN8Endpoint17GetMaxTemperatureEv>
	Messages* messages = iGetMessages->GetMessages();
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetGreen();
			for(int i=0; i<messages->length; i++){
     82c:	0f 5f       	subi	r16, 0xFF	; 255
     82e:	1f 4f       	sbci	r17, 0xFF	; 255
     830:	d7 01       	movw	r26, r14
     832:	12 96       	adiw	r26, 0x02	; 2
     834:	8d 91       	ld	r24, X+
     836:	9c 91       	ld	r25, X
     838:	13 97       	sbiw	r26, 0x03	; 3
     83a:	08 17       	cp	r16, r24
     83c:	19 07       	cpc	r17, r25
     83e:	0c f4       	brge	.+2      	; 0x842 <_ZN8Endpoint3RunEv+0x27a>
     840:	fe ce       	rjmp	.-516    	; 0x63e <_ZN8Endpoint3RunEv+0x76>
						}
					}
				}
			}
		}
		delete messages;
     842:	c7 01       	movw	r24, r14
     844:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN8MessagesD1Ev>
     848:	c7 01       	movw	r24, r14
     84a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZdlPv>
	}
}
     84e:	c9 53       	subi	r28, 0x39	; 57
     850:	de 4f       	sbci	r29, 0xFE	; 254
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	af 90       	pop	r10
     870:	9f 90       	pop	r9
     872:	8f 90       	pop	r8
     874:	7f 90       	pop	r7
     876:	08 95       	ret

00000878 <_ZN9Exception8ToStringEv>:
}
} //~Fans

const char* Exception::ToString(){

}
     878:	08 95       	ret

0000087a <_ZN9ExceptionC1Ev>:

#include <stdlib.h>
#include "Exception.h"

// default constructor
Exception::Exception()
     87a:	2f e7       	ldi	r18, 0x7F	; 127
     87c:	32 e0       	ldi	r19, 0x02	; 2
     87e:	fc 01       	movw	r30, r24
     880:	31 83       	std	Z+1, r19	; 0x01
     882:	20 83       	st	Z, r18
     884:	08 95       	ret

00000886 <_ZN9ExceptionC1EPKc>:
{
} //Outputs
Exception::Exception(const char* message):message(message)
     886:	2f e7       	ldi	r18, 0x7F	; 127
     888:	32 e0       	ldi	r19, 0x02	; 2
     88a:	fc 01       	movw	r30, r24
     88c:	31 83       	std	Z+1, r19	; 0x01
     88e:	20 83       	st	Z, r18
     890:	73 83       	std	Z+3, r23	; 0x03
     892:	62 83       	std	Z+2, r22	; 0x02
     894:	08 95       	ret

00000896 <_ZN9ExceptionD1Ev>:
{
} //Outputs

// default destructor
Exception::~Exception()
     896:	2f e7       	ldi	r18, 0x7F	; 127
     898:	32 e0       	ldi	r19, 0x02	; 2
     89a:	fc 01       	movw	r30, r24
     89c:	31 83       	std	Z+1, r19	; 0x01
     89e:	20 83       	st	Z, r18
{
if(message!=NULL){
     8a0:	82 81       	ldd	r24, Z+2	; 0x02
     8a2:	93 81       	ldd	r25, Z+3	; 0x03
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	11 f0       	breq	.+4      	; 0x8ac <_ZN9ExceptionD1Ev+0x16>
delete message;
     8a8:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZdlPv>
     8ac:	08 95       	ret

000008ae <_ZN10ExceptionsC1Ev>:
}
void Exceptions::Add(Exception* exception){
exceptions.push_back(exception);}
unsigned int Exceptions::Count(){
	return exceptions.size();
}
     8ae:	fc 01       	movw	r30, r24
     8b0:	11 82       	std	Z+1, r1	; 0x01
     8b2:	10 82       	st	Z, r1
     8b4:	13 82       	std	Z+3, r1	; 0x03
     8b6:	12 82       	std	Z+2, r1	; 0x02
     8b8:	15 82       	std	Z+5, r1	; 0x05
     8ba:	14 82       	std	Z+4, r1	; 0x04
     8bc:	08 95       	ret

000008be <_ZN10Exceptions3AddEP9Exception>:
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	ec 01       	movw	r28, r24
     8d4:	7b 01       	movw	r14, r22
     8d6:	0a 81       	ldd	r16, Y+2	; 0x02
     8d8:	1b 81       	ldd	r17, Y+3	; 0x03
     8da:	88 81       	ld	r24, Y
     8dc:	99 81       	ldd	r25, Y+1	; 0x01
     8de:	08 17       	cp	r16, r24
     8e0:	19 07       	cpc	r17, r25
     8e2:	e9 f4       	brne	.+58     	; 0x91e <__stack+0x1f>
     8e4:	01 15       	cp	r16, r1
     8e6:	11 05       	cpc	r17, r1
     8e8:	21 f0       	breq	.+8      	; 0x8f2 <_ZN10Exceptions3AddEP9Exception+0x34>
     8ea:	c8 01       	movw	r24, r16
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <_ZN10Exceptions3AddEP9Exception+0x38>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	9b 83       	std	Y+3, r25	; 0x03
     8f8:	8a 83       	std	Y+2, r24	; 0x02
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <malloc>
     902:	6c 01       	movw	r12, r24
     904:	ac 80       	ldd	r10, Y+4	; 0x04
     906:	bd 80       	ldd	r11, Y+5	; 0x05
     908:	a8 01       	movw	r20, r16
     90a:	44 0f       	add	r20, r20
     90c:	55 1f       	adc	r21, r21
     90e:	b5 01       	movw	r22, r10
     910:	0e 94 21 12 	call	0x2442	; 0x2442 <memcpy>
     914:	c5 01       	movw	r24, r10
     916:	0e 94 71 11 	call	0x22e2	; 0x22e2 <free>
     91a:	dd 82       	std	Y+5, r13	; 0x05
     91c:	cc 82       	std	Y+4, r12	; 0x04
     91e:	ec 81       	ldd	r30, Y+4	; 0x04
     920:	fd 81       	ldd	r31, Y+5	; 0x05
     922:	88 81       	ld	r24, Y
     924:	99 81       	ldd	r25, Y+1	; 0x01
     926:	9c 01       	movw	r18, r24
     928:	2f 5f       	subi	r18, 0xFF	; 255
     92a:	3f 4f       	sbci	r19, 0xFF	; 255
     92c:	39 83       	std	Y+1, r19	; 0x01
     92e:	28 83       	st	Y, r18
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	e8 0f       	add	r30, r24
     936:	f9 1f       	adc	r31, r25
     938:	f1 82       	std	Z+1, r15	; 0x01
     93a:	e0 82       	st	Z, r14
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	bf 90       	pop	r11
     94e:	af 90       	pop	r10
     950:	08 95       	ret

00000952 <_ZN10ExceptionsD1Ev>:
// default destructor
Exceptions::~Exceptions()
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	8c 01       	movw	r16, r24
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
	   simple_vector &operator=(   simple_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x)  { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size()  const { return d_size; }; // Size getter
     964:	dc 01       	movw	r26, r24
     966:	ed 90       	ld	r14, X+
     968:	fc 90       	ld	r15, X
{
	unsigned int size = exceptions.size();
	for(unsigned int i=0; i<size; i++){
     96a:	e1 14       	cp	r14, r1
     96c:	f1 04       	cpc	r15, r1
     96e:	d9 f0       	breq	.+54     	; 0x9a6 <_ZN10ExceptionsD1Ev+0x54>
     970:	c0 e0       	ldi	r28, 0x00	; 0
     972:	d0 e0       	ldi	r29, 0x00	; 0
		if(exceptions[i]!=NULL)
     974:	d8 01       	movw	r26, r16
     976:	14 96       	adiw	r26, 0x04	; 4
     978:	ed 91       	ld	r30, X+
     97a:	fc 91       	ld	r31, X
     97c:	15 97       	sbiw	r26, 0x05	; 5
     97e:	ce 01       	movw	r24, r28
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	e8 0f       	add	r30, r24
     986:	f9 1f       	adc	r31, r25
     988:	c0 80       	ld	r12, Z
     98a:	d1 80       	ldd	r13, Z+1	; 0x01
		delete exceptions[i];
     98c:	c1 14       	cp	r12, r1
     98e:	d1 04       	cpc	r13, r1
     990:	31 f0       	breq	.+12     	; 0x99e <_ZN10ExceptionsD1Ev+0x4c>
     992:	c6 01       	movw	r24, r12
     994:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN9ExceptionD1Ev>
     998:	c6 01       	movw	r24, r12
     99a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZdlPv>
}
// default destructor
Exceptions::~Exceptions()
{
	unsigned int size = exceptions.size();
	for(unsigned int i=0; i<size; i++){
     99e:	21 96       	adiw	r28, 0x01	; 1
     9a0:	ec 16       	cp	r14, r28
     9a2:	fd 06       	cpc	r15, r29
     9a4:	39 f7       	brne	.-50     	; 0x974 <_ZN10ExceptionsD1Ev+0x22>

	}; // Default constructor
	   simple_vector(   simple_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) {
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
     9a6:	f8 01       	movw	r30, r16
     9a8:	84 81       	ldd	r24, Z+4	; 0x04
     9aa:	95 81       	ldd	r25, Z+5	; 0x05
     9ac:	0e 94 71 11 	call	0x22e2	; 0x22e2 <free>
		if(exceptions[i]!=NULL)
		delete exceptions[i];
	}
} //~Exceptions
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	cf 90       	pop	r12
     9c0:	08 95       	ret

000009c2 <_ZN4Fans23GetFansWorkingCorrectlyERbR10Exceptions>:
	this->iGetFanInfos=iGetFanInfos;
	this->nIGetFanInfos=nIGetFanInfos;
	this->iGetFanSpeedMin = iGetFanSpeedMin;

}
void Fans::GetFansWorkingCorrectly(bool& successful, Exceptions& exceptions){
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
     9d0:	8b 01       	movw	r16, r22
     9d2:	7a 01       	movw	r14, r20
if(nIGetFanInfos<=0){
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	81 11       	cpse	r24, r1
     9d8:	10 c0       	rjmp	.+32     	; 0x9fa <_ZN4Fans23GetFansWorkingCorrectlyERbR10Exceptions+0x38>
	exceptions.Add(new Exception("There are no fans"));
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
     9e2:	ec 01       	movw	r28, r24
     9e4:	61 e8       	ldi	r22, 0x81	; 129
     9e6:	72 e0       	ldi	r23, 0x02	; 2
     9e8:	0e 94 43 04 	call	0x886	; 0x886 <_ZN9ExceptionC1EPKc>
     9ec:	be 01       	movw	r22, r28
     9ee:	c7 01       	movw	r24, r14
     9f0:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
successful= false;
     9f4:	d8 01       	movw	r26, r16
     9f6:	1c 92       	st	X, r1
return;}
     9f8:	1c c0       	rjmp	.+56     	; 0xa32 <_ZN4Fans23GetFansWorkingCorrectlyERbR10Exceptions+0x70>
	uint16_t minSpeed = iGetFanSpeedMin->GetFanSpeedMin();
     9fa:	8f 81       	ldd	r24, Y+7	; 0x07
     9fc:	98 85       	ldd	r25, Y+8	; 0x08
     9fe:	dc 01       	movw	r26, r24
     a00:	ed 91       	ld	r30, X+
     a02:	fc 91       	ld	r31, X
     a04:	01 90       	ld	r0, Z+
     a06:	f0 81       	ld	r31, Z
     a08:	e0 2d       	mov	r30, r0
     a0a:	09 95       	icall
	for(char i=0; i<nIGetFanInfos; i++    ){
     a0c:	8e 81       	ldd	r24, Y+6	; 0x06
     a0e:	88 23       	and	r24, r24
     a10:	81 f0       	breq	.+32     	; 0xa32 <_ZN4Fans23GetFansWorkingCorrectlyERbR10Exceptions+0x70>
		IGetFanInfo* iGetFanInfo = iGetFanInfos[i];
     a12:	ec 81       	ldd	r30, Y+4	; 0x04
     a14:	fd 81       	ldd	r31, Y+5	; 0x05
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
		iGetFanInfo->Check(successful, exceptions);
     a1a:	dc 01       	movw	r26, r24
     a1c:	14 96       	adiw	r26, 0x04	; 4
     a1e:	ed 91       	ld	r30, X+
     a20:	fc 91       	ld	r31, X
     a22:	15 97       	sbiw	r26, 0x05	; 5
     a24:	01 90       	ld	r0, Z+
     a26:	f0 81       	ld	r31, Z
     a28:	e0 2d       	mov	r30, r0
     a2a:	a7 01       	movw	r20, r14
     a2c:	b8 01       	movw	r22, r16
     a2e:	04 96       	adiw	r24, 0x04	; 4
     a30:	09 95       	icall
			
			return;}
	}
	else break;
	}
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	08 95       	ret

00000a40 <_ZN4Fans11GetInstanceEv>:
#include "UART.h"

Fans Fans:: _Singleton;
Fans& Fans::GetInstance(){
	static bool initialized=false;
	if(!initialized)
     a40:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__data_end>
     a44:	81 11       	cpse	r24, r1
     a46:	03 c0       	rjmp	.+6      	; 0xa4e <_ZN4Fans11GetInstanceEv+0xe>
	{
		initialized=true;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__data_end>
	}
	return _Singleton;
}
     a4e:	85 e3       	ldi	r24, 0x35	; 53
     a50:	94 e0       	ldi	r25, 0x04	; 4
     a52:	08 95       	ret

00000a54 <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>:
 void Fans::SetInterfaces(IGetFanInfo** iGetFanInfos, unsigned char nIGetFanInfos, IGetFanSpeedMin*iGetFanSpeedMin)
{
     a54:	fc 01       	movw	r30, r24
	this->iGetFanInfos=iGetFanInfos;
     a56:	75 83       	std	Z+5, r23	; 0x05
     a58:	64 83       	std	Z+4, r22	; 0x04
	this->nIGetFanInfos=nIGetFanInfos;
     a5a:	46 83       	std	Z+6, r20	; 0x06
	this->iGetFanSpeedMin = iGetFanSpeedMin;
     a5c:	30 87       	std	Z+8, r19	; 0x08
     a5e:	27 83       	std	Z+7, r18	; 0x07
     a60:	08 95       	ret

00000a62 <_GLOBAL__sub_I__ZN4Fans10_SingletonE>:
#include "IGetFanInfo.h"
#include "IFans.h"
#include "IGetExceptions.h"
#include "IGetFanSpeedMin.h"
#include "Exceptions.h"
class Fans:
     a62:	87 e9       	ldi	r24, 0x97	; 151
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <_ZN4Fans10_SingletonE+0x1>
     a6a:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <_ZN4Fans10_SingletonE>
     a6e:	08 95       	ret

00000a70 <_ZN4Leds4Main6SetRedEv>:
#include "Outputs.h"



void Leds::Main::SetRed(){
	Outputs::PD::_2::SetLow();
     a70:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetLow();
     a74:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetHigh();
     a78:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN7Outputs2PD2_47SetHighEv>
     a7c:	08 95       	ret

00000a7e <_ZN4Leds4Main8SetGreenEv>:
}
void Leds::Main::SetGreen(){
	Outputs::PD::_2::SetLow();
     a7e:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetHigh();
     a82:	0e 94 1c 06 	call	0xc38	; 0xc38 <_ZN7Outputs2PD2_37SetHighEv>
	Outputs::PD::_4::SetLow();
     a86:	0e 94 22 06 	call	0xc44	; 0xc44 <_ZN7Outputs2PD2_46SetLowEv>
     a8a:	08 95       	ret

00000a8c <_ZN4LM757GetNameEv>:
	addressWrite =0x90|(shifted&0x0e);
	addressRead =0x91|(shifted&0x0e);
} //LM75
const char* LM75::GetName(){
	return name;
}
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 85       	ldd	r24, Z+8	; 0x08
     a90:	91 85       	ldd	r25, Z+9	; 0x09
     a92:	08 95       	ret

00000a94 <_ZN4LM7514GetTemperatureERbR10Exceptions>:
	int8_t LM75::GetTemperature(bool& successful, Exceptions& exceptions){
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
     aa2:	7a 01       	movw	r14, r20
	i2c_start_wait(addressWrite);
     aa4:	8b 85       	ldd	r24, Y+11	; 0x0b
     aa6:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_start_wait>
	char r=i2c_write(TEMPERATURE_ADDRESS);
     aaa:	8c 81       	ldd	r24, Y+4	; 0x04
     aac:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
     ab0:	18 2f       	mov	r17, r24
	i2c_stop();
     ab2:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
	if(r!=0){
     ab6:	11 23       	and	r17, r17
     ab8:	79 f0       	breq	.+30     	; 0xad8 <_ZN4LM7514GetTemperatureERbR10Exceptions+0x44>
	exceptions.Add(new CommunicationException(name));
     aba:	88 e0       	ldi	r24, 0x08	; 8
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
     ac2:	8c 01       	movw	r16, r24
     ac4:	68 85       	ldd	r22, Y+8	; 0x08
     ac6:	79 85       	ldd	r23, Y+9	; 0x09
     ac8:	0e 94 24 01 	call	0x248	; 0x248 <_ZN22CommunicationExceptionC1EPKc>
     acc:	b8 01       	movw	r22, r16
     ace:	c7 01       	movw	r24, r14
     ad0:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
	return 0;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <_ZN4LM7514GetTemperatureERbR10Exceptions+0x5c>
	}
	i2c_start_wait(addressRead);
     ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
     ada:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_start_wait>
	char most = i2c_readAck();
     ade:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
     ae2:	c8 2f       	mov	r28, r24
	char least = i2c_readAck();
     ae4:	0e 94 cc 00 	call	0x198	; 0x198 <i2c_readAck>
	sei();
     ae8:	78 94       	sei
	i2c_stop();
     aea:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
	return static_cast<int8_t>(most);
     aee:	8c 2f       	mov	r24, r28
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	08 95       	ret

00000afe <_ZThn2_N4LM757GetNameEv>:
     afe:	fc 01       	movw	r30, r24
     b00:	86 81       	ldd	r24, Z+6	; 0x06
     b02:	97 81       	ldd	r25, Z+7	; 0x07
     b04:	08 95       	ret

00000b06 <_ZN4LM75C1EcPc>:
#include "i2cmaster.h"
#include "LM75.h"
#include "CommunicationException.h"
#include <avr/interrupt.h>
// default constructor
LM75::LM75(char address, char* name):name(name)
     b06:	fc 01       	movw	r30, r24
     b08:	8d e9       	ldi	r24, 0x9D	; 157
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	91 83       	std	Z+1, r25	; 0x01
     b0e:	80 83       	st	Z, r24
     b10:	85 ea       	ldi	r24, 0xA5	; 165
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	93 83       	std	Z+3, r25	; 0x03
     b16:	82 83       	std	Z+2, r24	; 0x02
     b18:	14 82       	std	Z+4, r1	; 0x04
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	85 83       	std	Z+5, r24	; 0x05
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	86 83       	std	Z+6, r24	; 0x06
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	87 83       	std	Z+7, r24	; 0x07
     b26:	51 87       	std	Z+9, r21	; 0x09
     b28:	40 87       	std	Z+8, r20	; 0x08
{
	char shifted = (address<<1);
	addressWrite =0x90|(shifted&0x0e);
     b2a:	66 0f       	add	r22, r22
     b2c:	6e 70       	andi	r22, 0x0E	; 14
     b2e:	86 2f       	mov	r24, r22
     b30:	80 69       	ori	r24, 0x90	; 144
     b32:	83 87       	std	Z+11, r24	; 0x0b
	addressRead =0x91|(shifted&0x0e);
     b34:	61 69       	ori	r22, 0x91	; 145
     b36:	62 87       	std	Z+10, r22	; 0x0a
     b38:	08 95       	ret

00000b3a <_ZN7MessageC1EPKcj>:
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include <stdlib.h>
#include "Message.h"
Message::Message(const char* bufferIn, unsigned int lengthIn):length(lengthIn), buffer(bufferIn){
     b3a:	fc 01       	movw	r30, r24
     b3c:	71 83       	std	Z+1, r23	; 0x01
     b3e:	60 83       	st	Z, r22
     b40:	53 83       	std	Z+3, r21	; 0x03
     b42:	42 83       	std	Z+2, r20	; 0x02
     b44:	08 95       	ret

00000b46 <_ZN7MessageD1Ev>:
	
}
Message::~Message(){
	delete[] this->buffer;
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	91 81       	ldd	r25, Z+1	; 0x01
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	11 f0       	breq	.+4      	; 0xb54 <_ZN7MessageD1Ev+0xe>
     b50:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZdaPv>
     b54:	08 95       	ret

00000b56 <_ZN8MessagesC1EPP7Messagec>:
*
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	ec 01       	movw	r28, r24
     b62:	f6 2e       	mov	r15, r22
     b64:	07 2f       	mov	r16, r23
     b66:	14 2f       	mov	r17, r20
     b68:	84 2f       	mov	r24, r20
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	9b 83       	std	Y+3, r25	; 0x03
     b6e:	8a 83       	std	Y+2, r24	; 0x02
	messages = new Message*[lengthIn];
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_Znaj>
     b78:	99 83       	std	Y+1, r25	; 0x01
     b7a:	88 83       	st	Y, r24
	for(char i=0; i<lengthIn; i++)
     b7c:	11 23       	and	r17, r17
     b7e:	b9 f0       	breq	.+46     	; 0xbae <_ZN8MessagesC1EPP7Messagec+0x58>
     b80:	af 2d       	mov	r26, r15
     b82:	b0 2f       	mov	r27, r16
     b84:	11 50       	subi	r17, 0x01	; 1
     b86:	21 2f       	mov	r18, r17
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	2f 5f       	subi	r18, 0xFF	; 255
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	22 0f       	add	r18, r18
     b90:	33 1f       	adc	r19, r19
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
	messages[i]= messagesIn[i];
     b96:	4d 91       	ld	r20, X+
     b98:	5d 91       	ld	r21, X+
     b9a:	e8 81       	ld	r30, Y
     b9c:	f9 81       	ldd	r31, Y+1	; 0x01
     b9e:	e8 0f       	add	r30, r24
     ba0:	f9 1f       	adc	r31, r25
     ba2:	51 83       	std	Z+1, r21	; 0x01
     ba4:	40 83       	st	Z, r20
     ba6:	02 96       	adiw	r24, 0x02	; 2
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
	messages = new Message*[lengthIn];
	for(char i=0; i<lengthIn; i++)
     ba8:	82 17       	cp	r24, r18
     baa:	93 07       	cpc	r25, r19
     bac:	a1 f7       	brne	.-24     	; 0xb96 <_ZN8MessagesC1EPP7Messagec+0x40>
	messages[i]= messagesIn[i];
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	08 95       	ret

00000bba <_ZN8MessagesD1Ev>:
Messages::~Messages(){
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	7c 01       	movw	r14, r24

	for(char i=0; i<length; i++)
     bc6:	dc 01       	movw	r26, r24
     bc8:	12 96       	adiw	r26, 0x02	; 2
     bca:	8d 91       	ld	r24, X+
     bcc:	9c 91       	ld	r25, X
     bce:	13 97       	sbiw	r26, 0x03	; 3
     bd0:	18 16       	cp	r1, r24
     bd2:	19 06       	cpc	r1, r25
     bd4:	f4 f4       	brge	.+60     	; 0xc12 <_ZN8MessagesD1Ev+0x58>
     bd6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		delete messages[i];
     bd8:	ec 2f       	mov	r30, r28
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	d7 01       	movw	r26, r14
     be2:	8d 91       	ld	r24, X+
     be4:	9c 91       	ld	r25, X
     be6:	e8 0f       	add	r30, r24
     be8:	f9 1f       	adc	r31, r25
     bea:	00 81       	ld	r16, Z
     bec:	11 81       	ldd	r17, Z+1	; 0x01
     bee:	01 15       	cp	r16, r1
     bf0:	11 05       	cpc	r17, r1
     bf2:	31 f0       	breq	.+12     	; 0xc00 <_ZN8MessagesD1Ev+0x46>
     bf4:	c8 01       	movw	r24, r16
     bf6:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN7MessageD1Ev>
     bfa:	c8 01       	movw	r24, r16
     bfc:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZdlPv>
	for(char i=0; i<lengthIn; i++)
	messages[i]= messagesIn[i];
}
Messages::~Messages(){

	for(char i=0; i<length; i++)
     c00:	cf 5f       	subi	r28, 0xFF	; 255
     c02:	2c 2f       	mov	r18, r28
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	f7 01       	movw	r30, r14
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	1c f3       	brlt	.-58     	; 0xbd8 <_ZN8MessagesD1Ev+0x1e>
	{
		delete messages[i];
	}
	delete[] messages;
     c12:	d7 01       	movw	r26, r14
     c14:	8d 91       	ld	r24, X+
     c16:	9c 91       	ld	r25, X
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	11 f0       	breq	.+4      	; 0xc20 <_ZN8MessagesD1Ev+0x66>
     c1c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZdaPv>
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	08 95       	ret

00000c2c <_ZN7Outputs10InitializeEv>:
}
void Outputs::PB::_5::SetLow(){
	PORTB= PORTB&0xFB;
}
void Outputs::PD::_2::SetHigh(){
	PORTD = PORTD|0x04;
     c2c:	8a b1       	in	r24, 0x0a	; 10
     c2e:	8c 61       	ori	r24, 0x1C	; 28
     c30:	8a b9       	out	0x0a, r24	; 10
     c32:	08 95       	ret

00000c34 <_ZN7Outputs2PD2_26SetLowEv>:
}
void Outputs::PD::_2::SetLow(){
	PORTD= PORTD&0xFB;
     c34:	5a 98       	cbi	0x0b, 2	; 11
     c36:	08 95       	ret

00000c38 <_ZN7Outputs2PD2_37SetHighEv>:
}
void Outputs::PD::_3::SetHigh(){
	PORTD = PORTD|0x08;
     c38:	5b 9a       	sbi	0x0b, 3	; 11
     c3a:	08 95       	ret

00000c3c <_ZN7Outputs2PD2_36SetLowEv>:
}
void Outputs::PD::_3::SetLow(){
	PORTD= PORTD&0xF7;
     c3c:	5b 98       	cbi	0x0b, 3	; 11
     c3e:	08 95       	ret

00000c40 <_ZN7Outputs2PD2_47SetHighEv>:
}
void Outputs::PD::_4::SetHigh(){
	PORTD = PORTD|0x10;
     c40:	5c 9a       	sbi	0x0b, 4	; 11
     c42:	08 95       	ret

00000c44 <_ZN7Outputs2PD2_46SetLowEv>:
}
void Outputs::PD::_4::SetLow(){
	PORTD= PORTD&0xEF;
     c44:	5c 98       	cbi	0x0b, 4	; 11
     c46:	08 95       	ret

00000c48 <_ZN8Settings17GetTemperatureMaxEv>:
		if(a<POWER_MIN)
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
     c48:	fc 01       	movw	r30, r24
     c4a:	82 85       	ldd	r24, Z+10	; 0x0a
     c4c:	08 95       	ret

00000c4e <_ZN8Settings8GetPowerEv>:
	temperatureMax=a;
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
}
uint16_t Settings::GetPower(){
	return power;
}
     c4e:	fc 01       	movw	r30, r24
     c50:	83 85       	ldd	r24, Z+11	; 0x0b
     c52:	94 85       	ldd	r25, Z+12	; 0x0c
     c54:	08 95       	ret

00000c56 <_ZN8Settings14GetFanSpeedMinEv>:
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
     c56:	fc 01       	movw	r30, r24
     c58:	85 85       	ldd	r24, Z+13	; 0x0d
     c5a:	96 85       	ldd	r25, Z+14	; 0x0e
     c5c:	08 95       	ret

00000c5e <_ZThn8_N8Settings14GetFanSpeedMinEv>:
     c5e:	fc 01       	movw	r30, r24
     c60:	85 81       	ldd	r24, Z+5	; 0x05
     c62:	96 81       	ldd	r25, Z+6	; 0x06
     c64:	08 95       	ret

00000c66 <_ZThn4_N8Settings8GetPowerEv>:
     c66:	fc 01       	movw	r30, r24
     c68:	87 81       	ldd	r24, Z+7	; 0x07
     c6a:	90 85       	ldd	r25, Z+8	; 0x08
     c6c:	08 95       	ret

00000c6e <_ZN8Settings17CapTemperatureMaxERh>:
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
	CapPower(a);
	power=a;
}
void Settings::CapTemperatureMax(uint8_t& a){
	if(a>TEMPERATURE_MAX_MAX)
     c6e:	fb 01       	movw	r30, r22
     c70:	80 81       	ld	r24, Z
     c72:	8e 37       	cpi	r24, 0x7E	; 126
     c74:	18 f0       	brcs	.+6      	; 0xc7c <_ZN8Settings17CapTemperatureMaxERh+0xe>
		a=TEMPERATURE_MAX_MAX;
     c76:	8d e7       	ldi	r24, 0x7D	; 125
     c78:	80 83       	st	Z, r24
     c7a:	08 95       	ret
	else
		if(a<TEMPERTURE_MAX_MIN)
     c7c:	88 32       	cpi	r24, 0x28	; 40
     c7e:	18 f4       	brcc	.+6      	; 0xc86 <_ZN8Settings17CapTemperatureMaxERh+0x18>
			a=TEMPERTURE_MAX_MIN;
     c80:	88 e2       	ldi	r24, 0x28	; 40
     c82:	fb 01       	movw	r30, r22
     c84:	80 83       	st	Z, r24
     c86:	08 95       	ret

00000c88 <_ZN8Settings17SetTemperatureMaxEh>:
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
void Settings::SetTemperatureMax(uint8_t a){
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	1f 92       	push	r1
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	8c 01       	movw	r16, r24
     c98:	69 83       	std	Y+1, r22	; 0x01
	CapTemperatureMax(a);
     c9a:	be 01       	movw	r22, r28
     c9c:	6f 5f       	subi	r22, 0xFF	; 255
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN8Settings17CapTemperatureMaxERh>
	temperatureMax=a;
     ca4:	69 81       	ldd	r22, Y+1	; 0x01
     ca6:	f8 01       	movw	r30, r16
     ca8:	62 87       	std	Z+10, r22	; 0x0a
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <eeprom_write_byte>
}
     cb2:	0f 90       	pop	r0
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret

00000cbe <_ZThn2_N8Settings17SetTemperatureMaxEh>:
     cbe:	02 97       	sbiw	r24, 0x02	; 2
     cc0:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN8Settings17SetTemperatureMaxEh>
     cc4:	08 95       	ret

00000cc6 <_ZN8Settings8CapPowerERj>:
		if(a<TEMPERTURE_MAX_MIN)
			a=TEMPERTURE_MAX_MIN;
}	
void Settings::CapPower(uint16_t& a){
	
	if(a>POWER_MAX)
     cc6:	fb 01       	movw	r30, r22
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	8d 3d       	cpi	r24, 0xDD	; 221
     cce:	f5 e0       	ldi	r31, 0x05	; 5
     cd0:	9f 07       	cpc	r25, r31
     cd2:	30 f0       	brcs	.+12     	; 0xce0 <_ZN8Settings8CapPowerERj+0x1a>
		a=POWER_MAX;
     cd4:	8c ed       	ldi	r24, 0xDC	; 220
     cd6:	95 e0       	ldi	r25, 0x05	; 5
     cd8:	fb 01       	movw	r30, r22
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24
     cde:	08 95       	ret
	else
		if(a<POWER_MIN)
     ce0:	4e 97       	sbiw	r24, 0x1e	; 30
     ce2:	28 f4       	brcc	.+10     	; 0xcee <_ZN8Settings8CapPowerERj+0x28>
			a=POWER_MIN;
     ce4:	8e e1       	ldi	r24, 0x1E	; 30
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	fb 01       	movw	r30, r22
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
     cee:	08 95       	ret

00000cf0 <_ZN8Settings10InitializeEv>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void Settings::Initialize(){
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <_ZN8Settings10InitializeEv+0xa>
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	8c 01       	movw	r16, r24
	temperatureMax= eeprom_read_byte(&ADDRESS_TEMPERATURE_MAX);
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 09 15 	call	0x2a12	; 0x2a12 <eeprom_read_byte>
     d08:	f8 01       	movw	r30, r16
     d0a:	82 87       	std	Z+10, r24	; 0x0a
	CapTemperatureMax(temperatureMax);
     d0c:	b8 01       	movw	r22, r16
     d0e:	66 5f       	subi	r22, 0xF6	; 246
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN8Settings17CapTemperatureMaxERh>
	
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 11 15 	call	0x2a22	; 0x2a22 <eeprom_read_word>
     d20:	9a 83       	std	Y+2, r25	; 0x02
     d22:	89 83       	std	Y+1, r24	; 0x01
	CapPower(a);
     d24:	be 01       	movw	r22, r28
     d26:	6f 5f       	subi	r22, 0xFF	; 255
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	c8 01       	movw	r24, r16
     d2c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8Settings8CapPowerERj>
	power=a;
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	f8 01       	movw	r30, r16
     d36:	94 87       	std	Z+12, r25	; 0x0c
     d38:	83 87       	std	Z+11, r24	; 0x0b
}
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <_ZN8Settings11GetInstanceEv>:
uint8_t EEMEM  ADDRESS_TEMPERATURE_MAX;
uint16_t EEMEM  ADDRESS_POWER;
Settings Settings:: _Singleton;
Settings& Settings::GetInstance(){
	static bool initialized=false;
	if(!initialized)
     d48:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <_ZZN8Settings11GetInstanceEvE11initialized>
     d4c:	81 11       	cpse	r24, r1
     d4e:	07 c0       	rjmp	.+14     	; 0xd5e <_ZN8Settings11GetInstanceEv+0x16>
	{
		_Singleton.Initialize();
     d50:	8f e3       	ldi	r24, 0x3F	; 63
     d52:	94 e0       	ldi	r25, 0x04	; 4
     d54:	0e 94 78 06 	call	0xcf0	; 0xcf0 <_ZN8Settings10InitializeEv>
		initialized=true;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <_ZZN8Settings11GetInstanceEvE11initialized>
	}
	return _Singleton;
}
     d5e:	8f e3       	ldi	r24, 0x3F	; 63
     d60:	94 e0       	ldi	r25, 0x04	; 4
     d62:	08 95       	ret

00000d64 <_ZN8Settings8SetPowerEj>:
	return power;
}
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
void Settings::SetPower(uint16_t a){
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	00 d0       	rcall	.+0      	; 0xd6a <_ZN8Settings8SetPowerEj+0x6>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	7a 83       	std	Y+2, r23	; 0x02
     d70:	69 83       	std	Y+1, r22	; 0x01
	CapPower(a);
     d72:	be 01       	movw	r22, r28
     d74:	6f 5f       	subi	r22, 0xFF	; 255
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN8Settings8CapPowerERj>
	eeprom_write_word(&ADDRESS_POWER, a);
     d7c:	69 81       	ldd	r22, Y+1	; 0x01
     d7e:	7a 81       	ldd	r23, Y+2	; 0x02
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <eeprom_write_word>
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <_ZThn6_N8Settings8SetPowerEj>:
     d92:	06 97       	sbiw	r24, 0x06	; 6
     d94:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN8Settings8SetPowerEj>
     d98:	08 95       	ret

00000d9a <_GLOBAL__sub_I_ADDRESS_TEMPERATURE_MAX>:
#include "IGetFanSpeedMin.h"
#define TEMPERATURE_MAX_MAX 125
#define TEMPERTURE_MAX_MIN 40
#define POWER_MIN 30
#define POWER_MAX 1500
class Settings:public  IGetTemperatureMax, public  ISetTemperatureMax, public  IGetPower, public  ISetPower, public IGetFanSpeedMin
     d9a:	ef e3       	ldi	r30, 0x3F	; 63
     d9c:	f4 e0       	ldi	r31, 0x04	; 4
     d9e:	8b ea       	ldi	r24, 0xAB	; 171
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
     da6:	89 eb       	ldi	r24, 0xB9	; 185
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	93 83       	std	Z+3, r25	; 0x03
     dac:	82 83       	std	Z+2, r24	; 0x02
     dae:	8f eb       	ldi	r24, 0xBF	; 191
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	95 83       	std	Z+5, r25	; 0x05
     db4:	84 83       	std	Z+4, r24	; 0x04
     db6:	85 ec       	ldi	r24, 0xC5	; 197
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	97 83       	std	Z+7, r25	; 0x07
     dbc:	86 83       	std	Z+6, r24	; 0x06
     dbe:	8b ec       	ldi	r24, 0xCB	; 203
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	91 87       	std	Z+9, r25	; 0x09
     dc4:	80 87       	std	Z+8, r24	; 0x08
     dc6:	87 e7       	ldi	r24, 0x77	; 119
     dc8:	82 87       	std	Z+10, r24	; 0x0a
     dca:	8a e0       	ldi	r24, 0x0A	; 10
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	94 87       	std	Z+12, r25	; 0x0c
     dd0:	83 87       	std	Z+11, r24	; 0x0b
     dd2:	88 ee       	ldi	r24, 0xE8	; 232
     dd4:	93 e0       	ldi	r25, 0x03	; 3
     dd6:	96 87       	std	Z+14, r25	; 0x0e
     dd8:	85 87       	std	Z+13, r24	; 0x0d
     dda:	08 95       	ret

00000ddc <_ZN11SystemCheck5CheckERbR10Exceptions>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void SystemCheck::Initialize(){
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	7c 01       	movw	r14, r24
     dea:	eb 01       	movw	r28, r22
     dec:	8a 01       	movw	r16, r20
     dee:	dc 01       	movw	r26, r24
     df0:	12 96       	adiw	r26, 0x02	; 2
     df2:	8d 91       	ld	r24, X+
     df4:	9c 91       	ld	r25, X
     df6:	13 97       	sbiw	r26, 0x03	; 3
     df8:	dc 01       	movw	r26, r24
     dfa:	ed 91       	ld	r30, X+
     dfc:	fc 91       	ld	r31, X
     dfe:	01 90       	ld	r0, Z+
     e00:	f0 81       	ld	r31, Z
     e02:	e0 2d       	mov	r30, r0
     e04:	09 95       	icall
     e06:	88 81       	ld	r24, Y
     e08:	88 23       	and	r24, r24
     e0a:	61 f0       	breq	.+24     	; 0xe24 <_ZN11SystemCheck5CheckERbR10Exceptions+0x48>
     e0c:	f7 01       	movw	r30, r14
     e0e:	86 81       	ldd	r24, Z+6	; 0x06
     e10:	97 81       	ldd	r25, Z+7	; 0x07
     e12:	dc 01       	movw	r26, r24
     e14:	ed 91       	ld	r30, X+
     e16:	fc 91       	ld	r31, X
     e18:	01 90       	ld	r0, Z+
     e1a:	f0 81       	ld	r31, Z
     e1c:	e0 2d       	mov	r30, r0
     e1e:	a8 01       	movw	r20, r16
     e20:	be 01       	movw	r22, r28
     e22:	09 95       	icall
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	08 95       	ret

00000e32 <_ZN11SystemCheck11GetInstanceEv>:
     e32:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_ZZN11SystemCheck11GetInstanceEvE11initialized>
     e36:	81 11       	cpse	r24, r1
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <_ZN11SystemCheck11GetInstanceEv+0xe>
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZZN11SystemCheck11GetInstanceEvE11initialized>
     e40:	8f e4       	ldi	r24, 0x4F	; 79
     e42:	94 e0       	ldi	r25, 0x04	; 4
     e44:	08 95       	ret

00000e46 <_ZN11SystemCheck13SetInterfacesEP13ITemperaturesP18IGetTemperatureMaxP5IFans>:

}
void SystemCheck::SetInterfaces(ITemperatures* iTemperatures, IGetTemperatureMax *  iGetTemperatureMax, IFans* iFans){
     e46:	fc 01       	movw	r30, r24
	this->iTemperatures=iTemperatures;
     e48:	73 83       	std	Z+3, r23	; 0x03
     e4a:	62 83       	std	Z+2, r22	; 0x02
	this->iGetTemperatureMax=iGetTemperatureMax;
     e4c:	55 83       	std	Z+5, r21	; 0x05
     e4e:	44 83       	std	Z+4, r20	; 0x04
	this->iFans = iFans;
     e50:	37 83       	std	Z+7, r19	; 0x07
     e52:	26 83       	std	Z+6, r18	; 0x06
     e54:	08 95       	ret

00000e56 <_GLOBAL__sub_I__ZN11SystemCheck10_SingletonE>:
#include "ITemperatures.h"
#include "ISystemCheck.h"
#include "IGetTemperatureMax.h"
#include "IFans.h"
#include  "Exceptions.h"	
class SystemCheck:public ISystemCheck
     e56:	81 ed       	ldi	r24, 0xD1	; 209
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZN11SystemCheck10_SingletonE+0x1>
     e5e:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZN11SystemCheck10_SingletonE>
     e62:	08 95       	ret

00000e64 <_ZN5TC6543Fan7GetNameEv>:
}
unsigned char TC654::GetDutyCycle(bool& successful){
	return ReadRegister(successful, DUTY_CYCLE_ADDRESS);
}
void TC654::SetDutyCycle(bool& successful, unsigned char value){
	WriteRegister(successful, DUTY_CYCLE_ADDRESS, value);
     e64:	fc 01       	movw	r30, r24
     e66:	86 81       	ldd	r24, Z+6	; 0x06
     e68:	97 81       	ldd	r25, Z+7	; 0x07
     e6a:	08 95       	ret

00000e6c <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions>:
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ec 01       	movw	r28, r24
     e7e:	8b 01       	movw	r16, r22
     e80:	7a 01       	movw	r14, r20
     e82:	8c 89       	ldd	r24, Y+20	; 0x14
     e84:	9d 89       	ldd	r25, Y+21	; 0x15
     e86:	80 fd       	sbrc	r24, 0
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x24>
     e8a:	ea 89       	ldd	r30, Y+18	; 0x12
     e8c:	fb 89       	ldd	r31, Y+19	; 0x13
     e8e:	11 c0       	rjmp	.+34     	; 0xeb2 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x46>
     e90:	e8 85       	ldd	r30, Y+8	; 0x08
     e92:	f9 85       	ldd	r31, Y+9	; 0x09
     e94:	9c 01       	movw	r18, r24
     e96:	35 95       	asr	r19
     e98:	27 95       	ror	r18
     e9a:	e2 0f       	add	r30, r18
     e9c:	f3 1f       	adc	r31, r19
     e9e:	01 90       	ld	r0, Z+
     ea0:	f0 81       	ld	r31, Z
     ea2:	e0 2d       	mov	r30, r0
     ea4:	2a 89       	ldd	r18, Y+18	; 0x12
     ea6:	3b 89       	ldd	r19, Y+19	; 0x13
     ea8:	e2 0f       	add	r30, r18
     eaa:	f3 1f       	adc	r31, r19
     eac:	01 90       	ld	r0, Z+
     eae:	f0 81       	ld	r31, Z
     eb0:	e0 2d       	mov	r30, r0
     eb2:	95 95       	asr	r25
     eb4:	87 95       	ror	r24
     eb6:	28 85       	ldd	r18, Y+8	; 0x08
     eb8:	39 85       	ldd	r19, Y+9	; 0x09
     eba:	b8 01       	movw	r22, r16
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	09 95       	icall
     ec2:	f8 01       	movw	r30, r16
     ec4:	80 81       	ld	r24, Z
     ec6:	88 23       	and	r24, r24
     ec8:	c1 f1       	breq	.+112    	; 0xf3a <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0xce>
     eca:	8c 85       	ldd	r24, Y+12	; 0x0c
     ecc:	9d 85       	ldd	r25, Y+13	; 0x0d
     ece:	80 fd       	sbrc	r24, 0
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x6c>
     ed2:	ea 85       	ldd	r30, Y+10	; 0x0a
     ed4:	fb 85       	ldd	r31, Y+11	; 0x0b
     ed6:	11 c0       	rjmp	.+34     	; 0xefa <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0x8e>
     ed8:	e8 85       	ldd	r30, Y+8	; 0x08
     eda:	f9 85       	ldd	r31, Y+9	; 0x09
     edc:	9c 01       	movw	r18, r24
     ede:	35 95       	asr	r19
     ee0:	27 95       	ror	r18
     ee2:	e2 0f       	add	r30, r18
     ee4:	f3 1f       	adc	r31, r19
     ee6:	01 90       	ld	r0, Z+
     ee8:	f0 81       	ld	r31, Z
     eea:	e0 2d       	mov	r30, r0
     eec:	2a 85       	ldd	r18, Y+10	; 0x0a
     eee:	3b 85       	ldd	r19, Y+11	; 0x0b
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	01 90       	ld	r0, Z+
     ef6:	f0 81       	ld	r31, Z
     ef8:	e0 2d       	mov	r30, r0
     efa:	95 95       	asr	r25
     efc:	87 95       	ror	r24
     efe:	28 85       	ldd	r18, Y+8	; 0x08
     f00:	39 85       	ldd	r19, Y+9	; 0x09
     f02:	b8 01       	movw	r22, r16
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	09 95       	icall
     f0a:	f2 e3       	ldi	r31, 0x32	; 50
     f0c:	8f 9f       	mul	r24, r31
     f0e:	60 01       	movw	r12, r0
     f10:	11 24       	eor	r1, r1
     f12:	f8 01       	movw	r30, r16
     f14:	80 81       	ld	r24, Z
     f16:	81 11       	cpse	r24, r1
     f18:	21 c0       	rjmp	.+66     	; 0xf5c <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0xf0>
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
     f22:	8c 01       	movw	r16, r24
     f24:	6e 81       	ldd	r22, Y+6	; 0x06
     f26:	7f 81       	ldd	r23, Y+7	; 0x07
     f28:	0e 94 24 01 	call	0x248	; 0x248 <_ZN22CommunicationExceptionC1EPKc>
     f2c:	b8 01       	movw	r22, r16
     f2e:	c7 01       	movw	r24, r14
     f30:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
     f34:	8c 2d       	mov	r24, r12
     f36:	9d 2d       	mov	r25, r13
     f38:	13 c0       	rjmp	.+38     	; 0xf60 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0xf4>
     f3a:	89 e0       	ldi	r24, 0x09	; 9
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
     f42:	8c 01       	movw	r16, r24
     f44:	6e 81       	ldd	r22, Y+6	; 0x06
     f46:	7f 81       	ldd	r23, Y+7	; 0x07
     f48:	42 e0       	ldi	r20, 0x02	; 2
     f4a:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
     f4e:	b8 01       	movw	r22, r16
     f50:	c7 01       	movw	r24, r14
     f52:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <_ZN5TC6543Fan11GetFanSpeedERbR10Exceptions+0xf4>
     f5c:	8c 2d       	mov	r24, r12
     f5e:	9d 2d       	mov	r25, r13
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	08 95       	ret

00000f72 <_ZN5TC6543Fan5CheckERbR10Exceptions>:
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
     f80:	8b 01       	movw	r16, r22
     f82:	7a 01       	movw	r14, r20
     f84:	8c 89       	ldd	r24, Y+20	; 0x14
     f86:	9d 89       	ldd	r25, Y+21	; 0x15
     f88:	80 fd       	sbrc	r24, 0
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <_ZN5TC6543Fan5CheckERbR10Exceptions+0x20>
     f8c:	ea 89       	ldd	r30, Y+18	; 0x12
     f8e:	fb 89       	ldd	r31, Y+19	; 0x13
     f90:	11 c0       	rjmp	.+34     	; 0xfb4 <_ZN5TC6543Fan5CheckERbR10Exceptions+0x42>
     f92:	e8 85       	ldd	r30, Y+8	; 0x08
     f94:	f9 85       	ldd	r31, Y+9	; 0x09
     f96:	9c 01       	movw	r18, r24
     f98:	35 95       	asr	r19
     f9a:	27 95       	ror	r18
     f9c:	e2 0f       	add	r30, r18
     f9e:	f3 1f       	adc	r31, r19
     fa0:	01 90       	ld	r0, Z+
     fa2:	f0 81       	ld	r31, Z
     fa4:	e0 2d       	mov	r30, r0
     fa6:	2a 89       	ldd	r18, Y+18	; 0x12
     fa8:	3b 89       	ldd	r19, Y+19	; 0x13
     faa:	e2 0f       	add	r30, r18
     fac:	f3 1f       	adc	r31, r19
     fae:	01 90       	ld	r0, Z+
     fb0:	f0 81       	ld	r31, Z
     fb2:	e0 2d       	mov	r30, r0
     fb4:	95 95       	asr	r25
     fb6:	87 95       	ror	r24
     fb8:	28 85       	ldd	r18, Y+8	; 0x08
     fba:	39 85       	ldd	r19, Y+9	; 0x09
     fbc:	b8 01       	movw	r22, r16
     fbe:	82 0f       	add	r24, r18
     fc0:	93 1f       	adc	r25, r19
     fc2:	09 95       	icall
     fc4:	d8 01       	movw	r26, r16
     fc6:	8c 91       	ld	r24, X
     fc8:	88 23       	and	r24, r24
     fca:	09 f4       	brne	.+2      	; 0xfce <_ZN5TC6543Fan5CheckERbR10Exceptions+0x5c>
     fcc:	42 c0       	rjmp	.+132    	; 0x1052 <_ZN5TC6543Fan5CheckERbR10Exceptions+0xe0>
     fce:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN4UART11GetInstanceEv>
     fd2:	dc 01       	movw	r26, r24
     fd4:	ed 91       	ld	r30, X+
     fd6:	fc 91       	ld	r31, X
     fd8:	01 90       	ld	r0, Z+
     fda:	f0 81       	ld	r31, Z
     fdc:	e0 2d       	mov	r30, r0
     fde:	4b e1       	ldi	r20, 0x1B	; 27
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	63 ed       	ldi	r22, 0xD3	; 211
     fe4:	72 e0       	ldi	r23, 0x02	; 2
     fe6:	09 95       	icall
     fe8:	88 89       	ldd	r24, Y+16	; 0x10
     fea:	99 89       	ldd	r25, Y+17	; 0x11
     fec:	80 fd       	sbrc	r24, 0
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <_ZN5TC6543Fan5CheckERbR10Exceptions+0x84>
     ff0:	ee 85       	ldd	r30, Y+14	; 0x0e
     ff2:	ff 85       	ldd	r31, Y+15	; 0x0f
     ff4:	11 c0       	rjmp	.+34     	; 0x1018 <_ZN5TC6543Fan5CheckERbR10Exceptions+0xa6>
     ff6:	e8 85       	ldd	r30, Y+8	; 0x08
     ff8:	f9 85       	ldd	r31, Y+9	; 0x09
     ffa:	9c 01       	movw	r18, r24
     ffc:	35 95       	asr	r19
     ffe:	27 95       	ror	r18
    1000:	e2 0f       	add	r30, r18
    1002:	f3 1f       	adc	r31, r19
    1004:	01 90       	ld	r0, Z+
    1006:	f0 81       	ld	r31, Z
    1008:	e0 2d       	mov	r30, r0
    100a:	2e 85       	ldd	r18, Y+14	; 0x0e
    100c:	3f 85       	ldd	r19, Y+15	; 0x0f
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	01 90       	ld	r0, Z+
    1014:	f0 81       	ld	r31, Z
    1016:	e0 2d       	mov	r30, r0
    1018:	2e 81       	ldd	r18, Y+6	; 0x06
    101a:	3f 81       	ldd	r19, Y+7	; 0x07
    101c:	95 95       	asr	r25
    101e:	87 95       	ror	r24
    1020:	a8 85       	ldd	r26, Y+8	; 0x08
    1022:	b9 85       	ldd	r27, Y+9	; 0x09
    1024:	a7 01       	movw	r20, r14
    1026:	b8 01       	movw	r22, r16
    1028:	8a 0f       	add	r24, r26
    102a:	9b 1f       	adc	r25, r27
    102c:	09 95       	icall
    102e:	f8 01       	movw	r30, r16
    1030:	80 81       	ld	r24, Z
    1032:	88 23       	and	r24, r24
    1034:	e1 f0       	breq	.+56     	; 0x106e <_ZN5TC6543Fan5CheckERbR10Exceptions+0xfc>
    1036:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN4UART11GetInstanceEv>
    103a:	dc 01       	movw	r26, r24
    103c:	ed 91       	ld	r30, X+
    103e:	fc 91       	ld	r31, X
    1040:	01 90       	ld	r0, Z+
    1042:	f0 81       	ld	r31, Z
    1044:	e0 2d       	mov	r30, r0
    1046:	4c e1       	ldi	r20, 0x1C	; 28
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	6f ee       	ldi	r22, 0xEF	; 239
    104c:	72 e0       	ldi	r23, 0x02	; 2
    104e:	09 95       	icall
    1050:	0e c0       	rjmp	.+28     	; 0x106e <_ZN5TC6543Fan5CheckERbR10Exceptions+0xfc>
    1052:	89 e0       	ldi	r24, 0x09	; 9
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    105a:	8c 01       	movw	r16, r24
    105c:	6e 81       	ldd	r22, Y+6	; 0x06
    105e:	7f 81       	ldd	r23, Y+7	; 0x07
    1060:	42 e0       	ldi	r20, 0x02	; 2
    1062:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    1066:	b8 01       	movw	r22, r16
    1068:	c7 01       	movw	r24, r14
    106a:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	08 95       	ret

0000107c <_ZThn4_N5TC6543Fan5CheckERbR10Exceptions>:
    107c:	04 97       	sbiw	r24, 0x04	; 4
    107e:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN5TC6543Fan5CheckERbR10Exceptions>
    1082:	08 95       	ret

00001084 <_ZThn2_N5TC6543Fan7GetNameEv>:
    1084:	fc 01       	movw	r30, r24
    1086:	84 81       	ldd	r24, Z+4	; 0x04
    1088:	95 81       	ldd	r25, Z+5	; 0x05
    108a:	08 95       	ret

0000108c <_ZN5TC6546Status6GetF2FEv>:
    108c:	fc 01       	movw	r30, r24
    108e:	90 81       	ld	r25, Z
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	91 ff       	sbrs	r25, 1
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	08 95       	ret

00001098 <_ZN5TC6546Status7GetR1COEv>:
    1098:	fc 01       	movw	r30, r24
    109a:	90 81       	ld	r25, Z
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	93 ff       	sbrs	r25, 3
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	08 95       	ret

000010a4 <_ZN5TC6546Status7GetR2COEv>:
    10a4:	fc 01       	movw	r30, r24
    10a6:	90 81       	ld	r25, Z
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	94 ff       	sbrs	r25, 4
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	08 95       	ret

000010b0 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_FvS2_R10ExceptionsPKcEMS_FvS2_EPc>:
    10b0:	8f 92       	push	r8
    10b2:	9f 92       	push	r9
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	fc 01       	movw	r30, r24
    10ce:	80 e2       	ldi	r24, 0x20	; 32
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
    10d6:	8a e2       	ldi	r24, 0x2A	; 42
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	93 83       	std	Z+3, r25	; 0x03
    10dc:	82 83       	std	Z+2, r24	; 0x02
    10de:	80 e3       	ldi	r24, 0x30	; 48
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	95 83       	std	Z+5, r25	; 0x05
    10e4:	84 83       	std	Z+4, r24	; 0x04
    10e6:	97 82       	std	Z+7, r9	; 0x07
    10e8:	86 82       	std	Z+6, r8	; 0x06
    10ea:	71 87       	std	Z+9, r23	; 0x09
    10ec:	60 87       	std	Z+8, r22	; 0x08
    10ee:	e6 86       	std	Z+14, r14	; 0x0e
    10f0:	f7 86       	std	Z+15, r15	; 0x0f
    10f2:	00 8b       	std	Z+16, r16	; 0x10
    10f4:	11 8b       	std	Z+17, r17	; 0x11
    10f6:	a2 8a       	std	Z+18, r10	; 0x12
    10f8:	b3 8a       	std	Z+19, r11	; 0x13
    10fa:	c4 8a       	std	Z+20, r12	; 0x14
    10fc:	d5 8a       	std	Z+21, r13	; 0x15
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	bf 90       	pop	r11
    1110:	af 90       	pop	r10
    1112:	9f 90       	pop	r9
    1114:	8f 90       	pop	r8
    1116:	08 95       	ret

00001118 <_ZN5TC654C1Ecc>:
    1118:	6f 92       	push	r6
    111a:	7f 92       	push	r7
    111c:	8f 92       	push	r8
    111e:	9f 92       	push	r9
    1120:	af 92       	push	r10
    1122:	bf 92       	push	r11
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	ec 01       	movw	r28, r24
    1136:	76 2e       	mov	r7, r22
    1138:	64 2e       	mov	r6, r20
    113a:	86 e3       	ldi	r24, 0x36	; 54
    113c:	88 83       	st	Y, r24
    113e:	87 e3       	ldi	r24, 0x37	; 55
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	1a 82       	std	Y+2, r1	; 0x02
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	8b 83       	std	Y+3, r24	; 0x03
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	8c 83       	std	Y+4, r24	; 0x04
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	84 e0       	ldi	r24, 0x04	; 4
    1152:	8e 83       	std	Y+6, r24	; 0x06
    1154:	85 e0       	ldi	r24, 0x05	; 5
    1156:	8f 83       	std	Y+7, r24	; 0x07
    1158:	86 e0       	ldi	r24, 0x06	; 6
    115a:	88 87       	std	Y+8, r24	; 0x08
    115c:	87 e0       	ldi	r24, 0x07	; 7
    115e:	89 87       	std	Y+9, r24	; 0x09
    1160:	88 e0       	ldi	r24, 0x08	; 8
    1162:	8a 87       	std	Y+10, r24	; 0x0a
    1164:	1d 86       	std	Y+13, r1	; 0x0d
    1166:	0f 2e       	mov	r0, r31
    1168:	f3 e7       	ldi	r31, 0x73	; 115
    116a:	af 2e       	mov	r10, r31
    116c:	f9 e0       	ldi	r31, 0x09	; 9
    116e:	bf 2e       	mov	r11, r31
    1170:	f0 2d       	mov	r31, r0
    1172:	c1 2c       	mov	r12, r1
    1174:	d1 2c       	mov	r13, r1
    1176:	0f 2e       	mov	r0, r31
    1178:	f4 ea       	ldi	r31, 0xA4	; 164
    117a:	ef 2e       	mov	r14, r31
    117c:	f9 e0       	ldi	r31, 0x09	; 9
    117e:	ff 2e       	mov	r15, r31
    1180:	f0 2d       	mov	r31, r0
    1182:	00 e0       	ldi	r16, 0x00	; 0
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	24 e6       	ldi	r18, 0x64	; 100
    1188:	39 e0       	ldi	r19, 0x09	; 9
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	0f 2e       	mov	r0, r31
    1190:	fc e0       	ldi	r31, 0x0C	; 12
    1192:	8f 2e       	mov	r8, r31
    1194:	f3 e0       	ldi	r31, 0x03	; 3
    1196:	9f 2e       	mov	r9, r31
    1198:	f0 2d       	mov	r31, r0
    119a:	be 01       	movw	r22, r28
    119c:	ce 01       	movw	r24, r28
    119e:	0e 96       	adiw	r24, 0x0e	; 14
    11a0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_FvS2_R10ExceptionsPKcEMS_FvS2_EPc>
    11a4:	0f 2e       	mov	r0, r31
    11a6:	f3 e7       	ldi	r31, 0x73	; 115
    11a8:	af 2e       	mov	r10, r31
    11aa:	f9 e0       	ldi	r31, 0x09	; 9
    11ac:	bf 2e       	mov	r11, r31
    11ae:	f0 2d       	mov	r31, r0
    11b0:	c1 2c       	mov	r12, r1
    11b2:	d1 2c       	mov	r13, r1
    11b4:	0f 2e       	mov	r0, r31
    11b6:	f3 ef       	ldi	r31, 0xF3	; 243
    11b8:	ef 2e       	mov	r14, r31
    11ba:	f9 e0       	ldi	r31, 0x09	; 9
    11bc:	ff 2e       	mov	r15, r31
    11be:	f0 2d       	mov	r31, r0
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	10 e0       	ldi	r17, 0x00	; 0
    11c4:	29 e6       	ldi	r18, 0x69	; 105
    11c6:	39 e0       	ldi	r19, 0x09	; 9
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	0f 2e       	mov	r0, r31
    11ce:	f4 e1       	ldi	r31, 0x14	; 20
    11d0:	8f 2e       	mov	r8, r31
    11d2:	f3 e0       	ldi	r31, 0x03	; 3
    11d4:	9f 2e       	mov	r9, r31
    11d6:	f0 2d       	mov	r31, r0
    11d8:	be 01       	movw	r22, r28
    11da:	ce 01       	movw	r24, r28
    11dc:	84 96       	adiw	r24, 0x24	; 36
    11de:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_FvS2_R10ExceptionsPKcEMS_FvS2_EPc>
    11e2:	87 2d       	mov	r24, r7
    11e4:	8f 70       	andi	r24, 0x0F	; 15
    11e6:	78 2e       	mov	r7, r24
    11e8:	77 0c       	add	r7, r7
    11ea:	77 0c       	add	r7, r7
    11ec:	7b 86       	std	Y+11, r7	; 0x0b
    11ee:	66 0c       	add	r6, r6
    11f0:	66 0c       	add	r6, r6
    11f2:	66 0c       	add	r6, r6
    11f4:	66 0c       	add	r6, r6
    11f6:	66 0c       	add	r6, r6
    11f8:	66 0c       	add	r6, r6
    11fa:	6c 86       	std	Y+12, r6	; 0x0c
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	9f 90       	pop	r9
    1212:	8f 90       	pop	r8
    1214:	7f 90       	pop	r7
    1216:	6f 90       	pop	r6
    1218:	08 95       	ret

0000121a <_ZN5TC65413WriteRegisterERbcc>:
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	8b 01       	movw	r16, r22
    1224:	c4 2f       	mov	r28, r20
    1226:	d2 2f       	mov	r29, r18
    1228:	fc 01       	movw	r30, r24
    122a:	80 81       	ld	r24, Z
    122c:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_start_wait>
    1230:	8c 2f       	mov	r24, r28
    1232:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
    1236:	88 23       	and	r24, r24
    1238:	29 f0       	breq	.+10     	; 0x1244 <_ZN5TC65413WriteRegisterERbcc+0x2a>
    123a:	f8 01       	movw	r30, r16
    123c:	10 82       	st	Z, r1
    123e:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    1242:	0a c0       	rjmp	.+20     	; 0x1258 <_ZN5TC65413WriteRegisterERbcc+0x3e>
    1244:	8d 2f       	mov	r24, r29
    1246:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
    124a:	c8 2f       	mov	r28, r24
    124c:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    1250:	cc 23       	and	r28, r28
    1252:	11 f0       	breq	.+4      	; 0x1258 <_ZN5TC65413WriteRegisterERbcc+0x3e>
    1254:	f8 01       	movw	r30, r16
    1256:	10 82       	st	Z, r1
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	08 95       	ret

00001262 <_ZN5TC65426WriteConfigurationRegisterERbc>:
    1262:	24 2f       	mov	r18, r20
    1264:	fc 01       	movw	r30, r24
    1266:	46 81       	ldd	r20, Z+6	; 0x06
    1268:	0e 94 0d 09 	call	0x121a	; 0x121a <_ZN5TC65413WriteRegisterERbcc>
    126c:	08 95       	ret

0000126e <_ZN5TC65412ReadRegisterERbc>:
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	ec 01       	movw	r28, r24
    127a:	7b 01       	movw	r14, r22
    127c:	14 2f       	mov	r17, r20
    127e:	88 81       	ld	r24, Y
    1280:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_start_wait>
    1284:	81 2f       	mov	r24, r17
    1286:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
    128a:	88 23       	and	r24, r24
    128c:	31 f0       	breq	.+12     	; 0x129a <_ZN5TC65412ReadRegisterERbc+0x2c>
    128e:	f7 01       	movw	r30, r14
    1290:	10 82       	st	Z, r1
    1292:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	11 c0       	rjmp	.+34     	; 0x12bc <_ZN5TC65412ReadRegisterERbc+0x4e>
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	0e 94 92 00 	call	0x124	; 0x124 <i2c_rep_start>
    12a0:	88 23       	and	r24, r24
    12a2:	31 f0       	breq	.+12     	; 0x12b0 <_ZN5TC65412ReadRegisterERbc+0x42>
    12a4:	f7 01       	movw	r30, r14
    12a6:	10 82       	st	Z, r1
    12a8:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	06 c0       	rjmp	.+12     	; 0x12bc <_ZN5TC65412ReadRegisterERbc+0x4e>
    12b0:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readNak>
    12b4:	c8 2f       	mov	r28, r24
    12b6:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
    12ba:	8c 2f       	mov	r24, r28
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	08 95       	ret

000012c8 <_ZN5TC6547GetRPM1ERb>:
    12c8:	fc 01       	movw	r30, r24
    12ca:	42 81       	ldd	r20, Z+2	; 0x02
    12cc:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN5TC65412ReadRegisterERbc>
    12d0:	08 95       	ret

000012d2 <_ZN5TC6547GetRPM2ERb>:
    12d2:	fc 01       	movw	r30, r24
    12d4:	43 81       	ldd	r20, Z+3	; 0x03
    12d6:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN5TC65412ReadRegisterERbc>
    12da:	08 95       	ret

000012dc <_ZN5TC65425ReadConfigurationRegisterERb>:
    12dc:	fc 01       	movw	r30, r24
    12de:	46 81       	ldd	r20, Z+6	; 0x06
    12e0:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN5TC65412ReadRegisterERbc>
    12e4:	08 95       	ret

000012e6 <_ZN5TC65418ConfigureIfNotDoneERb>:
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	fc 01       	movw	r30, r24
    12f2:	25 85       	ldd	r18, Z+13	; 0x0d
    12f4:	21 11       	cpse	r18, r1
    12f6:	1d c0       	rjmp	.+58     	; 0x1332 <_ZN5TC65418ConfigureIfNotDoneERb+0x4c>
    12f8:	7b 01       	movw	r14, r22
    12fa:	8c 01       	movw	r16, r24
    12fc:	c3 85       	ldd	r28, Z+11	; 0x0b
    12fe:	94 85       	ldd	r25, Z+12	; 0x0c
    1300:	c9 2b       	or	r28, r25
    1302:	c0 62       	ori	r28, 0x20	; 32
    1304:	4c 2f       	mov	r20, r28
    1306:	cf 01       	movw	r24, r30
    1308:	0e 94 31 09 	call	0x1262	; 0x1262 <_ZN5TC65426WriteConfigurationRegisterERbc>
    130c:	f7 01       	movw	r30, r14
    130e:	80 81       	ld	r24, Z
    1310:	88 23       	and	r24, r24
    1312:	79 f0       	breq	.+30     	; 0x1332 <_ZN5TC65418ConfigureIfNotDoneERb+0x4c>
    1314:	b7 01       	movw	r22, r14
    1316:	c8 01       	movw	r24, r16
    1318:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN5TC65425ReadConfigurationRegisterERb>
    131c:	f7 01       	movw	r30, r14
    131e:	90 81       	ld	r25, Z
    1320:	99 23       	and	r25, r25
    1322:	39 f0       	breq	.+14     	; 0x1332 <_ZN5TC65418ConfigureIfNotDoneERb+0x4c>
    1324:	c8 17       	cp	r28, r24
    1326:	11 f0       	breq	.+4      	; 0x132c <_ZN5TC65418ConfigureIfNotDoneERb+0x46>
    1328:	10 82       	st	Z, r1
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <_ZN5TC65418ConfigureIfNotDoneERb+0x4c>
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	f8 01       	movw	r30, r16
    1330:	85 87       	std	Z+13, r24	; 0x0d
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	08 95       	ret

0000133e <_ZN5TC6549GetStatusERb>:
}
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
    133e:	fc 01       	movw	r30, r24
    1340:	47 81       	ldd	r20, Z+7	; 0x07
    1342:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN5TC65412ReadRegisterERbc>
}
    1346:	08 95       	ret

00001348 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc>:
	return ReadRegister(successful, RPM1_ADDRESS);
}
unsigned char TC654::GetRPM2(bool& successful){
	return ReadRegister(successful, RPM2_ADDRESS);
}
void  TC654::CheckFan1(bool& successful, Exceptions& exceptions, const char* name){
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	1f 92       	push	r1
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	8b 01       	movw	r16, r22
    1360:	7a 01       	movw	r14, r20
    1362:	69 01       	movw	r12, r18
	Status status = GetStatus(successful);
    1364:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN5TC6549GetStatusERb>
    1368:	89 83       	std	Y+1, r24	; 0x01
	if(!successful)
    136a:	f8 01       	movw	r30, r16
    136c:	80 81       	ld	r24, Z
    136e:	81 11       	cpse	r24, r1
    1370:	0d c0       	rjmp	.+26     	; 0x138c <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x44>
	{
		exceptions.Add(new CommunicationException(name));
    1372:	88 e0       	ldi	r24, 0x08	; 8
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    137a:	8c 01       	movw	r16, r24
    137c:	b6 01       	movw	r22, r12
    137e:	0e 94 24 01 	call	0x248	; 0x248 <_ZN22CommunicationExceptionC1EPKc>
    1382:	b8 01       	movw	r22, r16
    1384:	c7 01       	movw	r24, r14
    1386:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
    138a:	23 c0       	rjmp	.+70     	; 0x13d2 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x8a>
		return;
	}
	if(status.GetF1F())
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	80 ff       	sbrs	r24, 0
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x64>
	exceptions.Add(new TC654Exception(name, TC654Exception::Fault));
    1392:	89 e0       	ldi	r24, 0x09	; 9
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    139a:	8c 01       	movw	r16, r24
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	b6 01       	movw	r22, r12
    13a0:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    13a4:	b8 01       	movw	r22, r16
    13a6:	c7 01       	movw	r24, r14
    13a8:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
	if(status.GetR1CO())
    13ac:	ce 01       	movw	r24, r28
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN5TC6546Status7GetR1COEv>
    13b4:	88 23       	and	r24, r24
    13b6:	69 f0       	breq	.+26     	; 0x13d2 <_ZN5TC6549CheckFan1ERbR10ExceptionsPKc+0x8a>
	exceptions.Add(new TC654Exception(name, TC654Exception::CounterOverflow));
    13b8:	89 e0       	ldi	r24, 0x09	; 9
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    13c0:	8c 01       	movw	r16, r24
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	b6 01       	movw	r22, r12
    13c6:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    13ca:	b8 01       	movw	r22, r16
    13cc:	c7 01       	movw	r24, r14
    13ce:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
}
    13d2:	0f 90       	pop	r0
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	08 95       	ret

000013e6 <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc>:
void  TC654::CheckFan2(bool& successful, Exceptions& exceptions, const char* name){
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	1f 92       	push	r1
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	8b 01       	movw	r16, r22
    13fe:	7a 01       	movw	r14, r20
    1400:	69 01       	movw	r12, r18
	Status status = GetStatus(successful);
    1402:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN5TC6549GetStatusERb>
    1406:	89 83       	std	Y+1, r24	; 0x01
	if(!successful)
    1408:	f8 01       	movw	r30, r16
    140a:	80 81       	ld	r24, Z
    140c:	81 11       	cpse	r24, r1
    140e:	0d c0       	rjmp	.+26     	; 0x142a <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x44>
	{
		exceptions.Add(new CommunicationException(name));
    1410:	88 e0       	ldi	r24, 0x08	; 8
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    1418:	8c 01       	movw	r16, r24
    141a:	b6 01       	movw	r22, r12
    141c:	0e 94 24 01 	call	0x248	; 0x248 <_ZN22CommunicationExceptionC1EPKc>
    1420:	b8 01       	movw	r22, r16
    1422:	c7 01       	movw	r24, r14
    1424:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
    1428:	26 c0       	rjmp	.+76     	; 0x1476 <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x90>
		return;
	}
	if(status.GetF2F())
    142a:	ce 01       	movw	r24, r28
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	0e 94 46 08 	call	0x108c	; 0x108c <_ZN5TC6546Status6GetF2FEv>
    1432:	88 23       	and	r24, r24
    1434:	69 f0       	breq	.+26     	; 0x1450 <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x6a>
	exceptions.Add(new TC654Exception(name, TC654Exception::Fault));
    1436:	89 e0       	ldi	r24, 0x09	; 9
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    143e:	8c 01       	movw	r16, r24
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	b6 01       	movw	r22, r12
    1444:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    1448:	b8 01       	movw	r22, r16
    144a:	c7 01       	movw	r24, r14
    144c:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
	if(status.GetR2CO())
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN5TC6546Status7GetR2COEv>
    1458:	88 23       	and	r24, r24
    145a:	69 f0       	breq	.+26     	; 0x1476 <_ZN5TC6549CheckFan2ERbR10ExceptionsPKc+0x90>
	exceptions.Add(new TC654Exception(name, TC654Exception::CounterOverflow));
    145c:	89 e0       	ldi	r24, 0x09	; 9
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    1464:	8c 01       	movw	r16, r24
    1466:	41 e0       	ldi	r20, 0x01	; 1
    1468:	b6 01       	movw	r22, r12
    146a:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    146e:	b8 01       	movw	r22, r16
    1470:	c7 01       	movw	r24, r14
    1472:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
}
    1476:	0f 90       	pop	r0
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <_ZN5TC65415GetIGetFan1InfoEv>:
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
}
IGetFanInfo* TC654::GetIGetFan1Info(){
	return &fan1;
}
    148a:	0e 96       	adiw	r24, 0x0e	; 14
    148c:	08 95       	ret

0000148e <_ZN5TC65415GetIGetFan2InfoEv>:
IGetFanInfo* TC654::GetIGetFan2Info(){
	return &fan2;
}
    148e:	84 96       	adiw	r24, 0x24	; 36
    1490:	08 95       	ret

00001492 <_ZN14TC654Exception8ToStringEv>:
{
	if(message!=NULL){
		delete message;
	}
} //~TC654Exception
const char* TC654Exception::ToString(){
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	ec 01       	movw	r28, r24
	if(message==NULL){
    14a0:	8f 81       	ldd	r24, Y+7	; 0x07
    14a2:	98 85       	ldd	r25, Y+8	; 0x08
    14a4:	89 2b       	or	r24, r25
    14a6:	09 f0       	breq	.+2      	; 0x14aa <_ZN14TC654Exception8ToStringEv+0x18>
    14a8:	57 c0       	rjmp	.+174    	; 0x1558 <_ZN14TC654Exception8ToStringEv+0xc6>
		size_t totalLength;
		switch(type){
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	88 23       	and	r24, r24
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <_ZN14TC654Exception8ToStringEv+0x24>
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	51 f1       	breq	.+84     	; 0x1508 <_ZN14TC654Exception8ToStringEv+0x76>
    14b4:	51 c0       	rjmp	.+162    	; 0x1558 <_ZN14TC654Exception8ToStringEv+0xc6>
			case Fault:
			totalLength = strlen(name)+57;
    14b6:	fd 80       	ldd	r15, Y+5	; 0x05
    14b8:	ee 80       	ldd	r14, Y+6	; 0x06
    14ba:	ef 2d       	mov	r30, r15
    14bc:	fe 2d       	mov	r31, r14
    14be:	df 01       	movw	r26, r30
    14c0:	0d 90       	ld	r0, X+
    14c2:	00 20       	and	r0, r0
    14c4:	e9 f7       	brne	.-6      	; 0x14c0 <_ZN14TC654Exception8ToStringEv+0x2e>
    14c6:	8d 01       	movw	r16, r26
    14c8:	0e 1b       	sub	r16, r30
    14ca:	1f 0b       	sbc	r17, r31
    14cc:	08 5c       	subi	r16, 0xC8	; 200
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
			message=(char*)malloc(sizeof(char)*totalLength);
    14d0:	c8 01       	movw	r24, r16
    14d2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <malloc>
    14d6:	98 87       	std	Y+8, r25	; 0x08
    14d8:	8f 83       	std	Y+7, r24	; 0x07
			if(message!=NULL){
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	e9 f1       	breq	.+122    	; 0x1558 <_ZN14TC654Exception8ToStringEv+0xc6>
				snprintf(message,totalLength, "%s experienced a fault as indicated by its status register", name);
    14de:	ef 92       	push	r14
    14e0:	ff 92       	push	r15
    14e2:	22 e3       	ldi	r18, 0x32	; 50
    14e4:	33 e0       	ldi	r19, 0x03	; 3
    14e6:	3f 93       	push	r19
    14e8:	2f 93       	push	r18
    14ea:	1f 93       	push	r17
    14ec:	0f 93       	push	r16
    14ee:	9f 93       	push	r25
    14f0:	8f 93       	push	r24
    14f2:	0e 94 48 12 	call	0x2490	; 0x2490 <snprintf>
    14f6:	8d b7       	in	r24, 0x3d	; 61
    14f8:	9e b7       	in	r25, 0x3e	; 62
    14fa:	08 96       	adiw	r24, 0x08	; 8
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	9e bf       	out	0x3e, r25	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	8d bf       	out	0x3d, r24	; 61
    1506:	28 c0       	rjmp	.+80     	; 0x1558 <_ZN14TC654Exception8ToStringEv+0xc6>
			}
			break;
			case CounterOverflow:
			totalLength = strlen(name)+68;
    1508:	fd 80       	ldd	r15, Y+5	; 0x05
    150a:	ee 80       	ldd	r14, Y+6	; 0x06
    150c:	ef 2d       	mov	r30, r15
    150e:	fe 2d       	mov	r31, r14
    1510:	df 01       	movw	r26, r30
    1512:	0d 90       	ld	r0, X+
    1514:	00 20       	and	r0, r0
    1516:	e9 f7       	brne	.-6      	; 0x1512 <_ZN14TC654Exception8ToStringEv+0x80>
    1518:	8d 01       	movw	r16, r26
    151a:	0e 1b       	sub	r16, r30
    151c:	1f 0b       	sbc	r17, r31
    151e:	0d 5b       	subi	r16, 0xBD	; 189
    1520:	1f 4f       	sbci	r17, 0xFF	; 255
			message=(char*)malloc(sizeof(char)*totalLength);
    1522:	c8 01       	movw	r24, r16
    1524:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <malloc>
    1528:	98 87       	std	Y+8, r25	; 0x08
    152a:	8f 83       	std	Y+7, r24	; 0x07
			if(message!=NULL){
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	a1 f0       	breq	.+40     	; 0x1558 <_ZN14TC654Exception8ToStringEv+0xc6>
				snprintf(message,totalLength, "%s experienced a counter overflow as indicated by its status register",name);
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	2d e6       	ldi	r18, 0x6D	; 109
    1536:	33 e0       	ldi	r19, 0x03	; 3
    1538:	3f 93       	push	r19
    153a:	2f 93       	push	r18
    153c:	1f 93       	push	r17
    153e:	0f 93       	push	r16
    1540:	9f 93       	push	r25
    1542:	8f 93       	push	r24
    1544:	0e 94 48 12 	call	0x2490	; 0x2490 <snprintf>
    1548:	8d b7       	in	r24, 0x3d	; 61
    154a:	9e b7       	in	r25, 0x3e	; 62
    154c:	08 96       	adiw	r24, 0x08	; 8
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	9e bf       	out	0x3e, r25	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	8d bf       	out	0x3d, r24	; 61
			}
			break;
		}
	}
	return message;
    1558:	8f 81       	ldd	r24, Y+7	; 0x07
    155a:	98 85       	ldd	r25, Y+8	; 0x08
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	08 95       	ret

0000156a <_ZN14TC654ExceptionC1EPKcNS_4TypeE>:
#include <stdio.h>
#include <stdlib.h>
#include "TC654Exception.h"

// default constructor
TC654Exception::TC654Exception(const char* name, Type type):name(name), type(type)
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	ec 01       	movw	r28, r24
    1576:	8b 01       	movw	r16, r22
    1578:	f4 2e       	mov	r15, r20
    157a:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN9ExceptionC1Ev>
    157e:	87 eb       	ldi	r24, 0xB7	; 183
    1580:	93 e0       	ldi	r25, 0x03	; 3
    1582:	99 83       	std	Y+1, r25	; 0x01
    1584:	88 83       	st	Y, r24
    1586:	fc 82       	std	Y+4, r15	; 0x04
    1588:	1e 83       	std	Y+6, r17	; 0x06
    158a:	0d 83       	std	Y+5, r16	; 0x05
    158c:	18 86       	std	Y+8, r1	; 0x08
    158e:	1f 82       	std	Y+7, r1	; 0x07
{
	
} //TC654Exception
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	08 95       	ret

0000159c <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions>:
}
void Temperatures::SetInterfaces(IGetTemperatureInfo** iGetTemperatureInfos, unsigned char  nIGetTemperatureInfos){
	this->iGetTemperatureInfos=iGetTemperatureInfos;
	this->nIGetTemperatureInfos=nIGetTemperatureInfos;
}
void Temperatures::Initialize(){
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	8c 01       	movw	r16, r24
    15b0:	7b 01       	movw	r14, r22
    15b2:	6a 01       	movw	r12, r20
    15b4:	dc 01       	movw	r26, r24
    15b6:	14 96       	adiw	r26, 0x04	; 4
    15b8:	8c 91       	ld	r24, X
    15ba:	14 97       	sbiw	r26, 0x04	; 4
    15bc:	88 23       	and	r24, r24
    15be:	09 f4       	brne	.+2      	; 0x15c2 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x26>
    15c0:	41 c0       	rjmp	.+130    	; 0x1644 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xa8>
    15c2:	12 96       	adiw	r26, 0x02	; 2
    15c4:	ed 91       	ld	r30, X+
    15c6:	fc 91       	ld	r31, X
    15c8:	13 97       	sbiw	r26, 0x03	; 3
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	dc 01       	movw	r26, r24
    15d0:	ed 91       	ld	r30, X+
    15d2:	fc 91       	ld	r31, X
    15d4:	01 90       	ld	r0, Z+
    15d6:	f0 81       	ld	r31, Z
    15d8:	e0 2d       	mov	r30, r0
    15da:	09 95       	icall
    15dc:	b8 2e       	mov	r11, r24
    15de:	f7 01       	movw	r30, r14
    15e0:	80 81       	ld	r24, Z
    15e2:	88 23       	and	r24, r24
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x4c>
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xca>
    15e8:	d8 01       	movw	r26, r16
    15ea:	14 96       	adiw	r26, 0x04	; 4
    15ec:	8c 91       	ld	r24, X
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 97       	sbiw	r24, 0x02	; 2
    15f2:	dc f1       	brlt	.+118    	; 0x166a <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xce>
    15f4:	c1 e0       	ldi	r28, 0x01	; 1
    15f6:	d0 e0       	ldi	r29, 0x00	; 0
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x6a>
    15fa:	f8 01       	movw	r30, r16
    15fc:	24 81       	ldd	r18, Z+4	; 0x04
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	c2 17       	cp	r28, r18
    1602:	d3 07       	cpc	r29, r19
    1604:	a4 f5       	brge	.+104    	; 0x166e <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd2>
    1606:	d8 01       	movw	r26, r16
    1608:	12 96       	adiw	r26, 0x02	; 2
    160a:	ed 91       	ld	r30, X+
    160c:	fc 91       	ld	r31, X
    160e:	13 97       	sbiw	r26, 0x03	; 3
    1610:	9e 01       	movw	r18, r28
    1612:	22 0f       	add	r18, r18
    1614:	33 1f       	adc	r19, r19
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	dc 01       	movw	r26, r24
    1620:	ed 91       	ld	r30, X+
    1622:	fc 91       	ld	r31, X
    1624:	01 90       	ld	r0, Z+
    1626:	f0 81       	ld	r31, Z
    1628:	e0 2d       	mov	r30, r0
    162a:	a6 01       	movw	r20, r12
    162c:	b7 01       	movw	r22, r14
    162e:	09 95       	icall
    1630:	b8 16       	cp	r11, r24
    1632:	0c f4       	brge	.+2      	; 0x1636 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x9a>
    1634:	b8 2e       	mov	r11, r24
    1636:	21 96       	adiw	r28, 0x01	; 1
    1638:	f7 01       	movw	r30, r14
    163a:	80 81       	ld	r24, Z
    163c:	81 11       	cpse	r24, r1
    163e:	dd cf       	rjmp	.-70     	; 0x15fa <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0x5e>
    1640:	8b 2d       	mov	r24, r11
    1642:	16 c0       	rjmp	.+44     	; 0x1670 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    1644:	88 e0       	ldi	r24, 0x08	; 8
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    164c:	ec 01       	movw	r28, r24
    164e:	69 eb       	ldi	r22, 0xB9	; 185
    1650:	73 e0       	ldi	r23, 0x03	; 3
    1652:	0e 94 24 01 	call	0x248	; 0x248 <_ZN22CommunicationExceptionC1EPKc>
    1656:	be 01       	movw	r22, r28
    1658:	c6 01       	movw	r24, r12
    165a:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN10Exceptions3AddEP9Exception>
    165e:	d7 01       	movw	r26, r14
    1660:	1c 92       	st	X, r1
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	05 c0       	rjmp	.+10     	; 0x1670 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    1666:	8b 2d       	mov	r24, r11
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    166a:	8b 2d       	mov	r24, r11
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <_ZN12Temperatures17GetMaxTemperatureERbR10Exceptions+0xd4>
    166e:	8b 2d       	mov	r24, r11
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	1f 91       	pop	r17
    1676:	0f 91       	pop	r16
    1678:	ff 90       	pop	r15
    167a:	ef 90       	pop	r14
    167c:	df 90       	pop	r13
    167e:	cf 90       	pop	r12
    1680:	bf 90       	pop	r11
    1682:	08 95       	ret

00001684 <_ZN12Temperatures11GetInstanceEv>:
    1684:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    1688:	81 11       	cpse	r24, r1
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <_ZN12Temperatures11GetInstanceEv+0xe>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    1692:	88 e5       	ldi	r24, 0x58	; 88
    1694:	94 e0       	ldi	r25, 0x04	; 4
    1696:	08 95       	ret

00001698 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>:
    1698:	fc 01       	movw	r30, r24
    169a:	73 83       	std	Z+3, r23	; 0x03
    169c:	62 83       	std	Z+2, r22	; 0x02
    169e:	44 83       	std	Z+4, r20	; 0x04
    16a0:	08 95       	ret

000016a2 <_GLOBAL__sub_I__ZN12Temperatures10_SingletonE>:
#ifndef __Temperatures_H__
#define __Temperatures_H__
#include "IGetTemperatureInfo.h"
#include "ITemperatures.h"

class Temperatures:
    16a2:	81 ed       	ldi	r24, 0xD1	; 209
    16a4:	93 e0       	ldi	r25, 0x03	; 3
    16a6:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <_ZN12Temperatures10_SingletonE+0x1>
    16aa:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <_ZN12Temperatures10_SingletonE>
    16ae:	08 95       	ret

000016b0 <_Znwj>:
		if(!Ticker::tickerCallbacksMilliseconds.contains(callback)){
		Ticker::tickerCallbacksMilliseconds.push_back(callback);}
	}
	else
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
    16b0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <malloc>
    16b4:	08 95       	ret

000016b6 <_Znaj>:
    16b6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <malloc>
    16ba:	08 95       	ret

000016bc <_ZdlPv>:
    16bc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <free>
    16c0:	08 95       	ret

000016c2 <_ZdaPv>:
    16c2:	0e 94 71 11 	call	0x22e2	; 0x22e2 <free>
    16c6:	08 95       	ret

000016c8 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
    16c8:	1f 92       	push	r1
    16ca:	0f 92       	push	r0
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	0f 92       	push	r0
    16d0:	11 24       	eor	r1, r1
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	2f 93       	push	r18
    16d8:	3f 93       	push	r19
    16da:	4f 93       	push	r20
    16dc:	5f 93       	push	r21
    16de:	6f 93       	push	r22
    16e0:	7f 93       	push	r23
    16e2:	8f 93       	push	r24
    16e4:	9f 93       	push	r25
    16e6:	af 93       	push	r26
    16e8:	bf 93       	push	r27
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	ef 93       	push	r30
    16f0:	ff 93       	push	r31
	cli();
    16f2:	f8 94       	cli
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    16f4:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <_ZN6Ticker27tickerCallbacksMillisecondsE>
    16f8:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x1>
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    16fc:	89 2b       	or	r24, r25
    16fe:	c9 f0       	breq	.+50     	; 0x1732 <__vector_14+0x6a>
    1700:	c0 e0       	ldi	r28, 0x00	; 0
    1702:	d0 e0       	ldi	r29, 0x00	; 0
	Data const &operator[](size_t idx)volatile const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx)volatile { return d_data[idx]; }; // Changeable getter
    1704:	03 e6       	ldi	r16, 0x63	; 99
    1706:	14 e0       	ldi	r17, 0x04	; 4
    1708:	d8 01       	movw	r26, r16
    170a:	14 96       	adiw	r26, 0x04	; 4
    170c:	ed 91       	ld	r30, X+
    170e:	fc 91       	ld	r31, X
    1710:	15 97       	sbiw	r26, 0x05	; 5
	{
		Ticker::tickerCallbacksMilliseconds[i]();
    1712:	ce 01       	movw	r24, r28
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	e8 0f       	add	r30, r24
    171a:	f9 1f       	adc	r31, r25
    171c:	01 90       	ld	r0, Z+
    171e:	f0 81       	ld	r31, Z
    1720:	e0 2d       	mov	r30, r0
    1722:	09 95       	icall
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
ISR(TIMER0_COMPA_vect)
{
	cli();
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    1724:	21 96       	adiw	r28, 0x01	; 1
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    1726:	f8 01       	movw	r30, r16
    1728:	80 81       	ld	r24, Z
    172a:	91 81       	ldd	r25, Z+1	; 0x01
    172c:	c8 17       	cp	r28, r24
    172e:	d9 07       	cpc	r29, r25
    1730:	58 f3       	brcs	.-42     	; 0x1708 <__vector_14+0x40>
	{
		Ticker::tickerCallbacksMilliseconds[i]();
	}
	sei();
    1732:	78 94       	sei
}
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	bf 91       	pop	r27
    173e:	af 91       	pop	r26
    1740:	9f 91       	pop	r25
    1742:	8f 91       	pop	r24
    1744:	7f 91       	pop	r23
    1746:	6f 91       	pop	r22
    1748:	5f 91       	pop	r21
    174a:	4f 91       	pop	r20
    174c:	3f 91       	pop	r19
    174e:	2f 91       	pop	r18
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	0f 90       	pop	r0
    175a:	1f 90       	pop	r1
    175c:	18 95       	reti

0000175e <_GLOBAL__sub_I__Znwj>:
 for(size_t i=0; i<d_size; i++){
	if(d==d_data[i])return true;
 }
 return false;
	}
	volatile_vector() : d_size(0), d_capacity(0), d_data(0) {
    175e:	e3 e6       	ldi	r30, 0x63	; 99
    1760:	f4 e0       	ldi	r31, 0x04	; 4
    1762:	11 82       	std	Z+1, r1	; 0x01
    1764:	10 82       	st	Z, r1
    1766:	13 82       	std	Z+3, r1	; 0x03
    1768:	12 82       	std	Z+2, r1	; 0x02
    176a:	15 82       	std	Z+5, r1	; 0x05
    176c:	14 82       	std	Z+4, r1	; 0x04
    176e:	ed e5       	ldi	r30, 0x5D	; 93
    1770:	f4 e0       	ldi	r31, 0x04	; 4
    1772:	11 82       	std	Z+1, r1	; 0x01
    1774:	10 82       	st	Z, r1
    1776:	13 82       	std	Z+3, r1	; 0x03
    1778:	12 82       	std	Z+2, r1	; 0x02
    177a:	15 82       	std	Z+5, r1	; 0x05
    177c:	14 82       	std	Z+4, r1	; 0x04
    177e:	08 95       	ret

00001780 <_GLOBAL__sub_D__Znwj>:

	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
    1780:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZN6Ticker22tickerCallbacksSecondsE+0x4>
    1784:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <_ZN6Ticker22tickerCallbacksSecondsE+0x5>
    1788:	0e 94 71 11 	call	0x22e2	; 0x22e2 <free>
    178c:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x4>
    1790:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x5>
    1794:	0e 94 71 11 	call	0x22e2	; 0x22e2 <free>
    1798:	08 95       	ret

0000179a <_ZL11parseStringPc>:
	json_t const* field = json_getProperty( obj, property );
	if ( !field ) return 0;
        jsonType_t type = json_getType( field );
        if ( JSON_ARRAY >= type ) return 0;
	return json_getValue( field );
}
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	ec 01       	movw	r28, r24
    17a0:	98 81       	ld	r25, Y
    17a2:	90 32       	cpi	r25, 0x20	; 32
    17a4:	08 f4       	brcc	.+2      	; 0x17a8 <_ZL11parseStringPc+0xe>
    17a6:	57 c0       	rjmp	.+174    	; 0x1856 <_ZL11parseStringPc+0xbc>
    17a8:	92 32       	cpi	r25, 0x22	; 34
    17aa:	31 f0       	breq	.+12     	; 0x17b8 <_ZL11parseStringPc+0x1e>
    17ac:	de 01       	movw	r26, r28
    17ae:	4f e3       	ldi	r20, 0x3F	; 63
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <_ZL11parseStringPc+0x28>
    17b2:	92 32       	cpi	r25, 0x22	; 34
    17b4:	31 f4       	brne	.+12     	; 0x17c2 <_ZL11parseStringPc+0x28>
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <_ZL11parseStringPc+0x20>
    17b8:	de 01       	movw	r26, r28
    17ba:	1c 92       	st	X, r1
    17bc:	ce 01       	movw	r24, r28
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	5b c0       	rjmp	.+182    	; 0x1878 <_ZL11parseStringPc+0xde>
    17c2:	9c 35       	cpi	r25, 0x5C	; 92
    17c4:	e1 f5       	brne	.+120    	; 0x183e <_ZL11parseStringPc+0xa4>
    17c6:	99 81       	ldd	r25, Y+1	; 0x01
    17c8:	95 37       	cpi	r25, 0x75	; 117
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <_ZL11parseStringPc+0x38>
    17cc:	92 32       	cpi	r25, 0x22	; 34
    17ce:	c9 f4       	brne	.+50     	; 0x1802 <_ZL11parseStringPc+0x68>
    17d0:	20 c0       	rjmp	.+64     	; 0x1812 <_ZL11parseStringPc+0x78>
    17d2:	fe 01       	movw	r30, r28
    17d4:	32 96       	adiw	r30, 0x02	; 2
    17d6:	9e 01       	movw	r18, r28
    17d8:	2a 5f       	subi	r18, 0xFA	; 250
    17da:	3f 4f       	sbci	r19, 0xFF	; 255
    17dc:	81 91       	ld	r24, Z+
    17de:	80 33       	cpi	r24, 0x30	; 48
    17e0:	e8 f1       	brcs	.+122    	; 0x185c <_ZL11parseStringPc+0xc2>
    17e2:	8a 33       	cpi	r24, 0x3A	; 58
    17e4:	38 f0       	brcs	.+14     	; 0x17f4 <_ZL11parseStringPc+0x5a>
    17e6:	81 34       	cpi	r24, 0x41	; 65
    17e8:	e0 f1       	brcs	.+120    	; 0x1862 <_ZL11parseStringPc+0xc8>
    17ea:	87 34       	cpi	r24, 0x47	; 71
    17ec:	18 f0       	brcs	.+6      	; 0x17f4 <_ZL11parseStringPc+0x5a>
    17ee:	81 56       	subi	r24, 0x61	; 97
    17f0:	86 30       	cpi	r24, 0x06	; 6
    17f2:	d0 f5       	brcc	.+116    	; 0x1868 <_ZL11parseStringPc+0xce>
    17f4:	e2 17       	cp	r30, r18
    17f6:	f3 07       	cpc	r31, r19
    17f8:	89 f7       	brne	.-30     	; 0x17dc <_ZL11parseStringPc+0x42>
    17fa:	4c 93       	st	X, r20
    17fc:	fe 01       	movw	r30, r28
    17fe:	35 96       	adiw	r30, 0x05	; 5
    1800:	20 c0       	rjmp	.+64     	; 0x1842 <_ZL11parseStringPc+0xa8>
    1802:	e5 e1       	ldi	r30, 0x15	; 21
    1804:	f4 e0       	ldi	r31, 0x04	; 4
    1806:	21 e0       	ldi	r18, 0x01	; 1
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	98 13       	cpse	r25, r24
    180e:	0c c0       	rjmp	.+24     	; 0x1828 <_ZL11parseStringPc+0x8e>
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <_ZL11parseStringPc+0x7c>
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	f9 01       	movw	r30, r18
    181c:	eb 5e       	subi	r30, 0xEB	; 235
    181e:	fb 4f       	sbci	r31, 0xFB	; 251
    1820:	81 81       	ldd	r24, Z+1	; 0x01
    1822:	81 11       	cpse	r24, r1
    1824:	08 c0       	rjmp	.+16     	; 0x1836 <_ZL11parseStringPc+0x9c>
    1826:	23 c0       	rjmp	.+70     	; 0x186e <_ZL11parseStringPc+0xd4>
    1828:	2f 5f       	subi	r18, 0xFF	; 255
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	32 96       	adiw	r30, 0x02	; 2
    182e:	28 30       	cpi	r18, 0x08	; 8
    1830:	31 05       	cpc	r19, r1
    1832:	59 f7       	brne	.-42     	; 0x180a <_ZL11parseStringPc+0x70>
    1834:	1f c0       	rjmp	.+62     	; 0x1874 <_ZL11parseStringPc+0xda>
    1836:	fe 01       	movw	r30, r28
    1838:	31 96       	adiw	r30, 0x01	; 1
    183a:	8c 93       	st	X, r24
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <_ZL11parseStringPc+0xa8>
    183e:	9c 93       	st	X, r25
    1840:	fe 01       	movw	r30, r28
    1842:	ef 01       	movw	r28, r30
    1844:	21 96       	adiw	r28, 0x01	; 1
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	90 32       	cpi	r25, 0x20	; 32
    184c:	08 f0       	brcs	.+2      	; 0x1850 <_ZL11parseStringPc+0xb6>
    184e:	b1 cf       	rjmp	.-158    	; 0x17b2 <_ZL11parseStringPc+0x18>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	11 c0       	rjmp	.+34     	; 0x1878 <_ZL11parseStringPc+0xde>
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e c0       	rjmp	.+28     	; 0x1878 <_ZL11parseStringPc+0xde>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0b c0       	rjmp	.+22     	; 0x1878 <_ZL11parseStringPc+0xde>
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	08 c0       	rjmp	.+16     	; 0x1878 <_ZL11parseStringPc+0xde>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <_ZL11parseStringPc+0xde>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <_ZL11parseStringPc+0xde>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <_ZL11isOneOfThemcPKc>:
    187e:	fb 01       	movw	r30, r22
    1880:	91 91       	ld	r25, Z+
    1882:	99 23       	and	r25, r25
    1884:	21 f0       	breq	.+8      	; 0x188e <_ZL11isOneOfThemcPKc+0x10>
    1886:	98 13       	cpse	r25, r24
    1888:	fb cf       	rjmp	.-10     	; 0x1880 <_ZL11isOneOfThemcPKc+0x2>
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	08 95       	ret
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	08 95       	ret

00001892 <_ZL7goWhilePcPKc>:
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	ec 01       	movw	r28, r24
    189c:	8b 01       	movw	r16, r22
    189e:	88 81       	ld	r24, Y
    18a0:	88 23       	and	r24, r24
    18a2:	59 f0       	breq	.+22     	; 0x18ba <_ZL7goWhilePcPKc+0x28>
    18a4:	b8 01       	movw	r22, r16
    18a6:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZL11isOneOfThemcPKc>
    18aa:	88 23       	and	r24, r24
    18ac:	49 f0       	breq	.+18     	; 0x18c0 <_ZL7goWhilePcPKc+0x2e>
    18ae:	21 96       	adiw	r28, 0x01	; 1
    18b0:	88 81       	ld	r24, Y
    18b2:	81 11       	cpse	r24, r1
    18b4:	f7 cf       	rjmp	.-18     	; 0x18a4 <_ZL7goWhilePcPKc+0x12>
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <_ZL7goWhilePcPKc+0x32>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <_ZL7goWhilePcPKc+0x32>
    18c0:	8c 2f       	mov	r24, r28
    18c2:	9d 2f       	mov	r25, r29
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	08 95       	ret

000018ce <_ZL5goNumPc>:
    18ce:	fc 01       	movw	r30, r24
    18d0:	80 81       	ld	r24, Z
    18d2:	88 23       	and	r24, r24
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <_ZL5goNumPc+0x28>
    18d6:	80 53       	subi	r24, 0x30	; 48
    18d8:	8a 30       	cpi	r24, 0x0A	; 10
    18da:	80 f4       	brcc	.+32     	; 0x18fc <_ZL5goNumPc+0x2e>
    18dc:	31 96       	adiw	r30, 0x01	; 1
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <_ZL5goNumPc+0x18>
    18e0:	20 53       	subi	r18, 0x30	; 48
    18e2:	2a 30       	cpi	r18, 0x0A	; 10
    18e4:	68 f4       	brcc	.+26     	; 0x1900 <_ZL5goNumPc+0x32>
    18e6:	8e 2f       	mov	r24, r30
    18e8:	9f 2f       	mov	r25, r31
    18ea:	21 91       	ld	r18, Z+
    18ec:	21 11       	cpse	r18, r1
    18ee:	f8 cf       	rjmp	.-16     	; 0x18e0 <_ZL5goNumPc+0x12>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	08 95       	ret
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	08 95       	ret
    18fc:	8e 2f       	mov	r24, r30
    18fe:	9f 2f       	mov	r25, r31
    1900:	08 95       	ret

00001902 <_ZL16isEndOfPrimitivec>:
    1902:	cf 93       	push	r28
    1904:	8c 32       	cpi	r24, 0x2C	; 44
    1906:	69 f0       	breq	.+26     	; 0x1922 <_ZL16isEndOfPrimitivec+0x20>
    1908:	c8 2f       	mov	r28, r24
    190a:	63 ed       	ldi	r22, 0xD3	; 211
    190c:	73 e0       	ldi	r23, 0x03	; 3
    190e:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZL11isOneOfThemcPKc>
    1912:	81 11       	cpse	r24, r1
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <_ZL16isEndOfPrimitivec+0x22>
    1916:	69 ed       	ldi	r22, 0xD9	; 217
    1918:	73 e0       	ldi	r23, 0x03	; 3
    191a:	8c 2f       	mov	r24, r28
    191c:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZL11isOneOfThemcPKc>
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <_ZL16isEndOfPrimitivec+0x22>
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	cf 91       	pop	r28
    1926:	08 95       	ret

00001928 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>:
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	8b 01       	movw	r16, r22
    1934:	f2 2e       	mov	r15, r18
    1936:	e4 2f       	mov	r30, r20
    1938:	f5 2f       	mov	r31, r21
    193a:	ec 01       	movw	r28, r24
    193c:	21 91       	ld	r18, Z+
    193e:	22 23       	and	r18, r18
    1940:	29 f0       	breq	.+10     	; 0x194c <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x24>
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	38 81       	ld	r19, Y
    1946:	23 17       	cp	r18, r19
    1948:	c1 f3       	breq	.-16     	; 0x193a <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x12>
    194a:	15 c0       	rjmp	.+42     	; 0x1976 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x4e>
    194c:	89 2b       	or	r24, r25
    194e:	b1 f0       	breq	.+44     	; 0x197c <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x54>
    1950:	88 81       	ld	r24, Y
    1952:	0e 94 81 0c 	call	0x1902	; 0x1902 <_ZL16isEndOfPrimitivec>
    1956:	88 23       	and	r24, r24
    1958:	a1 f0       	breq	.+40     	; 0x1982 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5a>
    195a:	69 ed       	ldi	r22, 0xD9	; 217
    195c:	73 e0       	ldi	r23, 0x03	; 3
    195e:	88 81       	ld	r24, Y
    1960:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZL11isOneOfThemcPKc>
    1964:	81 11       	cpse	r24, r1
    1966:	02 c0       	rjmp	.+4      	; 0x196c <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x44>
    1968:	18 82       	st	Y, r1
    196a:	21 96       	adiw	r28, 0x01	; 1
    196c:	f8 01       	movw	r30, r16
    196e:	f6 82       	std	Z+6, r15	; 0x06
    1970:	8c 2f       	mov	r24, r28
    1972:	9d 2f       	mov	r25, r29
    1974:	08 c0       	rjmp	.+16     	; 0x1986 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	08 95       	ret

00001992 <json_getProperty>:
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	8b 01       	movw	r16, r22
    199c:	fc 01       	movw	r30, r24
    199e:	c4 81       	ldd	r28, Z+4	; 0x04
    19a0:	d5 81       	ldd	r29, Z+5	; 0x05
    19a2:	20 97       	sbiw	r28, 0x00	; 0
    19a4:	89 f0       	breq	.+34     	; 0x19c8 <json_getProperty+0x36>
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	9b 81       	ldd	r25, Y+3	; 0x03
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	29 f0       	breq	.+10     	; 0x19b8 <json_getProperty+0x26>
    19ae:	b8 01       	movw	r22, r16
    19b0:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
    19b4:	89 2b       	or	r24, r25
    19b6:	59 f0       	breq	.+22     	; 0x19ce <json_getProperty+0x3c>
    19b8:	09 90       	ld	r0, Y+
    19ba:	d8 81       	ld	r29, Y
    19bc:	c0 2d       	mov	r28, r0
    19be:	20 97       	sbiw	r28, 0x00	; 0
    19c0:	91 f7       	brne	.-28     	; 0x19a6 <json_getProperty+0x14>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	05 c0       	rjmp	.+10     	; 0x19d2 <json_getProperty+0x40>
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <json_getProperty+0x40>
    19ce:	8c 2f       	mov	r24, r28
    19d0:	9d 2f       	mov	r25, r29
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	08 95       	ret

000019dc <json_create>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    19dc:	2f 92       	push	r2
    19de:	3f 92       	push	r3
    19e0:	4f 92       	push	r4
    19e2:	5f 92       	push	r5
    19e4:	6f 92       	push	r6
    19e6:	7f 92       	push	r7
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <json_create+0x26>
    1a02:	1f 92       	push	r1
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	5b 01       	movw	r10, r22
    1a0a:	3a 01       	movw	r6, r20

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1a0c:	63 ed       	ldi	r22, 0xD3	; 211
    1a0e:	73 e0       	ldi	r23, 0x03	; 3
    1a10:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZL7goWhilePcPKc>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <json_create+0x3e>
    1a18:	bb c1       	rjmp	.+886    	; 0x1d90 <json_create+0x3b4>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	2c 91       	ld	r18, X
    1a1e:	2b 37       	cpi	r18, 0x7B	; 123
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <json_create+0x48>
    1a22:	b9 c1       	rjmp	.+882    	; 0x1d96 <json_create+0x3ba>
    jsonPool_t pool = { .mem = mem, .qty = qty };
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    1a24:	f5 01       	movw	r30, r10
    1a26:	13 82       	std	Z+3, r1	; 0x03
    1a28:	12 82       	std	Z+2, r1	; 0x02
    obj->sibling = 0;
    1a2a:	11 82       	std	Z+1, r1	; 0x01
    1a2c:	10 82       	st	Z, r1
    obj->u.child = 0;
    1a2e:	15 82       	std	Z+5, r1	; 0x05
    1a30:	14 82       	std	Z+4, r1	; 0x04
  * @param str Pointer to first character.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
    obj->type    = JSON_OBJ;
    1a32:	16 82       	std	Z+6, r1	; 0x06
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    1a34:	8c 01       	movw	r16, r24
    1a36:	0f 5f       	subi	r16, 0xFF	; 255
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	75 01       	movw	r14, r10

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
    pool->nextFree = 1;
    1a3c:	cc 24       	eor	r12, r12
    1a3e:	c3 94       	inc	r12
    1a40:	d1 2c       	mov	r13, r1
    if ( *ptr != '0' ) {
        ptr = goNum( ptr );
        if ( !ptr ) return 0;
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    1a42:	68 94       	set
    1a44:	22 24       	eor	r2, r2
    1a46:	22 f8       	bld	r2, 2
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    ptr = parseString( ++ptr );
    if ( !ptr ) return 0;
    property->type = JSON_TEXT;
    1a48:	68 94       	set
    1a4a:	44 24       	eor	r4, r4
    1a4c:	41 f8       	bld	r4, 1
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    1a4e:	33 24       	eor	r3, r3
    1a50:	33 94       	inc	r3
        if ( !ptr ) return 0;
        if ( *ptr == ',' ) {
            ++ptr;
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    1a52:	0f 2e       	mov	r0, r31
    1a54:	fd e7       	ldi	r31, 0x7D	; 125
    1a56:	5f 2e       	mov	r5, r31
    1a58:	f0 2d       	mov	r31, r0

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1a5a:	63 ed       	ldi	r22, 0xD3	; 211
    1a5c:	73 e0       	ldi	r23, 0x03	; 3
    1a5e:	c8 01       	movw	r24, r16
    1a60:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZL7goWhilePcPKc>
    1a64:	9b 83       	std	Y+3, r25	; 0x03
    1a66:	8a 83       	std	Y+2, r24	; 0x02
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    for(;;) {
        ptr = goBlank( ptr );
        if ( !ptr ) return 0;
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <json_create+0x92>
    1a6c:	9a c1       	rjmp	.+820    	; 0x1da2 <json_create+0x3c6>
        if ( *ptr == ',' ) {
    1a6e:	dc 01       	movw	r26, r24
    1a70:	8c 91       	ld	r24, X
    1a72:	8c 32       	cpi	r24, 0x2C	; 44
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <json_create+0xa2>
            ++ptr;
    1a76:	8d 01       	movw	r16, r26
    1a78:	0f 5f       	subi	r16, 0xFF	; 255
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	ee cf       	rjmp	.-36     	; 0x1a5a <json_create+0x7e>
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    1a7e:	f7 01       	movw	r30, r14
    1a80:	96 81       	ldd	r25, Z+6	; 0x06
    1a82:	99 23       	and	r25, r25
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <json_create+0xae>
    1a86:	2d e5       	ldi	r18, 0x5D	; 93
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <json_create+0xb0>
    1a8a:	25 2d       	mov	r18, r5
        if ( *ptr == endchar ) {
    1a8c:	82 13       	cpse	r24, r18
    1a8e:	16 c0       	rjmp	.+44     	; 0x1abc <json_create+0xe0>
            *ptr = '\0';
    1a90:	aa 81       	ldd	r26, Y+2	; 0x02
    1a92:	bb 81       	ldd	r27, Y+3	; 0x03
    1a94:	1c 92       	st	X, r1
            json_t* parentObj = obj->sibling;
    1a96:	f7 01       	movw	r30, r14
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
            if ( !parentObj ) return ++ptr;
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	31 f4       	brne	.+12     	; 0x1aac <json_create+0xd0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    1aa0:	11 96       	adiw	r26, 0x01	; 1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <json_create+0xca>
    1aa4:	7b c1       	rjmp	.+758    	; 0x1d9c <json_create+0x3c0>
    return obj;
    1aa6:	8a 2d       	mov	r24, r10
    1aa8:	9b 2d       	mov	r25, r11
    1aaa:	80 c1       	rjmp	.+768    	; 0x1dac <json_create+0x3d0>
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
    1aac:	11 82       	std	Z+1, r1	; 0x01
    1aae:	10 82       	st	Z, r1
            obj = parentObj;
            ++ptr;
    1ab0:	0a 81       	ldd	r16, Y+2	; 0x02
    1ab2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ab4:	0f 5f       	subi	r16, 0xFF	; 255
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
            obj = parentObj;
    1ab8:	7c 01       	movw	r14, r24
    1aba:	cf cf       	rjmp	.-98     	; 0x1a5a <json_create+0x7e>
/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    1abc:	c6 14       	cp	r12, r6
    1abe:	d7 04       	cpc	r13, r7
    1ac0:	08 f0       	brcs	.+2      	; 0x1ac4 <json_create+0xe8>
    1ac2:	72 c1       	rjmp	.+740    	; 0x1da8 <json_create+0x3cc>
    return &pool->mem[pool->nextFree++];
    1ac4:	46 01       	movw	r8, r12
    1ac6:	bf ef       	ldi	r27, 0xFF	; 255
    1ac8:	8b 1a       	sub	r8, r27
    1aca:	9b 0a       	sbc	r9, r27
    1acc:	96 01       	movw	r18, r12
    1ace:	22 0f       	add	r18, r18
    1ad0:	33 1f       	adc	r19, r19
    1ad2:	22 0f       	add	r18, r18
    1ad4:	33 1f       	adc	r19, r19
    1ad6:	22 0f       	add	r18, r18
    1ad8:	33 1f       	adc	r19, r19
    1ada:	f9 01       	movw	r30, r18
    1adc:	ec 19       	sub	r30, r12
    1ade:	fd 09       	sbc	r31, r13
    1ae0:	6f 01       	movw	r12, r30
    1ae2:	ca 0c       	add	r12, r10
    1ae4:	db 1c       	adc	r13, r11
            obj = parentObj;
            ++ptr;
            continue;
        }
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
    1ae6:	c1 14       	cp	r12, r1
    1ae8:	d1 04       	cpc	r13, r1
    1aea:	09 f4       	brne	.+2      	; 0x1aee <json_create+0x112>
    1aec:	5a c1       	rjmp	.+692    	; 0x1da2 <json_create+0x3c6>
        if( obj->type != JSON_ARRAY ) {
    1aee:	91 30       	cpi	r25, 0x01	; 1
    1af0:	31 f1       	breq	.+76     	; 0x1b3e <json_create+0x162>
            if ( *ptr != '\"' ) return 0;
    1af2:	82 32       	cpi	r24, 0x22	; 34
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <json_create+0x11c>
    1af6:	55 c1       	rjmp	.+682    	; 0x1da2 <json_create+0x3c6>
  * @param str Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	d6 01       	movw	r26, r12
    1b00:	13 96       	adiw	r26, 0x03	; 3
    1b02:	9c 93       	st	X, r25
    1b04:	8e 93       	st	-X, r24
    1b06:	12 97       	sbiw	r26, 0x02	; 2
    ptr = parseString( ptr );
    1b08:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZL11parseStringPc>
    if ( !ptr ) return 0;
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <json_create+0x136>
    1b10:	4b c1       	rjmp	.+662    	; 0x1da8 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1b12:	63 ed       	ldi	r22, 0xD3	; 211
    1b14:	73 e0       	ldi	r23, 0x03	; 3
    1b16:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZL7goWhilePcPKc>
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    ptr = parseString( ptr );
    if ( !ptr ) return 0;
    ptr = goBlank( ptr );
    if ( !ptr ) return 0;
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <json_create+0x144>
    1b1e:	44 c1       	rjmp	.+648    	; 0x1da8 <json_create+0x3cc>
    if ( *ptr++ != ':' ) return 0;
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 81       	ld	r18, Z
    1b24:	2a 33       	cpi	r18, 0x3A	; 58
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <json_create+0x14e>
    1b28:	3f c1       	rjmp	.+638    	; 0x1da8 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1b2a:	63 ed       	ldi	r22, 0xD3	; 211
    1b2c:	73 e0       	ldi	r23, 0x03	; 3
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZL7goWhilePcPKc>
    1b34:	9b 83       	std	Y+3, r25	; 0x03
    1b36:	8a 83       	std	Y+2, r24	; 0x02
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
        if( obj->type != JSON_ARRAY ) {
            if ( *ptr != '\"' ) return 0;
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
    1b38:	89 2b       	or	r24, r25
    1b3a:	31 f4       	brne	.+12     	; 0x1b48 <json_create+0x16c>
    1b3c:	32 c1       	rjmp	.+612    	; 0x1da2 <json_create+0x3c6>
        }
        else property->name = 0;
    1b3e:	d6 01       	movw	r26, r12
    1b40:	13 96       	adiw	r26, 0x03	; 3
    1b42:	1c 92       	st	X, r1
    1b44:	1e 92       	st	-X, r1
    1b46:	12 97       	sbiw	r26, 0x02	; 2

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
    property->sibling = 0;
    1b48:	f6 01       	movw	r30, r12
    1b4a:	11 82       	std	Z+1, r1	; 0x01
    1b4c:	10 82       	st	Z, r1
    if ( !obj->u.child ) obj->u.child = property;
    1b4e:	d7 01       	movw	r26, r14
    1b50:	14 96       	adiw	r26, 0x04	; 4
    1b52:	ed 91       	ld	r30, X+
    1b54:	fc 91       	ld	r31, X
    1b56:	15 97       	sbiw	r26, 0x05	; 5
    1b58:	30 97       	sbiw	r30, 0x00	; 0
    1b5a:	39 f4       	brne	.+14     	; 0x1b6a <json_create+0x18e>
    1b5c:	15 96       	adiw	r26, 0x05	; 5
    1b5e:	dc 92       	st	X, r13
    1b60:	ce 92       	st	-X, r12
    1b62:	14 97       	sbiw	r26, 0x04	; 4
    1b64:	08 c0       	rjmp	.+16     	; 0x1b76 <json_create+0x19a>
    else {
        json_t* iter;
        for( iter = obj->u.child; iter->sibling; iter = iter->sibling );
    1b66:	fc 01       	movw	r30, r24
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <json_create+0x18e>
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	d1 f7       	brne	.-12     	; 0x1b66 <json_create+0x18a>
        iter->sibling = property;
    1b72:	d1 82       	std	Z+1, r13	; 0x01
    1b74:	c0 82       	st	Z, r12
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
        }
        else property->name = 0;
        add( obj, property );
        property->u.value = ptr;
    1b76:	ea 81       	ldd	r30, Y+2	; 0x02
    1b78:	fb 81       	ldd	r31, Y+3	; 0x03
    1b7a:	d6 01       	movw	r26, r12
    1b7c:	15 96       	adiw	r26, 0x05	; 5
    1b7e:	fc 93       	st	X, r31
    1b80:	ee 93       	st	-X, r30
    1b82:	14 97       	sbiw	r26, 0x04	; 4
        switch( *ptr ) {
    1b84:	80 81       	ld	r24, Z
    1b86:	86 36       	cpi	r24, 0x66	; 102
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <json_create+0x1b0>
    1b8a:	46 c0       	rjmp	.+140    	; 0x1c18 <json_create+0x23c>
    1b8c:	28 f4       	brcc	.+10     	; 0x1b98 <json_create+0x1bc>
    1b8e:	82 32       	cpi	r24, 0x22	; 34
    1b90:	39 f1       	breq	.+78     	; 0x1be0 <json_create+0x204>
    1b92:	8b 35       	cpi	r24, 0x5B	; 91
    1b94:	c9 f0       	breq	.+50     	; 0x1bc8 <json_create+0x1ec>
    1b96:	54 c0       	rjmp	.+168    	; 0x1c40 <json_create+0x264>
    1b98:	84 37       	cpi	r24, 0x74	; 116
    1b9a:	a1 f1       	breq	.+104    	; 0x1c04 <json_create+0x228>
    1b9c:	8b 37       	cpi	r24, 0x7B	; 123
    1b9e:	21 f0       	breq	.+8      	; 0x1ba8 <json_create+0x1cc>
    1ba0:	8e 36       	cpi	r24, 0x6E	; 110
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <json_create+0x1ca>
    1ba4:	4d c0       	rjmp	.+154    	; 0x1c40 <json_create+0x264>
    1ba6:	42 c0       	rjmp	.+132    	; 0x1c2c <json_create+0x250>
            case '{':
                property->type    = JSON_OBJ;
    1ba8:	d6 01       	movw	r26, r12
    1baa:	16 96       	adiw	r26, 0x06	; 6
    1bac:	1c 92       	st	X, r1
    1bae:	16 97       	sbiw	r26, 0x06	; 6
                property->u.child = 0;
    1bb0:	15 96       	adiw	r26, 0x05	; 5
    1bb2:	1c 92       	st	X, r1
    1bb4:	1e 92       	st	-X, r1
    1bb6:	14 97       	sbiw	r26, 0x04	; 4
                property->sibling = obj;
    1bb8:	ed 92       	st	X+, r14
    1bba:	fc 92       	st	X, r15
                obj = property;
                ++ptr;
    1bbc:	0a 81       	ldd	r16, Y+2	; 0x02
    1bbe:	1b 81       	ldd	r17, Y+3	; 0x03
    1bc0:	0f 5f       	subi	r16, 0xFF	; 255
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1bc4:	76 01       	movw	r14, r12
    1bc6:	df c0       	rjmp	.+446    	; 0x1d86 <json_create+0x3aa>
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    1bc8:	f6 01       	movw	r30, r12
    1bca:	36 82       	std	Z+6, r3	; 0x06
                property->u.child = 0;
    1bcc:	15 82       	std	Z+5, r1	; 0x05
    1bce:	14 82       	std	Z+4, r1	; 0x04
                property->sibling = obj;
    1bd0:	f1 82       	std	Z+1, r15	; 0x01
    1bd2:	e0 82       	st	Z, r14
                obj = property;
                ++ptr;
    1bd4:	0a 81       	ldd	r16, Y+2	; 0x02
    1bd6:	1b 81       	ldd	r17, Y+3	; 0x03
    1bd8:	0f 5f       	subi	r16, 0xFF	; 255
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1bdc:	76 01       	movw	r14, r12
    1bde:	d3 c0       	rjmp	.+422    	; 0x1d86 <json_create+0x3aa>
  * @param str Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	9b 81       	ldd	r25, Y+3	; 0x03
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	d6 01       	movw	r26, r12
    1be8:	15 96       	adiw	r26, 0x05	; 5
    1bea:	9c 93       	st	X, r25
    1bec:	8e 93       	st	-X, r24
    1bee:	14 97       	sbiw	r26, 0x04	; 4
    ptr = parseString( ++ptr );
    1bf0:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZL11parseStringPc>
    1bf4:	8c 01       	movw	r16, r24
    if ( !ptr ) return 0;
    1bf6:	89 2b       	or	r24, r25
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <json_create+0x220>
    1bfa:	d6 c0       	rjmp	.+428    	; 0x1da8 <json_create+0x3cc>
    property->type = JSON_TEXT;
    1bfc:	f6 01       	movw	r30, r12
    1bfe:	46 82       	std	Z+6, r4	; 0x06
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1c00:	64 01       	movw	r12, r8
    1c02:	2b cf       	rjmp	.-426    	; 0x1a5a <json_create+0x7e>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
    1c04:	23 e0       	ldi	r18, 0x03	; 3
    1c06:	4c ed       	ldi	r20, 0xDC	; 220
    1c08:	53 e0       	ldi	r21, 0x03	; 3
    1c0a:	b6 01       	movw	r22, r12
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c10:	0e 94 94 0c 	call	0x1928	; 0x1928 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1c14:	8c 01       	movw	r16, r24
    1c16:	b7 c0       	rjmp	.+366    	; 0x1d86 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
    1c18:	23 e0       	ldi	r18, 0x03	; 3
    1c1a:	41 ee       	ldi	r20, 0xE1	; 225
    1c1c:	53 e0       	ldi	r21, 0x03	; 3
    1c1e:	b6 01       	movw	r22, r12
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	9b 81       	ldd	r25, Y+3	; 0x03
    1c24:	0e 94 94 0c 	call	0x1928	; 0x1928 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1c28:	8c 01       	movw	r16, r24
    1c2a:	ad c0       	rjmp	.+346    	; 0x1d86 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "null", JSON_NULL );
    1c2c:	26 e0       	ldi	r18, 0x06	; 6
    1c2e:	47 ee       	ldi	r20, 0xE7	; 231
    1c30:	53 e0       	ldi	r21, 0x03	; 3
    1c32:	b6 01       	movw	r22, r12
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	0e 94 94 0c 	call	0x1928	; 0x1928 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    1c3c:	8c 01       	movw	r16, r24
    1c3e:	a3 c0       	rjmp	.+326    	; 0x1d86 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
    if ( *ptr == '-' ) ++ptr;
    1c40:	8d 32       	cpi	r24, 0x2D	; 45
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <json_create+0x270>
    1c44:	ea 81       	ldd	r30, Y+2	; 0x02
    1c46:	fb 81       	ldd	r31, Y+3	; 0x03
    1c48:	31 96       	adiw	r30, 0x01	; 1
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <json_create+0x274>
    1c4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4e:	fb 81       	ldd	r31, Y+3	; 0x03
    if ( !isNum( *ptr ) ) return 0;
    1c50:	80 81       	ld	r24, Z
    1c52:	90 ed       	ldi	r25, 0xD0	; 208
    1c54:	98 0f       	add	r25, r24
    1c56:	9a 30       	cpi	r25, 0x0A	; 10
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <json_create+0x280>
    1c5a:	a6 c0       	rjmp	.+332    	; 0x1da8 <json_create+0x3cc>
    if ( *ptr != '0' ) {
    1c5c:	80 33       	cpi	r24, 0x30	; 48
    1c5e:	39 f0       	breq	.+14     	; 0x1c6e <json_create+0x292>
        ptr = goNum( ptr );
    1c60:	cf 01       	movw	r24, r30
    1c62:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_ZL5goNumPc>
    1c66:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
    1c68:	89 2b       	or	r24, r25
    1c6a:	49 f4       	brne	.+18     	; 0x1c7e <json_create+0x2a2>
    1c6c:	9d c0       	rjmp	.+314    	; 0x1da8 <json_create+0x3cc>
    }
    else if ( isNum( *++ptr ) ) return 0;
    1c6e:	8f 01       	movw	r16, r30
    1c70:	0f 5f       	subi	r16, 0xFF	; 255
    1c72:	1f 4f       	sbci	r17, 0xFF	; 255
    1c74:	81 81       	ldd	r24, Z+1	; 0x01
    1c76:	80 53       	subi	r24, 0x30	; 48
    1c78:	8a 30       	cpi	r24, 0x0A	; 10
    1c7a:	08 f4       	brcc	.+2      	; 0x1c7e <json_create+0x2a2>
    1c7c:	95 c0       	rjmp	.+298    	; 0x1da8 <json_create+0x3cc>
    property->type = JSON_INTEGER;
    1c7e:	d6 01       	movw	r26, r12
    1c80:	16 96       	adiw	r26, 0x06	; 6
    1c82:	2c 92       	st	X, r2
    if ( *ptr == '.' ) {
    1c84:	f8 01       	movw	r30, r16
    1c86:	80 81       	ld	r24, Z
    1c88:	8e 32       	cpi	r24, 0x2E	; 46
    1c8a:	89 f4       	brne	.+34     	; 0x1cae <json_create+0x2d2>
/** Analyze the decimal part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
    if ( !isNum( *ptr ) ) return 0;
    1c8c:	81 81       	ldd	r24, Z+1	; 0x01
    1c8e:	80 53       	subi	r24, 0x30	; 48
    1c90:	8a 30       	cpi	r24, 0x0A	; 10
    1c92:	08 f0       	brcs	.+2      	; 0x1c96 <json_create+0x2ba>
    1c94:	86 c0       	rjmp	.+268    	; 0x1da2 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    1c96:	c8 01       	movw	r24, r16
    1c98:	02 96       	adiw	r24, 0x02	; 2
    1c9a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_ZL5goNumPc>
    1c9e:	8c 01       	movw	r16, r24
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    if ( *ptr == '.' ) {
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
    1ca0:	89 2b       	or	r24, r25
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <json_create+0x2ca>
    1ca4:	81 c0       	rjmp	.+258    	; 0x1da8 <json_create+0x3cc>
        property->type = JSON_REAL;
    1ca6:	e5 e0       	ldi	r30, 0x05	; 5
    1ca8:	d6 01       	movw	r26, r12
    1caa:	16 96       	adiw	r26, 0x06	; 6
    1cac:	ec 93       	st	X, r30
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
    1cae:	d8 01       	movw	r26, r16
    1cb0:	8c 91       	ld	r24, X
    1cb2:	8f 7d       	andi	r24, 0xDF	; 223
    1cb4:	85 34       	cpi	r24, 0x45	; 69
    1cb6:	11 f5       	brne	.+68     	; 0x1cfc <json_create+0x320>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    1cb8:	11 96       	adiw	r26, 0x01	; 1
    1cba:	8c 91       	ld	r24, X
    1cbc:	8d 32       	cpi	r24, 0x2D	; 45
    1cbe:	29 f0       	breq	.+10     	; 0x1cca <json_create+0x2ee>
    1cc0:	8b 32       	cpi	r24, 0x2B	; 43
    1cc2:	19 f0       	breq	.+6      	; 0x1cca <json_create+0x2ee>
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	31 96       	adiw	r30, 0x01	; 1
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <json_create+0x2f2>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    1cca:	f8 01       	movw	r30, r16
    1ccc:	32 96       	adiw	r30, 0x02	; 2
    if ( !isNum( *ptr ) ) return 0;
    1cce:	90 81       	ld	r25, Z
    1cd0:	90 53       	subi	r25, 0x30	; 48
    1cd2:	9a 30       	cpi	r25, 0x0A	; 10
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <json_create+0x2fc>
    1cd6:	65 c0       	rjmp	.+202    	; 0x1da2 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    1cd8:	cf 01       	movw	r24, r30
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_ZL5goNumPc>
    1ce0:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
        if ( !ptr ) return 0;
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <json_create+0x30c>
    1ce6:	60 c0       	rjmp	.+192    	; 0x1da8 <json_create+0x3cc>
        property->type = JSON_REAL;
    1ce8:	25 e0       	ldi	r18, 0x05	; 5
    1cea:	f6 01       	movw	r30, r12
    1cec:	26 83       	std	Z+6, r18	; 0x06
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
    1cee:	dc 01       	movw	r26, r24
    1cf0:	8c 91       	ld	r24, X
    1cf2:	0e 94 81 0c 	call	0x1902	; 0x1902 <_ZL16isEndOfPrimitivec>
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	3a c0       	rjmp	.+116    	; 0x1d6e <json_create+0x392>
    1cfa:	56 c0       	rjmp	.+172    	; 0x1da8 <json_create+0x3cc>
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	f0 81       	ld	r31, Z
    1d00:	f9 83       	std	Y+1, r31	; 0x01
    1d02:	8f 2f       	mov	r24, r31
    1d04:	0e 94 81 0c 	call	0x1902	; 0x1902 <_ZL16isEndOfPrimitivec>
    1d08:	88 23       	and	r24, r24
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <json_create+0x332>
    1d0c:	4d c0       	rjmp	.+154    	; 0x1da8 <json_create+0x3cc>
    if ( JSON_INTEGER == property->type ) {
    1d0e:	d6 01       	movw	r26, r12
    1d10:	16 96       	adiw	r26, 0x06	; 6
    1d12:	8c 91       	ld	r24, X
    1d14:	84 30       	cpi	r24, 0x04	; 4
    1d16:	59 f5       	brne	.+86     	; 0x1d6e <json_create+0x392>
        char const* value = property->u.value;
        bool const negative = *value == '-';
    1d18:	ea 81       	ldd	r30, Y+2	; 0x02
    1d1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d1c:	40 81       	ld	r20, Z
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
    1d1e:	4d 32       	cpi	r20, 0x2D	; 45
    1d20:	19 f0       	breq	.+6      	; 0x1d28 <json_create+0x34c>
    1d22:	83 e1       	ldi	r24, 0x13	; 19
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <json_create+0x350>
    1d28:	84 e1       	ldi	r24, 0x14	; 20
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
        unsigned int const len = ptr - value;
    1d2c:	98 01       	movw	r18, r16
    1d2e:	6a 81       	ldd	r22, Y+2	; 0x02
    1d30:	7b 81       	ldd	r23, Y+3	; 0x03
    1d32:	26 1b       	sub	r18, r22
    1d34:	37 0b       	sbc	r19, r23
        if ( len > maxdigits ) return 0;
    1d36:	82 17       	cp	r24, r18
    1d38:	93 07       	cpc	r25, r19
    1d3a:	b0 f1       	brcs	.+108    	; 0x1da8 <json_create+0x3cc>
        if ( len == maxdigits ) {
    1d3c:	28 17       	cp	r18, r24
    1d3e:	39 07       	cpc	r19, r25
    1d40:	b1 f4       	brne	.+44     	; 0x1d6e <json_create+0x392>
            char const tmp = *ptr;
            *ptr = '\0';
    1d42:	d8 01       	movw	r26, r16
    1d44:	1c 92       	st	X, r1
            char const* const threshold = negative ? min: max;
    1d46:	4d 32       	cpi	r20, 0x2D	; 45
    1d48:	29 f0       	breq	.+10     	; 0x1d54 <json_create+0x378>
    1d4a:	ec ee       	ldi	r30, 0xEC	; 236
    1d4c:	f3 e0       	ldi	r31, 0x03	; 3
    1d4e:	8e 2f       	mov	r24, r30
    1d50:	9f 2f       	mov	r25, r31
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <json_create+0x380>
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	34 e0       	ldi	r19, 0x04	; 4
    1d58:	82 2f       	mov	r24, r18
    1d5a:	93 2f       	mov	r25, r19
            if ( 0 > strcmp( threshold, value ) ) return 0;
    1d5c:	6a 81       	ldd	r22, Y+2	; 0x02
    1d5e:	7b 81       	ldd	r23, Y+3	; 0x03
    1d60:	0e 94 2a 12 	call	0x2454	; 0x2454 <strcmp>
    1d64:	99 23       	and	r25, r25
    1d66:	04 f1       	brlt	.+64     	; 0x1da8 <json_create+0x3cc>
            *ptr = tmp;
    1d68:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6a:	d8 01       	movw	r26, r16
    1d6c:	ec 93       	st	X, r30

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
    1d6e:	69 ed       	ldi	r22, 0xD9	; 217
    1d70:	73 e0       	ldi	r23, 0x03	; 3
    1d72:	d8 01       	movw	r26, r16
    1d74:	8c 91       	ld	r24, X
    1d76:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZL11isOneOfThemcPKc>
    1d7a:	81 11       	cpse	r24, r1
    1d7c:	04 c0       	rjmp	.+8      	; 0x1d86 <json_create+0x3aa>
    1d7e:	f8 01       	movw	r30, r16
    1d80:	10 82       	st	Z, r1
    1d82:	0f 5f       	subi	r16, 0xFF	; 255
    1d84:	1f 4f       	sbci	r17, 0xFF	; 255
            case 't':  ptr = trueValue( ptr, property );  break;
            case 'f':  ptr = falseValue( ptr, property ); break;
            case 'n':  ptr = nullValue( ptr, property );  break;
            default:   ptr = numValue( ptr, property );   break;
        }
        if ( !ptr ) return 0;
    1d86:	01 15       	cp	r16, r1
    1d88:	11 05       	cpc	r17, r1
    1d8a:	59 f0       	breq	.+22     	; 0x1da2 <json_create+0x3c6>
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1d8c:	64 01       	movw	r12, r8
    1d8e:	65 ce       	rjmp	.-822    	; 0x1a5a <json_create+0x7e>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0b c0       	rjmp	.+22     	; 0x1dac <json_create+0x3d0>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	08 c0       	rjmp	.+16     	; 0x1dac <json_create+0x3d0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <json_create+0x3d0>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <json_create+0x3d0>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    return obj;
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	df 90       	pop	r13
    1dc0:	cf 90       	pop	r12
    1dc2:	bf 90       	pop	r11
    1dc4:	af 90       	pop	r10
    1dc6:	9f 90       	pop	r9
    1dc8:	8f 90       	pop	r8
    1dca:	7f 90       	pop	r7
    1dcc:	6f 90       	pop	r6
    1dce:	5f 90       	pop	r5
    1dd0:	4f 90       	pop	r4
    1dd2:	3f 90       	pop	r3
    1dd4:	2f 90       	pop	r2
    1dd6:	08 95       	ret

00001dd8 <_ZN4UART11GetMessagesEv>:
					bufferIndexes[nBuffer]=bufferIndex+1;
				}
			}
		}
	}
	Messages* UART::GetMessages(){
    1dd8:	3f 92       	push	r3
    1dda:	4f 92       	push	r4
    1ddc:	5f 92       	push	r5
    1dde:	6f 92       	push	r6
    1de0:	7f 92       	push	r7
    1de2:	8f 92       	push	r8
    1de4:	9f 92       	push	r9
    1de6:	af 92       	push	r10
    1de8:	bf 92       	push	r11
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	2a 97       	sbiw	r28, 0x0a	; 10
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	5c 01       	movw	r10, r24
    1e0c:	e1 2c       	mov	r14, r1
    1e0e:	f1 2c       	mov	r15, r1
		char tempMessagesIndex=0;
    1e10:	31 2c       	mov	r3, r1
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1e12:	2c 01       	movw	r4, r24
    1e14:	84 ef       	ldi	r24, 0xF4	; 244
    1e16:	48 1a       	sub	r4, r24
    1e18:	8e ef       	ldi	r24, 0xFE	; 254
    1e1a:	58 0a       	sbc	r5, r24
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
					tempMessages[tempMessagesIndex]=new Message(buf, length);
					tempMessagesIndex++;
					bufferIndexes[i]=0;
					overflowedBuffers=false;
    1e1c:	f5 01       	movw	r30, r10
    1e1e:	e2 5f       	subi	r30, 0xF2	; 242
    1e20:	fe 4f       	sbci	r31, 0xFE	; 254
    1e22:	fa 87       	std	Y+10, r31	; 0x0a
    1e24:	e9 87       	std	Y+9, r30	; 0x09
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1e26:	f2 01       	movw	r30, r4
    1e28:	80 81       	ld	r24, Z
    1e2a:	8e 15       	cp	r24, r14
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <_ZN4UART11GetMessagesEv+0x58>
    1e2e:	4f c0       	rjmp	.+158    	; 0x1ece <_ZN4UART11GetMessagesEv+0xf6>
				if(bufferIndexes[i]>0){
    1e30:	47 01       	movw	r8, r14
    1e32:	67 01       	movw	r12, r14
    1e34:	cc 0c       	add	r12, r12
    1e36:	dd 1c       	adc	r13, r13
    1e38:	ca 0c       	add	r12, r10
    1e3a:	db 1c       	adc	r13, r11
    1e3c:	f6 01       	movw	r30, r12
    1e3e:	84 81       	ldd	r24, Z+4	; 0x04
    1e40:	95 81       	ldd	r25, Z+5	; 0x05
    1e42:	18 16       	cp	r1, r24
    1e44:	19 06       	cpc	r1, r25
    1e46:	0c f0       	brlt	.+2      	; 0x1e4a <_ZN4UART11GetMessagesEv+0x72>
    1e48:	42 c0       	rjmp	.+132    	; 0x1ece <_ZN4UART11GetMessagesEv+0xf6>

				unsigned int length = bufferIndexes[i];
    1e4a:	04 81       	ldd	r16, Z+4	; 0x04
    1e4c:	15 81       	ldd	r17, Z+5	; 0x05
					char* buf = new char[ length+1];
    1e4e:	c8 01       	movw	r24, r16
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_Znaj>
    1e56:	3c 01       	movw	r6, r24
					for (int j = 0; j < length; j++)
    1e58:	01 15       	cp	r16, r1
    1e5a:	11 05       	cpc	r17, r1
    1e5c:	c1 f0       	breq	.+48     	; 0x1e8e <_ZN4UART11GetMessagesEv+0xb6>
    1e5e:	fc 01       	movw	r30, r24
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
					buf[j] = (char)buffer[i][j];
    1e64:	00 24       	eor	r0, r0
    1e66:	96 94       	lsr	r9
    1e68:	87 94       	ror	r8
    1e6a:	07 94       	ror	r0
    1e6c:	96 94       	lsr	r9
    1e6e:	87 94       	ror	r8
    1e70:	07 94       	ror	r0
    1e72:	98 2c       	mov	r9, r8
    1e74:	80 2c       	mov	r8, r0
    1e76:	8a 0c       	add	r8, r10
    1e78:	9b 1c       	adc	r9, r11
    1e7a:	d4 01       	movw	r26, r8
    1e7c:	a8 0f       	add	r26, r24
    1e7e:	b9 1f       	adc	r27, r25
    1e80:	1c 96       	adiw	r26, 0x0c	; 12
    1e82:	2c 91       	ld	r18, X
    1e84:	21 93       	st	Z+, r18
			if(i!=nBuffer){
				if(bufferIndexes[i]>0){

				unsigned int length = bufferIndexes[i];
					char* buf = new char[ length+1];
					for (int j = 0; j < length; j++)
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	08 17       	cp	r16, r24
    1e8a:	19 07       	cpc	r17, r25
    1e8c:	b1 f7       	brne	.-20     	; 0x1e7a <_ZN4UART11GetMessagesEv+0xa2>
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
    1e8e:	f3 01       	movw	r30, r6
    1e90:	e0 0f       	add	r30, r16
    1e92:	f1 1f       	adc	r31, r17
    1e94:	10 82       	st	Z, r1
					tempMessages[tempMessagesIndex]=new Message(buf, length);
    1e96:	84 e0       	ldi	r24, 0x04	; 4
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    1e9e:	4c 01       	movw	r8, r24
    1ea0:	a8 01       	movw	r20, r16
    1ea2:	b3 01       	movw	r22, r6
    1ea4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN7MessageC1EPKcj>
    1ea8:	e3 2d       	mov	r30, r3
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	8c 0f       	add	r24, r28
    1eb6:	9d 1f       	adc	r25, r29
    1eb8:	e8 0f       	add	r30, r24
    1eba:	f9 1f       	adc	r31, r25
    1ebc:	91 82       	std	Z+1, r9	; 0x01
    1ebe:	80 82       	st	Z, r8
					tempMessagesIndex++;
    1ec0:	33 94       	inc	r3
					bufferIndexes[i]=0;
    1ec2:	f6 01       	movw	r30, r12
    1ec4:	15 82       	std	Z+5, r1	; 0x05
    1ec6:	14 82       	std	Z+4, r1	; 0x04
					overflowedBuffers=false;
    1ec8:	e9 85       	ldd	r30, Y+9	; 0x09
    1eca:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ecc:	10 82       	st	Z, r1
    1ece:	ff ef       	ldi	r31, 0xFF	; 255
    1ed0:	ef 1a       	sub	r14, r31
    1ed2:	ff 0a       	sbc	r15, r31
		}
	}
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
    1ed4:	84 e0       	ldi	r24, 0x04	; 4
    1ed6:	e8 16       	cp	r14, r24
    1ed8:	f1 04       	cpc	r15, r1
    1eda:	09 f0       	breq	.+2      	; 0x1ede <_ZN4UART11GetMessagesEv+0x106>
    1edc:	a4 cf       	rjmp	.-184    	; 0x1e26 <_ZN4UART11GetMessagesEv+0x4e>
					bufferIndexes[i]=0;
					overflowedBuffers=false;
				}
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
    1ede:	33 20       	and	r3, r3
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <_ZN4UART11GetMessagesEv+0x122>
    1ee2:	84 e0       	ldi	r24, 0x04	; 4
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_Znwj>
    1eea:	8c 01       	movw	r16, r24
    1eec:	43 2d       	mov	r20, r3
    1eee:	be 01       	movw	r22, r28
    1ef0:	6f 5f       	subi	r22, 0xFF	; 255
    1ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef4:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN8MessagesC1EPP7Messagec>
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <_ZN4UART11GetMessagesEv+0x126>
    1efa:	00 e0       	ldi	r16, 0x00	; 0
    1efc:	10 e0       	ldi	r17, 0x00	; 0
		return m;
}
    1efe:	c8 01       	movw	r24, r16
    1f00:	2a 96       	adiw	r28, 0x0a	; 10
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
    1f24:	7f 90       	pop	r7
    1f26:	6f 90       	pop	r6
    1f28:	5f 90       	pop	r5
    1f2a:	4f 90       	pop	r4
    1f2c:	3f 90       	pop	r3
    1f2e:	08 95       	ret

00001f30 <_ZThn2_N4UART11GetMessagesEv>:
    1f30:	02 97       	sbiw	r24, 0x02	; 2
    1f32:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN4UART11GetMessagesEv>
    1f36:	08 95       	ret

00001f38 <_ZN4UART10InitializeEv>:
 initialized=true;
 }
	return _Singleton;
}
 void UART::Initialize ()
{
    1f38:	fc 01       	movw	r30, r24
	//volatile int bufferIndexes[UART_N_BUFFERS];
	//volatile char buffer[UART_N_BUFFERS][UART_BUFFER_SIZE] ;
	
	nBuffer=0;
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	a4 5f       	subi	r26, 0xF4	; 244
    1f3e:	be 4f       	sbci	r27, 0xFE	; 254
    1f40:	1c 92       	st	X, r1
	overflowedCurrentBuffer=false;
    1f42:	11 96       	adiw	r26, 0x01	; 1
    1f44:	1c 92       	st	X, r1
	overflowedBuffers=false;
    1f46:	11 96       	adiw	r26, 0x01	; 1
    1f48:	1c 92       	st	X, r1
	DDRD =DDRD&0xFE;
    1f4a:	50 98       	cbi	0x0a, 0	; 10
	DDRD = DDRD | 0x2;
    1f4c:	51 9a       	sbi	0x0a, 1	; 10
//PORTD=PORTD&0x1;
	for(char i=0; i<UART_N_BUFFERS; i++)
	{
		bufferIndexes[i]=0;
    1f4e:	15 82       	std	Z+5, r1	; 0x05
    1f50:	14 82       	std	Z+4, r1	; 0x04
    1f52:	17 82       	std	Z+7, r1	; 0x07
    1f54:	16 82       	std	Z+6, r1	; 0x06
    1f56:	11 86       	std	Z+9, r1	; 0x09
    1f58:	10 86       	std	Z+8, r1	; 0x08
    1f5a:	13 86       	std	Z+11, r1	; 0x0b
    1f5c:	12 86       	std	Z+10, r1	; 0x0a
	}
	UBRR0H = UBRRH_VALUE;
    1f5e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    1f62:	83 e3       	ldi	r24, 0x33	; 51
    1f64:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#if USE_U2X
	UCSR0A |= (1<<U2X0);
	#else
	UCSR0A &= ~(1<<U2X0);
    1f68:	e0 ec       	ldi	r30, 0xC0	; 192
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8d 7f       	andi	r24, 0xFD	; 253
    1f70:	80 83       	st	Z, r24
	#endif
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|( 1<<RXCIE0);
    1f72:	88 e9       	ldi	r24, 0x98	; 152
    1f74:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    1f78:	e2 ec       	ldi	r30, 0xC2	; 194
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	86 60       	ori	r24, 0x06	; 6
    1f80:	80 83       	st	Z, r24

	sei();
    1f82:	78 94       	sei
    1f84:	08 95       	ret

00001f86 <_ZN4UART11GetInstanceEv>:
#include <util/setbaud.h>

 UART UART:: _Singleton;
  UART& UART::GetInstance(){
 static bool initialized=false;
 if(!initialized)
    1f86:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZZN4UART11GetInstanceEvE11initialized>
    1f8a:	81 11       	cpse	r24, r1
    1f8c:	07 c0       	rjmp	.+14     	; 0x1f9c <_ZN4UART11GetInstanceEv+0x16>
 {
 _Singleton.Initialize();
    1f8e:	8a e6       	ldi	r24, 0x6A	; 106
    1f90:	94 e0       	ldi	r25, 0x04	; 4
    1f92:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN4UART10InitializeEv>
 initialized=true;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <_ZZN4UART11GetInstanceEvE11initialized>
 }
	return _Singleton;
}
    1f9c:	8a e6       	ldi	r24, 0x6A	; 106
    1f9e:	94 e0       	ldi	r25, 0x04	; 4
    1fa0:	08 95       	ret

00001fa2 <_ZN4UART8IncomingEv>:

	sei();
}

void UART::Incoming(){
	unsigned char data = UDR0;
    1fa2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(    data==13||data==10   )
    1fa6:	2d 30       	cpi	r18, 0x0D	; 13
    1fa8:	19 f0       	breq	.+6      	; 0x1fb0 <_ZN4UART8IncomingEv+0xe>
    1faa:	2a 30       	cpi	r18, 0x0A	; 10
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <_ZN4UART8IncomingEv+0xe>
    1fae:	67 c0       	rjmp	.+206    	; 0x207e <_ZN4UART8IncomingEv+0xdc>
	{
		if(bufferIndexes[nBuffer]!=0)
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	e4 5f       	subi	r30, 0xF4	; 244
    1fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb6:	e0 81       	ld	r30, Z
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	32 96       	adiw	r30, 0x02	; 2
    1fbc:	ee 0f       	add	r30, r30
    1fbe:	ff 1f       	adc	r31, r31
    1fc0:	e8 0f       	add	r30, r24
    1fc2:	f9 1f       	adc	r31, r25
    1fc4:	20 81       	ld	r18, Z
    1fc6:	31 81       	ldd	r19, Z+1	; 0x01
    1fc8:	23 2b       	or	r18, r19
    1fca:	09 f4       	brne	.+2      	; 0x1fce <_ZN4UART8IncomingEv+0x2c>
    1fcc:	94 c0       	rjmp	.+296    	; 0x20f6 <_ZN4UART8IncomingEv+0x154>
		{
			if(!overflowedCurrentBuffer)
    1fce:	fc 01       	movw	r30, r24
    1fd0:	e3 5f       	subi	r30, 0xF3	; 243
    1fd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd4:	20 81       	ld	r18, Z
    1fd6:	21 11       	cpse	r18, r1
    1fd8:	41 c0       	rjmp	.+130    	; 0x205c <_ZN4UART8IncomingEv+0xba>
			{
				if(nBuffer<UART_N_BUFFERS-1)
    1fda:	31 97       	sbiw	r30, 0x01	; 1
    1fdc:	20 81       	ld	r18, Z
    1fde:	23 30       	cpi	r18, 0x03	; 3
    1fe0:	30 f0       	brcs	.+12     	; 0x1fee <_ZN4UART8IncomingEv+0x4c>
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	24 81       	ldd	r18, Z+4	; 0x04
    1fe6:	35 81       	ldd	r19, Z+5	; 0x05
    1fe8:	23 2b       	or	r18, r19
    1fea:	a9 f4       	brne	.+42     	; 0x2016 <_ZN4UART8IncomingEv+0x74>
    1fec:	27 c0       	rjmp	.+78     	; 0x203c <_ZN4UART8IncomingEv+0x9a>
		{
			if(!overflowedCurrentBuffer)
			{
				if(nBuffer<UART_N_BUFFERS-1)
				{
					nBuffer++;
    1fee:	fc 01       	movw	r30, r24
    1ff0:	e4 5f       	subi	r30, 0xF4	; 244
    1ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff4:	20 81       	ld	r18, Z
    1ff6:	2f 5f       	subi	r18, 0xFF	; 255
    1ff8:	20 83       	st	Z, r18
					bufferIndexes[nBuffer]=0;
    1ffa:	e0 81       	ld	r30, Z
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	32 96       	adiw	r30, 0x02	; 2
    2000:	ee 0f       	add	r30, r30
    2002:	ff 1f       	adc	r31, r31
    2004:	e8 0f       	add	r30, r24
    2006:	f9 1f       	adc	r31, r25
    2008:	11 82       	std	Z+1, r1	; 0x01
    200a:	10 82       	st	Z, r1
					overflowedCurrentBuffer=false;
    200c:	fc 01       	movw	r30, r24
    200e:	e3 5f       	subi	r30, 0xF3	; 243
    2010:	fe 4f       	sbci	r31, 0xFE	; 254
    2012:	10 82       	st	Z, r1
    2014:	08 95       	ret
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    2016:	fc 01       	movw	r30, r24
    2018:	26 81       	ldd	r18, Z+6	; 0x06
    201a:	37 81       	ldd	r19, Z+7	; 0x07
    201c:	23 2b       	or	r18, r19
    201e:	51 f0       	breq	.+20     	; 0x2034 <_ZN4UART8IncomingEv+0x92>
    2020:	20 85       	ldd	r18, Z+8	; 0x08
    2022:	31 85       	ldd	r19, Z+9	; 0x09
    2024:	23 2b       	or	r18, r19
    2026:	41 f0       	breq	.+16     	; 0x2038 <_ZN4UART8IncomingEv+0x96>
    2028:	22 85       	ldd	r18, Z+10	; 0x0a
    202a:	33 85       	ldd	r19, Z+11	; 0x0b
    202c:	23 2b       	or	r18, r19
    202e:	81 f4       	brne	.+32     	; 0x2050 <_ZN4UART8IncomingEv+0xae>
					overflowedCurrentBuffer=false;

				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
    2030:	23 e0       	ldi	r18, 0x03	; 3
    2032:	05 c0       	rjmp	.+10     	; 0x203e <_ZN4UART8IncomingEv+0x9c>
    2034:	21 e0       	ldi	r18, 0x01	; 1
    2036:	03 c0       	rjmp	.+6      	; 0x203e <_ZN4UART8IncomingEv+0x9c>
    2038:	22 e0       	ldi	r18, 0x02	; 2
    203a:	01 c0       	rjmp	.+2      	; 0x203e <_ZN4UART8IncomingEv+0x9c>
					{
						if(bufferIndexes[i]==0)
    203c:	20 e0       	ldi	r18, 0x00	; 0
						{
							nBuffer=i;
    203e:	fc 01       	movw	r30, r24
    2040:	e4 5f       	subi	r30, 0xF4	; 244
    2042:	fe 4f       	sbci	r31, 0xFE	; 254
    2044:	20 83       	st	Z, r18
							overflowedCurrentBuffer=false;
    2046:	31 96       	adiw	r30, 0x01	; 1
    2048:	10 82       	st	Z, r1
							overflowedBuffers=false;
    204a:	31 96       	adiw	r30, 0x01	; 1
    204c:	10 82       	st	Z, r1
							return;
    204e:	08 95       	ret
						}
					}
					overflowedBuffers=true;
    2050:	fc 01       	movw	r30, r24
    2052:	e2 5f       	subi	r30, 0xF2	; 242
    2054:	fe 4f       	sbci	r31, 0xFE	; 254
    2056:	21 e0       	ldi	r18, 0x01	; 1
    2058:	20 83       	st	Z, r18
    205a:	08 95       	ret
				}
			}
			else
			{
				overflowedCurrentBuffer=false;
    205c:	fc 01       	movw	r30, r24
    205e:	e3 5f       	subi	r30, 0xF3	; 243
    2060:	fe 4f       	sbci	r31, 0xFE	; 254
    2062:	10 82       	st	Z, r1
				bufferIndexes[nBuffer]=0;
    2064:	31 97       	sbiw	r30, 0x01	; 1
    2066:	20 81       	ld	r18, Z
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	2e 5f       	subi	r18, 0xFE	; 254
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
    206e:	22 0f       	add	r18, r18
    2070:	33 1f       	adc	r19, r19
    2072:	fc 01       	movw	r30, r24
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	11 82       	std	Z+1, r1	; 0x01
    207a:	10 82       	st	Z, r1
    207c:	08 95       	ret
			}
		}
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
    207e:	fc 01       	movw	r30, r24
    2080:	e3 5f       	subi	r30, 0xF3	; 243
    2082:	fe 4f       	sbci	r31, 0xFE	; 254
    2084:	30 81       	ld	r19, Z
    2086:	31 11       	cpse	r19, r1
    2088:	36 c0       	rjmp	.+108    	; 0x20f6 <_ZN4UART8IncomingEv+0x154>
    208a:	31 96       	adiw	r30, 0x01	; 1
    208c:	30 81       	ld	r19, Z
    208e:	31 11       	cpse	r19, r1
    2090:	32 c0       	rjmp	.+100    	; 0x20f6 <_ZN4UART8IncomingEv+0x154>
    2092:	21 c0       	rjmp	.+66     	; 0x20d6 <_ZN4UART8IncomingEv+0x134>
		{
			int bufferIndex=bufferIndexes[nBuffer];
			if(bufferIndex>=UART_BUFFER_SIZE)
			{
				overflowedCurrentBuffer=true;
    2094:	fc 01       	movw	r30, r24
    2096:	e3 5f       	subi	r30, 0xF3	; 243
    2098:	fe 4f       	sbci	r31, 0xFE	; 254
    209a:	21 e0       	ldi	r18, 0x01	; 1
    209c:	20 83       	st	Z, r18
    209e:	08 95       	ret
			}
			else{
					buffer[nBuffer][bufferIndex]=data;
    20a0:	dc 01       	movw	r26, r24
    20a2:	a4 5f       	subi	r26, 0xF4	; 244
    20a4:	be 4f       	sbci	r27, 0xFE	; 254
    20a6:	3c 91       	ld	r19, X
    20a8:	fc 01       	movw	r30, r24
    20aa:	60 e4       	ldi	r22, 0x40	; 64
    20ac:	36 9f       	mul	r19, r22
    20ae:	e0 0d       	add	r30, r0
    20b0:	f1 1d       	adc	r31, r1
    20b2:	11 24       	eor	r1, r1
    20b4:	e4 0f       	add	r30, r20
    20b6:	f5 1f       	adc	r31, r21
    20b8:	24 87       	std	Z+12, r18	; 0x0c
					bufferIndexes[nBuffer]=bufferIndex+1;
    20ba:	2c 91       	ld	r18, X
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4f 5f       	subi	r20, 0xFF	; 255
    20c0:	5f 4f       	sbci	r21, 0xFF	; 255
    20c2:	2e 5f       	subi	r18, 0xFE	; 254
    20c4:	3f 4f       	sbci	r19, 0xFF	; 255
    20c6:	22 0f       	add	r18, r18
    20c8:	33 1f       	adc	r19, r19
    20ca:	fc 01       	movw	r30, r24
    20cc:	e2 0f       	add	r30, r18
    20ce:	f3 1f       	adc	r31, r19
    20d0:	51 83       	std	Z+1, r21	; 0x01
    20d2:	40 83       	st	Z, r20
    20d4:	08 95       	ret
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
		{
			int bufferIndex=bufferIndexes[nBuffer];
    20d6:	fc 01       	movw	r30, r24
    20d8:	e4 5f       	subi	r30, 0xF4	; 244
    20da:	fe 4f       	sbci	r31, 0xFE	; 254
    20dc:	e0 81       	ld	r30, Z
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	32 96       	adiw	r30, 0x02	; 2
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	e8 0f       	add	r30, r24
    20e8:	f9 1f       	adc	r31, r25
    20ea:	40 81       	ld	r20, Z
    20ec:	51 81       	ldd	r21, Z+1	; 0x01
			if(bufferIndex>=UART_BUFFER_SIZE)
    20ee:	40 34       	cpi	r20, 0x40	; 64
    20f0:	51 05       	cpc	r21, r1
    20f2:	b4 f2       	brlt	.-84     	; 0x20a0 <_ZN4UART8IncomingEv+0xfe>
    20f4:	cf cf       	rjmp	.-98     	; 0x2094 <_ZN4UART8IncomingEv+0xf2>
    20f6:	08 95       	ret

000020f8 <__vector_18>:
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
		return m;
}
	ISR(USART_RX_vect){
    20f8:	1f 92       	push	r1
    20fa:	0f 92       	push	r0
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	0f 92       	push	r0
    2100:	11 24       	eor	r1, r1
    2102:	2f 93       	push	r18
    2104:	3f 93       	push	r19
    2106:	4f 93       	push	r20
    2108:	5f 93       	push	r21
    210a:	6f 93       	push	r22
    210c:	7f 93       	push	r23
    210e:	8f 93       	push	r24
    2110:	9f 93       	push	r25
    2112:	af 93       	push	r26
    2114:	bf 93       	push	r27
    2116:	ef 93       	push	r30
    2118:	ff 93       	push	r31
		cli();
    211a:	f8 94       	cli
		UART::GetInstance().Incoming();
    211c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN4UART11GetInstanceEv>
    2120:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZN4UART8IncomingEv>
		sei();
    2124:	78 94       	sei
	}
    2126:	ff 91       	pop	r31
    2128:	ef 91       	pop	r30
    212a:	bf 91       	pop	r27
    212c:	af 91       	pop	r26
    212e:	9f 91       	pop	r25
    2130:	8f 91       	pop	r24
    2132:	7f 91       	pop	r23
    2134:	6f 91       	pop	r22
    2136:	5f 91       	pop	r21
    2138:	4f 91       	pop	r20
    213a:	3f 91       	pop	r19
    213c:	2f 91       	pop	r18
    213e:	0f 90       	pop	r0
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	0f 90       	pop	r0
    2144:	1f 90       	pop	r1
    2146:	18 95       	reti

00002148 <_ZN4UART4SendEc>:
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
    2148:	e0 ec       	ldi	r30, 0xC0	; 192
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	85 ff       	sbrs	r24, 5
    2150:	fd cf       	rjmp	.-6      	; 0x214c <_ZN4UART4SendEc+0x4>
		UDR0=message;
    2152:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2156:	08 95       	ret

00002158 <_ZN4UART11SendMessageEPKcj>:
	}
	void UART::SendMessage(const char* message, unsigned int length){
    2158:	ef 92       	push	r14
    215a:	ff 92       	push	r15
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
		for(unsigned int i=0; i<length; i++)
    2164:	41 15       	cp	r20, r1
    2166:	51 05       	cpc	r21, r1
    2168:	61 f0       	breq	.+24     	; 0x2182 <_ZN4UART11SendMessageEPKcj+0x2a>
    216a:	8b 01       	movw	r16, r22
    216c:	7c 01       	movw	r14, r24
    216e:	eb 01       	movw	r28, r22
    2170:	04 0f       	add	r16, r20
    2172:	15 1f       	adc	r17, r21
		Send(*(message+i));
    2174:	69 91       	ld	r22, Y+
    2176:	c7 01       	movw	r24, r14
    2178:	0e 94 a4 10 	call	0x2148	; 0x2148 <_ZN4UART4SendEc>
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
		UDR0=message;
	}
	void UART::SendMessage(const char* message, unsigned int length){
		for(unsigned int i=0; i<length; i++)
    217c:	c0 17       	cp	r28, r16
    217e:	d1 07       	cpc	r29, r17
    2180:	c9 f7       	brne	.-14     	; 0x2174 <_ZN4UART11SendMessageEPKcj+0x1c>
		Send(*(message+i));
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	08 95       	ret

00002190 <_GLOBAL__sub_I__ZN4UART10_SingletonE>:
void operator=(UART const&) = delete; // Don't implement
protected:
public:

private:
UART(){}
    2190:	ea e6       	ldi	r30, 0x6A	; 106
    2192:	f4 e0       	ldi	r31, 0x04	; 4
    2194:	89 e2       	ldi	r24, 0x29	; 41
    2196:	94 e0       	ldi	r25, 0x04	; 4
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
    219c:	81 e3       	ldi	r24, 0x31	; 49
    219e:	94 e0       	ldi	r25, 0x04	; 4
    21a0:	93 83       	std	Z+3, r25	; 0x03
    21a2:	82 83       	std	Z+2, r24	; 0x02
    21a4:	08 95       	ret

000021a6 <__tablejump2__>:
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	05 90       	lpm	r0, Z+
    21ac:	f4 91       	lpm	r31, Z
    21ae:	e0 2d       	mov	r30, r0
    21b0:	09 94       	ijmp

000021b2 <malloc>:
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	91 05       	cpc	r25, r1
    21be:	10 f4       	brcc	.+4      	; 0x21c4 <malloc+0x12>
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <__flp>
    21c8:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <__flp+0x1>
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	a0 e0       	ldi	r26, 0x00	; 0
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	30 97       	sbiw	r30, 0x00	; 0
    21d6:	19 f1       	breq	.+70     	; 0x221e <malloc+0x6c>
    21d8:	40 81       	ld	r20, Z
    21da:	51 81       	ldd	r21, Z+1	; 0x01
    21dc:	02 81       	ldd	r16, Z+2	; 0x02
    21de:	13 81       	ldd	r17, Z+3	; 0x03
    21e0:	48 17       	cp	r20, r24
    21e2:	59 07       	cpc	r21, r25
    21e4:	c8 f0       	brcs	.+50     	; 0x2218 <malloc+0x66>
    21e6:	84 17       	cp	r24, r20
    21e8:	95 07       	cpc	r25, r21
    21ea:	69 f4       	brne	.+26     	; 0x2206 <malloc+0x54>
    21ec:	10 97       	sbiw	r26, 0x00	; 0
    21ee:	31 f0       	breq	.+12     	; 0x21fc <malloc+0x4a>
    21f0:	12 96       	adiw	r26, 0x02	; 2
    21f2:	0c 93       	st	X, r16
    21f4:	12 97       	sbiw	r26, 0x02	; 2
    21f6:	13 96       	adiw	r26, 0x03	; 3
    21f8:	1c 93       	st	X, r17
    21fa:	27 c0       	rjmp	.+78     	; 0x224a <malloc+0x98>
    21fc:	00 93 7b 05 	sts	0x057B, r16	; 0x80057b <__flp>
    2200:	10 93 7c 05 	sts	0x057C, r17	; 0x80057c <__flp+0x1>
    2204:	22 c0       	rjmp	.+68     	; 0x224a <malloc+0x98>
    2206:	21 15       	cp	r18, r1
    2208:	31 05       	cpc	r19, r1
    220a:	19 f0       	breq	.+6      	; 0x2212 <malloc+0x60>
    220c:	42 17       	cp	r20, r18
    220e:	53 07       	cpc	r21, r19
    2210:	18 f4       	brcc	.+6      	; 0x2218 <malloc+0x66>
    2212:	9a 01       	movw	r18, r20
    2214:	bd 01       	movw	r22, r26
    2216:	ef 01       	movw	r28, r30
    2218:	df 01       	movw	r26, r30
    221a:	f8 01       	movw	r30, r16
    221c:	db cf       	rjmp	.-74     	; 0x21d4 <malloc+0x22>
    221e:	21 15       	cp	r18, r1
    2220:	31 05       	cpc	r19, r1
    2222:	f9 f0       	breq	.+62     	; 0x2262 <malloc+0xb0>
    2224:	28 1b       	sub	r18, r24
    2226:	39 0b       	sbc	r19, r25
    2228:	24 30       	cpi	r18, 0x04	; 4
    222a:	31 05       	cpc	r19, r1
    222c:	80 f4       	brcc	.+32     	; 0x224e <malloc+0x9c>
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	9b 81       	ldd	r25, Y+3	; 0x03
    2232:	61 15       	cp	r22, r1
    2234:	71 05       	cpc	r23, r1
    2236:	21 f0       	breq	.+8      	; 0x2240 <malloc+0x8e>
    2238:	fb 01       	movw	r30, r22
    223a:	93 83       	std	Z+3, r25	; 0x03
    223c:	82 83       	std	Z+2, r24	; 0x02
    223e:	04 c0       	rjmp	.+8      	; 0x2248 <malloc+0x96>
    2240:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <__flp+0x1>
    2244:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <__flp>
    2248:	fe 01       	movw	r30, r28
    224a:	32 96       	adiw	r30, 0x02	; 2
    224c:	44 c0       	rjmp	.+136    	; 0x22d6 <malloc+0x124>
    224e:	fe 01       	movw	r30, r28
    2250:	e2 0f       	add	r30, r18
    2252:	f3 1f       	adc	r31, r19
    2254:	81 93       	st	Z+, r24
    2256:	91 93       	st	Z+, r25
    2258:	22 50       	subi	r18, 0x02	; 2
    225a:	31 09       	sbc	r19, r1
    225c:	39 83       	std	Y+1, r19	; 0x01
    225e:	28 83       	st	Y, r18
    2260:	3a c0       	rjmp	.+116    	; 0x22d6 <malloc+0x124>
    2262:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <__brkval>
    2266:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <__brkval+0x1>
    226a:	23 2b       	or	r18, r19
    226c:	41 f4       	brne	.+16     	; 0x227e <malloc+0xcc>
    226e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2272:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2276:	30 93 7a 05 	sts	0x057A, r19	; 0x80057a <__brkval+0x1>
    227a:	20 93 79 05 	sts	0x0579, r18	; 0x800579 <__brkval>
    227e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2282:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2286:	21 15       	cp	r18, r1
    2288:	31 05       	cpc	r19, r1
    228a:	41 f4       	brne	.+16     	; 0x229c <malloc+0xea>
    228c:	2d b7       	in	r18, 0x3d	; 61
    228e:	3e b7       	in	r19, 0x3e	; 62
    2290:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2294:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2298:	24 1b       	sub	r18, r20
    229a:	35 0b       	sbc	r19, r21
    229c:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <__brkval>
    22a0:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <__brkval+0x1>
    22a4:	e2 17       	cp	r30, r18
    22a6:	f3 07       	cpc	r31, r19
    22a8:	a0 f4       	brcc	.+40     	; 0x22d2 <malloc+0x120>
    22aa:	2e 1b       	sub	r18, r30
    22ac:	3f 0b       	sbc	r19, r31
    22ae:	28 17       	cp	r18, r24
    22b0:	39 07       	cpc	r19, r25
    22b2:	78 f0       	brcs	.+30     	; 0x22d2 <malloc+0x120>
    22b4:	ac 01       	movw	r20, r24
    22b6:	4e 5f       	subi	r20, 0xFE	; 254
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	24 17       	cp	r18, r20
    22bc:	35 07       	cpc	r19, r21
    22be:	48 f0       	brcs	.+18     	; 0x22d2 <malloc+0x120>
    22c0:	4e 0f       	add	r20, r30
    22c2:	5f 1f       	adc	r21, r31
    22c4:	50 93 7a 05 	sts	0x057A, r21	; 0x80057a <__brkval+0x1>
    22c8:	40 93 79 05 	sts	0x0579, r20	; 0x800579 <__brkval>
    22cc:	81 93       	st	Z+, r24
    22ce:	91 93       	st	Z+, r25
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <malloc+0x124>
    22d2:	e0 e0       	ldi	r30, 0x00	; 0
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	cf 01       	movw	r24, r30
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	08 95       	ret

000022e2 <free>:
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	09 f4       	brne	.+2      	; 0x22ec <free+0xa>
    22ea:	81 c0       	rjmp	.+258    	; 0x23ee <free+0x10c>
    22ec:	fc 01       	movw	r30, r24
    22ee:	32 97       	sbiw	r30, 0x02	; 2
    22f0:	13 82       	std	Z+3, r1	; 0x03
    22f2:	12 82       	std	Z+2, r1	; 0x02
    22f4:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <__flp>
    22f8:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <__flp+0x1>
    22fc:	10 97       	sbiw	r26, 0x00	; 0
    22fe:	81 f4       	brne	.+32     	; 0x2320 <free+0x3e>
    2300:	20 81       	ld	r18, Z
    2302:	31 81       	ldd	r19, Z+1	; 0x01
    2304:	82 0f       	add	r24, r18
    2306:	93 1f       	adc	r25, r19
    2308:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <__brkval>
    230c:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <__brkval+0x1>
    2310:	28 17       	cp	r18, r24
    2312:	39 07       	cpc	r19, r25
    2314:	51 f5       	brne	.+84     	; 0x236a <free+0x88>
    2316:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <__brkval+0x1>
    231a:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <__brkval>
    231e:	67 c0       	rjmp	.+206    	; 0x23ee <free+0x10c>
    2320:	ed 01       	movw	r28, r26
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	ce 17       	cp	r28, r30
    2328:	df 07       	cpc	r29, r31
    232a:	40 f4       	brcc	.+16     	; 0x233c <free+0x5a>
    232c:	4a 81       	ldd	r20, Y+2	; 0x02
    232e:	5b 81       	ldd	r21, Y+3	; 0x03
    2330:	9e 01       	movw	r18, r28
    2332:	41 15       	cp	r20, r1
    2334:	51 05       	cpc	r21, r1
    2336:	f1 f0       	breq	.+60     	; 0x2374 <free+0x92>
    2338:	ea 01       	movw	r28, r20
    233a:	f5 cf       	rjmp	.-22     	; 0x2326 <free+0x44>
    233c:	d3 83       	std	Z+3, r29	; 0x03
    233e:	c2 83       	std	Z+2, r28	; 0x02
    2340:	40 81       	ld	r20, Z
    2342:	51 81       	ldd	r21, Z+1	; 0x01
    2344:	84 0f       	add	r24, r20
    2346:	95 1f       	adc	r25, r21
    2348:	c8 17       	cp	r28, r24
    234a:	d9 07       	cpc	r29, r25
    234c:	59 f4       	brne	.+22     	; 0x2364 <free+0x82>
    234e:	88 81       	ld	r24, Y
    2350:	99 81       	ldd	r25, Y+1	; 0x01
    2352:	84 0f       	add	r24, r20
    2354:	95 1f       	adc	r25, r21
    2356:	02 96       	adiw	r24, 0x02	; 2
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	9b 81       	ldd	r25, Y+3	; 0x03
    2360:	93 83       	std	Z+3, r25	; 0x03
    2362:	82 83       	std	Z+2, r24	; 0x02
    2364:	21 15       	cp	r18, r1
    2366:	31 05       	cpc	r19, r1
    2368:	29 f4       	brne	.+10     	; 0x2374 <free+0x92>
    236a:	f0 93 7c 05 	sts	0x057C, r31	; 0x80057c <__flp+0x1>
    236e:	e0 93 7b 05 	sts	0x057B, r30	; 0x80057b <__flp>
    2372:	3d c0       	rjmp	.+122    	; 0x23ee <free+0x10c>
    2374:	e9 01       	movw	r28, r18
    2376:	fb 83       	std	Y+3, r31	; 0x03
    2378:	ea 83       	std	Y+2, r30	; 0x02
    237a:	49 91       	ld	r20, Y+
    237c:	59 91       	ld	r21, Y+
    237e:	c4 0f       	add	r28, r20
    2380:	d5 1f       	adc	r29, r21
    2382:	ec 17       	cp	r30, r28
    2384:	fd 07       	cpc	r31, r29
    2386:	61 f4       	brne	.+24     	; 0x23a0 <free+0xbe>
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	84 0f       	add	r24, r20
    238e:	95 1f       	adc	r25, r21
    2390:	02 96       	adiw	r24, 0x02	; 2
    2392:	e9 01       	movw	r28, r18
    2394:	99 83       	std	Y+1, r25	; 0x01
    2396:	88 83       	st	Y, r24
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	9b 83       	std	Y+3, r25	; 0x03
    239e:	8a 83       	std	Y+2, r24	; 0x02
    23a0:	e0 e0       	ldi	r30, 0x00	; 0
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	12 96       	adiw	r26, 0x02	; 2
    23a6:	8d 91       	ld	r24, X+
    23a8:	9c 91       	ld	r25, X
    23aa:	13 97       	sbiw	r26, 0x03	; 3
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	19 f0       	breq	.+6      	; 0x23b6 <free+0xd4>
    23b0:	fd 01       	movw	r30, r26
    23b2:	dc 01       	movw	r26, r24
    23b4:	f7 cf       	rjmp	.-18     	; 0x23a4 <free+0xc2>
    23b6:	8d 91       	ld	r24, X+
    23b8:	9c 91       	ld	r25, X
    23ba:	11 97       	sbiw	r26, 0x01	; 1
    23bc:	9d 01       	movw	r18, r26
    23be:	2e 5f       	subi	r18, 0xFE	; 254
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	82 0f       	add	r24, r18
    23c4:	93 1f       	adc	r25, r19
    23c6:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <__brkval>
    23ca:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <__brkval+0x1>
    23ce:	28 17       	cp	r18, r24
    23d0:	39 07       	cpc	r19, r25
    23d2:	69 f4       	brne	.+26     	; 0x23ee <free+0x10c>
    23d4:	30 97       	sbiw	r30, 0x00	; 0
    23d6:	29 f4       	brne	.+10     	; 0x23e2 <free+0x100>
    23d8:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <__flp+0x1>
    23dc:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <__flp>
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <free+0x104>
    23e2:	13 82       	std	Z+3, r1	; 0x03
    23e4:	12 82       	std	Z+2, r1	; 0x02
    23e6:	b0 93 7a 05 	sts	0x057A, r27	; 0x80057a <__brkval+0x1>
    23ea:	a0 93 79 05 	sts	0x0579, r26	; 0x800579 <__brkval>
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret

000023f4 <atol>:
    23f4:	1f 93       	push	r17
    23f6:	fc 01       	movw	r30, r24
    23f8:	99 27       	eor	r25, r25
    23fa:	88 27       	eor	r24, r24
    23fc:	bc 01       	movw	r22, r24
    23fe:	e8 94       	clt
    2400:	11 91       	ld	r17, Z+
    2402:	10 32       	cpi	r17, 0x20	; 32
    2404:	e9 f3       	breq	.-6      	; 0x2400 <atol+0xc>
    2406:	19 30       	cpi	r17, 0x09	; 9
    2408:	10 f0       	brcs	.+4      	; 0x240e <atol+0x1a>
    240a:	1e 30       	cpi	r17, 0x0E	; 14
    240c:	c8 f3       	brcs	.-14     	; 0x2400 <atol+0xc>
    240e:	1b 32       	cpi	r17, 0x2B	; 43
    2410:	51 f0       	breq	.+20     	; 0x2426 <atol+0x32>
    2412:	1d 32       	cpi	r17, 0x2D	; 45
    2414:	49 f4       	brne	.+18     	; 0x2428 <atol+0x34>
    2416:	68 94       	set
    2418:	06 c0       	rjmp	.+12     	; 0x2426 <atol+0x32>
    241a:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsi_const_10>
    241e:	61 0f       	add	r22, r17
    2420:	71 1d       	adc	r23, r1
    2422:	81 1d       	adc	r24, r1
    2424:	91 1d       	adc	r25, r1
    2426:	11 91       	ld	r17, Z+
    2428:	10 53       	subi	r17, 0x30	; 48
    242a:	1a 30       	cpi	r17, 0x0A	; 10
    242c:	b0 f3       	brcs	.-20     	; 0x241a <atol+0x26>
    242e:	3e f4       	brtc	.+14     	; 0x243e <atol+0x4a>
    2430:	90 95       	com	r25
    2432:	80 95       	com	r24
    2434:	70 95       	com	r23
    2436:	61 95       	neg	r22
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	8f 4f       	sbci	r24, 0xFF	; 255
    243c:	9f 4f       	sbci	r25, 0xFF	; 255
    243e:	1f 91       	pop	r17
    2440:	08 95       	ret

00002442 <memcpy>:
    2442:	fb 01       	movw	r30, r22
    2444:	dc 01       	movw	r26, r24
    2446:	02 c0       	rjmp	.+4      	; 0x244c <memcpy+0xa>
    2448:	01 90       	ld	r0, Z+
    244a:	0d 92       	st	X+, r0
    244c:	41 50       	subi	r20, 0x01	; 1
    244e:	50 40       	sbci	r21, 0x00	; 0
    2450:	d8 f7       	brcc	.-10     	; 0x2448 <memcpy+0x6>
    2452:	08 95       	ret

00002454 <strcmp>:
    2454:	fb 01       	movw	r30, r22
    2456:	dc 01       	movw	r26, r24
    2458:	8d 91       	ld	r24, X+
    245a:	01 90       	ld	r0, Z+
    245c:	80 19       	sub	r24, r0
    245e:	01 10       	cpse	r0, r1
    2460:	d9 f3       	breq	.-10     	; 0x2458 <strcmp+0x4>
    2462:	99 0b       	sbc	r25, r25
    2464:	08 95       	ret

00002466 <__mulsi_const_10>:
    2466:	59 2f       	mov	r21, r25
    2468:	48 2f       	mov	r20, r24
    246a:	37 2f       	mov	r19, r23
    246c:	26 2f       	mov	r18, r22
    246e:	66 0f       	add	r22, r22
    2470:	77 1f       	adc	r23, r23
    2472:	88 1f       	adc	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	66 0f       	add	r22, r22
    2478:	77 1f       	adc	r23, r23
    247a:	88 1f       	adc	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	62 0f       	add	r22, r18
    2480:	73 1f       	adc	r23, r19
    2482:	84 1f       	adc	r24, r20
    2484:	95 1f       	adc	r25, r21
    2486:	66 0f       	add	r22, r22
    2488:	77 1f       	adc	r23, r23
    248a:	88 1f       	adc	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	08 95       	ret

00002490 <snprintf>:
    2490:	ae e0       	ldi	r26, 0x0E	; 14
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	ee e4       	ldi	r30, 0x4E	; 78
    2496:	f2 e1       	ldi	r31, 0x12	; 18
    2498:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__prologue_saves__+0x1c>
    249c:	0d 89       	ldd	r16, Y+21	; 0x15
    249e:	1e 89       	ldd	r17, Y+22	; 0x16
    24a0:	8f 89       	ldd	r24, Y+23	; 0x17
    24a2:	98 8d       	ldd	r25, Y+24	; 0x18
    24a4:	26 e0       	ldi	r18, 0x06	; 6
    24a6:	2c 83       	std	Y+4, r18	; 0x04
    24a8:	1a 83       	std	Y+2, r17	; 0x02
    24aa:	09 83       	std	Y+1, r16	; 0x01
    24ac:	97 ff       	sbrs	r25, 7
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <snprintf+0x24>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e8       	ldi	r25, 0x80	; 128
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
    24ba:	ae 01       	movw	r20, r28
    24bc:	45 5e       	subi	r20, 0xE5	; 229
    24be:	5f 4f       	sbci	r21, 0xFF	; 255
    24c0:	69 8d       	ldd	r22, Y+25	; 0x19
    24c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c4:	ce 01       	movw	r24, r28
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	0e 94 78 12 	call	0x24f0	; 0x24f0 <vfprintf>
    24cc:	4d 81       	ldd	r20, Y+5	; 0x05
    24ce:	5e 81       	ldd	r21, Y+6	; 0x06
    24d0:	57 fd       	sbrc	r21, 7
    24d2:	0a c0       	rjmp	.+20     	; 0x24e8 <snprintf+0x58>
    24d4:	2f 81       	ldd	r18, Y+7	; 0x07
    24d6:	38 85       	ldd	r19, Y+8	; 0x08
    24d8:	42 17       	cp	r20, r18
    24da:	53 07       	cpc	r21, r19
    24dc:	0c f4       	brge	.+2      	; 0x24e0 <snprintf+0x50>
    24de:	9a 01       	movw	r18, r20
    24e0:	f8 01       	movw	r30, r16
    24e2:	e2 0f       	add	r30, r18
    24e4:	f3 1f       	adc	r31, r19
    24e6:	10 82       	st	Z, r1
    24e8:	2e 96       	adiw	r28, 0x0e	; 14
    24ea:	e4 e0       	ldi	r30, 0x04	; 4
    24ec:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__epilogue_restores__+0x1c>

000024f0 <vfprintf>:
    24f0:	ab e0       	ldi	r26, 0x0B	; 11
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	ee e7       	ldi	r30, 0x7E	; 126
    24f6:	f2 e1       	ldi	r31, 0x12	; 18
    24f8:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__prologue_saves__>
    24fc:	6c 01       	movw	r12, r24
    24fe:	7b 01       	movw	r14, r22
    2500:	8a 01       	movw	r16, r20
    2502:	fc 01       	movw	r30, r24
    2504:	17 82       	std	Z+7, r1	; 0x07
    2506:	16 82       	std	Z+6, r1	; 0x06
    2508:	83 81       	ldd	r24, Z+3	; 0x03
    250a:	81 ff       	sbrs	r24, 1
    250c:	cc c1       	rjmp	.+920    	; 0x28a6 <vfprintf+0x3b6>
    250e:	ce 01       	movw	r24, r28
    2510:	01 96       	adiw	r24, 0x01	; 1
    2512:	3c 01       	movw	r6, r24
    2514:	f6 01       	movw	r30, r12
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	f7 01       	movw	r30, r14
    251a:	93 fd       	sbrc	r25, 3
    251c:	85 91       	lpm	r24, Z+
    251e:	93 ff       	sbrs	r25, 3
    2520:	81 91       	ld	r24, Z+
    2522:	7f 01       	movw	r14, r30
    2524:	88 23       	and	r24, r24
    2526:	09 f4       	brne	.+2      	; 0x252a <vfprintf+0x3a>
    2528:	ba c1       	rjmp	.+884    	; 0x289e <vfprintf+0x3ae>
    252a:	85 32       	cpi	r24, 0x25	; 37
    252c:	39 f4       	brne	.+14     	; 0x253c <vfprintf+0x4c>
    252e:	93 fd       	sbrc	r25, 3
    2530:	85 91       	lpm	r24, Z+
    2532:	93 ff       	sbrs	r25, 3
    2534:	81 91       	ld	r24, Z+
    2536:	7f 01       	movw	r14, r30
    2538:	85 32       	cpi	r24, 0x25	; 37
    253a:	29 f4       	brne	.+10     	; 0x2546 <vfprintf+0x56>
    253c:	b6 01       	movw	r22, r12
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2544:	e7 cf       	rjmp	.-50     	; 0x2514 <vfprintf+0x24>
    2546:	91 2c       	mov	r9, r1
    2548:	21 2c       	mov	r2, r1
    254a:	31 2c       	mov	r3, r1
    254c:	ff e1       	ldi	r31, 0x1F	; 31
    254e:	f3 15       	cp	r31, r3
    2550:	d8 f0       	brcs	.+54     	; 0x2588 <vfprintf+0x98>
    2552:	8b 32       	cpi	r24, 0x2B	; 43
    2554:	79 f0       	breq	.+30     	; 0x2574 <vfprintf+0x84>
    2556:	38 f4       	brcc	.+14     	; 0x2566 <vfprintf+0x76>
    2558:	80 32       	cpi	r24, 0x20	; 32
    255a:	79 f0       	breq	.+30     	; 0x257a <vfprintf+0x8a>
    255c:	83 32       	cpi	r24, 0x23	; 35
    255e:	a1 f4       	brne	.+40     	; 0x2588 <vfprintf+0x98>
    2560:	23 2d       	mov	r18, r3
    2562:	20 61       	ori	r18, 0x10	; 16
    2564:	1d c0       	rjmp	.+58     	; 0x25a0 <vfprintf+0xb0>
    2566:	8d 32       	cpi	r24, 0x2D	; 45
    2568:	61 f0       	breq	.+24     	; 0x2582 <vfprintf+0x92>
    256a:	80 33       	cpi	r24, 0x30	; 48
    256c:	69 f4       	brne	.+26     	; 0x2588 <vfprintf+0x98>
    256e:	23 2d       	mov	r18, r3
    2570:	21 60       	ori	r18, 0x01	; 1
    2572:	16 c0       	rjmp	.+44     	; 0x25a0 <vfprintf+0xb0>
    2574:	83 2d       	mov	r24, r3
    2576:	82 60       	ori	r24, 0x02	; 2
    2578:	38 2e       	mov	r3, r24
    257a:	e3 2d       	mov	r30, r3
    257c:	e4 60       	ori	r30, 0x04	; 4
    257e:	3e 2e       	mov	r3, r30
    2580:	2a c0       	rjmp	.+84     	; 0x25d6 <vfprintf+0xe6>
    2582:	f3 2d       	mov	r31, r3
    2584:	f8 60       	ori	r31, 0x08	; 8
    2586:	1d c0       	rjmp	.+58     	; 0x25c2 <vfprintf+0xd2>
    2588:	37 fc       	sbrc	r3, 7
    258a:	2d c0       	rjmp	.+90     	; 0x25e6 <vfprintf+0xf6>
    258c:	20 ed       	ldi	r18, 0xD0	; 208
    258e:	28 0f       	add	r18, r24
    2590:	2a 30       	cpi	r18, 0x0A	; 10
    2592:	40 f0       	brcs	.+16     	; 0x25a4 <vfprintf+0xb4>
    2594:	8e 32       	cpi	r24, 0x2E	; 46
    2596:	b9 f4       	brne	.+46     	; 0x25c6 <vfprintf+0xd6>
    2598:	36 fc       	sbrc	r3, 6
    259a:	81 c1       	rjmp	.+770    	; 0x289e <vfprintf+0x3ae>
    259c:	23 2d       	mov	r18, r3
    259e:	20 64       	ori	r18, 0x40	; 64
    25a0:	32 2e       	mov	r3, r18
    25a2:	19 c0       	rjmp	.+50     	; 0x25d6 <vfprintf+0xe6>
    25a4:	36 fe       	sbrs	r3, 6
    25a6:	06 c0       	rjmp	.+12     	; 0x25b4 <vfprintf+0xc4>
    25a8:	8a e0       	ldi	r24, 0x0A	; 10
    25aa:	98 9e       	mul	r9, r24
    25ac:	20 0d       	add	r18, r0
    25ae:	11 24       	eor	r1, r1
    25b0:	92 2e       	mov	r9, r18
    25b2:	11 c0       	rjmp	.+34     	; 0x25d6 <vfprintf+0xe6>
    25b4:	ea e0       	ldi	r30, 0x0A	; 10
    25b6:	2e 9e       	mul	r2, r30
    25b8:	20 0d       	add	r18, r0
    25ba:	11 24       	eor	r1, r1
    25bc:	22 2e       	mov	r2, r18
    25be:	f3 2d       	mov	r31, r3
    25c0:	f0 62       	ori	r31, 0x20	; 32
    25c2:	3f 2e       	mov	r3, r31
    25c4:	08 c0       	rjmp	.+16     	; 0x25d6 <vfprintf+0xe6>
    25c6:	8c 36       	cpi	r24, 0x6C	; 108
    25c8:	21 f4       	brne	.+8      	; 0x25d2 <vfprintf+0xe2>
    25ca:	83 2d       	mov	r24, r3
    25cc:	80 68       	ori	r24, 0x80	; 128
    25ce:	38 2e       	mov	r3, r24
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <vfprintf+0xe6>
    25d2:	88 36       	cpi	r24, 0x68	; 104
    25d4:	41 f4       	brne	.+16     	; 0x25e6 <vfprintf+0xf6>
    25d6:	f7 01       	movw	r30, r14
    25d8:	93 fd       	sbrc	r25, 3
    25da:	85 91       	lpm	r24, Z+
    25dc:	93 ff       	sbrs	r25, 3
    25de:	81 91       	ld	r24, Z+
    25e0:	7f 01       	movw	r14, r30
    25e2:	81 11       	cpse	r24, r1
    25e4:	b3 cf       	rjmp	.-154    	; 0x254c <vfprintf+0x5c>
    25e6:	98 2f       	mov	r25, r24
    25e8:	9f 7d       	andi	r25, 0xDF	; 223
    25ea:	95 54       	subi	r25, 0x45	; 69
    25ec:	93 30       	cpi	r25, 0x03	; 3
    25ee:	28 f4       	brcc	.+10     	; 0x25fa <vfprintf+0x10a>
    25f0:	0c 5f       	subi	r16, 0xFC	; 252
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	9f e3       	ldi	r25, 0x3F	; 63
    25f6:	99 83       	std	Y+1, r25	; 0x01
    25f8:	0d c0       	rjmp	.+26     	; 0x2614 <vfprintf+0x124>
    25fa:	83 36       	cpi	r24, 0x63	; 99
    25fc:	31 f0       	breq	.+12     	; 0x260a <vfprintf+0x11a>
    25fe:	83 37       	cpi	r24, 0x73	; 115
    2600:	71 f0       	breq	.+28     	; 0x261e <vfprintf+0x12e>
    2602:	83 35       	cpi	r24, 0x53	; 83
    2604:	09 f0       	breq	.+2      	; 0x2608 <vfprintf+0x118>
    2606:	59 c0       	rjmp	.+178    	; 0x26ba <vfprintf+0x1ca>
    2608:	21 c0       	rjmp	.+66     	; 0x264c <vfprintf+0x15c>
    260a:	f8 01       	movw	r30, r16
    260c:	80 81       	ld	r24, Z
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	0e 5f       	subi	r16, 0xFE	; 254
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	88 24       	eor	r8, r8
    2616:	83 94       	inc	r8
    2618:	91 2c       	mov	r9, r1
    261a:	53 01       	movw	r10, r6
    261c:	13 c0       	rjmp	.+38     	; 0x2644 <vfprintf+0x154>
    261e:	28 01       	movw	r4, r16
    2620:	f2 e0       	ldi	r31, 0x02	; 2
    2622:	4f 0e       	add	r4, r31
    2624:	51 1c       	adc	r5, r1
    2626:	f8 01       	movw	r30, r16
    2628:	a0 80       	ld	r10, Z
    262a:	b1 80       	ldd	r11, Z+1	; 0x01
    262c:	36 fe       	sbrs	r3, 6
    262e:	03 c0       	rjmp	.+6      	; 0x2636 <vfprintf+0x146>
    2630:	69 2d       	mov	r22, r9
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	02 c0       	rjmp	.+4      	; 0x263a <vfprintf+0x14a>
    2636:	6f ef       	ldi	r22, 0xFF	; 255
    2638:	7f ef       	ldi	r23, 0xFF	; 255
    263a:	c5 01       	movw	r24, r10
    263c:	0e 94 64 14 	call	0x28c8	; 0x28c8 <strnlen>
    2640:	4c 01       	movw	r8, r24
    2642:	82 01       	movw	r16, r4
    2644:	f3 2d       	mov	r31, r3
    2646:	ff 77       	andi	r31, 0x7F	; 127
    2648:	3f 2e       	mov	r3, r31
    264a:	16 c0       	rjmp	.+44     	; 0x2678 <vfprintf+0x188>
    264c:	28 01       	movw	r4, r16
    264e:	22 e0       	ldi	r18, 0x02	; 2
    2650:	42 0e       	add	r4, r18
    2652:	51 1c       	adc	r5, r1
    2654:	f8 01       	movw	r30, r16
    2656:	a0 80       	ld	r10, Z
    2658:	b1 80       	ldd	r11, Z+1	; 0x01
    265a:	36 fe       	sbrs	r3, 6
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <vfprintf+0x174>
    265e:	69 2d       	mov	r22, r9
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <vfprintf+0x178>
    2664:	6f ef       	ldi	r22, 0xFF	; 255
    2666:	7f ef       	ldi	r23, 0xFF	; 255
    2668:	c5 01       	movw	r24, r10
    266a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <strnlen_P>
    266e:	4c 01       	movw	r8, r24
    2670:	f3 2d       	mov	r31, r3
    2672:	f0 68       	ori	r31, 0x80	; 128
    2674:	3f 2e       	mov	r3, r31
    2676:	82 01       	movw	r16, r4
    2678:	33 fc       	sbrc	r3, 3
    267a:	1b c0       	rjmp	.+54     	; 0x26b2 <vfprintf+0x1c2>
    267c:	82 2d       	mov	r24, r2
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	88 16       	cp	r8, r24
    2682:	99 06       	cpc	r9, r25
    2684:	b0 f4       	brcc	.+44     	; 0x26b2 <vfprintf+0x1c2>
    2686:	b6 01       	movw	r22, r12
    2688:	80 e2       	ldi	r24, 0x20	; 32
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2690:	2a 94       	dec	r2
    2692:	f4 cf       	rjmp	.-24     	; 0x267c <vfprintf+0x18c>
    2694:	f5 01       	movw	r30, r10
    2696:	37 fc       	sbrc	r3, 7
    2698:	85 91       	lpm	r24, Z+
    269a:	37 fe       	sbrs	r3, 7
    269c:	81 91       	ld	r24, Z+
    269e:	5f 01       	movw	r10, r30
    26a0:	b6 01       	movw	r22, r12
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    26a8:	21 10       	cpse	r2, r1
    26aa:	2a 94       	dec	r2
    26ac:	21 e0       	ldi	r18, 0x01	; 1
    26ae:	82 1a       	sub	r8, r18
    26b0:	91 08       	sbc	r9, r1
    26b2:	81 14       	cp	r8, r1
    26b4:	91 04       	cpc	r9, r1
    26b6:	71 f7       	brne	.-36     	; 0x2694 <vfprintf+0x1a4>
    26b8:	e8 c0       	rjmp	.+464    	; 0x288a <vfprintf+0x39a>
    26ba:	84 36       	cpi	r24, 0x64	; 100
    26bc:	11 f0       	breq	.+4      	; 0x26c2 <vfprintf+0x1d2>
    26be:	89 36       	cpi	r24, 0x69	; 105
    26c0:	41 f5       	brne	.+80     	; 0x2712 <vfprintf+0x222>
    26c2:	f8 01       	movw	r30, r16
    26c4:	37 fe       	sbrs	r3, 7
    26c6:	07 c0       	rjmp	.+14     	; 0x26d6 <vfprintf+0x1e6>
    26c8:	60 81       	ld	r22, Z
    26ca:	71 81       	ldd	r23, Z+1	; 0x01
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	0c 5f       	subi	r16, 0xFC	; 252
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	08 c0       	rjmp	.+16     	; 0x26e6 <vfprintf+0x1f6>
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	07 2e       	mov	r0, r23
    26dc:	00 0c       	add	r0, r0
    26de:	88 0b       	sbc	r24, r24
    26e0:	99 0b       	sbc	r25, r25
    26e2:	0e 5f       	subi	r16, 0xFE	; 254
    26e4:	1f 4f       	sbci	r17, 0xFF	; 255
    26e6:	f3 2d       	mov	r31, r3
    26e8:	ff 76       	andi	r31, 0x6F	; 111
    26ea:	3f 2e       	mov	r3, r31
    26ec:	97 ff       	sbrs	r25, 7
    26ee:	09 c0       	rjmp	.+18     	; 0x2702 <vfprintf+0x212>
    26f0:	90 95       	com	r25
    26f2:	80 95       	com	r24
    26f4:	70 95       	com	r23
    26f6:	61 95       	neg	r22
    26f8:	7f 4f       	sbci	r23, 0xFF	; 255
    26fa:	8f 4f       	sbci	r24, 0xFF	; 255
    26fc:	9f 4f       	sbci	r25, 0xFF	; 255
    26fe:	f0 68       	ori	r31, 0x80	; 128
    2700:	3f 2e       	mov	r3, r31
    2702:	2a e0       	ldi	r18, 0x0A	; 10
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	a3 01       	movw	r20, r6
    2708:	0e 94 ab 14 	call	0x2956	; 0x2956 <__ultoa_invert>
    270c:	88 2e       	mov	r8, r24
    270e:	86 18       	sub	r8, r6
    2710:	45 c0       	rjmp	.+138    	; 0x279c <vfprintf+0x2ac>
    2712:	85 37       	cpi	r24, 0x75	; 117
    2714:	31 f4       	brne	.+12     	; 0x2722 <vfprintf+0x232>
    2716:	23 2d       	mov	r18, r3
    2718:	2f 7e       	andi	r18, 0xEF	; 239
    271a:	b2 2e       	mov	r11, r18
    271c:	2a e0       	ldi	r18, 0x0A	; 10
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	25 c0       	rjmp	.+74     	; 0x276c <vfprintf+0x27c>
    2722:	93 2d       	mov	r25, r3
    2724:	99 7f       	andi	r25, 0xF9	; 249
    2726:	b9 2e       	mov	r11, r25
    2728:	8f 36       	cpi	r24, 0x6F	; 111
    272a:	c1 f0       	breq	.+48     	; 0x275c <vfprintf+0x26c>
    272c:	18 f4       	brcc	.+6      	; 0x2734 <vfprintf+0x244>
    272e:	88 35       	cpi	r24, 0x58	; 88
    2730:	79 f0       	breq	.+30     	; 0x2750 <vfprintf+0x260>
    2732:	b5 c0       	rjmp	.+362    	; 0x289e <vfprintf+0x3ae>
    2734:	80 37       	cpi	r24, 0x70	; 112
    2736:	19 f0       	breq	.+6      	; 0x273e <vfprintf+0x24e>
    2738:	88 37       	cpi	r24, 0x78	; 120
    273a:	21 f0       	breq	.+8      	; 0x2744 <vfprintf+0x254>
    273c:	b0 c0       	rjmp	.+352    	; 0x289e <vfprintf+0x3ae>
    273e:	e9 2f       	mov	r30, r25
    2740:	e0 61       	ori	r30, 0x10	; 16
    2742:	be 2e       	mov	r11, r30
    2744:	b4 fe       	sbrs	r11, 4
    2746:	0d c0       	rjmp	.+26     	; 0x2762 <vfprintf+0x272>
    2748:	fb 2d       	mov	r31, r11
    274a:	f4 60       	ori	r31, 0x04	; 4
    274c:	bf 2e       	mov	r11, r31
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <vfprintf+0x272>
    2750:	34 fe       	sbrs	r3, 4
    2752:	0a c0       	rjmp	.+20     	; 0x2768 <vfprintf+0x278>
    2754:	29 2f       	mov	r18, r25
    2756:	26 60       	ori	r18, 0x06	; 6
    2758:	b2 2e       	mov	r11, r18
    275a:	06 c0       	rjmp	.+12     	; 0x2768 <vfprintf+0x278>
    275c:	28 e0       	ldi	r18, 0x08	; 8
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	05 c0       	rjmp	.+10     	; 0x276c <vfprintf+0x27c>
    2762:	20 e1       	ldi	r18, 0x10	; 16
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	02 c0       	rjmp	.+4      	; 0x276c <vfprintf+0x27c>
    2768:	20 e1       	ldi	r18, 0x10	; 16
    276a:	32 e0       	ldi	r19, 0x02	; 2
    276c:	f8 01       	movw	r30, r16
    276e:	b7 fe       	sbrs	r11, 7
    2770:	07 c0       	rjmp	.+14     	; 0x2780 <vfprintf+0x290>
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	0c 5f       	subi	r16, 0xFC	; 252
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	06 c0       	rjmp	.+12     	; 0x278c <vfprintf+0x29c>
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 5f       	subi	r16, 0xFE	; 254
    278a:	1f 4f       	sbci	r17, 0xFF	; 255
    278c:	a3 01       	movw	r20, r6
    278e:	0e 94 ab 14 	call	0x2956	; 0x2956 <__ultoa_invert>
    2792:	88 2e       	mov	r8, r24
    2794:	86 18       	sub	r8, r6
    2796:	fb 2d       	mov	r31, r11
    2798:	ff 77       	andi	r31, 0x7F	; 127
    279a:	3f 2e       	mov	r3, r31
    279c:	36 fe       	sbrs	r3, 6
    279e:	0d c0       	rjmp	.+26     	; 0x27ba <vfprintf+0x2ca>
    27a0:	23 2d       	mov	r18, r3
    27a2:	2e 7f       	andi	r18, 0xFE	; 254
    27a4:	a2 2e       	mov	r10, r18
    27a6:	89 14       	cp	r8, r9
    27a8:	58 f4       	brcc	.+22     	; 0x27c0 <vfprintf+0x2d0>
    27aa:	34 fe       	sbrs	r3, 4
    27ac:	0b c0       	rjmp	.+22     	; 0x27c4 <vfprintf+0x2d4>
    27ae:	32 fc       	sbrc	r3, 2
    27b0:	09 c0       	rjmp	.+18     	; 0x27c4 <vfprintf+0x2d4>
    27b2:	83 2d       	mov	r24, r3
    27b4:	8e 7e       	andi	r24, 0xEE	; 238
    27b6:	a8 2e       	mov	r10, r24
    27b8:	05 c0       	rjmp	.+10     	; 0x27c4 <vfprintf+0x2d4>
    27ba:	b8 2c       	mov	r11, r8
    27bc:	a3 2c       	mov	r10, r3
    27be:	03 c0       	rjmp	.+6      	; 0x27c6 <vfprintf+0x2d6>
    27c0:	b8 2c       	mov	r11, r8
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <vfprintf+0x2d6>
    27c4:	b9 2c       	mov	r11, r9
    27c6:	a4 fe       	sbrs	r10, 4
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <vfprintf+0x2f8>
    27ca:	fe 01       	movw	r30, r28
    27cc:	e8 0d       	add	r30, r8
    27ce:	f1 1d       	adc	r31, r1
    27d0:	80 81       	ld	r24, Z
    27d2:	80 33       	cpi	r24, 0x30	; 48
    27d4:	21 f4       	brne	.+8      	; 0x27de <vfprintf+0x2ee>
    27d6:	9a 2d       	mov	r25, r10
    27d8:	99 7e       	andi	r25, 0xE9	; 233
    27da:	a9 2e       	mov	r10, r25
    27dc:	09 c0       	rjmp	.+18     	; 0x27f0 <vfprintf+0x300>
    27de:	a2 fe       	sbrs	r10, 2
    27e0:	06 c0       	rjmp	.+12     	; 0x27ee <vfprintf+0x2fe>
    27e2:	b3 94       	inc	r11
    27e4:	b3 94       	inc	r11
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <vfprintf+0x300>
    27e8:	8a 2d       	mov	r24, r10
    27ea:	86 78       	andi	r24, 0x86	; 134
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <vfprintf+0x300>
    27ee:	b3 94       	inc	r11
    27f0:	a3 fc       	sbrc	r10, 3
    27f2:	11 c0       	rjmp	.+34     	; 0x2816 <vfprintf+0x326>
    27f4:	a0 fe       	sbrs	r10, 0
    27f6:	06 c0       	rjmp	.+12     	; 0x2804 <vfprintf+0x314>
    27f8:	b2 14       	cp	r11, r2
    27fa:	88 f4       	brcc	.+34     	; 0x281e <vfprintf+0x32e>
    27fc:	28 0c       	add	r2, r8
    27fe:	92 2c       	mov	r9, r2
    2800:	9b 18       	sub	r9, r11
    2802:	0e c0       	rjmp	.+28     	; 0x2820 <vfprintf+0x330>
    2804:	b2 14       	cp	r11, r2
    2806:	60 f4       	brcc	.+24     	; 0x2820 <vfprintf+0x330>
    2808:	b6 01       	movw	r22, r12
    280a:	80 e2       	ldi	r24, 0x20	; 32
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2812:	b3 94       	inc	r11
    2814:	f7 cf       	rjmp	.-18     	; 0x2804 <vfprintf+0x314>
    2816:	b2 14       	cp	r11, r2
    2818:	18 f4       	brcc	.+6      	; 0x2820 <vfprintf+0x330>
    281a:	2b 18       	sub	r2, r11
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <vfprintf+0x332>
    281e:	98 2c       	mov	r9, r8
    2820:	21 2c       	mov	r2, r1
    2822:	a4 fe       	sbrs	r10, 4
    2824:	10 c0       	rjmp	.+32     	; 0x2846 <vfprintf+0x356>
    2826:	b6 01       	movw	r22, r12
    2828:	80 e3       	ldi	r24, 0x30	; 48
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2830:	a2 fe       	sbrs	r10, 2
    2832:	17 c0       	rjmp	.+46     	; 0x2862 <vfprintf+0x372>
    2834:	a1 fc       	sbrc	r10, 1
    2836:	03 c0       	rjmp	.+6      	; 0x283e <vfprintf+0x34e>
    2838:	88 e7       	ldi	r24, 0x78	; 120
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <vfprintf+0x352>
    283e:	88 e5       	ldi	r24, 0x58	; 88
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	b6 01       	movw	r22, r12
    2844:	0c c0       	rjmp	.+24     	; 0x285e <vfprintf+0x36e>
    2846:	8a 2d       	mov	r24, r10
    2848:	86 78       	andi	r24, 0x86	; 134
    284a:	59 f0       	breq	.+22     	; 0x2862 <vfprintf+0x372>
    284c:	a1 fe       	sbrs	r10, 1
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <vfprintf+0x364>
    2850:	8b e2       	ldi	r24, 0x2B	; 43
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <vfprintf+0x366>
    2854:	80 e2       	ldi	r24, 0x20	; 32
    2856:	a7 fc       	sbrc	r10, 7
    2858:	8d e2       	ldi	r24, 0x2D	; 45
    285a:	b6 01       	movw	r22, r12
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2862:	89 14       	cp	r8, r9
    2864:	38 f4       	brcc	.+14     	; 0x2874 <vfprintf+0x384>
    2866:	b6 01       	movw	r22, r12
    2868:	80 e3       	ldi	r24, 0x30	; 48
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2870:	9a 94       	dec	r9
    2872:	f7 cf       	rjmp	.-18     	; 0x2862 <vfprintf+0x372>
    2874:	8a 94       	dec	r8
    2876:	f3 01       	movw	r30, r6
    2878:	e8 0d       	add	r30, r8
    287a:	f1 1d       	adc	r31, r1
    287c:	80 81       	ld	r24, Z
    287e:	b6 01       	movw	r22, r12
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2886:	81 10       	cpse	r8, r1
    2888:	f5 cf       	rjmp	.-22     	; 0x2874 <vfprintf+0x384>
    288a:	22 20       	and	r2, r2
    288c:	09 f4       	brne	.+2      	; 0x2890 <vfprintf+0x3a0>
    288e:	42 ce       	rjmp	.-892    	; 0x2514 <vfprintf+0x24>
    2890:	b6 01       	movw	r22, r12
    2892:	80 e2       	ldi	r24, 0x20	; 32
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    289a:	2a 94       	dec	r2
    289c:	f6 cf       	rjmp	.-20     	; 0x288a <vfprintf+0x39a>
    289e:	f6 01       	movw	r30, r12
    28a0:	86 81       	ldd	r24, Z+6	; 0x06
    28a2:	97 81       	ldd	r25, Z+7	; 0x07
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <vfprintf+0x3ba>
    28a6:	8f ef       	ldi	r24, 0xFF	; 255
    28a8:	9f ef       	ldi	r25, 0xFF	; 255
    28aa:	2b 96       	adiw	r28, 0x0b	; 11
    28ac:	e2 e1       	ldi	r30, 0x12	; 18
    28ae:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__epilogue_restores__>

000028b2 <strnlen_P>:
    28b2:	fc 01       	movw	r30, r24
    28b4:	05 90       	lpm	r0, Z+
    28b6:	61 50       	subi	r22, 0x01	; 1
    28b8:	70 40       	sbci	r23, 0x00	; 0
    28ba:	01 10       	cpse	r0, r1
    28bc:	d8 f7       	brcc	.-10     	; 0x28b4 <strnlen_P+0x2>
    28be:	80 95       	com	r24
    28c0:	90 95       	com	r25
    28c2:	8e 0f       	add	r24, r30
    28c4:	9f 1f       	adc	r25, r31
    28c6:	08 95       	ret

000028c8 <strnlen>:
    28c8:	fc 01       	movw	r30, r24
    28ca:	61 50       	subi	r22, 0x01	; 1
    28cc:	70 40       	sbci	r23, 0x00	; 0
    28ce:	01 90       	ld	r0, Z+
    28d0:	01 10       	cpse	r0, r1
    28d2:	d8 f7       	brcc	.-10     	; 0x28ca <strnlen+0x2>
    28d4:	80 95       	com	r24
    28d6:	90 95       	com	r25
    28d8:	8e 0f       	add	r24, r30
    28da:	9f 1f       	adc	r25, r31
    28dc:	08 95       	ret

000028de <fputc>:
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	fb 01       	movw	r30, r22
    28e8:	23 81       	ldd	r18, Z+3	; 0x03
    28ea:	21 fd       	sbrc	r18, 1
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <fputc+0x16>
    28ee:	8f ef       	ldi	r24, 0xFF	; 255
    28f0:	9f ef       	ldi	r25, 0xFF	; 255
    28f2:	2c c0       	rjmp	.+88     	; 0x294c <fputc+0x6e>
    28f4:	22 ff       	sbrs	r18, 2
    28f6:	16 c0       	rjmp	.+44     	; 0x2924 <fputc+0x46>
    28f8:	46 81       	ldd	r20, Z+6	; 0x06
    28fa:	57 81       	ldd	r21, Z+7	; 0x07
    28fc:	24 81       	ldd	r18, Z+4	; 0x04
    28fe:	35 81       	ldd	r19, Z+5	; 0x05
    2900:	42 17       	cp	r20, r18
    2902:	53 07       	cpc	r21, r19
    2904:	44 f4       	brge	.+16     	; 0x2916 <fputc+0x38>
    2906:	a0 81       	ld	r26, Z
    2908:	b1 81       	ldd	r27, Z+1	; 0x01
    290a:	9d 01       	movw	r18, r26
    290c:	2f 5f       	subi	r18, 0xFF	; 255
    290e:	3f 4f       	sbci	r19, 0xFF	; 255
    2910:	31 83       	std	Z+1, r19	; 0x01
    2912:	20 83       	st	Z, r18
    2914:	8c 93       	st	X, r24
    2916:	26 81       	ldd	r18, Z+6	; 0x06
    2918:	37 81       	ldd	r19, Z+7	; 0x07
    291a:	2f 5f       	subi	r18, 0xFF	; 255
    291c:	3f 4f       	sbci	r19, 0xFF	; 255
    291e:	37 83       	std	Z+7, r19	; 0x07
    2920:	26 83       	std	Z+6, r18	; 0x06
    2922:	14 c0       	rjmp	.+40     	; 0x294c <fputc+0x6e>
    2924:	8b 01       	movw	r16, r22
    2926:	ec 01       	movw	r28, r24
    2928:	fb 01       	movw	r30, r22
    292a:	00 84       	ldd	r0, Z+8	; 0x08
    292c:	f1 85       	ldd	r31, Z+9	; 0x09
    292e:	e0 2d       	mov	r30, r0
    2930:	09 95       	icall
    2932:	89 2b       	or	r24, r25
    2934:	e1 f6       	brne	.-72     	; 0x28ee <fputc+0x10>
    2936:	d8 01       	movw	r26, r16
    2938:	16 96       	adiw	r26, 0x06	; 6
    293a:	8d 91       	ld	r24, X+
    293c:	9c 91       	ld	r25, X
    293e:	17 97       	sbiw	r26, 0x07	; 7
    2940:	01 96       	adiw	r24, 0x01	; 1
    2942:	17 96       	adiw	r26, 0x07	; 7
    2944:	9c 93       	st	X, r25
    2946:	8e 93       	st	-X, r24
    2948:	16 97       	sbiw	r26, 0x06	; 6
    294a:	ce 01       	movw	r24, r28
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	08 95       	ret

00002956 <__ultoa_invert>:
    2956:	fa 01       	movw	r30, r20
    2958:	aa 27       	eor	r26, r26
    295a:	28 30       	cpi	r18, 0x08	; 8
    295c:	51 f1       	breq	.+84     	; 0x29b2 <__ultoa_invert+0x5c>
    295e:	20 31       	cpi	r18, 0x10	; 16
    2960:	81 f1       	breq	.+96     	; 0x29c2 <__ultoa_invert+0x6c>
    2962:	e8 94       	clt
    2964:	6f 93       	push	r22
    2966:	6e 7f       	andi	r22, 0xFE	; 254
    2968:	6e 5f       	subi	r22, 0xFE	; 254
    296a:	7f 4f       	sbci	r23, 0xFF	; 255
    296c:	8f 4f       	sbci	r24, 0xFF	; 255
    296e:	9f 4f       	sbci	r25, 0xFF	; 255
    2970:	af 4f       	sbci	r26, 0xFF	; 255
    2972:	b1 e0       	ldi	r27, 0x01	; 1
    2974:	3e d0       	rcall	.+124    	; 0x29f2 <__ultoa_invert+0x9c>
    2976:	b4 e0       	ldi	r27, 0x04	; 4
    2978:	3c d0       	rcall	.+120    	; 0x29f2 <__ultoa_invert+0x9c>
    297a:	67 0f       	add	r22, r23
    297c:	78 1f       	adc	r23, r24
    297e:	89 1f       	adc	r24, r25
    2980:	9a 1f       	adc	r25, r26
    2982:	a1 1d       	adc	r26, r1
    2984:	68 0f       	add	r22, r24
    2986:	79 1f       	adc	r23, r25
    2988:	8a 1f       	adc	r24, r26
    298a:	91 1d       	adc	r25, r1
    298c:	a1 1d       	adc	r26, r1
    298e:	6a 0f       	add	r22, r26
    2990:	71 1d       	adc	r23, r1
    2992:	81 1d       	adc	r24, r1
    2994:	91 1d       	adc	r25, r1
    2996:	a1 1d       	adc	r26, r1
    2998:	20 d0       	rcall	.+64     	; 0x29da <__ultoa_invert+0x84>
    299a:	09 f4       	brne	.+2      	; 0x299e <__ultoa_invert+0x48>
    299c:	68 94       	set
    299e:	3f 91       	pop	r19
    29a0:	2a e0       	ldi	r18, 0x0A	; 10
    29a2:	26 9f       	mul	r18, r22
    29a4:	11 24       	eor	r1, r1
    29a6:	30 19       	sub	r19, r0
    29a8:	30 5d       	subi	r19, 0xD0	; 208
    29aa:	31 93       	st	Z+, r19
    29ac:	de f6       	brtc	.-74     	; 0x2964 <__ultoa_invert+0xe>
    29ae:	cf 01       	movw	r24, r30
    29b0:	08 95       	ret
    29b2:	46 2f       	mov	r20, r22
    29b4:	47 70       	andi	r20, 0x07	; 7
    29b6:	40 5d       	subi	r20, 0xD0	; 208
    29b8:	41 93       	st	Z+, r20
    29ba:	b3 e0       	ldi	r27, 0x03	; 3
    29bc:	0f d0       	rcall	.+30     	; 0x29dc <__ultoa_invert+0x86>
    29be:	c9 f7       	brne	.-14     	; 0x29b2 <__ultoa_invert+0x5c>
    29c0:	f6 cf       	rjmp	.-20     	; 0x29ae <__ultoa_invert+0x58>
    29c2:	46 2f       	mov	r20, r22
    29c4:	4f 70       	andi	r20, 0x0F	; 15
    29c6:	40 5d       	subi	r20, 0xD0	; 208
    29c8:	4a 33       	cpi	r20, 0x3A	; 58
    29ca:	18 f0       	brcs	.+6      	; 0x29d2 <__ultoa_invert+0x7c>
    29cc:	49 5d       	subi	r20, 0xD9	; 217
    29ce:	31 fd       	sbrc	r19, 1
    29d0:	40 52       	subi	r20, 0x20	; 32
    29d2:	41 93       	st	Z+, r20
    29d4:	02 d0       	rcall	.+4      	; 0x29da <__ultoa_invert+0x84>
    29d6:	a9 f7       	brne	.-22     	; 0x29c2 <__ultoa_invert+0x6c>
    29d8:	ea cf       	rjmp	.-44     	; 0x29ae <__ultoa_invert+0x58>
    29da:	b4 e0       	ldi	r27, 0x04	; 4
    29dc:	a6 95       	lsr	r26
    29de:	97 95       	ror	r25
    29e0:	87 95       	ror	r24
    29e2:	77 95       	ror	r23
    29e4:	67 95       	ror	r22
    29e6:	ba 95       	dec	r27
    29e8:	c9 f7       	brne	.-14     	; 0x29dc <__ultoa_invert+0x86>
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	61 05       	cpc	r22, r1
    29ee:	71 05       	cpc	r23, r1
    29f0:	08 95       	ret
    29f2:	9b 01       	movw	r18, r22
    29f4:	ac 01       	movw	r20, r24
    29f6:	0a 2e       	mov	r0, r26
    29f8:	06 94       	lsr	r0
    29fa:	57 95       	ror	r21
    29fc:	47 95       	ror	r20
    29fe:	37 95       	ror	r19
    2a00:	27 95       	ror	r18
    2a02:	ba 95       	dec	r27
    2a04:	c9 f7       	brne	.-14     	; 0x29f8 <__ultoa_invert+0xa2>
    2a06:	62 0f       	add	r22, r18
    2a08:	73 1f       	adc	r23, r19
    2a0a:	84 1f       	adc	r24, r20
    2a0c:	95 1f       	adc	r25, r21
    2a0e:	a0 1d       	adc	r26, r0
    2a10:	08 95       	ret

00002a12 <eeprom_read_byte>:
    2a12:	f9 99       	sbic	0x1f, 1	; 31
    2a14:	fe cf       	rjmp	.-4      	; 0x2a12 <eeprom_read_byte>
    2a16:	92 bd       	out	0x22, r25	; 34
    2a18:	81 bd       	out	0x21, r24	; 33
    2a1a:	f8 9a       	sbi	0x1f, 0	; 31
    2a1c:	99 27       	eor	r25, r25
    2a1e:	80 b5       	in	r24, 0x20	; 32
    2a20:	08 95       	ret

00002a22 <eeprom_read_word>:
    2a22:	a8 e1       	ldi	r26, 0x18	; 24
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	42 e0       	ldi	r20, 0x02	; 2
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <eeprom_read_blraw>

00002a2e <eeprom_write_byte>:
    2a2e:	26 2f       	mov	r18, r22

00002a30 <eeprom_write_r18>:
    2a30:	f9 99       	sbic	0x1f, 1	; 31
    2a32:	fe cf       	rjmp	.-4      	; 0x2a30 <eeprom_write_r18>
    2a34:	1f ba       	out	0x1f, r1	; 31
    2a36:	92 bd       	out	0x22, r25	; 34
    2a38:	81 bd       	out	0x21, r24	; 33
    2a3a:	20 bd       	out	0x20, r18	; 32
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	fa 9a       	sbi	0x1f, 2	; 31
    2a42:	f9 9a       	sbi	0x1f, 1	; 31
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	01 96       	adiw	r24, 0x01	; 1
    2a48:	08 95       	ret

00002a4a <eeprom_write_word>:
    2a4a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <eeprom_write_byte>
    2a4e:	27 2f       	mov	r18, r23
    2a50:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <eeprom_write_r18>

00002a54 <eeprom_read_block>:
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22

00002a58 <eeprom_read_blraw>:
    2a58:	fc 01       	movw	r30, r24
    2a5a:	f9 99       	sbic	0x1f, 1	; 31
    2a5c:	fe cf       	rjmp	.-4      	; 0x2a5a <eeprom_read_blraw+0x2>
    2a5e:	06 c0       	rjmp	.+12     	; 0x2a6c <eeprom_read_blraw+0x14>
    2a60:	f2 bd       	out	0x22, r31	; 34
    2a62:	e1 bd       	out	0x21, r30	; 33
    2a64:	f8 9a       	sbi	0x1f, 0	; 31
    2a66:	31 96       	adiw	r30, 0x01	; 1
    2a68:	00 b4       	in	r0, 0x20	; 32
    2a6a:	0d 92       	st	X+, r0
    2a6c:	41 50       	subi	r20, 0x01	; 1
    2a6e:	50 40       	sbci	r21, 0x00	; 0
    2a70:	b8 f7       	brcc	.-18     	; 0x2a60 <eeprom_read_blraw+0x8>
    2a72:	08 95       	ret

00002a74 <__prologue_saves__>:
    2a74:	2f 92       	push	r2
    2a76:	3f 92       	push	r3
    2a78:	4f 92       	push	r4
    2a7a:	5f 92       	push	r5
    2a7c:	6f 92       	push	r6
    2a7e:	7f 92       	push	r7
    2a80:	8f 92       	push	r8
    2a82:	9f 92       	push	r9
    2a84:	af 92       	push	r10
    2a86:	bf 92       	push	r11
    2a88:	cf 92       	push	r12
    2a8a:	df 92       	push	r13
    2a8c:	ef 92       	push	r14
    2a8e:	ff 92       	push	r15
    2a90:	0f 93       	push	r16
    2a92:	1f 93       	push	r17
    2a94:	cf 93       	push	r28
    2a96:	df 93       	push	r29
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	ca 1b       	sub	r28, r26
    2a9e:	db 0b       	sbc	r29, r27
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	09 94       	ijmp

00002aac <__epilogue_restores__>:
    2aac:	2a 88       	ldd	r2, Y+18	; 0x12
    2aae:	39 88       	ldd	r3, Y+17	; 0x11
    2ab0:	48 88       	ldd	r4, Y+16	; 0x10
    2ab2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ab4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ab6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ab8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aba:	9b 84       	ldd	r9, Y+11	; 0x0b
    2abc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2abe:	b9 84       	ldd	r11, Y+9	; 0x09
    2ac0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ac2:	df 80       	ldd	r13, Y+7	; 0x07
    2ac4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ac6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ac8:	0c 81       	ldd	r16, Y+4	; 0x04
    2aca:	1b 81       	ldd	r17, Y+3	; 0x03
    2acc:	aa 81       	ldd	r26, Y+2	; 0x02
    2ace:	b9 81       	ldd	r27, Y+1	; 0x01
    2ad0:	ce 0f       	add	r28, r30
    2ad2:	d1 1d       	adc	r29, r1
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	ed 01       	movw	r28, r26
    2ae0:	08 95       	ret

00002ae2 <__do_global_dtors>:
    2ae2:	10 e0       	ldi	r17, 0x00	; 0
    2ae4:	ca e3       	ldi	r28, 0x3A	; 58
    2ae6:	d0 e0       	ldi	r29, 0x00	; 0
    2ae8:	04 c0       	rjmp	.+8      	; 0x2af2 <__do_global_dtors+0x10>
    2aea:	fe 01       	movw	r30, r28
    2aec:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__tablejump2__>
    2af0:	21 96       	adiw	r28, 0x01	; 1
    2af2:	cb 33       	cpi	r28, 0x3B	; 59
    2af4:	d1 07       	cpc	r29, r17
    2af6:	c9 f7       	brne	.-14     	; 0x2aea <__do_global_dtors+0x8>
    2af8:	f8 94       	cli

00002afa <__stop_program>:
    2afa:	ff cf       	rjmp	.-2      	; 0x2afa <__stop_program>
