
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000276  00800100  000026ac  00002760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ac  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  00800376  00800376  000029d6  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000029d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000024  00000000  00000000  000029dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000001e  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  00002a1e  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a7c  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000638  00000000  00000000  00002ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a357  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000329d  00000000  00000000  0000d44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002f62  00000000  00000000  000106ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001030  00000000  00000000  00013650  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e01  00000000  00000000  00014680  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000045c5  00000000  00000000  00017481  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000660  00000000  00000000  0001ba46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__dtors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_14>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__vector_18>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	b8 05       	cpc	r27, r8
      6a:	29 09       	sbc	r18, r9
      6c:	87 09       	sbc	r24, r7
      6e:	a0 0e       	add	r10, r16

00000070 <__ctors_end>:
      70:	98 09       	sbc	r25, r8

00000072 <__dtors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf ef       	ldi	r28, 0xFF	; 255
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	13 e0       	ldi	r17, 0x03	; 3
      80:	a0 e0       	ldi	r26, 0x00	; 0
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	ec ea       	ldi	r30, 0xAC	; 172
      86:	f6 e2       	ldi	r31, 0x26	; 38
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a6 37       	cpi	r26, 0x76	; 118
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	24 e0       	ldi	r18, 0x04	; 4
      96:	a6 e7       	ldi	r26, 0x76	; 118
      98:	b3 e0       	ldi	r27, 0x03	; 3
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	ac 3a       	cpi	r26, 0xAC	; 172
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>

000000a4 <__do_global_ctors>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	c8 e3       	ldi	r28, 0x38	; 56
      a8:	d0 e0       	ldi	r29, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_global_ctors+0x10>
      ac:	21 97       	sbiw	r28, 0x01	; 1
      ae:	fe 01       	movw	r30, r28
      b0:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__tablejump2__>
      b4:	c4 33       	cpi	r28, 0x34	; 52
      b6:	d1 07       	cpc	r29, r17
      b8:	c9 f7       	brne	.-14     	; 0xac <__do_global_ctors+0x8>
      ba:	0e 94 35 01 	call	0x26a	; 0x26a <main>
      be:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__do_global_dtors>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <i2c_delay_T2>:
	...
nop
nop
nop
nop
nop
nop
     10a:	00 00       	nop
	ret          ; 3   "
     10c:	08 95       	ret

0000010e <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     10e:	3d 98       	cbi	0x07, 5	; 7
	cbi SCL_DDR,SCL		;release SCL
     110:	3c 98       	cbi	0x07, 4	; 7
	cbi SDA_OUT,SDA
     112:	45 98       	cbi	0x08, 5	; 8
	cbi SCL_OUT,SCL
     114:	44 98       	cbi	0x08, 4	; 8
	ret
     116:	08 95       	ret

00000118 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     118:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     11a:	d5 df       	rcall	.-86     	; 0xc6 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     11c:	1d d0       	rcall	.+58     	; 0x158 <i2c_write>
	ret
     11e:	08 95       	ret

00000120 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     120:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     122:	d1 df       	rcall	.-94     	; 0xc6 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     124:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     126:	cf df       	rcall	.-98     	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     128:	3c 98       	cbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     12a:	cd df       	rcall	.-102    	; 0xc6 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     12c:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay	T/2
     12e:	cb df       	rcall	.-106    	; 0xc6 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     130:	13 d0       	rcall	.+38     	; 0x158 <i2c_write>
	ret
     132:	08 95       	ret

00000134 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     134:	08 2e       	mov	r0, r24

00000136 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     136:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     138:	c6 df       	rcall	.-116    	; 0xc6 <i2c_delay_T2>
	mov	r24,__tmp_reg__
     13a:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     13c:	0d d0       	rcall	.+26     	; 0x158 <i2c_write>
	tst	r24		;if device not busy -> done
     13e:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     140:	11 f0       	breq	.+4      	; 0x146 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     142:	02 d0       	rcall	.+4      	; 0x148 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     144:	f8 cf       	rjmp	.-16     	; 0x136 <i2c_start_wait1>

00000146 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     146:	08 95       	ret

00000148 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     148:	3c 9a       	sbi	0x07, 4	; 7
	sbi	SDA_DDR,SDA	;force SDA low
     14a:	3d 9a       	sbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     14c:	bc df       	rcall	.-136    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     14e:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     150:	ba df       	rcall	.-140    	; 0xc6 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     152:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     154:	b8 df       	rcall	.-144    	; 0xc6 <i2c_delay_T2>
	ret
     156:	08 95       	ret

00000158 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     158:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     15a:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     15c:	01 c0       	rjmp	.+2      	; 0x160 <i2c_write_first>

0000015e <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     15e:	88 0f       	add	r24, r24

00000160 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     160:	59 f0       	breq	.+22     	; 0x178 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     162:	3c 9a       	sbi	0x07, 4	; 7
	brcc	i2c_write_low
     164:	18 f4       	brcc	.+6      	; 0x16c <i2c_write_low>
	nop
     166:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     168:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16a:	02 c0       	rjmp	.+4      	; 0x170 <i2c_write_high>

0000016c <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     16c:	3d 9a       	sbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16e:	00 c0       	rjmp	.+0      	; 0x170 <i2c_write_high>

00000170 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     170:	aa df       	rcall	.-172    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     172:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     174:	a8 df       	rcall	.-176    	; 0xc6 <i2c_delay_T2>
	rjmp	i2c_write_bit
     176:	f3 cf       	rjmp	.-26     	; 0x15e <i2c_write_bit>

00000178 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     178:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA
     17a:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     17c:	a4 df       	rcall	.-184    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     17e:	3c 98       	cbi	0x07, 4	; 7

00000180 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     180:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_ack_wait
     182:	fe cf       	rjmp	.-4      	; 0x180 <i2c_ack_wait>
	
	clr	r24		;return 0
     184:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     186:	35 99       	sbic	0x06, 5	; 6
	ldi	r24,1
     188:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     18a:	9d df       	rcall	.-198    	; 0xc6 <i2c_delay_T2>
	clr	r25
     18c:	99 27       	eor	r25, r25
	ret
     18e:	08 95       	ret

00000190 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     190:	88 27       	eor	r24, r24
	rjmp	i2c_read
     192:	01 c0       	rjmp	.+2      	; 0x196 <i2c_read>

00000194 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     194:	81 e0       	ldi	r24, 0x01	; 1

00000196 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     196:	71 e0       	ldi	r23, 0x01	; 1

00000198 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     198:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     19a:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     19c:	94 df       	rcall	.-216    	; 0xc6 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     19e:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     1a0:	92 df       	rcall	.-220    	; 0xc6 <i2c_delay_T2>

000001a2 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     1a2:	34 9b       	sbis	0x06, 4	; 6
    rjmp	i2c_read_stretch
     1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <i2c_read_stretch>
    	
	clc			;clear carry flag
     1a6:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     1a8:	35 99       	sbic	0x06, 5	; 6
	sec			;  set carry flag
     1aa:	08 94       	sec
	
	rol	r23		;store bit
     1ac:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     1ae:	a0 f7       	brcc	.-24     	; 0x198 <i2c_read_bit>

000001b0 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     1b0:	3c 9a       	sbi	0x07, 4	; 7
	cpi	r24,1
     1b2:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     1b4:	11 f0       	breq	.+4      	; 0x1ba <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     1b6:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_put_ack_high
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <i2c_put_ack_high>

000001ba <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     1ba:	3d 9a       	sbi	0x07, 5	; 7

000001bc <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     1bc:	84 df       	rcall	.-248    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     1be:	3c 98       	cbi	0x07, 4	; 7

000001c0 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     1c0:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_put_ack_wait
     1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     1c4:	80 df       	rcall	.-256    	; 0xc6 <i2c_delay_T2>
	mov	r24,r23
     1c6:	87 2f       	mov	r24, r23
	clr	r25
     1c8:	99 27       	eor	r25, r25
	ret
     1ca:	08 95       	ret

000001cc <_ZN22CommunicationException8ToStringEv>:

CommunicationException::~CommunicationException()
{
	if(message!=NULL) delete message;
}
const char* CommunicationException::ToString(){
     1cc:	ef 92       	push	r14
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	ec 01       	movw	r28, r24

	if(message==NULL){
     1da:	8c 81       	ldd	r24, Y+4	; 0x04
     1dc:	9d 81       	ldd	r25, Y+5	; 0x05
     1de:	89 2b       	or	r24, r25
     1e0:	41 f5       	brne	.+80     	; 0x232 <_ZN22CommunicationException8ToStringEv+0x66>
		size_t totalLength = strlen(deviceName)+27;
     1e2:	fa 80       	ldd	r15, Y+2	; 0x02
     1e4:	eb 80       	ldd	r14, Y+3	; 0x03
     1e6:	ef 2d       	mov	r30, r15
     1e8:	fe 2d       	mov	r31, r14
     1ea:	df 01       	movw	r26, r30
     1ec:	0d 90       	ld	r0, X+
     1ee:	00 20       	and	r0, r0
     1f0:	e9 f7       	brne	.-6      	; 0x1ec <_ZN22CommunicationException8ToStringEv+0x20>
     1f2:	8d 01       	movw	r16, r26
     1f4:	0e 1b       	sub	r16, r30
     1f6:	1f 0b       	sbc	r17, r31
     1f8:	06 5e       	subi	r16, 0xE6	; 230
     1fa:	1f 4f       	sbci	r17, 0xFF	; 255
		message=(char*)malloc(sizeof(char)*totalLength);
     1fc:	c8 01       	movw	r24, r16
     1fe:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <malloc>
     202:	9d 83       	std	Y+5, r25	; 0x05
     204:	8c 83       	std	Y+4, r24	; 0x04
		if(message!=NULL){
     206:	00 97       	sbiw	r24, 0x00	; 0
     208:	a1 f0       	breq	.+40     	; 0x232 <_ZN22CommunicationException8ToStringEv+0x66>
			snprintf(message,totalLength, "Communication with %s failed", deviceName);
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	26 e0       	ldi	r18, 0x06	; 6
     210:	31 e0       	ldi	r19, 0x01	; 1
     212:	3f 93       	push	r19
     214:	2f 93       	push	r18
     216:	1f 93       	push	r17
     218:	0f 93       	push	r16
     21a:	9f 93       	push	r25
     21c:	8f 93       	push	r24
     21e:	0e 94 20 10 	call	0x2040	; 0x2040 <snprintf>
     222:	8d b7       	in	r24, 0x3d	; 61
     224:	9e b7       	in	r25, 0x3e	; 62
     226:	08 96       	adiw	r24, 0x08	; 8
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	9e bf       	out	0x3e, r25	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	8d bf       	out	0x3d, r24	; 61
		}
	}
	return message;
     232:	8c 81       	ldd	r24, Y+4	; 0x04
     234:	9d 81       	ldd	r25, Y+5	; 0x05
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	08 95       	ret

00000244 <_ZN22CommunicationExceptionC1EPKc>:
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "CommunicationException.h"

CommunicationException::CommunicationException(const char* deviceName):deviceName(deviceName)
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	ec 01       	movw	r28, r24
     24e:	8b 01       	movw	r16, r22
     250:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN9ExceptionC1Ev>
     254:	87 e2       	ldi	r24, 0x27	; 39
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	99 83       	std	Y+1, r25	; 0x01
     25a:	88 83       	st	Y, r24
     25c:	1b 83       	std	Y+3, r17	; 0x03
     25e:	0a 83       	std	Y+2, r16	; 0x02
{
}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	08 95       	ret

0000026a <main>:
#include "i2cmaster.h"
#include "TC654.h"
#include "Fans.h"
using namespace std;
int main(void)
{
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	e9 97       	sbiw	r28, 0x39	; 57
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	a8 95       	wdr
     284:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     288:	88 61       	ori	r24, 0x18	; 24
     28a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     28e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     292:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	i2c_init();
     294:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_init>
	Outputs::Initialize();
     298:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN7Outputs10InitializeEv>
	//Stopwatch stopWatch = Stopwatch();
	UART& uart = UART::GetInstance();
     29c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <_ZN4UART11GetInstanceEv>
     2a0:	3c 01       	movw	r6, r24
	Settings& settings=Settings::GetInstance();
     2a2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN8Settings11GetInstanceEv>
     2a6:	8c 01       	movw	r16, r24
	TC654 tc654 = TC654(0x01, 0x01);
     2a8:	41 e0       	ldi	r20, 0x01	; 1
     2aa:	61 e0       	ldi	r22, 0x01	; 1
     2ac:	ce 01       	movw	r24, r28
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5TC654C1Ecc>
	IGetFanInfo* iGetFanInfos[]={tc654.GetIGetFan1Info(), tc654.GetIGetFan2Info()};
     2b4:	ce 01       	movw	r24, r28
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5TC65415GetIGetFan1InfoEv>
     2bc:	9b ab       	std	Y+51, r25	; 0x33
     2be:	8a ab       	std	Y+50, r24	; 0x32
     2c0:	ce 01       	movw	r24, r28
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	0e 94 35 08 	call	0x106a	; 0x106a <_ZN5TC65415GetIGetFan2InfoEv>
     2c8:	9d ab       	std	Y+53, r25	; 0x35
     2ca:	8c ab       	std	Y+52, r24	; 0x34
	Fans& fans = Fans::GetInstance();
     2cc:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN4Fans11GetInstanceEv>
	fans.SetInterfaces(iGetFanInfos, 0x02, &settings);
     2d0:	98 01       	movw	r18, r16
     2d2:	28 5f       	subi	r18, 0xF8	; 248
     2d4:	3f 4f       	sbci	r19, 0xFF	; 255
     2d6:	42 e0       	ldi	r20, 0x02	; 2
     2d8:	be 01       	movw	r22, r28
     2da:	6e 5c       	subi	r22, 0xCE	; 206
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>
	LM75* lm75_7= new LM75(0x07, "lm75_7");
     2e2:	8c e0       	ldi	r24, 0x0C	; 12
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     2ea:	4c 01       	movw	r8, r24
     2ec:	49 e2       	ldi	r20, 0x29	; 41
     2ee:	51 e0       	ldi	r21, 0x01	; 1
     2f0:	67 e0       	ldi	r22, 0x07	; 7
     2f2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN4LM75C1EcPc>
	LM75* lm75_6= new LM75(0x06, "lm75_6");
     2f6:	8c e0       	ldi	r24, 0x0C	; 12
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     2fe:	5c 01       	movw	r10, r24
     300:	40 e3       	ldi	r20, 0x30	; 48
     302:	51 e0       	ldi	r21, 0x01	; 1
     304:	66 e0       	ldi	r22, 0x06	; 6
     306:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN4LM75C1EcPc>
	IGetTemperatureInfo* lm75s[] = {lm75_7, lm75_6};
     30a:	9f aa       	std	Y+55, r9	; 0x37
     30c:	8e aa       	std	Y+54, r8	; 0x36
     30e:	b9 ae       	std	Y+57, r11	; 0x39
     310:	a8 ae       	std	Y+56, r10	; 0x38
	Temperatures& temperatures=Temperatures::GetInstance();
     312:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN12Temperatures11GetInstanceEv>
     316:	5c 01       	movw	r10, r24
	temperatures.SetInterfaces(lm75s, 0x2);
     318:	42 e0       	ldi	r20, 0x02	; 2
     31a:	be 01       	movw	r22, r28
     31c:	6a 5c       	subi	r22, 0xCA	; 202
     31e:	7f 4f       	sbci	r23, 0xFF	; 255
     320:	0e 94 24 09 	call	0x1248	; 0x1248 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>
	Leds::Main::SetGreen();		
     324:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN4Leds4Main8SetGreenEv>
	Endpoint* endpoint = new Endpoint(&uart, &uart, &settings, &settings, &settings, &settings, &temperatures);
     328:	80 e1       	ldi	r24, 0x10	; 16
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     330:	4c 01       	movw	r8, r24
     332:	68 01       	movw	r12, r16
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	c8 0e       	add	r12, r24
     338:	d1 1c       	adc	r13, r1
     33a:	78 01       	movw	r14, r16
     33c:	86 e0       	ldi	r24, 0x06	; 6
     33e:	e8 0e       	add	r14, r24
     340:	f1 1c       	adc	r15, r1
     342:	98 01       	movw	r18, r16
     344:	2e 5f       	subi	r18, 0xFE	; 254
     346:	3f 4f       	sbci	r19, 0xFF	; 255
     348:	b3 01       	movw	r22, r6
     34a:	6e 5f       	subi	r22, 0xFE	; 254
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	a3 01       	movw	r20, r6
     350:	c4 01       	movw	r24, r8
     352:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperatures>
	while(1)
	{
	    endpoint->Run();
     356:	c4 01       	movw	r24, r8
     358:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN8Endpoint3RunEv>
     35c:	fc cf       	rjmp	.-8      	; 0x356 <main+0xec>

0000035e <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperatures>:
#include "Leds.h"
#include "Endpoint.h"
#include "UART.h"
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures){
     35e:	af 92       	push	r10
     360:	bf 92       	push	r11
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	fc 01       	movw	r30, r24
     370:	71 83       	std	Z+1, r23	; 0x01
     372:	60 83       	st	Z, r22
     374:	53 83       	std	Z+3, r21	; 0x03
     376:	42 83       	std	Z+2, r20	; 0x02
     378:	35 83       	std	Z+5, r19	; 0x05
     37a:	24 83       	std	Z+4, r18	; 0x04
     37c:	17 83       	std	Z+7, r17	; 0x07
     37e:	06 83       	std	Z+6, r16	; 0x06
     380:	f1 86       	std	Z+9, r15	; 0x09
     382:	e0 86       	std	Z+8, r14	; 0x08
     384:	d3 86       	std	Z+11, r13	; 0x0b
     386:	c2 86       	std	Z+10, r12	; 0x0a
     388:	b5 86       	std	Z+13, r11	; 0x0d
     38a:	a4 86       	std	Z+12, r10	; 0x0c
	
}
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	bf 90       	pop	r11
     39a:	af 90       	pop	r10
     39c:	08 95       	ret

0000039e <_ZN8Endpoint8GetPowerEv>:
		}
		delete messages;
	}
}

void Endpoint::GetPower(){
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	6e 97       	sbiw	r28, 0x1e	; 30
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	7c 01       	movw	r14, r24
	uint16_t power = iGetPower->GetPower();
     3bc:	dc 01       	movw	r26, r24
     3be:	1a 96       	adiw	r26, 0x0a	; 10
     3c0:	8d 91       	ld	r24, X+
     3c2:	9c 91       	ld	r25, X
     3c4:	1b 97       	sbiw	r26, 0x0b	; 11
     3c6:	dc 01       	movw	r26, r24
     3c8:	ed 91       	ld	r30, X+
     3ca:	fc 91       	ld	r31, X
     3cc:	01 90       	ld	r0, Z+
     3ce:	f0 81       	ld	r31, Z
     3d0:	e0 2d       	mov	r30, r0
     3d2:	09 95       	icall
	char buf[30];
	snprintf(buf,30,"{\"type\":\"power\",\"power\":%04d}",power);
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	87 e3       	ldi	r24, 0x37	; 55
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	1f 92       	push	r1
     3e2:	8e e1       	ldi	r24, 0x1E	; 30
     3e4:	8f 93       	push	r24
     3e6:	8e 01       	movw	r16, r28
     3e8:	0f 5f       	subi	r16, 0xFF	; 255
     3ea:	1f 4f       	sbci	r17, 0xFF	; 255
     3ec:	1f 93       	push	r17
     3ee:	0f 93       	push	r16
     3f0:	0e 94 20 10 	call	0x2040	; 0x2040 <snprintf>
	iSendMessage->SendMessage(buf, 29);
     3f4:	f7 01       	movw	r30, r14
     3f6:	82 81       	ldd	r24, Z+2	; 0x02
     3f8:	93 81       	ldd	r25, Z+3	; 0x03
     3fa:	dc 01       	movw	r26, r24
     3fc:	ed 91       	ld	r30, X+
     3fe:	fc 91       	ld	r31, X
     400:	01 90       	ld	r0, Z+
     402:	f0 81       	ld	r31, Z
     404:	e0 2d       	mov	r30, r0
     406:	4d e1       	ldi	r20, 0x1D	; 29
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	b8 01       	movw	r22, r16
     40c:	09 95       	icall
}
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	6e 96       	adiw	r28, 0x1e	; 30
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <_ZN8Endpoint17GetTemperatureMaxEv>:
void Endpoint::GetTemperatureMax(){
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	e1 97       	sbiw	r28, 0x31	; 49
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	7c 01       	movw	r14, r24
	uint8_t temperatureMax = iGetTemperatureMax->GetTemperatureMax();
     450:	dc 01       	movw	r26, r24
     452:	16 96       	adiw	r26, 0x06	; 6
     454:	8d 91       	ld	r24, X+
     456:	9c 91       	ld	r25, X
     458:	17 97       	sbiw	r26, 0x07	; 7
     45a:	dc 01       	movw	r26, r24
     45c:	ed 91       	ld	r30, X+
     45e:	fc 91       	ld	r31, X
     460:	01 90       	ld	r0, Z+
     462:	f0 81       	ld	r31, Z
     464:	e0 2d       	mov	r30, r0
     466:	09 95       	icall
	char buf[49];
	snprintf(buf,49,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}",temperatureMax);
     468:	1f 92       	push	r1
     46a:	8f 93       	push	r24
     46c:	85 e5       	ldi	r24, 0x55	; 85
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	9f 93       	push	r25
     472:	8f 93       	push	r24
     474:	1f 92       	push	r1
     476:	81 e3       	ldi	r24, 0x31	; 49
     478:	8f 93       	push	r24
     47a:	8e 01       	movw	r16, r28
     47c:	0f 5f       	subi	r16, 0xFF	; 255
     47e:	1f 4f       	sbci	r17, 0xFF	; 255
     480:	1f 93       	push	r17
     482:	0f 93       	push	r16
     484:	0e 94 20 10 	call	0x2040	; 0x2040 <snprintf>
iSendMessage->SendMessage(buf, 48);}
     488:	f7 01       	movw	r30, r14
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	93 81       	ldd	r25, Z+3	; 0x03
     48e:	dc 01       	movw	r26, r24
     490:	ed 91       	ld	r30, X+
     492:	fc 91       	ld	r31, X
     494:	01 90       	ld	r0, Z+
     496:	f0 81       	ld	r31, Z
     498:	e0 2d       	mov	r30, r0
     49a:	40 e3       	ldi	r20, 0x30	; 48
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	b8 01       	movw	r22, r16
     4a0:	09 95       	icall
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	e1 96       	adiw	r28, 0x31	; 49
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	08 95       	ret

000004c6 <_ZN8Endpoint17GetMaxTemperatureEv>:

void Endpoint::GetMaxTemperature(){
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	ae 97       	sbiw	r28, 0x2e	; 46
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	8c 01       	movw	r16, r24
	bool successful=true;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	89 83       	std	Y+1, r24	; 0x01
	uint8_t temperature = iTemperatures->GetMaxTemperature(successful);
     4e8:	d8 01       	movw	r26, r16
     4ea:	1c 96       	adiw	r26, 0x0c	; 12
     4ec:	8d 91       	ld	r24, X+
     4ee:	9c 91       	ld	r25, X
     4f0:	1d 97       	sbiw	r26, 0x0d	; 13
     4f2:	dc 01       	movw	r26, r24
     4f4:	ed 91       	ld	r30, X+
     4f6:	fc 91       	ld	r31, X
     4f8:	01 90       	ld	r0, Z+
     4fa:	f0 81       	ld	r31, Z
     4fc:	e0 2d       	mov	r30, r0
     4fe:	be 01       	movw	r22, r28
     500:	6f 5f       	subi	r22, 0xFF	; 255
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	09 95       	icall
     506:	f8 2e       	mov	r15, r24
	if(successful){
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	88 23       	and	r24, r24
     50c:	29 f1       	breq	.+74     	; 0x558 <_ZN8Endpoint17GetMaxTemperatureEv+0x92>
		Leds::Main::SetRed();
     50e:	0e 94 34 04 	call	0x868	; 0x868 <_ZN4Leds4Main6SetRedEv>
		char buf[45];
		snprintf(buf,45,"{\"type\":\"max_temperature\",\"temperature\":%03d}",temperature);
     512:	1f 92       	push	r1
     514:	ff 92       	push	r15
     516:	87 e8       	ldi	r24, 0x87	; 135
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	1f 92       	push	r1
     520:	8d e2       	ldi	r24, 0x2D	; 45
     522:	8f 93       	push	r24
     524:	7e 01       	movw	r14, r28
     526:	b2 e0       	ldi	r27, 0x02	; 2
     528:	eb 0e       	add	r14, r27
     52a:	f1 1c       	adc	r15, r1
     52c:	ff 92       	push	r15
     52e:	ef 92       	push	r14
     530:	0e 94 20 10 	call	0x2040	; 0x2040 <snprintf>
     534:	f8 01       	movw	r30, r16
     536:	82 81       	ldd	r24, Z+2	; 0x02
     538:	93 81       	ldd	r25, Z+3	; 0x03
     53a:	dc 01       	movw	r26, r24
     53c:	ed 91       	ld	r30, X+
     53e:	fc 91       	ld	r31, X
     540:	01 90       	ld	r0, Z+
     542:	f0 81       	ld	r31, Z
     544:	e0 2d       	mov	r30, r0
     546:	4c e2       	ldi	r20, 0x2C	; 44
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	b7 01       	movw	r22, r14
     54c:	09 95       	icall
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	ae 96       	adiw	r28, 0x2e	; 46
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	08 95       	ret

00000572 <_ZN8Endpoint3RunEv>:
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures){
	
}
void Endpoint::Run(){
     572:	8f 92       	push	r8
     574:	9f 92       	push	r9
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	c0 5c       	subi	r28, 0xC0	; 192
     590:	d1 40       	sbci	r29, 0x01	; 1
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	6c 01       	movw	r12, r24
	Messages* messages = iGetMessages->GetMessages();
     59e:	dc 01       	movw	r26, r24
     5a0:	8d 91       	ld	r24, X+
     5a2:	9c 91       	ld	r25, X
     5a4:	dc 01       	movw	r26, r24
     5a6:	ed 91       	ld	r30, X+
     5a8:	fc 91       	ld	r31, X
     5aa:	01 90       	ld	r0, Z+
     5ac:	f0 81       	ld	r31, Z
     5ae:	e0 2d       	mov	r30, r0
     5b0:	09 95       	icall
     5b2:	7c 01       	movw	r14, r24
	if(messages!=NULL){
     5b4:	00 97       	sbiw	r24, 0x00	; 0
     5b6:	09 f4       	brne	.+2      	; 0x5ba <_ZN8Endpoint3RunEv+0x48>
     5b8:	e2 c0       	rjmp	.+452    	; 0x77e <_ZN8Endpoint3RunEv+0x20c>
		if(messages->length>0)
     5ba:	fc 01       	movw	r30, r24
     5bc:	82 81       	ldd	r24, Z+2	; 0x02
     5be:	93 81       	ldd	r25, Z+3	; 0x03
     5c0:	18 16       	cp	r1, r24
     5c2:	19 06       	cpc	r1, r25
     5c4:	0c f0       	brlt	.+2      	; 0x5c8 <_ZN8Endpoint3RunEv+0x56>
     5c6:	d5 c0       	rjmp	.+426    	; 0x772 <_ZN8Endpoint3RunEv+0x200>
		{
			Leds::Main::SetGreen();
     5c8:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN4Leds4Main8SetGreenEv>
			for(int i=0; i<messages->length; i++){
     5cc:	d7 01       	movw	r26, r14
     5ce:	12 96       	adiw	r26, 0x02	; 2
     5d0:	8d 91       	ld	r24, X+
     5d2:	9c 91       	ld	r25, X
     5d4:	13 97       	sbiw	r26, 0x03	; 3
     5d6:	18 16       	cp	r1, r24
     5d8:	19 06       	cpc	r1, r25
     5da:	0c f0       	brlt	.+2      	; 0x5de <_ZN8Endpoint3RunEv+0x6c>
     5dc:	ca c0       	rjmp	.+404    	; 0x772 <_ZN8Endpoint3RunEv+0x200>
     5de:	00 e0       	ldi	r16, 0x00	; 0
     5e0:	10 e0       	ldi	r17, 0x00	; 0
				Message* message = messages->messages[i];
     5e2:	d7 01       	movw	r26, r14
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	c8 01       	movw	r24, r16
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	e8 0f       	add	r30, r24
     5f0:	f9 1f       	adc	r31, r25
     5f2:	01 90       	ld	r0, Z+
     5f4:	f0 81       	ld	r31, Z
     5f6:	e0 2d       	mov	r30, r0
				json_t pool[64];
				json_t const* root = json_create( (char*)message->buffer, pool, message->length );
     5f8:	42 81       	ldd	r20, Z+2	; 0x02
     5fa:	53 81       	ldd	r21, Z+3	; 0x03
     5fc:	be 01       	movw	r22, r28
     5fe:	6f 5f       	subi	r22, 0xFF	; 255
     600:	7f 4f       	sbci	r23, 0xFF	; 255
     602:	80 81       	ld	r24, Z
     604:	91 81       	ldd	r25, Z+1	; 0x01
     606:	0e 94 c6 0a 	call	0x158c	; 0x158c <json_create>
     60a:	5c 01       	movw	r10, r24
				json_t const* jObjectType = json_getProperty( root, "type" );
     60c:	65 eb       	ldi	r22, 0xB5	; 181
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	0e 94 a1 0a 	call	0x1542	; 0x1542 <json_getProperty>
				if ( jObjectType && JSON_TEXT == json_getType(  jObjectType ) ) {
     614:	00 97       	sbiw	r24, 0x00	; 0
     616:	09 f4       	brne	.+2      	; 0x61a <_ZN8Endpoint3RunEv+0xa8>
     618:	a1 c0       	rjmp	.+322    	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
     61a:	fc 01       	movw	r30, r24
     61c:	26 81       	ldd	r18, Z+6	; 0x06
     61e:	22 30       	cpi	r18, 0x02	; 2
     620:	09 f0       	breq	.+2      	; 0x624 <_ZN8Endpoint3RunEv+0xb2>
     622:	9c c0       	rjmp	.+312    	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
/** Get the value of a json property.
  * The type of property cannot be JSON_OBJ or JSON_ARRAY.
  * @param json A valid handler of a json property.
  * @return Pointer to null-terminated string with the value. */
static inline char const* json_getValue( json_t const* property ) {
    return property->u.value;
     624:	84 80       	ldd	r8, Z+4	; 0x04
     626:	95 80       	ldd	r9, Z+5	; 0x05
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
     628:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <_ZN4UART11GetInstanceEv>
     62c:	f4 01       	movw	r30, r8
     62e:	01 90       	ld	r0, Z+
     630:	00 20       	and	r0, r0
     632:	e9 f7       	brne	.-6      	; 0x62e <_ZN8Endpoint3RunEv+0xbc>
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	af 01       	movw	r20, r30
     638:	48 19       	sub	r20, r8
     63a:	59 09       	sbc	r21, r9
     63c:	dc 01       	movw	r26, r24
     63e:	ed 91       	ld	r30, X+
     640:	fc 91       	ld	r31, X
     642:	01 90       	ld	r0, Z+
     644:	f0 81       	ld	r31, Z
     646:	e0 2d       	mov	r30, r0
     648:	b4 01       	movw	r22, r8
     64a:	09 95       	icall
					if(strcmp(type, "system_check")==0){
     64c:	6a eb       	ldi	r22, 0xBA	; 186
     64e:	71 e0       	ldi	r23, 0x01	; 1
     650:	c4 01       	movw	r24, r8
     652:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
     656:	89 2b       	or	r24, r25
     658:	59 f4       	brne	.+22     	; 0x670 <_ZN8Endpoint3RunEv+0xfe>
						iSystemCheck->Check();
     65a:	f6 01       	movw	r30, r12
     65c:	86 85       	ldd	r24, Z+14	; 0x0e
     65e:	97 85       	ldd	r25, Z+15	; 0x0f
     660:	dc 01       	movw	r26, r24
     662:	ed 91       	ld	r30, X+
     664:	fc 91       	ld	r31, X
     666:	01 90       	ld	r0, Z+
     668:	f0 81       	ld	r31, Z
     66a:	e0 2d       	mov	r30, r0
     66c:	09 95       	icall
     66e:	76 c0       	rjmp	.+236    	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
						}else{
						if(strcmp(type,"run")==0){
     670:	67 ec       	ldi	r22, 0xC7	; 199
     672:	71 e0       	ldi	r23, 0x01	; 1
     674:	c4 01       	movw	r24, r8
     676:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
     67a:	89 2b       	or	r24, r25
     67c:	09 f4       	brne	.+2      	; 0x680 <_ZN8Endpoint3RunEv+0x10e>
     67e:	6e c0       	rjmp	.+220    	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
							
							}else{
							if(strcmp(type,"set_temperature_max")==0){
     680:	6b ec       	ldi	r22, 0xCB	; 203
     682:	71 e0       	ldi	r23, 0x01	; 1
     684:	c4 01       	movw	r24, r8
     686:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
     68a:	89 2b       	or	r24, r25
     68c:	f1 f4       	brne	.+60     	; 0x6ca <_ZN8Endpoint3RunEv+0x158>
								json_t const* jObjectTemperatureMax = json_getProperty( root, "temperature_max" );
     68e:	63 ee       	ldi	r22, 0xE3	; 227
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	c5 01       	movw	r24, r10
     694:	0e 94 a1 0a 	call	0x1542	; 0x1542 <json_getProperty>
								if ( jObjectTemperatureMax!=NULL && JSON_INTEGER == json_getType(  jObjectTemperatureMax ) ) {
     698:	00 97       	sbiw	r24, 0x00	; 0
     69a:	09 f4       	brne	.+2      	; 0x69e <_ZN8Endpoint3RunEv+0x12c>
     69c:	5f c0       	rjmp	.+190    	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
     69e:	fc 01       	movw	r30, r24
     6a0:	26 81       	ldd	r18, Z+6	; 0x06
     6a2:	24 30       	cpi	r18, 0x04	; 4
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <_ZN8Endpoint3RunEv+0x136>
     6a6:	5a c0       	rjmp	.+180    	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
    return (int64_t)atol( property->u.value );
     6a8:	84 81       	ldd	r24, Z+4	; 0x04
     6aa:	95 81       	ldd	r25, Z+5	; 0x05
     6ac:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <atol>
									int temperatureMax = json_getInteger(jObjectTemperatureMax);
									iSetTemperatureMax->SetTemperatureMax(temperatureMax);
     6b0:	d6 01       	movw	r26, r12
     6b2:	14 96       	adiw	r26, 0x04	; 4
     6b4:	8d 91       	ld	r24, X+
     6b6:	9c 91       	ld	r25, X
     6b8:	15 97       	sbiw	r26, 0x05	; 5
     6ba:	dc 01       	movw	r26, r24
     6bc:	ed 91       	ld	r30, X+
     6be:	fc 91       	ld	r31, X
     6c0:	01 90       	ld	r0, Z+
     6c2:	f0 81       	ld	r31, Z
     6c4:	e0 2d       	mov	r30, r0
     6c6:	09 95       	icall
     6c8:	49 c0       	rjmp	.+146    	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
								}
								}else{
								if(strcmp(type,"get_temperature_max")==0){
     6ca:	6f ed       	ldi	r22, 0xDF	; 223
     6cc:	71 e0       	ldi	r23, 0x01	; 1
     6ce:	c4 01       	movw	r24, r8
     6d0:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
     6d4:	89 2b       	or	r24, r25
     6d6:	21 f4       	brne	.+8      	; 0x6e0 <_ZN8Endpoint3RunEv+0x16e>
									GetTemperatureMax();
     6d8:	c6 01       	movw	r24, r12
     6da:	0e 94 19 02 	call	0x432	; 0x432 <_ZN8Endpoint17GetTemperatureMaxEv>
     6de:	3e c0       	rjmp	.+124    	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
									}else{
									if(strcmp(type,"set_power"  )==0){
     6e0:	63 ef       	ldi	r22, 0xF3	; 243
     6e2:	71 e0       	ldi	r23, 0x01	; 1
     6e4:	c4 01       	movw	r24, r8
     6e6:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
     6ea:	89 2b       	or	r24, r25
     6ec:	d9 f4       	brne	.+54     	; 0x724 <_ZN8Endpoint3RunEv+0x1b2>
										json_t const* jObjectPower = json_getProperty( root, "power" );
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	72 e0       	ldi	r23, 0x02	; 2
     6f2:	c5 01       	movw	r24, r10
     6f4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <json_getProperty>
										if ( jObjectPower && JSON_INTEGER == json_getType(  jObjectPower ) ) {
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	81 f1       	breq	.+96     	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
     6fc:	fc 01       	movw	r30, r24
     6fe:	26 81       	ldd	r18, Z+6	; 0x06
     700:	24 30       	cpi	r18, 0x04	; 4
     702:	61 f5       	brne	.+88     	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
     704:	84 81       	ldd	r24, Z+4	; 0x04
     706:	95 81       	ldd	r25, Z+5	; 0x05
     708:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <atol>
											int Power = json_getInteger(jObjectPower);
											iSetPower->SetPower(Power);
     70c:	f6 01       	movw	r30, r12
     70e:	a0 85       	ldd	r26, Z+8	; 0x08
     710:	b1 85       	ldd	r27, Z+9	; 0x09
     712:	ed 91       	ld	r30, X+
     714:	fc 91       	ld	r31, X
     716:	11 97       	sbiw	r26, 0x01	; 1
     718:	01 90       	ld	r0, Z+
     71a:	f0 81       	ld	r31, Z
     71c:	e0 2d       	mov	r30, r0
     71e:	cd 01       	movw	r24, r26
     720:	09 95       	icall
     722:	1c c0       	rjmp	.+56     	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
										}
										}else{
										if(strcmp(type,"get_power")==0){
     724:	6d ef       	ldi	r22, 0xFD	; 253
     726:	71 e0       	ldi	r23, 0x01	; 1
     728:	c4 01       	movw	r24, r8
     72a:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
     72e:	89 2b       	or	r24, r25
     730:	21 f4       	brne	.+8      	; 0x73a <_ZN8Endpoint3RunEv+0x1c8>
											GetPower();
     732:	c6 01       	movw	r24, r12
     734:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN8Endpoint8GetPowerEv>
     738:	11 c0       	rjmp	.+34     	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
											}else{
											if(strcmp(type,"set_info_rate")==0){
     73a:	67 e0       	ldi	r22, 0x07	; 7
     73c:	72 e0       	ldi	r23, 0x02	; 2
     73e:	c4 01       	movw	r24, r8
     740:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
     744:	89 2b       	or	r24, r25
     746:	51 f0       	breq	.+20     	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>

												}else{
												if(strcmp(type, "get_max_temperature")==0 ){
     748:	65 e1       	ldi	r22, 0x15	; 21
     74a:	72 e0       	ldi	r23, 0x02	; 2
     74c:	c4 01       	movw	r24, r8
     74e:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
     752:	89 2b       	or	r24, r25
     754:	19 f4       	brne	.+6      	; 0x75c <_ZN8Endpoint3RunEv+0x1ea>
													GetMaxTemperature();
     756:	c6 01       	movw	r24, r12
     758:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_ZN8Endpoint17GetMaxTemperatureEv>
	Messages* messages = iGetMessages->GetMessages();
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetGreen();
			for(int i=0; i<messages->length; i++){
     75c:	0f 5f       	subi	r16, 0xFF	; 255
     75e:	1f 4f       	sbci	r17, 0xFF	; 255
     760:	d7 01       	movw	r26, r14
     762:	12 96       	adiw	r26, 0x02	; 2
     764:	8d 91       	ld	r24, X+
     766:	9c 91       	ld	r25, X
     768:	13 97       	sbiw	r26, 0x03	; 3
     76a:	08 17       	cp	r16, r24
     76c:	19 07       	cpc	r17, r25
     76e:	0c f4       	brge	.+2      	; 0x772 <_ZN8Endpoint3RunEv+0x200>
     770:	38 cf       	rjmp	.-400    	; 0x5e2 <_ZN8Endpoint3RunEv+0x70>
						}
					}
				}
			}
		}
		delete messages;
     772:	c7 01       	movw	r24, r14
     774:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN8MessagesD1Ev>
     778:	c7 01       	movw	r24, r14
     77a:	0e 94 36 09 	call	0x126c	; 0x126c <_ZdlPv>
	}
}
     77e:	c0 54       	subi	r28, 0x40	; 64
     780:	de 4f       	sbci	r29, 0xFE	; 254
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	08 95       	ret

000007a6 <_ZN9Exception8ToStringEv>:
{
} //~Fans

const char* Exception::ToString(){

}
     7a6:	08 95       	ret

000007a8 <_ZN9ExceptionC1Ev>:

#include <avr/io.h>
#include "Exception.h"

// default constructor
Exception::Exception()
     7a8:	2d e2       	ldi	r18, 0x2D	; 45
     7aa:	32 e0       	ldi	r19, 0x02	; 2
     7ac:	fc 01       	movw	r30, r24
     7ae:	31 83       	std	Z+1, r19	; 0x01
     7b0:	20 83       	st	Z, r18
     7b2:	08 95       	ret

000007b4 <_ZN10ExceptionsC1Ev>:


#include "Exceptions.h"
#include <stdlib.h>
// default constructor
Exceptions::Exceptions(){
     7b4:	fc 01       	movw	r30, r24
		for(size_t i=0; i<d_size; i++){
			if(d==d_data[i])return true;
		}
		return false;
	}
	   simple_vector() : d_size(0), d_capacity(0), d_data(0) {
     7b6:	11 82       	std	Z+1, r1	; 0x01
     7b8:	10 82       	st	Z, r1
     7ba:	13 82       	std	Z+3, r1	; 0x03
     7bc:	12 82       	std	Z+2, r1	; 0x02
     7be:	15 82       	std	Z+5, r1	; 0x05
     7c0:	14 82       	std	Z+4, r1	; 0x04
     7c2:	08 95       	ret

000007c4 <_ZN10Exceptions3AddEP9Exception>:
		this->exceptions.push_back(exception);
		exceptions->exceptions[i]=NULL;
	}
	delete exceptions;
}
void Exceptions::Add(Exception* exception){
     7c4:	af 92       	push	r10
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24
     7da:	7b 01       	movw	r14, r22
	   simple_vector(   simple_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) {
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
	   simple_vector &operator=(   simple_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x)  { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
     7dc:	0a 81       	ldd	r16, Y+2	; 0x02
     7de:	1b 81       	ldd	r17, Y+3	; 0x03
     7e0:	88 81       	ld	r24, Y
     7e2:	99 81       	ldd	r25, Y+1	; 0x01
     7e4:	08 17       	cp	r16, r24
     7e6:	19 07       	cpc	r17, r25
     7e8:	e9 f4       	brne	.+58     	; 0x824 <_ZN10Exceptions3AddEP9Exception+0x60>
	size_t size()  const { return d_size; }; // Size getter
	Data const &operator[](size_t idx) const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx) { return d_data[idx]; }; // Changeable getter
	private:
	void resize()  { d_capacity = d_capacity ? d_capacity*2 : 1; Data *newdata = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(newdata, d_data, d_size * sizeof(Data)); free(d_data); d_data = newdata; };// Allocates double the old space
     7ea:	01 15       	cp	r16, r1
     7ec:	11 05       	cpc	r17, r1
     7ee:	21 f0       	breq	.+8      	; 0x7f8 <_ZN10Exceptions3AddEP9Exception+0x34>
     7f0:	c8 01       	movw	r24, r16
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <_ZN10Exceptions3AddEP9Exception+0x38>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	9b 83       	std	Y+3, r25	; 0x03
     7fe:	8a 83       	std	Y+2, r24	; 0x02
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <malloc>
     808:	6c 01       	movw	r12, r24
     80a:	ac 80       	ldd	r10, Y+4	; 0x04
     80c:	bd 80       	ldd	r11, Y+5	; 0x05
     80e:	a8 01       	movw	r20, r16
     810:	44 0f       	add	r20, r20
     812:	55 1f       	adc	r21, r21
     814:	b5 01       	movw	r22, r10
     816:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <memcpy>
     81a:	c5 01       	movw	r24, r10
     81c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <free>
     820:	dd 82       	std	Y+5, r13	; 0x05
     822:	cc 82       	std	Y+4, r12	; 0x04
	   simple_vector(   simple_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) {
	    d_data = (Data *)malloc (d_capacity*sizeof(Data)); 
	   memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~simple_vector() { free(d_data); }; // Destructor
	   simple_vector &operator=(   simple_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x)  { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
     824:	ec 81       	ldd	r30, Y+4	; 0x04
     826:	fd 81       	ldd	r31, Y+5	; 0x05
     828:	88 81       	ld	r24, Y
     82a:	99 81       	ldd	r25, Y+1	; 0x01
     82c:	9c 01       	movw	r18, r24
     82e:	2f 5f       	subi	r18, 0xFF	; 255
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	39 83       	std	Y+1, r19	; 0x01
     834:	28 83       	st	Y, r18
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	e8 0f       	add	r30, r24
     83c:	f9 1f       	adc	r31, r25
     83e:	f1 82       	std	Z+1, r15	; 0x01
     840:	e0 82       	st	Z, r14
exceptions.push_back(exception);}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	08 95       	ret

00000858 <_ZN4Fans11GetInstanceEv>:
#include "Exceptions.h"
#include "PassFailCleanup.h"

Fans& Fans::GetInstance(){
	
} void Fans::SetInterfaces(IGetFanInfo** iGetFanInfos, unsigned char nIGetFanInfos, IGetFanSpeedMin*iGetFanSpeedMin)
     858:	08 95       	ret

0000085a <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>:
{
     85a:	fc 01       	movw	r30, r24
	this->iGetFanInfos=iGetFanInfos;
     85c:	75 83       	std	Z+5, r23	; 0x05
     85e:	64 83       	std	Z+4, r22	; 0x04
	this->nIGetFanInfos=nIGetFanInfos;
     860:	46 83       	std	Z+6, r20	; 0x06
	this->iGetFanSpeedMin = iGetFanSpeedMin;
     862:	30 87       	std	Z+8, r19	; 0x08
     864:	27 83       	std	Z+7, r18	; 0x07
     866:	08 95       	ret

00000868 <_ZN4Leds4Main6SetRedEv>:
#include "Outputs.h"



void Leds::Main::SetRed(){
	Outputs::PD::_2::SetLow();
     868:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetLow();
     86c:	0e 94 09 05 	call	0xa12	; 0xa12 <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetHigh();
     870:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN7Outputs2PD2_47SetHighEv>
     874:	08 95       	ret

00000876 <_ZN4Leds4Main8SetGreenEv>:
}
void Leds::Main::SetGreen(){
	Outputs::PD::_2::SetLow();
     876:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetHigh();
     87a:	0e 94 07 05 	call	0xa0e	; 0xa0e <_ZN7Outputs2PD2_37SetHighEv>
	Outputs::PD::_4::SetLow();
     87e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN7Outputs2PD2_46SetLowEv>
     882:	08 95       	ret

00000884 <_ZN4LM757GetNameEv>:
	addressWrite =0x90|(shifted&0x0e);
	addressRead =0x91|(shifted&0x0e);
} //LM75
const char* LM75::GetName(){
	return name;
}
     884:	fc 01       	movw	r30, r24
     886:	80 85       	ldd	r24, Z+8	; 0x08
     888:	91 85       	ldd	r25, Z+9	; 0x09
     88a:	08 95       	ret

0000088c <_ZN4LM7514GetTemperatureERb>:
int8_t LM75::GetTemperature(bool& successful){
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ec 01       	movw	r28, r24
     898:	7b 01       	movw	r14, r22
	i2c_start_wait(addressWrite);
     89a:	8b 85       	ldd	r24, Y+11	; 0x0b
     89c:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
	char r=i2c_write(TEMPERATURE_ADDRESS);
     8a0:	8c 81       	ldd	r24, Y+4	; 0x04
     8a2:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_write>
     8a6:	18 2f       	mov	r17, r24
	i2c_stop();
     8a8:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
	if(r!=0){
     8ac:	11 23       	and	r17, r17
     8ae:	11 f0       	breq	.+4      	; 0x8b4 <_ZN4LM7514GetTemperatureERb+0x28>
		successful=false;
     8b0:	f7 01       	movw	r30, r14
     8b2:	10 82       	st	Z, r1
	}

	i2c_start_wait(addressRead);
     8b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     8b6:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
	char most = i2c_readAck();
     8ba:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readAck>
     8be:	c8 2f       	mov	r28, r24
	char least = i2c_readAck();
     8c0:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readAck>
	sei();
     8c4:	78 94       	sei
	return static_cast<int8_t>(most);
	i2c_stop();
	return 0;
}
     8c6:	8c 2f       	mov	r24, r28
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	08 95       	ret

000008d4 <_ZThn2_N4LM757GetNameEv>:
     8d4:	fc 01       	movw	r30, r24
     8d6:	86 81       	ldd	r24, Z+6	; 0x06
     8d8:	97 81       	ldd	r25, Z+7	; 0x07
     8da:	08 95       	ret

000008dc <_ZN4LM75C1EcPc>:
*/
#include "i2cmaster.h"
#include "LM75.h"
#include <avr/interrupt.h>
// default constructor
LM75::LM75(char address, char* name):name(name)
     8dc:	fc 01       	movw	r30, r24
     8de:	83 e3       	ldi	r24, 0x33	; 51
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	80 83       	st	Z, r24
     8e6:	8b e3       	ldi	r24, 0x3B	; 59
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	93 83       	std	Z+3, r25	; 0x03
     8ec:	82 83       	std	Z+2, r24	; 0x02
     8ee:	14 82       	std	Z+4, r1	; 0x04
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	85 83       	std	Z+5, r24	; 0x05
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	86 83       	std	Z+6, r24	; 0x06
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	87 83       	std	Z+7, r24	; 0x07
     8fc:	51 87       	std	Z+9, r21	; 0x09
     8fe:	40 87       	std	Z+8, r20	; 0x08
{
	char shifted = (address<<1);
	addressWrite =0x90|(shifted&0x0e);
     900:	66 0f       	add	r22, r22
     902:	6e 70       	andi	r22, 0x0E	; 14
     904:	86 2f       	mov	r24, r22
     906:	80 69       	ori	r24, 0x90	; 144
     908:	83 87       	std	Z+11, r24	; 0x0b
	addressRead =0x91|(shifted&0x0e);
     90a:	61 69       	ori	r22, 0x91	; 145
     90c:	62 87       	std	Z+10, r22	; 0x0a
     90e:	08 95       	ret

00000910 <_ZN7MessageC1EPKcj>:
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include <stdlib.h>
#include "Message.h"
Message::Message(const char* bufferIn, unsigned int lengthIn):length(lengthIn), buffer(bufferIn){
     910:	fc 01       	movw	r30, r24
     912:	71 83       	std	Z+1, r23	; 0x01
     914:	60 83       	st	Z, r22
     916:	53 83       	std	Z+3, r21	; 0x03
     918:	42 83       	std	Z+2, r20	; 0x02
     91a:	08 95       	ret

0000091c <_ZN7MessageD1Ev>:
	
}
Message::~Message(){
	delete[] this->buffer;
     91c:	fc 01       	movw	r30, r24
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	11 f0       	breq	.+4      	; 0x92a <_ZN7MessageD1Ev+0xe>
     926:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZdaPv>
     92a:	08 95       	ret

0000092c <_ZN8MessagesC1EPP7Messagec>:
*
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
     938:	f6 2e       	mov	r15, r22
     93a:	07 2f       	mov	r16, r23
     93c:	14 2f       	mov	r17, r20
     93e:	84 2f       	mov	r24, r20
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	9b 83       	std	Y+3, r25	; 0x03
     944:	8a 83       	std	Y+2, r24	; 0x02
	messages = new Message*[lengthIn];
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	0e 94 33 09 	call	0x1266	; 0x1266 <_Znaj>
     94e:	99 83       	std	Y+1, r25	; 0x01
     950:	88 83       	st	Y, r24
	for(char i=0; i<lengthIn; i++)
     952:	11 23       	and	r17, r17
     954:	b9 f0       	breq	.+46     	; 0x984 <_ZN8MessagesC1EPP7Messagec+0x58>
     956:	af 2d       	mov	r26, r15
     958:	b0 2f       	mov	r27, r16
     95a:	11 50       	subi	r17, 0x01	; 1
     95c:	21 2f       	mov	r18, r17
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	2f 5f       	subi	r18, 0xFF	; 255
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	22 0f       	add	r18, r18
     966:	33 1f       	adc	r19, r19
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
	messages[i]= messagesIn[i];
     96c:	4d 91       	ld	r20, X+
     96e:	5d 91       	ld	r21, X+
     970:	e8 81       	ld	r30, Y
     972:	f9 81       	ldd	r31, Y+1	; 0x01
     974:	e8 0f       	add	r30, r24
     976:	f9 1f       	adc	r31, r25
     978:	51 83       	std	Z+1, r21	; 0x01
     97a:	40 83       	st	Z, r20
     97c:	02 96       	adiw	r24, 0x02	; 2
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
	messages = new Message*[lengthIn];
	for(char i=0; i<lengthIn; i++)
     97e:	82 17       	cp	r24, r18
     980:	93 07       	cpc	r25, r19
     982:	a1 f7       	brne	.-24     	; 0x96c <_ZN8MessagesC1EPP7Messagec+0x40>
	messages[i]= messagesIn[i];
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	08 95       	ret

00000990 <_ZN8MessagesD1Ev>:
Messages::~Messages(){
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	7c 01       	movw	r14, r24

	for(char i=0; i<length; i++)
     99c:	dc 01       	movw	r26, r24
     99e:	12 96       	adiw	r26, 0x02	; 2
     9a0:	8d 91       	ld	r24, X+
     9a2:	9c 91       	ld	r25, X
     9a4:	13 97       	sbiw	r26, 0x03	; 3
     9a6:	18 16       	cp	r1, r24
     9a8:	19 06       	cpc	r1, r25
     9aa:	f4 f4       	brge	.+60     	; 0x9e8 <_ZN8MessagesD1Ev+0x58>
     9ac:	c0 e0       	ldi	r28, 0x00	; 0
	{
		delete messages[i];
     9ae:	ec 2f       	mov	r30, r28
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	d7 01       	movw	r26, r14
     9b8:	8d 91       	ld	r24, X+
     9ba:	9c 91       	ld	r25, X
     9bc:	e8 0f       	add	r30, r24
     9be:	f9 1f       	adc	r31, r25
     9c0:	00 81       	ld	r16, Z
     9c2:	11 81       	ldd	r17, Z+1	; 0x01
     9c4:	01 15       	cp	r16, r1
     9c6:	11 05       	cpc	r17, r1
     9c8:	31 f0       	breq	.+12     	; 0x9d6 <_ZN8MessagesD1Ev+0x46>
     9ca:	c8 01       	movw	r24, r16
     9cc:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN7MessageD1Ev>
     9d0:	c8 01       	movw	r24, r16
     9d2:	0e 94 36 09 	call	0x126c	; 0x126c <_ZdlPv>
	for(char i=0; i<lengthIn; i++)
	messages[i]= messagesIn[i];
}
Messages::~Messages(){

	for(char i=0; i<length; i++)
     9d6:	cf 5f       	subi	r28, 0xFF	; 255
     9d8:	2c 2f       	mov	r18, r28
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	f7 01       	movw	r30, r14
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	93 81       	ldd	r25, Z+3	; 0x03
     9e2:	28 17       	cp	r18, r24
     9e4:	39 07       	cpc	r19, r25
     9e6:	1c f3       	brlt	.-58     	; 0x9ae <_ZN8MessagesD1Ev+0x1e>
	{
		delete messages[i];
	}
	delete[] messages;
     9e8:	d7 01       	movw	r26, r14
     9ea:	8d 91       	ld	r24, X+
     9ec:	9c 91       	ld	r25, X
     9ee:	00 97       	sbiw	r24, 0x00	; 0
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <_ZN8MessagesD1Ev+0x66>
     9f2:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZdaPv>
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	08 95       	ret

00000a02 <_ZN7Outputs10InitializeEv>:
}
void Outputs::PB::_5::SetLow(){
	PORTB= PORTB&0xFB;
}
void Outputs::PD::_2::SetHigh(){
	PORTD = PORTD|0x04;
     a02:	8a b1       	in	r24, 0x0a	; 10
     a04:	8c 61       	ori	r24, 0x1C	; 28
     a06:	8a b9       	out	0x0a, r24	; 10
     a08:	08 95       	ret

00000a0a <_ZN7Outputs2PD2_26SetLowEv>:
}
void Outputs::PD::_2::SetLow(){
	PORTD= PORTD&0xFB;
     a0a:	5a 98       	cbi	0x0b, 2	; 11
     a0c:	08 95       	ret

00000a0e <_ZN7Outputs2PD2_37SetHighEv>:
}
void Outputs::PD::_3::SetHigh(){
	PORTD = PORTD|0x08;
     a0e:	5b 9a       	sbi	0x0b, 3	; 11
     a10:	08 95       	ret

00000a12 <_ZN7Outputs2PD2_36SetLowEv>:
}
void Outputs::PD::_3::SetLow(){
	PORTD= PORTD&0xF7;
     a12:	5b 98       	cbi	0x0b, 3	; 11
     a14:	08 95       	ret

00000a16 <_ZN7Outputs2PD2_47SetHighEv>:
}
void Outputs::PD::_4::SetHigh(){
	PORTD = PORTD|0x10;
     a16:	5c 9a       	sbi	0x0b, 4	; 11
     a18:	08 95       	ret

00000a1a <_ZN7Outputs2PD2_46SetLowEv>:
}
void Outputs::PD::_4::SetLow(){
	PORTD= PORTD&0xEF;
     a1a:	5c 98       	cbi	0x0b, 4	; 11
     a1c:	08 95       	ret

00000a1e <_ZN8Settings17GetTemperatureMaxEv>:
		if(a<POWER_MIN)
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
     a1e:	fc 01       	movw	r30, r24
     a20:	82 85       	ldd	r24, Z+10	; 0x0a
     a22:	08 95       	ret

00000a24 <_ZN8Settings8GetPowerEv>:
	temperatureMax=a;
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
}
uint16_t Settings::GetPower(){
	return power;
}
     a24:	fc 01       	movw	r30, r24
     a26:	83 85       	ldd	r24, Z+11	; 0x0b
     a28:	94 85       	ldd	r25, Z+12	; 0x0c
     a2a:	08 95       	ret

00000a2c <_ZN8Settings14GetFanSpeedMinEv>:
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
     a2c:	fc 01       	movw	r30, r24
     a2e:	85 85       	ldd	r24, Z+13	; 0x0d
     a30:	96 85       	ldd	r25, Z+14	; 0x0e
     a32:	08 95       	ret

00000a34 <_ZThn8_N8Settings14GetFanSpeedMinEv>:
     a34:	fc 01       	movw	r30, r24
     a36:	85 81       	ldd	r24, Z+5	; 0x05
     a38:	96 81       	ldd	r25, Z+6	; 0x06
     a3a:	08 95       	ret

00000a3c <_ZThn4_N8Settings8GetPowerEv>:
     a3c:	fc 01       	movw	r30, r24
     a3e:	87 81       	ldd	r24, Z+7	; 0x07
     a40:	90 85       	ldd	r25, Z+8	; 0x08
     a42:	08 95       	ret

00000a44 <_ZN8Settings17CapTemperatureMaxERh>:
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
	CapPower(a);
	power=a;
}
void Settings::CapTemperatureMax(uint8_t& a){
	if(a>TEMPERATURE_MAX_MAX)
     a44:	fb 01       	movw	r30, r22
     a46:	80 81       	ld	r24, Z
     a48:	8e 37       	cpi	r24, 0x7E	; 126
     a4a:	18 f0       	brcs	.+6      	; 0xa52 <_ZN8Settings17CapTemperatureMaxERh+0xe>
		a=TEMPERATURE_MAX_MAX;
     a4c:	8d e7       	ldi	r24, 0x7D	; 125
     a4e:	80 83       	st	Z, r24
     a50:	08 95       	ret
	else
		if(a<TEMPERTURE_MAX_MIN)
     a52:	88 32       	cpi	r24, 0x28	; 40
     a54:	18 f4       	brcc	.+6      	; 0xa5c <_ZN8Settings17CapTemperatureMaxERh+0x18>
			a=TEMPERTURE_MAX_MIN;
     a56:	88 e2       	ldi	r24, 0x28	; 40
     a58:	fb 01       	movw	r30, r22
     a5a:	80 83       	st	Z, r24
     a5c:	08 95       	ret

00000a5e <_ZN8Settings17SetTemperatureMaxEh>:
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
void Settings::SetTemperatureMax(uint8_t a){
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	1f 92       	push	r1
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	8c 01       	movw	r16, r24
     a6e:	69 83       	std	Y+1, r22	; 0x01
	CapTemperatureMax(a);
     a70:	be 01       	movw	r22, r28
     a72:	6f 5f       	subi	r22, 0xFF	; 255
     a74:	7f 4f       	sbci	r23, 0xFF	; 255
     a76:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN8Settings17CapTemperatureMaxERh>
	temperatureMax=a;
     a7a:	69 81       	ldd	r22, Y+1	; 0x01
     a7c:	f8 01       	movw	r30, r16
     a7e:	62 87       	std	Z+10, r22	; 0x0a
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 ef 12 	call	0x25de	; 0x25de <eeprom_write_byte>
}
     a88:	0f 90       	pop	r0
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <_ZThn2_N8Settings17SetTemperatureMaxEh>:
     a94:	02 97       	sbiw	r24, 0x02	; 2
     a96:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN8Settings17SetTemperatureMaxEh>
     a9a:	08 95       	ret

00000a9c <_ZN8Settings8CapPowerERj>:
		if(a<TEMPERTURE_MAX_MIN)
			a=TEMPERTURE_MAX_MIN;
}	
void Settings::CapPower(uint16_t& a){
	
	if(a>POWER_MAX)
     a9c:	fb 01       	movw	r30, r22
     a9e:	80 81       	ld	r24, Z
     aa0:	91 81       	ldd	r25, Z+1	; 0x01
     aa2:	8d 3d       	cpi	r24, 0xDD	; 221
     aa4:	f5 e0       	ldi	r31, 0x05	; 5
     aa6:	9f 07       	cpc	r25, r31
     aa8:	30 f0       	brcs	.+12     	; 0xab6 <_ZN8Settings8CapPowerERj+0x1a>
		a=POWER_MAX;
     aaa:	8c ed       	ldi	r24, 0xDC	; 220
     aac:	95 e0       	ldi	r25, 0x05	; 5
     aae:	fb 01       	movw	r30, r22
     ab0:	91 83       	std	Z+1, r25	; 0x01
     ab2:	80 83       	st	Z, r24
     ab4:	08 95       	ret
	else
		if(a<POWER_MIN)
     ab6:	4e 97       	sbiw	r24, 0x1e	; 30
     ab8:	28 f4       	brcc	.+10     	; 0xac4 <_ZN8Settings8CapPowerERj+0x28>
			a=POWER_MIN;
     aba:	8e e1       	ldi	r24, 0x1E	; 30
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	fb 01       	movw	r30, r22
     ac0:	91 83       	std	Z+1, r25	; 0x01
     ac2:	80 83       	st	Z, r24
     ac4:	08 95       	ret

00000ac6 <_ZN8Settings10InitializeEv>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void Settings::Initialize(){
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	00 d0       	rcall	.+0      	; 0xad0 <_ZN8Settings10InitializeEv+0xa>
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	8c 01       	movw	r16, r24
	temperatureMax= eeprom_read_byte(&ADDRESS_TEMPERATURE_MAX);
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <eeprom_read_byte>
     ade:	f8 01       	movw	r30, r16
     ae0:	82 87       	std	Z+10, r24	; 0x0a
	CapTemperatureMax(temperatureMax);
     ae2:	b8 01       	movw	r22, r16
     ae4:	66 5f       	subi	r22, 0xF6	; 246
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	c8 01       	movw	r24, r16
     aea:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN8Settings17CapTemperatureMaxERh>
	
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <eeprom_read_word>
     af6:	9a 83       	std	Y+2, r25	; 0x02
     af8:	89 83       	std	Y+1, r24	; 0x01
	CapPower(a);
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	c8 01       	movw	r24, r16
     b02:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN8Settings8CapPowerERj>
	power=a;
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	f8 01       	movw	r30, r16
     b0c:	94 87       	std	Z+12, r25	; 0x0c
     b0e:	83 87       	std	Z+11, r24	; 0x0b
}
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	08 95       	ret

00000b1e <_ZN8Settings11GetInstanceEv>:
uint8_t EEMEM  ADDRESS_TEMPERATURE_MAX;
uint16_t EEMEM  ADDRESS_POWER;
Settings Settings:: _Singleton;
Settings& Settings::GetInstance(){
	static bool initialized=false;
	if(!initialized)
     b1e:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <__data_end>
     b22:	81 11       	cpse	r24, r1
     b24:	07 c0       	rjmp	.+14     	; 0xb34 <_ZN8Settings11GetInstanceEv+0x16>
	{
		_Singleton.Initialize();
     b26:	87 e7       	ldi	r24, 0x77	; 119
     b28:	93 e0       	ldi	r25, 0x03	; 3
     b2a:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN8Settings10InitializeEv>
		initialized=true;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <__data_end>
	}
	return _Singleton;
}
     b34:	87 e7       	ldi	r24, 0x77	; 119
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	08 95       	ret

00000b3a <_ZN8Settings8SetPowerEj>:
	return power;
}
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
void Settings::SetPower(uint16_t a){
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <_ZN8Settings8SetPowerEj+0x6>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	7a 83       	std	Y+2, r23	; 0x02
     b46:	69 83       	std	Y+1, r22	; 0x01
	CapPower(a);
     b48:	be 01       	movw	r22, r28
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN8Settings8CapPowerERj>
	eeprom_write_word(&ADDRESS_POWER, a);
     b52:	69 81       	ldd	r22, Y+1	; 0x01
     b54:	7a 81       	ldd	r23, Y+2	; 0x02
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <eeprom_write_word>
}
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <_ZThn6_N8Settings8SetPowerEj>:
     b68:	06 97       	sbiw	r24, 0x06	; 6
     b6a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN8Settings8SetPowerEj>
     b6e:	08 95       	ret

00000b70 <_GLOBAL__sub_I_ADDRESS_TEMPERATURE_MAX>:
#include "IGetFanSpeedMin.h"
#define TEMPERATURE_MAX_MAX 125
#define TEMPERTURE_MAX_MIN 40
#define POWER_MIN 30
#define POWER_MAX 1500
class Settings:public  IGetTemperatureMax, public  ISetTemperatureMax, public  IGetPower, public  ISetPower, public IGetFanSpeedMin
     b70:	e7 e7       	ldi	r30, 0x77	; 119
     b72:	f3 e0       	ldi	r31, 0x03	; 3
     b74:	81 e4       	ldi	r24, 0x41	; 65
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	91 83       	std	Z+1, r25	; 0x01
     b7a:	80 83       	st	Z, r24
     b7c:	8f e4       	ldi	r24, 0x4F	; 79
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	93 83       	std	Z+3, r25	; 0x03
     b82:	82 83       	std	Z+2, r24	; 0x02
     b84:	85 e5       	ldi	r24, 0x55	; 85
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	95 83       	std	Z+5, r25	; 0x05
     b8a:	84 83       	std	Z+4, r24	; 0x04
     b8c:	8b e5       	ldi	r24, 0x5B	; 91
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	97 83       	std	Z+7, r25	; 0x07
     b92:	86 83       	std	Z+6, r24	; 0x06
     b94:	81 e6       	ldi	r24, 0x61	; 97
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	91 87       	std	Z+9, r25	; 0x09
     b9a:	80 87       	std	Z+8, r24	; 0x08
     b9c:	87 e7       	ldi	r24, 0x77	; 119
     b9e:	82 87       	std	Z+10, r24	; 0x0a
     ba0:	8a e0       	ldi	r24, 0x0A	; 10
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	94 87       	std	Z+12, r25	; 0x0c
     ba6:	83 87       	std	Z+11, r24	; 0x0b
     ba8:	88 ee       	ldi	r24, 0xE8	; 232
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	96 87       	std	Z+14, r25	; 0x0e
     bae:	85 87       	std	Z+13, r24	; 0x0d
     bb0:	08 95       	ret

00000bb2 <_ZN5TC6543Fan7GetNameEv>:
}
unsigned char TC654::GetDutyCycle(bool& successful){
	return ReadRegister(successful, DUTY_CYCLE_ADDRESS);
}
void TC654::SetDutyCycle(bool& successful, unsigned char value){
	WriteRegister(successful, DUTY_CYCLE_ADDRESS, value);
     bb2:	fc 01       	movw	r30, r24
     bb4:	86 81       	ldd	r24, Z+6	; 0x06
     bb6:	97 81       	ldd	r25, Z+7	; 0x07
     bb8:	08 95       	ret

00000bba <_ZN5TC6543Fan11GetFanSpeedERb>:
     bba:	dc 01       	movw	r26, r24
     bbc:	1c 96       	adiw	r26, 0x0c	; 12
     bbe:	2d 91       	ld	r18, X+
     bc0:	3c 91       	ld	r19, X
     bc2:	1d 97       	sbiw	r26, 0x0d	; 13
     bc4:	20 fd       	sbrc	r18, 0
     bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <_ZN5TC6543Fan11GetFanSpeedERb+0x18>
     bc8:	1a 96       	adiw	r26, 0x0a	; 10
     bca:	ed 91       	ld	r30, X+
     bcc:	fc 91       	ld	r31, X
     bce:	1b 97       	sbiw	r26, 0x0b	; 11
     bd0:	15 c0       	rjmp	.+42     	; 0xbfc <_ZN5TC6543Fan11GetFanSpeedERb+0x42>
     bd2:	18 96       	adiw	r26, 0x08	; 8
     bd4:	ed 91       	ld	r30, X+
     bd6:	fc 91       	ld	r31, X
     bd8:	19 97       	sbiw	r26, 0x09	; 9
     bda:	c9 01       	movw	r24, r18
     bdc:	95 95       	asr	r25
     bde:	87 95       	ror	r24
     be0:	e8 0f       	add	r30, r24
     be2:	f9 1f       	adc	r31, r25
     be4:	01 90       	ld	r0, Z+
     be6:	f0 81       	ld	r31, Z
     be8:	e0 2d       	mov	r30, r0
     bea:	1a 96       	adiw	r26, 0x0a	; 10
     bec:	8d 91       	ld	r24, X+
     bee:	9c 91       	ld	r25, X
     bf0:	1b 97       	sbiw	r26, 0x0b	; 11
     bf2:	e8 0f       	add	r30, r24
     bf4:	f9 1f       	adc	r31, r25
     bf6:	01 90       	ld	r0, Z+
     bf8:	f0 81       	ld	r31, Z
     bfa:	e0 2d       	mov	r30, r0
     bfc:	35 95       	asr	r19
     bfe:	27 95       	ror	r18
     c00:	18 96       	adiw	r26, 0x08	; 8
     c02:	8d 91       	ld	r24, X+
     c04:	9c 91       	ld	r25, X
     c06:	19 97       	sbiw	r26, 0x09	; 9
     c08:	82 0f       	add	r24, r18
     c0a:	93 1f       	adc	r25, r19
     c0c:	09 95       	icall
     c0e:	22 e3       	ldi	r18, 0x32	; 50
     c10:	82 9f       	mul	r24, r18
     c12:	c0 01       	movw	r24, r0
     c14:	11 24       	eor	r1, r1
     c16:	08 95       	ret

00000c18 <_ZN5TC6543Fan5CheckEv>:
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	ec 01       	movw	r28, r24
     c1e:	db 01       	movw	r26, r22
     c20:	50 96       	adiw	r26, 0x10	; 16
     c22:	8d 91       	ld	r24, X+
     c24:	9c 91       	ld	r25, X
     c26:	51 97       	sbiw	r26, 0x11	; 17
     c28:	80 fd       	sbrc	r24, 0
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <_ZN5TC6543Fan5CheckEv+0x1e>
     c2c:	1e 96       	adiw	r26, 0x0e	; 14
     c2e:	ed 91       	ld	r30, X+
     c30:	fc 91       	ld	r31, X
     c32:	1f 97       	sbiw	r26, 0x0f	; 15
     c34:	15 c0       	rjmp	.+42     	; 0xc60 <_ZN5TC6543Fan5CheckEv+0x48>
     c36:	18 96       	adiw	r26, 0x08	; 8
     c38:	ed 91       	ld	r30, X+
     c3a:	fc 91       	ld	r31, X
     c3c:	19 97       	sbiw	r26, 0x09	; 9
     c3e:	9c 01       	movw	r18, r24
     c40:	35 95       	asr	r19
     c42:	27 95       	ror	r18
     c44:	e2 0f       	add	r30, r18
     c46:	f3 1f       	adc	r31, r19
     c48:	01 90       	ld	r0, Z+
     c4a:	f0 81       	ld	r31, Z
     c4c:	e0 2d       	mov	r30, r0
     c4e:	1e 96       	adiw	r26, 0x0e	; 14
     c50:	2d 91       	ld	r18, X+
     c52:	3c 91       	ld	r19, X
     c54:	1f 97       	sbiw	r26, 0x0f	; 15
     c56:	e2 0f       	add	r30, r18
     c58:	f3 1f       	adc	r31, r19
     c5a:	01 90       	ld	r0, Z+
     c5c:	f0 81       	ld	r31, Z
     c5e:	e0 2d       	mov	r30, r0
     c60:	16 96       	adiw	r26, 0x06	; 6
     c62:	4d 91       	ld	r20, X+
     c64:	5c 91       	ld	r21, X
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	95 95       	asr	r25
     c6a:	87 95       	ror	r24
     c6c:	18 96       	adiw	r26, 0x08	; 8
     c6e:	6d 91       	ld	r22, X+
     c70:	7c 91       	ld	r23, X
     c72:	19 97       	sbiw	r26, 0x09	; 9
     c74:	68 0f       	add	r22, r24
     c76:	79 1f       	adc	r23, r25
     c78:	ce 01       	movw	r24, r28
     c7a:	09 95       	icall
     c7c:	ce 01       	movw	r24, r28
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <_ZThn4_N5TC6543Fan5CheckEv>:
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	ec 01       	movw	r28, r24
     c8a:	64 50       	subi	r22, 0x04	; 4
     c8c:	71 09       	sbc	r23, r1
     c8e:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN5TC6543Fan5CheckEv>
     c92:	ce 01       	movw	r24, r28
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <_ZThn2_N5TC6543Fan7GetNameEv>:
     c9a:	fc 01       	movw	r30, r24
     c9c:	84 81       	ldd	r24, Z+4	; 0x04
     c9e:	95 81       	ldd	r25, Z+5	; 0x05
     ca0:	08 95       	ret

00000ca2 <_ZN5TC6546Status6GetF2FEv>:
     ca2:	fc 01       	movw	r30, r24
     ca4:	90 81       	ld	r25, Z
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	91 ff       	sbrs	r25, 1
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	08 95       	ret

00000cae <_ZN5TC6546Status7GetR1COEv>:
     cae:	fc 01       	movw	r30, r24
     cb0:	90 81       	ld	r25, Z
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	93 ff       	sbrs	r25, 3
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	08 95       	ret

00000cba <_ZN5TC6546Status7GetR2COEv>:
     cba:	fc 01       	movw	r30, r24
     cbc:	90 81       	ld	r25, Z
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	94 ff       	sbrs	r25, 4
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	08 95       	ret

00000cc6 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_F15PassFailCleanupIP10ExceptionsEPKcEPc>:
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	fc 01       	movw	r30, r24
     cd4:	87 e7       	ldi	r24, 0x77	; 119
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	80 83       	st	Z, r24
     cdc:	81 e8       	ldi	r24, 0x81	; 129
     cde:	92 e0       	ldi	r25, 0x02	; 2
     ce0:	93 83       	std	Z+3, r25	; 0x03
     ce2:	82 83       	std	Z+2, r24	; 0x02
     ce4:	87 e8       	ldi	r24, 0x87	; 135
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	95 83       	std	Z+5, r25	; 0x05
     cea:	84 83       	std	Z+4, r24	; 0x04
     cec:	d7 82       	std	Z+7, r13	; 0x07
     cee:	c6 82       	std	Z+6, r12	; 0x06
     cf0:	71 87       	std	Z+9, r23	; 0x09
     cf2:	60 87       	std	Z+8, r22	; 0x08
     cf4:	e6 86       	std	Z+14, r14	; 0x0e
     cf6:	f7 86       	std	Z+15, r15	; 0x0f
     cf8:	00 8b       	std	Z+16, r16	; 0x10
     cfa:	11 8b       	std	Z+17, r17	; 0x11
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	08 95       	ret

00000d0a <_ZN5TC654C1Ecc>:
     d0a:	af 92       	push	r10
     d0c:	bf 92       	push	r11
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
     d20:	b6 2e       	mov	r11, r22
     d22:	a4 2e       	mov	r10, r20
     d24:	86 e3       	ldi	r24, 0x36	; 54
     d26:	88 83       	st	Y, r24
     d28:	87 e3       	ldi	r24, 0x37	; 55
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	1a 82       	std	Y+2, r1	; 0x02
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	8b 83       	std	Y+3, r24	; 0x03
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	8c 83       	std	Y+4, r24	; 0x04
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	8d 83       	std	Y+5, r24	; 0x05
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8e 83       	std	Y+6, r24	; 0x06
     d3e:	85 e0       	ldi	r24, 0x05	; 5
     d40:	8f 83       	std	Y+7, r24	; 0x07
     d42:	86 e0       	ldi	r24, 0x06	; 6
     d44:	88 87       	std	Y+8, r24	; 0x08
     d46:	87 e0       	ldi	r24, 0x07	; 7
     d48:	89 87       	std	Y+9, r24	; 0x09
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	8a 87       	std	Y+10, r24	; 0x0a
     d4e:	0f 2e       	mov	r0, r31
     d50:	f9 e2       	ldi	r31, 0x29	; 41
     d52:	ef 2e       	mov	r14, r31
     d54:	f7 e0       	ldi	r31, 0x07	; 7
     d56:	ff 2e       	mov	r15, r31
     d58:	f0 2d       	mov	r31, r0
     d5a:	00 e0       	ldi	r16, 0x00	; 0
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	2a e1       	ldi	r18, 0x1A	; 26
     d60:	37 e0       	ldi	r19, 0x07	; 7
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	0f 2e       	mov	r0, r31
     d68:	f3 e6       	ldi	r31, 0x63	; 99
     d6a:	cf 2e       	mov	r12, r31
     d6c:	f2 e0       	ldi	r31, 0x02	; 2
     d6e:	df 2e       	mov	r13, r31
     d70:	f0 2d       	mov	r31, r0
     d72:	be 01       	movw	r22, r28
     d74:	ce 01       	movw	r24, r28
     d76:	0d 96       	adiw	r24, 0x0d	; 13
     d78:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_F15PassFailCleanupIP10ExceptionsEPKcEPc>
     d7c:	0f 2e       	mov	r0, r31
     d7e:	ff ea       	ldi	r31, 0xAF	; 175
     d80:	ef 2e       	mov	r14, r31
     d82:	f7 e0       	ldi	r31, 0x07	; 7
     d84:	ff 2e       	mov	r15, r31
     d86:	f0 2d       	mov	r31, r0
     d88:	00 e0       	ldi	r16, 0x00	; 0
     d8a:	10 e0       	ldi	r17, 0x00	; 0
     d8c:	2f e1       	ldi	r18, 0x1F	; 31
     d8e:	37 e0       	ldi	r19, 0x07	; 7
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	0f 2e       	mov	r0, r31
     d96:	fb e6       	ldi	r31, 0x6B	; 107
     d98:	cf 2e       	mov	r12, r31
     d9a:	f2 e0       	ldi	r31, 0x02	; 2
     d9c:	df 2e       	mov	r13, r31
     d9e:	f0 2d       	mov	r31, r0
     da0:	be 01       	movw	r22, r28
     da2:	ce 01       	movw	r24, r28
     da4:	4f 96       	adiw	r24, 0x1f	; 31
     da6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5TC6543FanC1EPS_MS_FhRbEMS_F15PassFailCleanupIP10ExceptionsEPKcEPc>
     daa:	8b 2d       	mov	r24, r11
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	b8 2e       	mov	r11, r24
     db0:	bb 0c       	add	r11, r11
     db2:	bb 0c       	add	r11, r11
     db4:	bb 86       	std	Y+11, r11	; 0x0b
     db6:	aa 0c       	add	r10, r10
     db8:	aa 0c       	add	r10, r10
     dba:	aa 0c       	add	r10, r10
     dbc:	aa 0c       	add	r10, r10
     dbe:	aa 0c       	add	r10, r10
     dc0:	aa 0c       	add	r10, r10
     dc2:	ac 86       	std	Y+12, r10	; 0x0c
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	af 90       	pop	r10
     dd8:	08 95       	ret

00000dda <_ZN5TC65412ReadRegisterERbc>:
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	ec 01       	movw	r28, r24
     de6:	7b 01       	movw	r14, r22
     de8:	14 2f       	mov	r17, r20
     dea:	88 81       	ld	r24, Y
     dec:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
     df0:	81 2f       	mov	r24, r17
     df2:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_write>
     df6:	88 23       	and	r24, r24
     df8:	31 f0       	breq	.+12     	; 0xe06 <_ZN5TC65412ReadRegisterERbc+0x2c>
     dfa:	f7 01       	movw	r30, r14
     dfc:	10 82       	st	Z, r1
     dfe:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	11 c0       	rjmp	.+34     	; 0xe28 <_ZN5TC65412ReadRegisterERbc+0x4e>
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	0e 94 90 00 	call	0x120	; 0x120 <i2c_rep_start>
     e0c:	88 23       	and	r24, r24
     e0e:	31 f0       	breq	.+12     	; 0xe1c <_ZN5TC65412ReadRegisterERbc+0x42>
     e10:	f7 01       	movw	r30, r14
     e12:	10 82       	st	Z, r1
     e14:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <_ZN5TC65412ReadRegisterERbc+0x4e>
     e1c:	0e 94 c8 00 	call	0x190	; 0x190 <i2c_readNak>
     e20:	c8 2f       	mov	r28, r24
     e22:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
     e26:	8c 2f       	mov	r24, r28
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	08 95       	ret

00000e34 <_ZN5TC6547GetRPM1ERb>:
     e34:	fc 01       	movw	r30, r24
     e36:	42 81       	ldd	r20, Z+2	; 0x02
     e38:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5TC65412ReadRegisterERbc>
     e3c:	08 95       	ret

00000e3e <_ZN5TC6547GetRPM2ERb>:
     e3e:	fc 01       	movw	r30, r24
     e40:	43 81       	ldd	r20, Z+3	; 0x03
     e42:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5TC65412ReadRegisterERbc>
     e46:	08 95       	ret

00000e48 <_ZN5TC6549GetStatusERb>:
}
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
     e48:	fc 01       	movw	r30, r24
     e4a:	47 81       	ldd	r20, Z+7	; 0x07
     e4c:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5TC65412ReadRegisterERbc>
}
     e50:	08 95       	ret

00000e52 <_ZN5TC6549CheckFan1EPKc>:
	return ReadRegister(successful, RPM1_ADDRESS);
}
unsigned char TC654::GetRPM2(bool& successful){
	return ReadRegister(successful, RPM2_ADDRESS);
}
PassFailCleanup<Exceptions*> TC654::CheckFan1(const char* name){
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	00 d0       	rcall	.+0      	; 0xe68 <_ZN5TC6549CheckFan1EPKc+0x16>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	8c 01       	movw	r16, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	7a 01       	movw	r14, r20
	bool successful=true;
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	29 83       	std	Y+1, r18	; 0x01
	Status status = GetStatus(successful);
     e76:	be 01       	movw	r22, r28
     e78:	6f 5f       	subi	r22, 0xFF	; 255
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5TC6549GetStatusERb>
     e80:	8a 83       	std	Y+2, r24	; 0x02
	if(!successful)
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	81 11       	cpse	r24, r1
     e86:	18 c0       	rjmp	.+48     	; 0xeb8 <_ZN5TC6549CheckFan1EPKc+0x66>
	{
		Exceptions* exceptions = new Exceptions();
     e88:	86 e0       	ldi	r24, 0x06	; 6
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     e90:	6c 01       	movw	r12, r24
     e92:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN10ExceptionsC1Ev>
		exceptions->Add(new CommunicationException(name));
     e96:	86 e0       	ldi	r24, 0x06	; 6
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     e9e:	5c 01       	movw	r10, r24
     ea0:	b7 01       	movw	r22, r14
     ea2:	0e 94 22 01 	call	0x244	; 0x244 <_ZN22CommunicationExceptionC1EPKc>
     ea6:	b5 01       	movw	r22, r10
     ea8:	c6 01       	movw	r24, r12
     eaa:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN10Exceptions3AddEP9Exception>
	const T payload;
	protected:
	private:
	//functions
	public:
	PassFailCleanup(T payload):payload(payload), successful(false)
     eae:	f8 01       	movw	r30, r16
     eb0:	10 82       	st	Z, r1
     eb2:	d2 82       	std	Z+2, r13	; 0x02
     eb4:	c1 82       	std	Z+1, r12	; 0x01
     eb6:	45 c0       	rjmp	.+138    	; 0xf42 <_ZN5TC6549CheckFan1EPKc+0xf0>
		return PassFailCleanup<Exceptions*>(exceptions);
	}
	if(status.GetF1F()||status.GetR1CO())
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	80 fd       	sbrc	r24, 0
     ebc:	25 c0       	rjmp	.+74     	; 0xf08 <_ZN5TC6549CheckFan1EPKc+0xb6>
     ebe:	ce 01       	movw	r24, r28
     ec0:	02 96       	adiw	r24, 0x02	; 2
     ec2:	0e 94 57 06 	call	0xcae	; 0xcae <_ZN5TC6546Status7GetR1COEv>
     ec6:	88 23       	and	r24, r24
     ec8:	c9 f0       	breq	.+50     	; 0xefc <_ZN5TC6549CheckFan1EPKc+0xaa>
     eca:	33 c0       	rjmp	.+102    	; 0xf32 <_ZN5TC6549CheckFan1EPKc+0xe0>
	{
		Exceptions* exceptions = new Exceptions();
		if(status.GetF1F())
		exceptions->Add(new TC654Exception(name, TC654Exception::Fault));
		if(status.GetR1CO())
     ecc:	ce 01       	movw	r24, r28
     ece:	02 96       	adiw	r24, 0x02	; 2
     ed0:	0e 94 57 06 	call	0xcae	; 0xcae <_ZN5TC6546Status7GetR1COEv>
     ed4:	88 23       	and	r24, r24
     ed6:	69 f0       	breq	.+26     	; 0xef2 <_ZN5TC6549CheckFan1EPKc+0xa0>
		exceptions->Add(new TC654Exception(name, TC654Exception::CounterOverflow));
     ed8:	87 e0       	ldi	r24, 0x07	; 7
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     ee0:	5c 01       	movw	r10, r24
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	b7 01       	movw	r22, r14
     ee6:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
     eea:	b5 01       	movw	r22, r10
     eec:	c6 01       	movw	r24, r12
     eee:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN10Exceptions3AddEP9Exception>
     ef2:	f8 01       	movw	r30, r16
     ef4:	10 82       	st	Z, r1
     ef6:	d2 82       	std	Z+2, r13	; 0x02
     ef8:	c1 82       	std	Z+1, r12	; 0x01
     efa:	23 c0       	rjmp	.+70     	; 0xf42 <_ZN5TC6549CheckFan1EPKc+0xf0>
	{
	}
	//successful constructor
PassFailCleanup():successful(true), payload(NULL)
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	f8 01       	movw	r30, r16
     f00:	80 83       	st	Z, r24
     f02:	12 82       	std	Z+2, r1	; 0x02
     f04:	11 82       	std	Z+1, r1	; 0x01
     f06:	1d c0       	rjmp	.+58     	; 0xf42 <_ZN5TC6549CheckFan1EPKc+0xf0>
		exceptions->Add(new CommunicationException(name));
		return PassFailCleanup<Exceptions*>(exceptions);
	}
	if(status.GetF1F()||status.GetR1CO())
	{
		Exceptions* exceptions = new Exceptions();
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     f10:	6c 01       	movw	r12, r24
     f12:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN10ExceptionsC1Ev>
		if(status.GetF1F())
		exceptions->Add(new TC654Exception(name, TC654Exception::Fault));
     f16:	87 e0       	ldi	r24, 0x07	; 7
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     f1e:	5c 01       	movw	r10, r24
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	b7 01       	movw	r22, r14
     f24:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
     f28:	b5 01       	movw	r22, r10
     f2a:	c6 01       	movw	r24, r12
     f2c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN10Exceptions3AddEP9Exception>
     f30:	cd cf       	rjmp	.-102    	; 0xecc <_ZN5TC6549CheckFan1EPKc+0x7a>
		exceptions->Add(new CommunicationException(name));
		return PassFailCleanup<Exceptions*>(exceptions);
	}
	if(status.GetF1F()||status.GetR1CO())
	{
		Exceptions* exceptions = new Exceptions();
     f32:	86 e0       	ldi	r24, 0x06	; 6
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     f3a:	6c 01       	movw	r12, r24
     f3c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN10ExceptionsC1Ev>
     f40:	c5 cf       	rjmp	.-118    	; 0xecc <_ZN5TC6549CheckFan1EPKc+0x7a>
		exceptions->Add(new TC654Exception(name, TC654Exception::CounterOverflow));
		return PassFailCleanup<Exceptions*>(exceptions);

	}
	return PassFailCleanup<Exceptions*>();
}
     f42:	c8 01       	movw	r24, r16
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	08 95       	ret

00000f5e <_ZN5TC6549CheckFan2EPKc>:
PassFailCleanup<Exceptions*> TC654::CheckFan2(const char* name){
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	00 d0       	rcall	.+0      	; 0xf74 <_ZN5TC6549CheckFan2EPKc+0x16>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	8c 01       	movw	r16, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	7a 01       	movw	r14, r20
	bool successful=true;
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	29 83       	std	Y+1, r18	; 0x01
	Status status = GetStatus(successful);
     f82:	be 01       	movw	r22, r28
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5TC6549GetStatusERb>
     f8c:	8a 83       	std	Y+2, r24	; 0x02
	if(!successful)
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	81 11       	cpse	r24, r1
     f92:	18 c0       	rjmp	.+48     	; 0xfc4 <_ZN5TC6549CheckFan2EPKc+0x66>
	{
		Exceptions* exceptions = new Exceptions();
     f94:	86 e0       	ldi	r24, 0x06	; 6
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     f9c:	6c 01       	movw	r12, r24
     f9e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN10ExceptionsC1Ev>
		exceptions->Add(new CommunicationException(name));
     fa2:	86 e0       	ldi	r24, 0x06	; 6
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     faa:	5c 01       	movw	r10, r24
     fac:	b7 01       	movw	r22, r14
     fae:	0e 94 22 01 	call	0x244	; 0x244 <_ZN22CommunicationExceptionC1EPKc>
     fb2:	b5 01       	movw	r22, r10
     fb4:	c6 01       	movw	r24, r12
     fb6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN10Exceptions3AddEP9Exception>
	const T payload;
	protected:
	private:
	//functions
	public:
	PassFailCleanup(T payload):payload(payload), successful(false)
     fba:	f8 01       	movw	r30, r16
     fbc:	10 82       	st	Z, r1
     fbe:	d2 82       	std	Z+2, r13	; 0x02
     fc0:	c1 82       	std	Z+1, r12	; 0x01
     fc2:	43 c0       	rjmp	.+134    	; 0x104a <_ZN5TC6549CheckFan2EPKc+0xec>
		return PassFailCleanup<Exceptions*>(exceptions);
	}
	if(status.GetF2F()||status.GetR2CO())
     fc4:	ce 01       	movw	r24, r28
     fc6:	02 96       	adiw	r24, 0x02	; 2
     fc8:	0e 94 51 06 	call	0xca2	; 0xca2 <_ZN5TC6546Status6GetF2FEv>
     fcc:	81 11       	cpse	r24, r1
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <_ZN5TC6549CheckFan2EPKc+0x7e>
     fd0:	ce 01       	movw	r24, r28
     fd2:	02 96       	adiw	r24, 0x02	; 2
     fd4:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN5TC6546Status7GetR2COEv>
     fd8:	88 23       	and	r24, r24
     fda:	91 f1       	breq	.+100    	; 0x1040 <_ZN5TC6549CheckFan2EPKc+0xe2>
	{
		Exceptions* exceptions = new Exceptions();
     fdc:	86 e0       	ldi	r24, 0x06	; 6
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     fe4:	6c 01       	movw	r12, r24
     fe6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN10ExceptionsC1Ev>
		if(status.GetF2F())
     fea:	ce 01       	movw	r24, r28
     fec:	02 96       	adiw	r24, 0x02	; 2
     fee:	0e 94 51 06 	call	0xca2	; 0xca2 <_ZN5TC6546Status6GetF2FEv>
     ff2:	88 23       	and	r24, r24
     ff4:	69 f0       	breq	.+26     	; 0x1010 <_ZN5TC6549CheckFan2EPKc+0xb2>
		exceptions->Add(new TC654Exception(name, TC654Exception::Fault));
     ff6:	87 e0       	ldi	r24, 0x07	; 7
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
     ffe:	5c 01       	movw	r10, r24
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	b7 01       	movw	r22, r14
    1004:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    1008:	b5 01       	movw	r22, r10
    100a:	c6 01       	movw	r24, r12
    100c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN10Exceptions3AddEP9Exception>
		if(status.GetR2CO())
    1010:	ce 01       	movw	r24, r28
    1012:	02 96       	adiw	r24, 0x02	; 2
    1014:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN5TC6546Status7GetR2COEv>
    1018:	88 23       	and	r24, r24
    101a:	69 f0       	breq	.+26     	; 0x1036 <_ZN5TC6549CheckFan2EPKc+0xd8>
		exceptions->Add(new TC654Exception(name, TC654Exception::CounterOverflow));
    101c:	87 e0       	ldi	r24, 0x07	; 7
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
    1024:	5c 01       	movw	r10, r24
    1026:	41 e0       	ldi	r20, 0x01	; 1
    1028:	b7 01       	movw	r22, r14
    102a:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>
    102e:	b5 01       	movw	r22, r10
    1030:	c6 01       	movw	r24, r12
    1032:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN10Exceptions3AddEP9Exception>
    1036:	f8 01       	movw	r30, r16
    1038:	10 82       	st	Z, r1
    103a:	d2 82       	std	Z+2, r13	; 0x02
    103c:	c1 82       	std	Z+1, r12	; 0x01
    103e:	05 c0       	rjmp	.+10     	; 0x104a <_ZN5TC6549CheckFan2EPKc+0xec>
	{
	}
	//successful constructor
PassFailCleanup():successful(true), payload(NULL)
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	f8 01       	movw	r30, r16
    1044:	80 83       	st	Z, r24
    1046:	12 82       	std	Z+2, r1	; 0x02
    1048:	11 82       	std	Z+1, r1	; 0x01
		return PassFailCleanup<Exceptions*>(exceptions);

	}
	return PassFailCleanup<Exceptions*>();
}
    104a:	c8 01       	movw	r24, r16
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	bf 90       	pop	r11
    1062:	af 90       	pop	r10
    1064:	08 95       	ret

00001066 <_ZN5TC65415GetIGetFan1InfoEv>:
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
}
IGetFanInfo* TC654::GetIGetFan1Info(){
	return &fan1;
}
    1066:	0d 96       	adiw	r24, 0x0d	; 13
    1068:	08 95       	ret

0000106a <_ZN5TC65415GetIGetFan2InfoEv>:
IGetFanInfo* TC654::GetIGetFan2Info(){
	return &fan2;
}
    106a:	4f 96       	adiw	r24, 0x1f	; 31
    106c:	08 95       	ret

0000106e <_ZN14TC654Exception8ToStringEv>:
{
	if(message!=NULL){
		delete message;
	}
} //~TC654Exception
const char* TC654Exception::ToString(){
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
	if(message==NULL){
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	89 2b       	or	r24, r25
    1082:	09 f0       	breq	.+2      	; 0x1086 <_ZN14TC654Exception8ToStringEv+0x18>
    1084:	57 c0       	rjmp	.+174    	; 0x1134 <_ZN14TC654Exception8ToStringEv+0xc6>
		size_t totalLength;
		switch(type){
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	88 23       	and	r24, r24
    108a:	19 f0       	breq	.+6      	; 0x1092 <_ZN14TC654Exception8ToStringEv+0x24>
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	51 f1       	breq	.+84     	; 0x10e4 <_ZN14TC654Exception8ToStringEv+0x76>
    1090:	51 c0       	rjmp	.+162    	; 0x1134 <_ZN14TC654Exception8ToStringEv+0xc6>
			case Fault:
			totalLength = strlen(name)+57;
    1092:	fb 80       	ldd	r15, Y+3	; 0x03
    1094:	ec 80       	ldd	r14, Y+4	; 0x04
    1096:	ef 2d       	mov	r30, r15
    1098:	fe 2d       	mov	r31, r14
    109a:	df 01       	movw	r26, r30
    109c:	0d 90       	ld	r0, X+
    109e:	00 20       	and	r0, r0
    10a0:	e9 f7       	brne	.-6      	; 0x109c <_ZN14TC654Exception8ToStringEv+0x2e>
    10a2:	8d 01       	movw	r16, r26
    10a4:	0e 1b       	sub	r16, r30
    10a6:	1f 0b       	sbc	r17, r31
    10a8:	08 5c       	subi	r16, 0xC8	; 200
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
			message=(char*)malloc(sizeof(char)*totalLength);
    10ac:	c8 01       	movw	r24, r16
    10ae:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <malloc>
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	8d 83       	std	Y+5, r24	; 0x05
			if(message!=NULL){
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	e9 f1       	breq	.+122    	; 0x1134 <_ZN14TC654Exception8ToStringEv+0xc6>
				snprintf(message,totalLength, "%s experienced a fault as indicated by its status register", name);
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	29 e8       	ldi	r18, 0x89	; 137
    10c0:	32 e0       	ldi	r19, 0x02	; 2
    10c2:	3f 93       	push	r19
    10c4:	2f 93       	push	r18
    10c6:	1f 93       	push	r17
    10c8:	0f 93       	push	r16
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	0e 94 20 10 	call	0x2040	; 0x2040 <snprintf>
    10d2:	8d b7       	in	r24, 0x3d	; 61
    10d4:	9e b7       	in	r25, 0x3e	; 62
    10d6:	08 96       	adiw	r24, 0x08	; 8
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	9e bf       	out	0x3e, r25	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	8d bf       	out	0x3d, r24	; 61
    10e2:	28 c0       	rjmp	.+80     	; 0x1134 <_ZN14TC654Exception8ToStringEv+0xc6>
			}
			break;
			case CounterOverflow:
			totalLength = strlen(name)+68;
    10e4:	fb 80       	ldd	r15, Y+3	; 0x03
    10e6:	ec 80       	ldd	r14, Y+4	; 0x04
    10e8:	ef 2d       	mov	r30, r15
    10ea:	fe 2d       	mov	r31, r14
    10ec:	df 01       	movw	r26, r30
    10ee:	0d 90       	ld	r0, X+
    10f0:	00 20       	and	r0, r0
    10f2:	e9 f7       	brne	.-6      	; 0x10ee <_ZN14TC654Exception8ToStringEv+0x80>
    10f4:	8d 01       	movw	r16, r26
    10f6:	0e 1b       	sub	r16, r30
    10f8:	1f 0b       	sbc	r17, r31
    10fa:	0d 5b       	subi	r16, 0xBD	; 189
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
			message=(char*)malloc(sizeof(char)*totalLength);
    10fe:	c8 01       	movw	r24, r16
    1100:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <malloc>
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
			if(message!=NULL){
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	a1 f0       	breq	.+40     	; 0x1134 <_ZN14TC654Exception8ToStringEv+0xc6>
				snprintf(message,totalLength, "%s experienced a counter overflow as indicated by its status register",name);
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	24 ec       	ldi	r18, 0xC4	; 196
    1112:	32 e0       	ldi	r19, 0x02	; 2
    1114:	3f 93       	push	r19
    1116:	2f 93       	push	r18
    1118:	1f 93       	push	r17
    111a:	0f 93       	push	r16
    111c:	9f 93       	push	r25
    111e:	8f 93       	push	r24
    1120:	0e 94 20 10 	call	0x2040	; 0x2040 <snprintf>
    1124:	8d b7       	in	r24, 0x3d	; 61
    1126:	9e b7       	in	r25, 0x3e	; 62
    1128:	08 96       	adiw	r24, 0x08	; 8
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	9e bf       	out	0x3e, r25	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	8d bf       	out	0x3d, r24	; 61
			}
			break;
		}
	}
	return message;
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	08 95       	ret

00001146 <_ZN14TC654ExceptionC1EPKcNS_4TypeE>:
#include <stdio.h>
#include <stdlib.h>
#include "TC654Exception.h"

// default constructor
TC654Exception::TC654Exception(const char* name, Type type):name(name), type(type)
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	ec 01       	movw	r28, r24
    1152:	8b 01       	movw	r16, r22
    1154:	f4 2e       	mov	r15, r20
    1156:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN9ExceptionC1Ev>
    115a:	8e e0       	ldi	r24, 0x0E	; 14
    115c:	93 e0       	ldi	r25, 0x03	; 3
    115e:	99 83       	std	Y+1, r25	; 0x01
    1160:	88 83       	st	Y, r24
    1162:	fa 82       	std	Y+2, r15	; 0x02
    1164:	1c 83       	std	Y+4, r17	; 0x04
    1166:	0b 83       	std	Y+3, r16	; 0x03
    1168:	1e 82       	std	Y+6, r1	; 0x06
    116a:	1d 82       	std	Y+5, r1	; 0x05
{
	
} //TC654Exception
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	08 95       	ret

00001178 <_ZN12Temperatures17GetMaxTemperatureERb>:
}
void Temperatures::SetInterfaces(IGetTemperatureInfo** iGetTemperatureInfos, unsigned char  nIGetTemperatureInfos){
	this->iGetTemperatureInfos=iGetTemperatureInfos;
	this->nIGetTemperatureInfos=nIGetTemperatureInfos;
}
void Temperatures::Initialize(){
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	dc 01       	movw	r26, r24
    1188:	14 96       	adiw	r26, 0x04	; 4
    118a:	2c 91       	ld	r18, X
    118c:	14 97       	sbiw	r26, 0x04	; 4
    118e:	22 23       	and	r18, r18
    1190:	09 f4       	brne	.+2      	; 0x1194 <_ZN12Temperatures17GetMaxTemperatureERb+0x1c>
    1192:	41 c0       	rjmp	.+130    	; 0x1216 <_ZN12Temperatures17GetMaxTemperatureERb+0x9e>
    1194:	7b 01       	movw	r14, r22
    1196:	8c 01       	movw	r16, r24
    1198:	12 96       	adiw	r26, 0x02	; 2
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	13 97       	sbiw	r26, 0x03	; 3
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	dc 01       	movw	r26, r24
    11a6:	ed 91       	ld	r30, X+
    11a8:	fc 91       	ld	r31, X
    11aa:	01 90       	ld	r0, Z+
    11ac:	f0 81       	ld	r31, Z
    11ae:	e0 2d       	mov	r30, r0
    11b0:	09 95       	icall
    11b2:	d8 2e       	mov	r13, r24
    11b4:	f7 01       	movw	r30, r14
    11b6:	80 81       	ld	r24, Z
    11b8:	88 23       	and	r24, r24
    11ba:	79 f1       	breq	.+94     	; 0x121a <_ZN12Temperatures17GetMaxTemperatureERb+0xa2>
    11bc:	d8 01       	movw	r26, r16
    11be:	14 96       	adiw	r26, 0x04	; 4
    11c0:	8c 91       	ld	r24, X
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 97       	sbiw	r24, 0x02	; 2
    11c6:	5c f1       	brlt	.+86     	; 0x121e <_ZN12Temperatures17GetMaxTemperatureERb+0xa6>
    11c8:	c1 e0       	ldi	r28, 0x01	; 1
    11ca:	d0 e0       	ldi	r29, 0x00	; 0
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <_ZN12Temperatures17GetMaxTemperatureERb+0x62>
    11ce:	f8 01       	movw	r30, r16
    11d0:	24 81       	ldd	r18, Z+4	; 0x04
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	c2 17       	cp	r28, r18
    11d6:	d3 07       	cpc	r29, r19
    11d8:	24 f5       	brge	.+72     	; 0x1222 <_ZN12Temperatures17GetMaxTemperatureERb+0xaa>
    11da:	d8 01       	movw	r26, r16
    11dc:	12 96       	adiw	r26, 0x02	; 2
    11de:	ed 91       	ld	r30, X+
    11e0:	fc 91       	ld	r31, X
    11e2:	13 97       	sbiw	r26, 0x03	; 3
    11e4:	9e 01       	movw	r18, r28
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	e2 0f       	add	r30, r18
    11ec:	f3 1f       	adc	r31, r19
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	dc 01       	movw	r26, r24
    11f4:	ed 91       	ld	r30, X+
    11f6:	fc 91       	ld	r31, X
    11f8:	01 90       	ld	r0, Z+
    11fa:	f0 81       	ld	r31, Z
    11fc:	e0 2d       	mov	r30, r0
    11fe:	b7 01       	movw	r22, r14
    1200:	09 95       	icall
    1202:	d8 16       	cp	r13, r24
    1204:	0c f4       	brge	.+2      	; 0x1208 <_ZN12Temperatures17GetMaxTemperatureERb+0x90>
    1206:	d8 2e       	mov	r13, r24
    1208:	21 96       	adiw	r28, 0x01	; 1
    120a:	f7 01       	movw	r30, r14
    120c:	80 81       	ld	r24, Z
    120e:	81 11       	cpse	r24, r1
    1210:	de cf       	rjmp	.-68     	; 0x11ce <_ZN12Temperatures17GetMaxTemperatureERb+0x56>
    1212:	8d 2d       	mov	r24, r13
    1214:	07 c0       	rjmp	.+14     	; 0x1224 <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
    1216:	8b e0       	ldi	r24, 0x0B	; 11
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
    121a:	8d 2d       	mov	r24, r13
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
    121e:	8d 2d       	mov	r24, r13
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
    1222:	8d 2d       	mov	r24, r13
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	08 95       	ret

00001234 <_ZN12Temperatures11GetInstanceEv>:
    1234:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    1238:	81 11       	cpse	r24, r1
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <_ZN12Temperatures11GetInstanceEv+0xe>
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <_ZZN12Temperatures11GetInstanceEvE11initialized>
    1242:	87 e8       	ldi	r24, 0x87	; 135
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	08 95       	ret

00001248 <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>:
    1248:	fc 01       	movw	r30, r24
    124a:	73 83       	std	Z+3, r23	; 0x03
    124c:	62 83       	std	Z+2, r22	; 0x02
    124e:	44 83       	std	Z+4, r20	; 0x04
    1250:	08 95       	ret

00001252 <_GLOBAL__sub_I__ZN12Temperatures10_SingletonE>:
#ifndef __Temperatures_H__
#define __Temperatures_H__
#include "IGetTemperatureInfo.h"
#include "ITemperatures.h"

class Temperatures:
    1252:	84 e1       	ldi	r24, 0x14	; 20
    1254:	93 e0       	ldi	r25, 0x03	; 3
    1256:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <_ZN12Temperatures10_SingletonE+0x1>
    125a:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <_ZN12Temperatures10_SingletonE>
    125e:	08 95       	ret

00001260 <_Znwj>:
		if(!Ticker::tickerCallbacksMilliseconds.contains(callback)){
		Ticker::tickerCallbacksMilliseconds.push_back(callback);}
	}
	else
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
    1260:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <malloc>
    1264:	08 95       	ret

00001266 <_Znaj>:
    1266:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <malloc>
    126a:	08 95       	ret

0000126c <_ZdlPv>:
    126c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <free>
    1270:	08 95       	ret

00001272 <_ZdaPv>:
    1272:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <free>
    1276:	08 95       	ret

00001278 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
	cli();
    12a2:	f8 94       	cli
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    12a4:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_ZN6Ticker27tickerCallbacksMillisecondsE>
    12a8:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x1>
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    12ac:	89 2b       	or	r24, r25
    12ae:	c9 f0       	breq	.+50     	; 0x12e2 <__vector_14+0x6a>
    12b0:	c0 e0       	ldi	r28, 0x00	; 0
    12b2:	d0 e0       	ldi	r29, 0x00	; 0
	Data const &operator[](size_t idx)volatile const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx)volatile { return d_data[idx]; }; // Changeable getter
    12b4:	02 e9       	ldi	r16, 0x92	; 146
    12b6:	13 e0       	ldi	r17, 0x03	; 3
    12b8:	d8 01       	movw	r26, r16
    12ba:	14 96       	adiw	r26, 0x04	; 4
    12bc:	ed 91       	ld	r30, X+
    12be:	fc 91       	ld	r31, X
    12c0:	15 97       	sbiw	r26, 0x05	; 5
	{
		Ticker::tickerCallbacksMilliseconds[i]();
    12c2:	ce 01       	movw	r24, r28
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	e8 0f       	add	r30, r24
    12ca:	f9 1f       	adc	r31, r25
    12cc:	01 90       	ld	r0, Z+
    12ce:	f0 81       	ld	r31, Z
    12d0:	e0 2d       	mov	r30, r0
    12d2:	09 95       	icall
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
ISR(TIMER0_COMPA_vect)
{
	cli();
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
    12d4:	21 96       	adiw	r28, 0x01	; 1
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
    12d6:	f8 01       	movw	r30, r16
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	c8 17       	cp	r28, r24
    12de:	d9 07       	cpc	r29, r25
    12e0:	58 f3       	brcs	.-42     	; 0x12b8 <__vector_14+0x40>
	{
		Ticker::tickerCallbacksMilliseconds[i]();
	}
	sei();
    12e2:	78 94       	sei
}
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	bf 91       	pop	r27
    12ee:	af 91       	pop	r26
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	7f 91       	pop	r23
    12f6:	6f 91       	pop	r22
    12f8:	5f 91       	pop	r21
    12fa:	4f 91       	pop	r20
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <_GLOBAL__sub_I__Znwj>:
 for(size_t i=0; i<d_size; i++){
	if(d==d_data[i])return true;
 }
 return false;
	}
	volatile_vector() : d_size(0), d_capacity(0), d_data(0) {
    130e:	e2 e9       	ldi	r30, 0x92	; 146
    1310:	f3 e0       	ldi	r31, 0x03	; 3
    1312:	11 82       	std	Z+1, r1	; 0x01
    1314:	10 82       	st	Z, r1
    1316:	13 82       	std	Z+3, r1	; 0x03
    1318:	12 82       	std	Z+2, r1	; 0x02
    131a:	15 82       	std	Z+5, r1	; 0x05
    131c:	14 82       	std	Z+4, r1	; 0x04
    131e:	ec e8       	ldi	r30, 0x8C	; 140
    1320:	f3 e0       	ldi	r31, 0x03	; 3
    1322:	11 82       	std	Z+1, r1	; 0x01
    1324:	10 82       	st	Z, r1
    1326:	13 82       	std	Z+3, r1	; 0x03
    1328:	12 82       	std	Z+2, r1	; 0x02
    132a:	15 82       	std	Z+5, r1	; 0x05
    132c:	14 82       	std	Z+4, r1	; 0x04
    132e:	08 95       	ret

00001330 <_GLOBAL__sub_D__Znwj>:

	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
    1330:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <_ZN6Ticker22tickerCallbacksSecondsE+0x4>
    1334:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <_ZN6Ticker22tickerCallbacksSecondsE+0x5>
    1338:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <free>
    133c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x4>
    1340:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <_ZN6Ticker27tickerCallbacksMillisecondsE+0x5>
    1344:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <free>
    1348:	08 95       	ret

0000134a <_ZL11parseStringPc>:
	json_t const* field = json_getProperty( obj, property );
	if ( !field ) return 0;
        jsonType_t type = json_getType( field );
        if ( JSON_ARRAY >= type ) return 0;
	return json_getValue( field );
}
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
    1350:	98 81       	ld	r25, Y
    1352:	90 32       	cpi	r25, 0x20	; 32
    1354:	08 f4       	brcc	.+2      	; 0x1358 <_ZL11parseStringPc+0xe>
    1356:	57 c0       	rjmp	.+174    	; 0x1406 <_ZL11parseStringPc+0xbc>
    1358:	92 32       	cpi	r25, 0x22	; 34
    135a:	31 f0       	breq	.+12     	; 0x1368 <_ZL11parseStringPc+0x1e>
    135c:	de 01       	movw	r26, r28
    135e:	4f e3       	ldi	r20, 0x3F	; 63
    1360:	08 c0       	rjmp	.+16     	; 0x1372 <_ZL11parseStringPc+0x28>
    1362:	92 32       	cpi	r25, 0x22	; 34
    1364:	31 f4       	brne	.+12     	; 0x1372 <_ZL11parseStringPc+0x28>
    1366:	01 c0       	rjmp	.+2      	; 0x136a <_ZL11parseStringPc+0x20>
    1368:	de 01       	movw	r26, r28
    136a:	1c 92       	st	X, r1
    136c:	ce 01       	movw	r24, r28
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	5b c0       	rjmp	.+182    	; 0x1428 <_ZL11parseStringPc+0xde>
    1372:	9c 35       	cpi	r25, 0x5C	; 92
    1374:	e1 f5       	brne	.+120    	; 0x13ee <_ZL11parseStringPc+0xa4>
    1376:	99 81       	ldd	r25, Y+1	; 0x01
    1378:	95 37       	cpi	r25, 0x75	; 117
    137a:	19 f0       	breq	.+6      	; 0x1382 <_ZL11parseStringPc+0x38>
    137c:	92 32       	cpi	r25, 0x22	; 34
    137e:	c9 f4       	brne	.+50     	; 0x13b2 <_ZL11parseStringPc+0x68>
    1380:	20 c0       	rjmp	.+64     	; 0x13c2 <_ZL11parseStringPc+0x78>
    1382:	fe 01       	movw	r30, r28
    1384:	32 96       	adiw	r30, 0x02	; 2
    1386:	9e 01       	movw	r18, r28
    1388:	2a 5f       	subi	r18, 0xFA	; 250
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
    138c:	81 91       	ld	r24, Z+
    138e:	80 33       	cpi	r24, 0x30	; 48
    1390:	e8 f1       	brcs	.+122    	; 0x140c <_ZL11parseStringPc+0xc2>
    1392:	8a 33       	cpi	r24, 0x3A	; 58
    1394:	38 f0       	brcs	.+14     	; 0x13a4 <_ZL11parseStringPc+0x5a>
    1396:	81 34       	cpi	r24, 0x41	; 65
    1398:	e0 f1       	brcs	.+120    	; 0x1412 <_ZL11parseStringPc+0xc8>
    139a:	87 34       	cpi	r24, 0x47	; 71
    139c:	18 f0       	brcs	.+6      	; 0x13a4 <_ZL11parseStringPc+0x5a>
    139e:	81 56       	subi	r24, 0x61	; 97
    13a0:	86 30       	cpi	r24, 0x06	; 6
    13a2:	d0 f5       	brcc	.+116    	; 0x1418 <_ZL11parseStringPc+0xce>
    13a4:	e2 17       	cp	r30, r18
    13a6:	f3 07       	cpc	r31, r19
    13a8:	89 f7       	brne	.-30     	; 0x138c <_ZL11parseStringPc+0x42>
    13aa:	4c 93       	st	X, r20
    13ac:	fe 01       	movw	r30, r28
    13ae:	35 96       	adiw	r30, 0x05	; 5
    13b0:	20 c0       	rjmp	.+64     	; 0x13f2 <_ZL11parseStringPc+0xa8>
    13b2:	e8 e5       	ldi	r30, 0x58	; 88
    13b4:	f3 e0       	ldi	r31, 0x03	; 3
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	98 13       	cpse	r25, r24
    13be:	0c c0       	rjmp	.+24     	; 0x13d8 <_ZL11parseStringPc+0x8e>
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <_ZL11parseStringPc+0x7c>
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	22 0f       	add	r18, r18
    13c8:	33 1f       	adc	r19, r19
    13ca:	f9 01       	movw	r30, r18
    13cc:	e8 5a       	subi	r30, 0xA8	; 168
    13ce:	fc 4f       	sbci	r31, 0xFC	; 252
    13d0:	81 81       	ldd	r24, Z+1	; 0x01
    13d2:	81 11       	cpse	r24, r1
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <_ZL11parseStringPc+0x9c>
    13d6:	23 c0       	rjmp	.+70     	; 0x141e <_ZL11parseStringPc+0xd4>
    13d8:	2f 5f       	subi	r18, 0xFF	; 255
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	32 96       	adiw	r30, 0x02	; 2
    13de:	28 30       	cpi	r18, 0x08	; 8
    13e0:	31 05       	cpc	r19, r1
    13e2:	59 f7       	brne	.-42     	; 0x13ba <_ZL11parseStringPc+0x70>
    13e4:	1f c0       	rjmp	.+62     	; 0x1424 <_ZL11parseStringPc+0xda>
    13e6:	fe 01       	movw	r30, r28
    13e8:	31 96       	adiw	r30, 0x01	; 1
    13ea:	8c 93       	st	X, r24
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <_ZL11parseStringPc+0xa8>
    13ee:	9c 93       	st	X, r25
    13f0:	fe 01       	movw	r30, r28
    13f2:	ef 01       	movw	r28, r30
    13f4:	21 96       	adiw	r28, 0x01	; 1
    13f6:	11 96       	adiw	r26, 0x01	; 1
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
    13fa:	90 32       	cpi	r25, 0x20	; 32
    13fc:	08 f0       	brcs	.+2      	; 0x1400 <_ZL11parseStringPc+0xb6>
    13fe:	b1 cf       	rjmp	.-158    	; 0x1362 <_ZL11parseStringPc+0x18>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	11 c0       	rjmp	.+34     	; 0x1428 <_ZL11parseStringPc+0xde>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e c0       	rjmp	.+28     	; 0x1428 <_ZL11parseStringPc+0xde>
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0b c0       	rjmp	.+22     	; 0x1428 <_ZL11parseStringPc+0xde>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	08 c0       	rjmp	.+16     	; 0x1428 <_ZL11parseStringPc+0xde>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <_ZL11parseStringPc+0xde>
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <_ZL11parseStringPc+0xde>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <_ZL11isOneOfThemcPKc>:
    142e:	fb 01       	movw	r30, r22
    1430:	91 91       	ld	r25, Z+
    1432:	99 23       	and	r25, r25
    1434:	21 f0       	breq	.+8      	; 0x143e <_ZL11isOneOfThemcPKc+0x10>
    1436:	98 13       	cpse	r25, r24
    1438:	fb cf       	rjmp	.-10     	; 0x1430 <_ZL11isOneOfThemcPKc+0x2>
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	08 95       	ret
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	08 95       	ret

00001442 <_ZL7goWhilePcPKc>:
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	ec 01       	movw	r28, r24
    144c:	8b 01       	movw	r16, r22
    144e:	88 81       	ld	r24, Y
    1450:	88 23       	and	r24, r24
    1452:	59 f0       	breq	.+22     	; 0x146a <_ZL7goWhilePcPKc+0x28>
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZL11isOneOfThemcPKc>
    145a:	88 23       	and	r24, r24
    145c:	49 f0       	breq	.+18     	; 0x1470 <_ZL7goWhilePcPKc+0x2e>
    145e:	21 96       	adiw	r28, 0x01	; 1
    1460:	88 81       	ld	r24, Y
    1462:	81 11       	cpse	r24, r1
    1464:	f7 cf       	rjmp	.-18     	; 0x1454 <_ZL7goWhilePcPKc+0x12>
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <_ZL7goWhilePcPKc+0x32>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <_ZL7goWhilePcPKc+0x32>
    1470:	8c 2f       	mov	r24, r28
    1472:	9d 2f       	mov	r25, r29
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	08 95       	ret

0000147e <_ZL5goNumPc>:
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	88 23       	and	r24, r24
    1484:	81 f0       	breq	.+32     	; 0x14a6 <_ZL5goNumPc+0x28>
    1486:	80 53       	subi	r24, 0x30	; 48
    1488:	8a 30       	cpi	r24, 0x0A	; 10
    148a:	80 f4       	brcc	.+32     	; 0x14ac <_ZL5goNumPc+0x2e>
    148c:	31 96       	adiw	r30, 0x01	; 1
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <_ZL5goNumPc+0x18>
    1490:	20 53       	subi	r18, 0x30	; 48
    1492:	2a 30       	cpi	r18, 0x0A	; 10
    1494:	68 f4       	brcc	.+26     	; 0x14b0 <_ZL5goNumPc+0x32>
    1496:	8e 2f       	mov	r24, r30
    1498:	9f 2f       	mov	r25, r31
    149a:	21 91       	ld	r18, Z+
    149c:	21 11       	cpse	r18, r1
    149e:	f8 cf       	rjmp	.-16     	; 0x1490 <_ZL5goNumPc+0x12>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	08 95       	ret
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	08 95       	ret
    14ac:	8e 2f       	mov	r24, r30
    14ae:	9f 2f       	mov	r25, r31
    14b0:	08 95       	ret

000014b2 <_ZL16isEndOfPrimitivec>:
    14b2:	cf 93       	push	r28
    14b4:	8c 32       	cpi	r24, 0x2C	; 44
    14b6:	69 f0       	breq	.+26     	; 0x14d2 <_ZL16isEndOfPrimitivec+0x20>
    14b8:	c8 2f       	mov	r28, r24
    14ba:	66 e1       	ldi	r22, 0x16	; 22
    14bc:	73 e0       	ldi	r23, 0x03	; 3
    14be:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZL11isOneOfThemcPKc>
    14c2:	81 11       	cpse	r24, r1
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <_ZL16isEndOfPrimitivec+0x22>
    14c6:	6c e1       	ldi	r22, 0x1C	; 28
    14c8:	73 e0       	ldi	r23, 0x03	; 3
    14ca:	8c 2f       	mov	r24, r28
    14cc:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZL11isOneOfThemcPKc>
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <_ZL16isEndOfPrimitivec+0x22>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>:
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	8b 01       	movw	r16, r22
    14e4:	f2 2e       	mov	r15, r18
    14e6:	e4 2f       	mov	r30, r20
    14e8:	f5 2f       	mov	r31, r21
    14ea:	ec 01       	movw	r28, r24
    14ec:	21 91       	ld	r18, Z+
    14ee:	22 23       	and	r18, r18
    14f0:	29 f0       	breq	.+10     	; 0x14fc <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x24>
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	38 81       	ld	r19, Y
    14f6:	23 17       	cp	r18, r19
    14f8:	c1 f3       	breq	.-16     	; 0x14ea <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x12>
    14fa:	15 c0       	rjmp	.+42     	; 0x1526 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x4e>
    14fc:	89 2b       	or	r24, r25
    14fe:	b1 f0       	breq	.+44     	; 0x152c <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x54>
    1500:	88 81       	ld	r24, Y
    1502:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZL16isEndOfPrimitivec>
    1506:	88 23       	and	r24, r24
    1508:	a1 f0       	breq	.+40     	; 0x1532 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5a>
    150a:	6c e1       	ldi	r22, 0x1C	; 28
    150c:	73 e0       	ldi	r23, 0x03	; 3
    150e:	88 81       	ld	r24, Y
    1510:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZL11isOneOfThemcPKc>
    1514:	81 11       	cpse	r24, r1
    1516:	02 c0       	rjmp	.+4      	; 0x151c <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x44>
    1518:	18 82       	st	Y, r1
    151a:	21 96       	adiw	r28, 0x01	; 1
    151c:	f8 01       	movw	r30, r16
    151e:	f6 82       	std	Z+6, r15	; 0x06
    1520:	8c 2f       	mov	r24, r28
    1522:	9d 2f       	mov	r25, r29
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	08 95       	ret

00001542 <json_getProperty>:
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	8b 01       	movw	r16, r22
    154c:	fc 01       	movw	r30, r24
    154e:	c4 81       	ldd	r28, Z+4	; 0x04
    1550:	d5 81       	ldd	r29, Z+5	; 0x05
    1552:	20 97       	sbiw	r28, 0x00	; 0
    1554:	89 f0       	breq	.+34     	; 0x1578 <json_getProperty+0x36>
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	9b 81       	ldd	r25, Y+3	; 0x03
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	29 f0       	breq	.+10     	; 0x1568 <json_getProperty+0x26>
    155e:	b8 01       	movw	r22, r16
    1560:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
    1564:	89 2b       	or	r24, r25
    1566:	59 f0       	breq	.+22     	; 0x157e <json_getProperty+0x3c>
    1568:	09 90       	ld	r0, Y+
    156a:	d8 81       	ld	r29, Y
    156c:	c0 2d       	mov	r28, r0
    156e:	20 97       	sbiw	r28, 0x00	; 0
    1570:	91 f7       	brne	.-28     	; 0x1556 <json_getProperty+0x14>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	05 c0       	rjmp	.+10     	; 0x1582 <json_getProperty+0x40>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <json_getProperty+0x40>
    157e:	8c 2f       	mov	r24, r28
    1580:	9d 2f       	mov	r25, r29
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <json_create>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    158c:	2f 92       	push	r2
    158e:	3f 92       	push	r3
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <json_create+0x26>
    15b2:	1f 92       	push	r1
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	5b 01       	movw	r10, r22
    15ba:	3a 01       	movw	r6, r20

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    15bc:	66 e1       	ldi	r22, 0x16	; 22
    15be:	73 e0       	ldi	r23, 0x03	; 3
    15c0:	0e 94 21 0a 	call	0x1442	; 0x1442 <_ZL7goWhilePcPKc>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	09 f4       	brne	.+2      	; 0x15ca <json_create+0x3e>
    15c8:	bb c1       	rjmp	.+886    	; 0x1940 <json_create+0x3b4>
    15ca:	dc 01       	movw	r26, r24
    15cc:	2c 91       	ld	r18, X
    15ce:	2b 37       	cpi	r18, 0x7B	; 123
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <json_create+0x48>
    15d2:	b9 c1       	rjmp	.+882    	; 0x1946 <json_create+0x3ba>
    jsonPool_t pool = { .mem = mem, .qty = qty };
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    15d4:	f5 01       	movw	r30, r10
    15d6:	13 82       	std	Z+3, r1	; 0x03
    15d8:	12 82       	std	Z+2, r1	; 0x02
    obj->sibling = 0;
    15da:	11 82       	std	Z+1, r1	; 0x01
    15dc:	10 82       	st	Z, r1
    obj->u.child = 0;
    15de:	15 82       	std	Z+5, r1	; 0x05
    15e0:	14 82       	std	Z+4, r1	; 0x04
  * @param str Pointer to first character.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
    obj->type    = JSON_OBJ;
    15e2:	16 82       	std	Z+6, r1	; 0x06
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    15e4:	8c 01       	movw	r16, r24
    15e6:	0f 5f       	subi	r16, 0xFF	; 255
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	75 01       	movw	r14, r10

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
    pool->nextFree = 1;
    15ec:	cc 24       	eor	r12, r12
    15ee:	c3 94       	inc	r12
    15f0:	d1 2c       	mov	r13, r1
    if ( *ptr != '0' ) {
        ptr = goNum( ptr );
        if ( !ptr ) return 0;
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    15f2:	68 94       	set
    15f4:	22 24       	eor	r2, r2
    15f6:	22 f8       	bld	r2, 2
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    ptr = parseString( ++ptr );
    if ( !ptr ) return 0;
    property->type = JSON_TEXT;
    15f8:	68 94       	set
    15fa:	44 24       	eor	r4, r4
    15fc:	41 f8       	bld	r4, 1
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    15fe:	33 24       	eor	r3, r3
    1600:	33 94       	inc	r3
        if ( !ptr ) return 0;
        if ( *ptr == ',' ) {
            ++ptr;
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    1602:	0f 2e       	mov	r0, r31
    1604:	fd e7       	ldi	r31, 0x7D	; 125
    1606:	5f 2e       	mov	r5, r31
    1608:	f0 2d       	mov	r31, r0

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    160a:	66 e1       	ldi	r22, 0x16	; 22
    160c:	73 e0       	ldi	r23, 0x03	; 3
    160e:	c8 01       	movw	r24, r16
    1610:	0e 94 21 0a 	call	0x1442	; 0x1442 <_ZL7goWhilePcPKc>
    1614:	9b 83       	std	Y+3, r25	; 0x03
    1616:	8a 83       	std	Y+2, r24	; 0x02
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    for(;;) {
        ptr = goBlank( ptr );
        if ( !ptr ) return 0;
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	09 f4       	brne	.+2      	; 0x161e <json_create+0x92>
    161c:	9a c1       	rjmp	.+820    	; 0x1952 <json_create+0x3c6>
        if ( *ptr == ',' ) {
    161e:	dc 01       	movw	r26, r24
    1620:	8c 91       	ld	r24, X
    1622:	8c 32       	cpi	r24, 0x2C	; 44
    1624:	21 f4       	brne	.+8      	; 0x162e <json_create+0xa2>
            ++ptr;
    1626:	8d 01       	movw	r16, r26
    1628:	0f 5f       	subi	r16, 0xFF	; 255
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	ee cf       	rjmp	.-36     	; 0x160a <json_create+0x7e>
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    162e:	f7 01       	movw	r30, r14
    1630:	96 81       	ldd	r25, Z+6	; 0x06
    1632:	99 23       	and	r25, r25
    1634:	11 f0       	breq	.+4      	; 0x163a <json_create+0xae>
    1636:	2d e5       	ldi	r18, 0x5D	; 93
    1638:	01 c0       	rjmp	.+2      	; 0x163c <json_create+0xb0>
    163a:	25 2d       	mov	r18, r5
        if ( *ptr == endchar ) {
    163c:	82 13       	cpse	r24, r18
    163e:	16 c0       	rjmp	.+44     	; 0x166c <json_create+0xe0>
            *ptr = '\0';
    1640:	aa 81       	ldd	r26, Y+2	; 0x02
    1642:	bb 81       	ldd	r27, Y+3	; 0x03
    1644:	1c 92       	st	X, r1
            json_t* parentObj = obj->sibling;
    1646:	f7 01       	movw	r30, r14
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
            if ( !parentObj ) return ++ptr;
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	31 f4       	brne	.+12     	; 0x165c <json_create+0xd0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	09 f4       	brne	.+2      	; 0x1656 <json_create+0xca>
    1654:	7b c1       	rjmp	.+758    	; 0x194c <json_create+0x3c0>
    return obj;
    1656:	8a 2d       	mov	r24, r10
    1658:	9b 2d       	mov	r25, r11
    165a:	80 c1       	rjmp	.+768    	; 0x195c <json_create+0x3d0>
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
    165c:	11 82       	std	Z+1, r1	; 0x01
    165e:	10 82       	st	Z, r1
            obj = parentObj;
            ++ptr;
    1660:	0a 81       	ldd	r16, Y+2	; 0x02
    1662:	1b 81       	ldd	r17, Y+3	; 0x03
    1664:	0f 5f       	subi	r16, 0xFF	; 255
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
            obj = parentObj;
    1668:	7c 01       	movw	r14, r24
    166a:	cf cf       	rjmp	.-98     	; 0x160a <json_create+0x7e>
/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    166c:	c6 14       	cp	r12, r6
    166e:	d7 04       	cpc	r13, r7
    1670:	08 f0       	brcs	.+2      	; 0x1674 <json_create+0xe8>
    1672:	72 c1       	rjmp	.+740    	; 0x1958 <json_create+0x3cc>
    return &pool->mem[pool->nextFree++];
    1674:	46 01       	movw	r8, r12
    1676:	bf ef       	ldi	r27, 0xFF	; 255
    1678:	8b 1a       	sub	r8, r27
    167a:	9b 0a       	sbc	r9, r27
    167c:	96 01       	movw	r18, r12
    167e:	22 0f       	add	r18, r18
    1680:	33 1f       	adc	r19, r19
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	22 0f       	add	r18, r18
    1688:	33 1f       	adc	r19, r19
    168a:	f9 01       	movw	r30, r18
    168c:	ec 19       	sub	r30, r12
    168e:	fd 09       	sbc	r31, r13
    1690:	6f 01       	movw	r12, r30
    1692:	ca 0c       	add	r12, r10
    1694:	db 1c       	adc	r13, r11
            obj = parentObj;
            ++ptr;
            continue;
        }
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
    1696:	c1 14       	cp	r12, r1
    1698:	d1 04       	cpc	r13, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <json_create+0x112>
    169c:	5a c1       	rjmp	.+692    	; 0x1952 <json_create+0x3c6>
        if( obj->type != JSON_ARRAY ) {
    169e:	91 30       	cpi	r25, 0x01	; 1
    16a0:	31 f1       	breq	.+76     	; 0x16ee <json_create+0x162>
            if ( *ptr != '\"' ) return 0;
    16a2:	82 32       	cpi	r24, 0x22	; 34
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <json_create+0x11c>
    16a6:	55 c1       	rjmp	.+682    	; 0x1952 <json_create+0x3c6>
  * @param str Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	9b 81       	ldd	r25, Y+3	; 0x03
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	d6 01       	movw	r26, r12
    16b0:	13 96       	adiw	r26, 0x03	; 3
    16b2:	9c 93       	st	X, r25
    16b4:	8e 93       	st	-X, r24
    16b6:	12 97       	sbiw	r26, 0x02	; 2
    ptr = parseString( ptr );
    16b8:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZL11parseStringPc>
    if ( !ptr ) return 0;
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	09 f4       	brne	.+2      	; 0x16c2 <json_create+0x136>
    16c0:	4b c1       	rjmp	.+662    	; 0x1958 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    16c2:	66 e1       	ldi	r22, 0x16	; 22
    16c4:	73 e0       	ldi	r23, 0x03	; 3
    16c6:	0e 94 21 0a 	call	0x1442	; 0x1442 <_ZL7goWhilePcPKc>
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    ptr = parseString( ptr );
    if ( !ptr ) return 0;
    ptr = goBlank( ptr );
    if ( !ptr ) return 0;
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <json_create+0x144>
    16ce:	44 c1       	rjmp	.+648    	; 0x1958 <json_create+0x3cc>
    if ( *ptr++ != ':' ) return 0;
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 81       	ld	r18, Z
    16d4:	2a 33       	cpi	r18, 0x3A	; 58
    16d6:	09 f0       	breq	.+2      	; 0x16da <json_create+0x14e>
    16d8:	3f c1       	rjmp	.+638    	; 0x1958 <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    16da:	66 e1       	ldi	r22, 0x16	; 22
    16dc:	73 e0       	ldi	r23, 0x03	; 3
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	0e 94 21 0a 	call	0x1442	; 0x1442 <_ZL7goWhilePcPKc>
    16e4:	9b 83       	std	Y+3, r25	; 0x03
    16e6:	8a 83       	std	Y+2, r24	; 0x02
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
        if( obj->type != JSON_ARRAY ) {
            if ( *ptr != '\"' ) return 0;
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
    16e8:	89 2b       	or	r24, r25
    16ea:	31 f4       	brne	.+12     	; 0x16f8 <json_create+0x16c>
    16ec:	32 c1       	rjmp	.+612    	; 0x1952 <json_create+0x3c6>
        }
        else property->name = 0;
    16ee:	d6 01       	movw	r26, r12
    16f0:	13 96       	adiw	r26, 0x03	; 3
    16f2:	1c 92       	st	X, r1
    16f4:	1e 92       	st	-X, r1
    16f6:	12 97       	sbiw	r26, 0x02	; 2

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
    property->sibling = 0;
    16f8:	f6 01       	movw	r30, r12
    16fa:	11 82       	std	Z+1, r1	; 0x01
    16fc:	10 82       	st	Z, r1
    if ( !obj->u.child ) obj->u.child = property;
    16fe:	d7 01       	movw	r26, r14
    1700:	14 96       	adiw	r26, 0x04	; 4
    1702:	ed 91       	ld	r30, X+
    1704:	fc 91       	ld	r31, X
    1706:	15 97       	sbiw	r26, 0x05	; 5
    1708:	30 97       	sbiw	r30, 0x00	; 0
    170a:	39 f4       	brne	.+14     	; 0x171a <json_create+0x18e>
    170c:	15 96       	adiw	r26, 0x05	; 5
    170e:	dc 92       	st	X, r13
    1710:	ce 92       	st	-X, r12
    1712:	14 97       	sbiw	r26, 0x04	; 4
    1714:	08 c0       	rjmp	.+16     	; 0x1726 <json_create+0x19a>
    else {
        json_t* iter;
        for( iter = obj->u.child; iter->sibling; iter = iter->sibling );
    1716:	fc 01       	movw	r30, r24
    1718:	00 c0       	rjmp	.+0      	; 0x171a <json_create+0x18e>
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	d1 f7       	brne	.-12     	; 0x1716 <json_create+0x18a>
        iter->sibling = property;
    1722:	d1 82       	std	Z+1, r13	; 0x01
    1724:	c0 82       	st	Z, r12
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
        }
        else property->name = 0;
        add( obj, property );
        property->u.value = ptr;
    1726:	ea 81       	ldd	r30, Y+2	; 0x02
    1728:	fb 81       	ldd	r31, Y+3	; 0x03
    172a:	d6 01       	movw	r26, r12
    172c:	15 96       	adiw	r26, 0x05	; 5
    172e:	fc 93       	st	X, r31
    1730:	ee 93       	st	-X, r30
    1732:	14 97       	sbiw	r26, 0x04	; 4
        switch( *ptr ) {
    1734:	80 81       	ld	r24, Z
    1736:	86 36       	cpi	r24, 0x66	; 102
    1738:	09 f4       	brne	.+2      	; 0x173c <json_create+0x1b0>
    173a:	46 c0       	rjmp	.+140    	; 0x17c8 <json_create+0x23c>
    173c:	28 f4       	brcc	.+10     	; 0x1748 <json_create+0x1bc>
    173e:	82 32       	cpi	r24, 0x22	; 34
    1740:	39 f1       	breq	.+78     	; 0x1790 <json_create+0x204>
    1742:	8b 35       	cpi	r24, 0x5B	; 91
    1744:	c9 f0       	breq	.+50     	; 0x1778 <json_create+0x1ec>
    1746:	54 c0       	rjmp	.+168    	; 0x17f0 <json_create+0x264>
    1748:	84 37       	cpi	r24, 0x74	; 116
    174a:	a1 f1       	breq	.+104    	; 0x17b4 <json_create+0x228>
    174c:	8b 37       	cpi	r24, 0x7B	; 123
    174e:	21 f0       	breq	.+8      	; 0x1758 <json_create+0x1cc>
    1750:	8e 36       	cpi	r24, 0x6E	; 110
    1752:	09 f0       	breq	.+2      	; 0x1756 <json_create+0x1ca>
    1754:	4d c0       	rjmp	.+154    	; 0x17f0 <json_create+0x264>
    1756:	42 c0       	rjmp	.+132    	; 0x17dc <json_create+0x250>
            case '{':
                property->type    = JSON_OBJ;
    1758:	d6 01       	movw	r26, r12
    175a:	16 96       	adiw	r26, 0x06	; 6
    175c:	1c 92       	st	X, r1
    175e:	16 97       	sbiw	r26, 0x06	; 6
                property->u.child = 0;
    1760:	15 96       	adiw	r26, 0x05	; 5
    1762:	1c 92       	st	X, r1
    1764:	1e 92       	st	-X, r1
    1766:	14 97       	sbiw	r26, 0x04	; 4
                property->sibling = obj;
    1768:	ed 92       	st	X+, r14
    176a:	fc 92       	st	X, r15
                obj = property;
                ++ptr;
    176c:	0a 81       	ldd	r16, Y+2	; 0x02
    176e:	1b 81       	ldd	r17, Y+3	; 0x03
    1770:	0f 5f       	subi	r16, 0xFF	; 255
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1774:	76 01       	movw	r14, r12
    1776:	df c0       	rjmp	.+446    	; 0x1936 <json_create+0x3aa>
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    1778:	f6 01       	movw	r30, r12
    177a:	36 82       	std	Z+6, r3	; 0x06
                property->u.child = 0;
    177c:	15 82       	std	Z+5, r1	; 0x05
    177e:	14 82       	std	Z+4, r1	; 0x04
                property->sibling = obj;
    1780:	f1 82       	std	Z+1, r15	; 0x01
    1782:	e0 82       	st	Z, r14
                obj = property;
                ++ptr;
    1784:	0a 81       	ldd	r16, Y+2	; 0x02
    1786:	1b 81       	ldd	r17, Y+3	; 0x03
    1788:	0f 5f       	subi	r16, 0xFF	; 255
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    178c:	76 01       	movw	r14, r12
    178e:	d3 c0       	rjmp	.+422    	; 0x1936 <json_create+0x3aa>
  * @param str Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	9b 81       	ldd	r25, Y+3	; 0x03
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	d6 01       	movw	r26, r12
    1798:	15 96       	adiw	r26, 0x05	; 5
    179a:	9c 93       	st	X, r25
    179c:	8e 93       	st	-X, r24
    179e:	14 97       	sbiw	r26, 0x04	; 4
    ptr = parseString( ++ptr );
    17a0:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZL11parseStringPc>
    17a4:	8c 01       	movw	r16, r24
    if ( !ptr ) return 0;
    17a6:	89 2b       	or	r24, r25
    17a8:	09 f4       	brne	.+2      	; 0x17ac <json_create+0x220>
    17aa:	d6 c0       	rjmp	.+428    	; 0x1958 <json_create+0x3cc>
    property->type = JSON_TEXT;
    17ac:	f6 01       	movw	r30, r12
    17ae:	46 82       	std	Z+6, r4	; 0x06
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    17b0:	64 01       	movw	r12, r8
    17b2:	2b cf       	rjmp	.-426    	; 0x160a <json_create+0x7e>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
    17b4:	23 e0       	ldi	r18, 0x03	; 3
    17b6:	4f e1       	ldi	r20, 0x1F	; 31
    17b8:	53 e0       	ldi	r21, 0x03	; 3
    17ba:	b6 01       	movw	r22, r12
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    17c4:	8c 01       	movw	r16, r24
    17c6:	b7 c0       	rjmp	.+366    	; 0x1936 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
    17c8:	23 e0       	ldi	r18, 0x03	; 3
    17ca:	44 e2       	ldi	r20, 0x24	; 36
    17cc:	53 e0       	ldi	r21, 0x03	; 3
    17ce:	b6 01       	movw	r22, r12
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    17d8:	8c 01       	movw	r16, r24
    17da:	ad c0       	rjmp	.+346    	; 0x1936 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "null", JSON_NULL );
    17dc:	26 e0       	ldi	r18, 0x06	; 6
    17de:	4a e2       	ldi	r20, 0x2A	; 42
    17e0:	53 e0       	ldi	r21, 0x03	; 3
    17e2:	b6 01       	movw	r22, r12
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    17ec:	8c 01       	movw	r16, r24
    17ee:	a3 c0       	rjmp	.+326    	; 0x1936 <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
    if ( *ptr == '-' ) ++ptr;
    17f0:	8d 32       	cpi	r24, 0x2D	; 45
    17f2:	21 f4       	brne	.+8      	; 0x17fc <json_create+0x270>
    17f4:	ea 81       	ldd	r30, Y+2	; 0x02
    17f6:	fb 81       	ldd	r31, Y+3	; 0x03
    17f8:	31 96       	adiw	r30, 0x01	; 1
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <json_create+0x274>
    17fc:	ea 81       	ldd	r30, Y+2	; 0x02
    17fe:	fb 81       	ldd	r31, Y+3	; 0x03
    if ( !isNum( *ptr ) ) return 0;
    1800:	80 81       	ld	r24, Z
    1802:	90 ed       	ldi	r25, 0xD0	; 208
    1804:	98 0f       	add	r25, r24
    1806:	9a 30       	cpi	r25, 0x0A	; 10
    1808:	08 f0       	brcs	.+2      	; 0x180c <json_create+0x280>
    180a:	a6 c0       	rjmp	.+332    	; 0x1958 <json_create+0x3cc>
    if ( *ptr != '0' ) {
    180c:	80 33       	cpi	r24, 0x30	; 48
    180e:	39 f0       	breq	.+14     	; 0x181e <json_create+0x292>
        ptr = goNum( ptr );
    1810:	cf 01       	movw	r24, r30
    1812:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZL5goNumPc>
    1816:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
    1818:	89 2b       	or	r24, r25
    181a:	49 f4       	brne	.+18     	; 0x182e <json_create+0x2a2>
    181c:	9d c0       	rjmp	.+314    	; 0x1958 <json_create+0x3cc>
    }
    else if ( isNum( *++ptr ) ) return 0;
    181e:	8f 01       	movw	r16, r30
    1820:	0f 5f       	subi	r16, 0xFF	; 255
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	81 81       	ldd	r24, Z+1	; 0x01
    1826:	80 53       	subi	r24, 0x30	; 48
    1828:	8a 30       	cpi	r24, 0x0A	; 10
    182a:	08 f4       	brcc	.+2      	; 0x182e <json_create+0x2a2>
    182c:	95 c0       	rjmp	.+298    	; 0x1958 <json_create+0x3cc>
    property->type = JSON_INTEGER;
    182e:	d6 01       	movw	r26, r12
    1830:	16 96       	adiw	r26, 0x06	; 6
    1832:	2c 92       	st	X, r2
    if ( *ptr == '.' ) {
    1834:	f8 01       	movw	r30, r16
    1836:	80 81       	ld	r24, Z
    1838:	8e 32       	cpi	r24, 0x2E	; 46
    183a:	89 f4       	brne	.+34     	; 0x185e <json_create+0x2d2>
/** Analyze the decimal part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
    if ( !isNum( *ptr ) ) return 0;
    183c:	81 81       	ldd	r24, Z+1	; 0x01
    183e:	80 53       	subi	r24, 0x30	; 48
    1840:	8a 30       	cpi	r24, 0x0A	; 10
    1842:	08 f0       	brcs	.+2      	; 0x1846 <json_create+0x2ba>
    1844:	86 c0       	rjmp	.+268    	; 0x1952 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    1846:	c8 01       	movw	r24, r16
    1848:	02 96       	adiw	r24, 0x02	; 2
    184a:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZL5goNumPc>
    184e:	8c 01       	movw	r16, r24
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    if ( *ptr == '.' ) {
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
    1850:	89 2b       	or	r24, r25
    1852:	09 f4       	brne	.+2      	; 0x1856 <json_create+0x2ca>
    1854:	81 c0       	rjmp	.+258    	; 0x1958 <json_create+0x3cc>
        property->type = JSON_REAL;
    1856:	e5 e0       	ldi	r30, 0x05	; 5
    1858:	d6 01       	movw	r26, r12
    185a:	16 96       	adiw	r26, 0x06	; 6
    185c:	ec 93       	st	X, r30
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
    185e:	d8 01       	movw	r26, r16
    1860:	8c 91       	ld	r24, X
    1862:	8f 7d       	andi	r24, 0xDF	; 223
    1864:	85 34       	cpi	r24, 0x45	; 69
    1866:	11 f5       	brne	.+68     	; 0x18ac <json_create+0x320>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    1868:	11 96       	adiw	r26, 0x01	; 1
    186a:	8c 91       	ld	r24, X
    186c:	8d 32       	cpi	r24, 0x2D	; 45
    186e:	29 f0       	breq	.+10     	; 0x187a <json_create+0x2ee>
    1870:	8b 32       	cpi	r24, 0x2B	; 43
    1872:	19 f0       	breq	.+6      	; 0x187a <json_create+0x2ee>
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
    1874:	f8 01       	movw	r30, r16
    1876:	31 96       	adiw	r30, 0x01	; 1
    1878:	02 c0       	rjmp	.+4      	; 0x187e <json_create+0x2f2>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    187a:	f8 01       	movw	r30, r16
    187c:	32 96       	adiw	r30, 0x02	; 2
    if ( !isNum( *ptr ) ) return 0;
    187e:	90 81       	ld	r25, Z
    1880:	90 53       	subi	r25, 0x30	; 48
    1882:	9a 30       	cpi	r25, 0x0A	; 10
    1884:	08 f0       	brcs	.+2      	; 0x1888 <json_create+0x2fc>
    1886:	65 c0       	rjmp	.+202    	; 0x1952 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    1888:	cf 01       	movw	r24, r30
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZL5goNumPc>
    1890:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
        if ( !ptr ) return 0;
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	09 f4       	brne	.+2      	; 0x1898 <json_create+0x30c>
    1896:	60 c0       	rjmp	.+192    	; 0x1958 <json_create+0x3cc>
        property->type = JSON_REAL;
    1898:	25 e0       	ldi	r18, 0x05	; 5
    189a:	f6 01       	movw	r30, r12
    189c:	26 83       	std	Z+6, r18	; 0x06
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
    189e:	dc 01       	movw	r26, r24
    18a0:	8c 91       	ld	r24, X
    18a2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZL16isEndOfPrimitivec>
    18a6:	81 11       	cpse	r24, r1
    18a8:	3a c0       	rjmp	.+116    	; 0x191e <json_create+0x392>
    18aa:	56 c0       	rjmp	.+172    	; 0x1958 <json_create+0x3cc>
    18ac:	f8 01       	movw	r30, r16
    18ae:	f0 81       	ld	r31, Z
    18b0:	f9 83       	std	Y+1, r31	; 0x01
    18b2:	8f 2f       	mov	r24, r31
    18b4:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZL16isEndOfPrimitivec>
    18b8:	88 23       	and	r24, r24
    18ba:	09 f4       	brne	.+2      	; 0x18be <json_create+0x332>
    18bc:	4d c0       	rjmp	.+154    	; 0x1958 <json_create+0x3cc>
    if ( JSON_INTEGER == property->type ) {
    18be:	d6 01       	movw	r26, r12
    18c0:	16 96       	adiw	r26, 0x06	; 6
    18c2:	8c 91       	ld	r24, X
    18c4:	84 30       	cpi	r24, 0x04	; 4
    18c6:	59 f5       	brne	.+86     	; 0x191e <json_create+0x392>
        char const* value = property->u.value;
        bool const negative = *value == '-';
    18c8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ca:	fb 81       	ldd	r31, Y+3	; 0x03
    18cc:	40 81       	ld	r20, Z
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
    18ce:	4d 32       	cpi	r20, 0x2D	; 45
    18d0:	19 f0       	breq	.+6      	; 0x18d8 <json_create+0x34c>
    18d2:	83 e1       	ldi	r24, 0x13	; 19
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <json_create+0x350>
    18d8:	84 e1       	ldi	r24, 0x14	; 20
    18da:	90 e0       	ldi	r25, 0x00	; 0
        unsigned int const len = ptr - value;
    18dc:	98 01       	movw	r18, r16
    18de:	6a 81       	ldd	r22, Y+2	; 0x02
    18e0:	7b 81       	ldd	r23, Y+3	; 0x03
    18e2:	26 1b       	sub	r18, r22
    18e4:	37 0b       	sbc	r19, r23
        if ( len > maxdigits ) return 0;
    18e6:	82 17       	cp	r24, r18
    18e8:	93 07       	cpc	r25, r19
    18ea:	b0 f1       	brcs	.+108    	; 0x1958 <json_create+0x3cc>
        if ( len == maxdigits ) {
    18ec:	28 17       	cp	r18, r24
    18ee:	39 07       	cpc	r19, r25
    18f0:	b1 f4       	brne	.+44     	; 0x191e <json_create+0x392>
            char const tmp = *ptr;
            *ptr = '\0';
    18f2:	d8 01       	movw	r26, r16
    18f4:	1c 92       	st	X, r1
            char const* const threshold = negative ? min: max;
    18f6:	4d 32       	cpi	r20, 0x2D	; 45
    18f8:	29 f0       	breq	.+10     	; 0x1904 <json_create+0x378>
    18fa:	ef e2       	ldi	r30, 0x2F	; 47
    18fc:	f3 e0       	ldi	r31, 0x03	; 3
    18fe:	8e 2f       	mov	r24, r30
    1900:	9f 2f       	mov	r25, r31
    1902:	04 c0       	rjmp	.+8      	; 0x190c <json_create+0x380>
    1904:	23 e4       	ldi	r18, 0x43	; 67
    1906:	33 e0       	ldi	r19, 0x03	; 3
    1908:	82 2f       	mov	r24, r18
    190a:	93 2f       	mov	r25, r19
            if ( 0 > strcmp( threshold, value ) ) return 0;
    190c:	6a 81       	ldd	r22, Y+2	; 0x02
    190e:	7b 81       	ldd	r23, Y+3	; 0x03
    1910:	0e 94 02 10 	call	0x2004	; 0x2004 <strcmp>
    1914:	99 23       	and	r25, r25
    1916:	04 f1       	brlt	.+64     	; 0x1958 <json_create+0x3cc>
            *ptr = tmp;
    1918:	e9 81       	ldd	r30, Y+1	; 0x01
    191a:	d8 01       	movw	r26, r16
    191c:	ec 93       	st	X, r30

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
    191e:	6c e1       	ldi	r22, 0x1C	; 28
    1920:	73 e0       	ldi	r23, 0x03	; 3
    1922:	d8 01       	movw	r26, r16
    1924:	8c 91       	ld	r24, X
    1926:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZL11isOneOfThemcPKc>
    192a:	81 11       	cpse	r24, r1
    192c:	04 c0       	rjmp	.+8      	; 0x1936 <json_create+0x3aa>
    192e:	f8 01       	movw	r30, r16
    1930:	10 82       	st	Z, r1
    1932:	0f 5f       	subi	r16, 0xFF	; 255
    1934:	1f 4f       	sbci	r17, 0xFF	; 255
            case 't':  ptr = trueValue( ptr, property );  break;
            case 'f':  ptr = falseValue( ptr, property ); break;
            case 'n':  ptr = nullValue( ptr, property );  break;
            default:   ptr = numValue( ptr, property );   break;
        }
        if ( !ptr ) return 0;
    1936:	01 15       	cp	r16, r1
    1938:	11 05       	cpc	r17, r1
    193a:	59 f0       	breq	.+22     	; 0x1952 <json_create+0x3c6>
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    193c:	64 01       	movw	r12, r8
    193e:	65 ce       	rjmp	.-822    	; 0x160a <json_create+0x7e>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0b c0       	rjmp	.+22     	; 0x195c <json_create+0x3d0>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	08 c0       	rjmp	.+16     	; 0x195c <json_create+0x3d0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	05 c0       	rjmp	.+10     	; 0x195c <json_create+0x3d0>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 c0       	rjmp	.+4      	; 0x195c <json_create+0x3d0>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    return obj;
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	bf 90       	pop	r11
    1974:	af 90       	pop	r10
    1976:	9f 90       	pop	r9
    1978:	8f 90       	pop	r8
    197a:	7f 90       	pop	r7
    197c:	6f 90       	pop	r6
    197e:	5f 90       	pop	r5
    1980:	4f 90       	pop	r4
    1982:	3f 90       	pop	r3
    1984:	2f 90       	pop	r2
    1986:	08 95       	ret

00001988 <_ZN4UART11GetMessagesEv>:
					bufferIndexes[nBuffer]=bufferIndex+1;
				}
			}
		}
	}
	Messages* UART::GetMessages(){
    1988:	3f 92       	push	r3
    198a:	4f 92       	push	r4
    198c:	5f 92       	push	r5
    198e:	6f 92       	push	r6
    1990:	7f 92       	push	r7
    1992:	8f 92       	push	r8
    1994:	9f 92       	push	r9
    1996:	af 92       	push	r10
    1998:	bf 92       	push	r11
    199a:	cf 92       	push	r12
    199c:	df 92       	push	r13
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	2a 97       	sbiw	r28, 0x0a	; 10
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	5c 01       	movw	r10, r24
    19bc:	e1 2c       	mov	r14, r1
    19be:	f1 2c       	mov	r15, r1
		char tempMessagesIndex=0;
    19c0:	31 2c       	mov	r3, r1
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    19c2:	2c 01       	movw	r4, r24
    19c4:	84 ef       	ldi	r24, 0xF4	; 244
    19c6:	48 1a       	sub	r4, r24
    19c8:	8e ef       	ldi	r24, 0xFE	; 254
    19ca:	58 0a       	sbc	r5, r24
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
					tempMessages[tempMessagesIndex]=new Message(buf, length);
					tempMessagesIndex++;
					bufferIndexes[i]=0;
					overflowedBuffers=false;
    19cc:	f5 01       	movw	r30, r10
    19ce:	e2 5f       	subi	r30, 0xF2	; 242
    19d0:	fe 4f       	sbci	r31, 0xFE	; 254
    19d2:	fa 87       	std	Y+10, r31	; 0x0a
    19d4:	e9 87       	std	Y+9, r30	; 0x09
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    19d6:	f2 01       	movw	r30, r4
    19d8:	80 81       	ld	r24, Z
    19da:	8e 15       	cp	r24, r14
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <_ZN4UART11GetMessagesEv+0x58>
    19de:	4f c0       	rjmp	.+158    	; 0x1a7e <_ZN4UART11GetMessagesEv+0xf6>
				if(bufferIndexes[i]>0){
    19e0:	47 01       	movw	r8, r14
    19e2:	67 01       	movw	r12, r14
    19e4:	cc 0c       	add	r12, r12
    19e6:	dd 1c       	adc	r13, r13
    19e8:	ca 0c       	add	r12, r10
    19ea:	db 1c       	adc	r13, r11
    19ec:	f6 01       	movw	r30, r12
    19ee:	84 81       	ldd	r24, Z+4	; 0x04
    19f0:	95 81       	ldd	r25, Z+5	; 0x05
    19f2:	18 16       	cp	r1, r24
    19f4:	19 06       	cpc	r1, r25
    19f6:	0c f0       	brlt	.+2      	; 0x19fa <_ZN4UART11GetMessagesEv+0x72>
    19f8:	42 c0       	rjmp	.+132    	; 0x1a7e <_ZN4UART11GetMessagesEv+0xf6>

				unsigned int length = bufferIndexes[i];
    19fa:	04 81       	ldd	r16, Z+4	; 0x04
    19fc:	15 81       	ldd	r17, Z+5	; 0x05
					char* buf = new char[ length+1];
    19fe:	c8 01       	movw	r24, r16
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	0e 94 33 09 	call	0x1266	; 0x1266 <_Znaj>
    1a06:	3c 01       	movw	r6, r24
					for (int j = 0; j < length; j++)
    1a08:	01 15       	cp	r16, r1
    1a0a:	11 05       	cpc	r17, r1
    1a0c:	c1 f0       	breq	.+48     	; 0x1a3e <_ZN4UART11GetMessagesEv+0xb6>
    1a0e:	fc 01       	movw	r30, r24
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
					buf[j] = (char)buffer[i][j];
    1a14:	00 24       	eor	r0, r0
    1a16:	96 94       	lsr	r9
    1a18:	87 94       	ror	r8
    1a1a:	07 94       	ror	r0
    1a1c:	96 94       	lsr	r9
    1a1e:	87 94       	ror	r8
    1a20:	07 94       	ror	r0
    1a22:	98 2c       	mov	r9, r8
    1a24:	80 2c       	mov	r8, r0
    1a26:	8a 0c       	add	r8, r10
    1a28:	9b 1c       	adc	r9, r11
    1a2a:	d4 01       	movw	r26, r8
    1a2c:	a8 0f       	add	r26, r24
    1a2e:	b9 1f       	adc	r27, r25
    1a30:	1c 96       	adiw	r26, 0x0c	; 12
    1a32:	2c 91       	ld	r18, X
    1a34:	21 93       	st	Z+, r18
			if(i!=nBuffer){
				if(bufferIndexes[i]>0){

				unsigned int length = bufferIndexes[i];
					char* buf = new char[ length+1];
					for (int j = 0; j < length; j++)
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	08 17       	cp	r16, r24
    1a3a:	19 07       	cpc	r17, r25
    1a3c:	b1 f7       	brne	.-20     	; 0x1a2a <_ZN4UART11GetMessagesEv+0xa2>
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
    1a3e:	f3 01       	movw	r30, r6
    1a40:	e0 0f       	add	r30, r16
    1a42:	f1 1f       	adc	r31, r17
    1a44:	10 82       	st	Z, r1
					tempMessages[tempMessagesIndex]=new Message(buf, length);
    1a46:	84 e0       	ldi	r24, 0x04	; 4
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
    1a4e:	4c 01       	movw	r8, r24
    1a50:	a8 01       	movw	r20, r16
    1a52:	b3 01       	movw	r22, r6
    1a54:	0e 94 88 04 	call	0x910	; 0x910 <_ZN7MessageC1EPKcj>
    1a58:	e3 2d       	mov	r30, r3
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	ee 0f       	add	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	8c 0f       	add	r24, r28
    1a66:	9d 1f       	adc	r25, r29
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	91 82       	std	Z+1, r9	; 0x01
    1a6e:	80 82       	st	Z, r8
					tempMessagesIndex++;
    1a70:	33 94       	inc	r3
					bufferIndexes[i]=0;
    1a72:	f6 01       	movw	r30, r12
    1a74:	15 82       	std	Z+5, r1	; 0x05
    1a76:	14 82       	std	Z+4, r1	; 0x04
					overflowedBuffers=false;
    1a78:	e9 85       	ldd	r30, Y+9	; 0x09
    1a7a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a7c:	10 82       	st	Z, r1
    1a7e:	ff ef       	ldi	r31, 0xFF	; 255
    1a80:	ef 1a       	sub	r14, r31
    1a82:	ff 0a       	sbc	r15, r31
		}
	}
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
    1a84:	84 e0       	ldi	r24, 0x04	; 4
    1a86:	e8 16       	cp	r14, r24
    1a88:	f1 04       	cpc	r15, r1
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <_ZN4UART11GetMessagesEv+0x106>
    1a8c:	a4 cf       	rjmp	.-184    	; 0x19d6 <_ZN4UART11GetMessagesEv+0x4e>
					bufferIndexes[i]=0;
					overflowedBuffers=false;
				}
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
    1a8e:	33 20       	and	r3, r3
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <_ZN4UART11GetMessagesEv+0x122>
    1a92:	84 e0       	ldi	r24, 0x04	; 4
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 30 09 	call	0x1260	; 0x1260 <_Znwj>
    1a9a:	8c 01       	movw	r16, r24
    1a9c:	43 2d       	mov	r20, r3
    1a9e:	be 01       	movw	r22, r28
    1aa0:	6f 5f       	subi	r22, 0xFF	; 255
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN8MessagesC1EPP7Messagec>
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <_ZN4UART11GetMessagesEv+0x126>
    1aaa:	00 e0       	ldi	r16, 0x00	; 0
    1aac:	10 e0       	ldi	r17, 0x00	; 0
		return m;
}
    1aae:	c8 01       	movw	r24, r16
    1ab0:	2a 96       	adiw	r28, 0x0a	; 10
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	9f 90       	pop	r9
    1ad2:	8f 90       	pop	r8
    1ad4:	7f 90       	pop	r7
    1ad6:	6f 90       	pop	r6
    1ad8:	5f 90       	pop	r5
    1ada:	4f 90       	pop	r4
    1adc:	3f 90       	pop	r3
    1ade:	08 95       	ret

00001ae0 <_ZThn2_N4UART11GetMessagesEv>:
    1ae0:	02 97       	sbiw	r24, 0x02	; 2
    1ae2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN4UART11GetMessagesEv>
    1ae6:	08 95       	ret

00001ae8 <_ZN4UART10InitializeEv>:
 initialized=true;
 }
	return _Singleton;
}
 void UART::Initialize ()
{
    1ae8:	fc 01       	movw	r30, r24
	//volatile int bufferIndexes[UART_N_BUFFERS];
	//volatile char buffer[UART_N_BUFFERS][UART_BUFFER_SIZE] ;
	
	nBuffer=0;
    1aea:	dc 01       	movw	r26, r24
    1aec:	a4 5f       	subi	r26, 0xF4	; 244
    1aee:	be 4f       	sbci	r27, 0xFE	; 254
    1af0:	1c 92       	st	X, r1
	overflowedCurrentBuffer=false;
    1af2:	11 96       	adiw	r26, 0x01	; 1
    1af4:	1c 92       	st	X, r1
	overflowedBuffers=false;
    1af6:	11 96       	adiw	r26, 0x01	; 1
    1af8:	1c 92       	st	X, r1
	DDRD =DDRD&0xFE;
    1afa:	50 98       	cbi	0x0a, 0	; 10
	DDRD = DDRD | 0x2;
    1afc:	51 9a       	sbi	0x0a, 1	; 10
//PORTD=PORTD&0x1;
	for(char i=0; i<UART_N_BUFFERS; i++)
	{
		bufferIndexes[i]=0;
    1afe:	15 82       	std	Z+5, r1	; 0x05
    1b00:	14 82       	std	Z+4, r1	; 0x04
    1b02:	17 82       	std	Z+7, r1	; 0x07
    1b04:	16 82       	std	Z+6, r1	; 0x06
    1b06:	11 86       	std	Z+9, r1	; 0x09
    1b08:	10 86       	std	Z+8, r1	; 0x08
    1b0a:	13 86       	std	Z+11, r1	; 0x0b
    1b0c:	12 86       	std	Z+10, r1	; 0x0a
	}
	UBRR0H = UBRRH_VALUE;
    1b0e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    1b12:	83 e3       	ldi	r24, 0x33	; 51
    1b14:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#if USE_U2X
	UCSR0A |= (1<<U2X0);
	#else
	UCSR0A &= ~(1<<U2X0);
    1b18:	e0 ec       	ldi	r30, 0xC0	; 192
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	8d 7f       	andi	r24, 0xFD	; 253
    1b20:	80 83       	st	Z, r24
	#endif
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|( 1<<RXCIE0);
    1b22:	88 e9       	ldi	r24, 0x98	; 152
    1b24:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    1b28:	e2 ec       	ldi	r30, 0xC2	; 194
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	86 60       	ori	r24, 0x06	; 6
    1b30:	80 83       	st	Z, r24

	sei();
    1b32:	78 94       	sei
    1b34:	08 95       	ret

00001b36 <_ZN4UART11GetInstanceEv>:
#include <util/setbaud.h>

 UART UART:: _Singleton;
  UART& UART::GetInstance(){
 static bool initialized=false;
 if(!initialized)
    1b36:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <_ZZN4UART11GetInstanceEvE11initialized>
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	07 c0       	rjmp	.+14     	; 0x1b4c <_ZN4UART11GetInstanceEv+0x16>
 {
 _Singleton.Initialize();
    1b3e:	89 e9       	ldi	r24, 0x99	; 153
    1b40:	93 e0       	ldi	r25, 0x03	; 3
    1b42:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN4UART10InitializeEv>
 initialized=true;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <_ZZN4UART11GetInstanceEvE11initialized>
 }
	return _Singleton;
}
    1b4c:	89 e9       	ldi	r24, 0x99	; 153
    1b4e:	93 e0       	ldi	r25, 0x03	; 3
    1b50:	08 95       	ret

00001b52 <_ZN4UART8IncomingEv>:

	sei();
}

void UART::Incoming(){
	unsigned char data = UDR0;
    1b52:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(    data==13||data==10   )
    1b56:	2d 30       	cpi	r18, 0x0D	; 13
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <_ZN4UART8IncomingEv+0xe>
    1b5a:	2a 30       	cpi	r18, 0x0A	; 10
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <_ZN4UART8IncomingEv+0xe>
    1b5e:	67 c0       	rjmp	.+206    	; 0x1c2e <_ZN4UART8IncomingEv+0xdc>
	{
		if(bufferIndexes[nBuffer]!=0)
    1b60:	fc 01       	movw	r30, r24
    1b62:	e4 5f       	subi	r30, 0xF4	; 244
    1b64:	fe 4f       	sbci	r31, 0xFE	; 254
    1b66:	e0 81       	ld	r30, Z
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	32 96       	adiw	r30, 0x02	; 2
    1b6c:	ee 0f       	add	r30, r30
    1b6e:	ff 1f       	adc	r31, r31
    1b70:	e8 0f       	add	r30, r24
    1b72:	f9 1f       	adc	r31, r25
    1b74:	20 81       	ld	r18, Z
    1b76:	31 81       	ldd	r19, Z+1	; 0x01
    1b78:	23 2b       	or	r18, r19
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <_ZN4UART8IncomingEv+0x2c>
    1b7c:	94 c0       	rjmp	.+296    	; 0x1ca6 <_ZN4UART8IncomingEv+0x154>
		{
			if(!overflowedCurrentBuffer)
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e3 5f       	subi	r30, 0xF3	; 243
    1b82:	fe 4f       	sbci	r31, 0xFE	; 254
    1b84:	20 81       	ld	r18, Z
    1b86:	21 11       	cpse	r18, r1
    1b88:	41 c0       	rjmp	.+130    	; 0x1c0c <_ZN4UART8IncomingEv+0xba>
			{
				if(nBuffer<UART_N_BUFFERS-1)
    1b8a:	31 97       	sbiw	r30, 0x01	; 1
    1b8c:	20 81       	ld	r18, Z
    1b8e:	23 30       	cpi	r18, 0x03	; 3
    1b90:	30 f0       	brcs	.+12     	; 0x1b9e <_ZN4UART8IncomingEv+0x4c>
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1b92:	fc 01       	movw	r30, r24
    1b94:	24 81       	ldd	r18, Z+4	; 0x04
    1b96:	35 81       	ldd	r19, Z+5	; 0x05
    1b98:	23 2b       	or	r18, r19
    1b9a:	a9 f4       	brne	.+42     	; 0x1bc6 <_ZN4UART8IncomingEv+0x74>
    1b9c:	27 c0       	rjmp	.+78     	; 0x1bec <_ZN4UART8IncomingEv+0x9a>
		{
			if(!overflowedCurrentBuffer)
			{
				if(nBuffer<UART_N_BUFFERS-1)
				{
					nBuffer++;
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	e4 5f       	subi	r30, 0xF4	; 244
    1ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba4:	20 81       	ld	r18, Z
    1ba6:	2f 5f       	subi	r18, 0xFF	; 255
    1ba8:	20 83       	st	Z, r18
					bufferIndexes[nBuffer]=0;
    1baa:	e0 81       	ld	r30, Z
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	32 96       	adiw	r30, 0x02	; 2
    1bb0:	ee 0f       	add	r30, r30
    1bb2:	ff 1f       	adc	r31, r31
    1bb4:	e8 0f       	add	r30, r24
    1bb6:	f9 1f       	adc	r31, r25
    1bb8:	11 82       	std	Z+1, r1	; 0x01
    1bba:	10 82       	st	Z, r1
					overflowedCurrentBuffer=false;
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e3 5f       	subi	r30, 0xF3	; 243
    1bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc2:	10 82       	st	Z, r1
    1bc4:	08 95       	ret
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	26 81       	ldd	r18, Z+6	; 0x06
    1bca:	37 81       	ldd	r19, Z+7	; 0x07
    1bcc:	23 2b       	or	r18, r19
    1bce:	51 f0       	breq	.+20     	; 0x1be4 <_ZN4UART8IncomingEv+0x92>
    1bd0:	20 85       	ldd	r18, Z+8	; 0x08
    1bd2:	31 85       	ldd	r19, Z+9	; 0x09
    1bd4:	23 2b       	or	r18, r19
    1bd6:	41 f0       	breq	.+16     	; 0x1be8 <_ZN4UART8IncomingEv+0x96>
    1bd8:	22 85       	ldd	r18, Z+10	; 0x0a
    1bda:	33 85       	ldd	r19, Z+11	; 0x0b
    1bdc:	23 2b       	or	r18, r19
    1bde:	81 f4       	brne	.+32     	; 0x1c00 <_ZN4UART8IncomingEv+0xae>
					overflowedCurrentBuffer=false;

				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
    1be0:	23 e0       	ldi	r18, 0x03	; 3
    1be2:	05 c0       	rjmp	.+10     	; 0x1bee <_ZN4UART8IncomingEv+0x9c>
    1be4:	21 e0       	ldi	r18, 0x01	; 1
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <_ZN4UART8IncomingEv+0x9c>
    1be8:	22 e0       	ldi	r18, 0x02	; 2
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <_ZN4UART8IncomingEv+0x9c>
					{
						if(bufferIndexes[i]==0)
    1bec:	20 e0       	ldi	r18, 0x00	; 0
						{
							nBuffer=i;
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e4 5f       	subi	r30, 0xF4	; 244
    1bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf4:	20 83       	st	Z, r18
							overflowedCurrentBuffer=false;
    1bf6:	31 96       	adiw	r30, 0x01	; 1
    1bf8:	10 82       	st	Z, r1
							overflowedBuffers=false;
    1bfa:	31 96       	adiw	r30, 0x01	; 1
    1bfc:	10 82       	st	Z, r1
							return;
    1bfe:	08 95       	ret
						}
					}
					overflowedBuffers=true;
    1c00:	fc 01       	movw	r30, r24
    1c02:	e2 5f       	subi	r30, 0xF2	; 242
    1c04:	fe 4f       	sbci	r31, 0xFE	; 254
    1c06:	21 e0       	ldi	r18, 0x01	; 1
    1c08:	20 83       	st	Z, r18
    1c0a:	08 95       	ret
				}
			}
			else
			{
				overflowedCurrentBuffer=false;
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	e3 5f       	subi	r30, 0xF3	; 243
    1c10:	fe 4f       	sbci	r31, 0xFE	; 254
    1c12:	10 82       	st	Z, r1
				bufferIndexes[nBuffer]=0;
    1c14:	31 97       	sbiw	r30, 0x01	; 1
    1c16:	20 81       	ld	r18, Z
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	2e 5f       	subi	r18, 0xFE	; 254
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	fc 01       	movw	r30, r24
    1c24:	e2 0f       	add	r30, r18
    1c26:	f3 1f       	adc	r31, r19
    1c28:	11 82       	std	Z+1, r1	; 0x01
    1c2a:	10 82       	st	Z, r1
    1c2c:	08 95       	ret
			}
		}
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
    1c2e:	fc 01       	movw	r30, r24
    1c30:	e3 5f       	subi	r30, 0xF3	; 243
    1c32:	fe 4f       	sbci	r31, 0xFE	; 254
    1c34:	30 81       	ld	r19, Z
    1c36:	31 11       	cpse	r19, r1
    1c38:	36 c0       	rjmp	.+108    	; 0x1ca6 <_ZN4UART8IncomingEv+0x154>
    1c3a:	31 96       	adiw	r30, 0x01	; 1
    1c3c:	30 81       	ld	r19, Z
    1c3e:	31 11       	cpse	r19, r1
    1c40:	32 c0       	rjmp	.+100    	; 0x1ca6 <_ZN4UART8IncomingEv+0x154>
    1c42:	21 c0       	rjmp	.+66     	; 0x1c86 <_ZN4UART8IncomingEv+0x134>
		{
			int bufferIndex=bufferIndexes[nBuffer];
			if(bufferIndex>=UART_BUFFER_SIZE)
			{
				overflowedCurrentBuffer=true;
    1c44:	fc 01       	movw	r30, r24
    1c46:	e3 5f       	subi	r30, 0xF3	; 243
    1c48:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4a:	21 e0       	ldi	r18, 0x01	; 1
    1c4c:	20 83       	st	Z, r18
    1c4e:	08 95       	ret
			}
			else{
					buffer[nBuffer][bufferIndex]=data;
    1c50:	dc 01       	movw	r26, r24
    1c52:	a4 5f       	subi	r26, 0xF4	; 244
    1c54:	be 4f       	sbci	r27, 0xFE	; 254
    1c56:	3c 91       	ld	r19, X
    1c58:	fc 01       	movw	r30, r24
    1c5a:	60 e4       	ldi	r22, 0x40	; 64
    1c5c:	36 9f       	mul	r19, r22
    1c5e:	e0 0d       	add	r30, r0
    1c60:	f1 1d       	adc	r31, r1
    1c62:	11 24       	eor	r1, r1
    1c64:	e4 0f       	add	r30, r20
    1c66:	f5 1f       	adc	r31, r21
    1c68:	24 87       	std	Z+12, r18	; 0x0c
					bufferIndexes[nBuffer]=bufferIndex+1;
    1c6a:	2c 91       	ld	r18, X
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4f 5f       	subi	r20, 0xFF	; 255
    1c70:	5f 4f       	sbci	r21, 0xFF	; 255
    1c72:	2e 5f       	subi	r18, 0xFE	; 254
    1c74:	3f 4f       	sbci	r19, 0xFF	; 255
    1c76:	22 0f       	add	r18, r18
    1c78:	33 1f       	adc	r19, r19
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	e2 0f       	add	r30, r18
    1c7e:	f3 1f       	adc	r31, r19
    1c80:	51 83       	std	Z+1, r21	; 0x01
    1c82:	40 83       	st	Z, r20
    1c84:	08 95       	ret
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
		{
			int bufferIndex=bufferIndexes[nBuffer];
    1c86:	fc 01       	movw	r30, r24
    1c88:	e4 5f       	subi	r30, 0xF4	; 244
    1c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8c:	e0 81       	ld	r30, Z
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	32 96       	adiw	r30, 0x02	; 2
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	e8 0f       	add	r30, r24
    1c98:	f9 1f       	adc	r31, r25
    1c9a:	40 81       	ld	r20, Z
    1c9c:	51 81       	ldd	r21, Z+1	; 0x01
			if(bufferIndex>=UART_BUFFER_SIZE)
    1c9e:	40 34       	cpi	r20, 0x40	; 64
    1ca0:	51 05       	cpc	r21, r1
    1ca2:	b4 f2       	brlt	.-84     	; 0x1c50 <_ZN4UART8IncomingEv+0xfe>
    1ca4:	cf cf       	rjmp	.-98     	; 0x1c44 <_ZN4UART8IncomingEv+0xf2>
    1ca6:	08 95       	ret

00001ca8 <__vector_18>:
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
		return m;
}
	ISR(USART_RX_vect){
    1ca8:	1f 92       	push	r1
    1caa:	0f 92       	push	r0
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	0f 92       	push	r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	2f 93       	push	r18
    1cb4:	3f 93       	push	r19
    1cb6:	4f 93       	push	r20
    1cb8:	5f 93       	push	r21
    1cba:	6f 93       	push	r22
    1cbc:	7f 93       	push	r23
    1cbe:	8f 93       	push	r24
    1cc0:	9f 93       	push	r25
    1cc2:	af 93       	push	r26
    1cc4:	bf 93       	push	r27
    1cc6:	ef 93       	push	r30
    1cc8:	ff 93       	push	r31
		cli();
    1cca:	f8 94       	cli
		UART::GetInstance().Incoming();
    1ccc:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <_ZN4UART11GetInstanceEv>
    1cd0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <_ZN4UART8IncomingEv>
		sei();
    1cd4:	78 94       	sei
	}
    1cd6:	ff 91       	pop	r31
    1cd8:	ef 91       	pop	r30
    1cda:	bf 91       	pop	r27
    1cdc:	af 91       	pop	r26
    1cde:	9f 91       	pop	r25
    1ce0:	8f 91       	pop	r24
    1ce2:	7f 91       	pop	r23
    1ce4:	6f 91       	pop	r22
    1ce6:	5f 91       	pop	r21
    1ce8:	4f 91       	pop	r20
    1cea:	3f 91       	pop	r19
    1cec:	2f 91       	pop	r18
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <_ZN4UART4SendEc>:
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
    1cf8:	e0 ec       	ldi	r30, 0xC0	; 192
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	85 ff       	sbrs	r24, 5
    1d00:	fd cf       	rjmp	.-6      	; 0x1cfc <_ZN4UART4SendEc+0x4>
		UDR0=message;
    1d02:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1d06:	08 95       	ret

00001d08 <_ZN4UART11SendMessageEPKcj>:
	}
	void UART::SendMessage(const char* message, unsigned int length){
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
		for(unsigned int i=0; i<length; i++)
    1d14:	41 15       	cp	r20, r1
    1d16:	51 05       	cpc	r21, r1
    1d18:	61 f0       	breq	.+24     	; 0x1d32 <_ZN4UART11SendMessageEPKcj+0x2a>
    1d1a:	8b 01       	movw	r16, r22
    1d1c:	7c 01       	movw	r14, r24
    1d1e:	eb 01       	movw	r28, r22
    1d20:	04 0f       	add	r16, r20
    1d22:	15 1f       	adc	r17, r21
		Send(*(message+i));
    1d24:	69 91       	ld	r22, Y+
    1d26:	c7 01       	movw	r24, r14
    1d28:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN4UART4SendEc>
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
		UDR0=message;
	}
	void UART::SendMessage(const char* message, unsigned int length){
		for(unsigned int i=0; i<length; i++)
    1d2c:	c0 17       	cp	r28, r16
    1d2e:	d1 07       	cpc	r29, r17
    1d30:	c9 f7       	brne	.-14     	; 0x1d24 <_ZN4UART11SendMessageEPKcj+0x1c>
		Send(*(message+i));
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	ff 90       	pop	r15
    1d3c:	ef 90       	pop	r14
    1d3e:	08 95       	ret

00001d40 <_GLOBAL__sub_I__ZN4UART10_SingletonE>:
void operator=(UART const&) = delete; // Don't implement
protected:
public:

private:
UART(){}
    1d40:	e9 e9       	ldi	r30, 0x99	; 153
    1d42:	f3 e0       	ldi	r31, 0x03	; 3
    1d44:	8c e6       	ldi	r24, 0x6C	; 108
    1d46:	93 e0       	ldi	r25, 0x03	; 3
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	80 83       	st	Z, r24
    1d4c:	84 e7       	ldi	r24, 0x74	; 116
    1d4e:	93 e0       	ldi	r25, 0x03	; 3
    1d50:	93 83       	std	Z+3, r25	; 0x03
    1d52:	82 83       	std	Z+2, r24	; 0x02
    1d54:	08 95       	ret

00001d56 <__tablejump2__>:
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	05 90       	lpm	r0, Z+
    1d5c:	f4 91       	lpm	r31, Z
    1d5e:	e0 2d       	mov	r30, r0
    1d60:	09 94       	ijmp

00001d62 <malloc>:
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	10 f4       	brcc	.+4      	; 0x1d74 <malloc+0x12>
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <__flp>
    1d78:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <__flp+0x1>
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	a0 e0       	ldi	r26, 0x00	; 0
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	30 97       	sbiw	r30, 0x00	; 0
    1d86:	19 f1       	breq	.+70     	; 0x1dce <malloc+0x6c>
    1d88:	40 81       	ld	r20, Z
    1d8a:	51 81       	ldd	r21, Z+1	; 0x01
    1d8c:	02 81       	ldd	r16, Z+2	; 0x02
    1d8e:	13 81       	ldd	r17, Z+3	; 0x03
    1d90:	48 17       	cp	r20, r24
    1d92:	59 07       	cpc	r21, r25
    1d94:	c8 f0       	brcs	.+50     	; 0x1dc8 <malloc+0x66>
    1d96:	84 17       	cp	r24, r20
    1d98:	95 07       	cpc	r25, r21
    1d9a:	69 f4       	brne	.+26     	; 0x1db6 <malloc+0x54>
    1d9c:	10 97       	sbiw	r26, 0x00	; 0
    1d9e:	31 f0       	breq	.+12     	; 0x1dac <malloc+0x4a>
    1da0:	12 96       	adiw	r26, 0x02	; 2
    1da2:	0c 93       	st	X, r16
    1da4:	12 97       	sbiw	r26, 0x02	; 2
    1da6:	13 96       	adiw	r26, 0x03	; 3
    1da8:	1c 93       	st	X, r17
    1daa:	27 c0       	rjmp	.+78     	; 0x1dfa <malloc+0x98>
    1dac:	00 93 aa 04 	sts	0x04AA, r16	; 0x8004aa <__flp>
    1db0:	10 93 ab 04 	sts	0x04AB, r17	; 0x8004ab <__flp+0x1>
    1db4:	22 c0       	rjmp	.+68     	; 0x1dfa <malloc+0x98>
    1db6:	21 15       	cp	r18, r1
    1db8:	31 05       	cpc	r19, r1
    1dba:	19 f0       	breq	.+6      	; 0x1dc2 <malloc+0x60>
    1dbc:	42 17       	cp	r20, r18
    1dbe:	53 07       	cpc	r21, r19
    1dc0:	18 f4       	brcc	.+6      	; 0x1dc8 <malloc+0x66>
    1dc2:	9a 01       	movw	r18, r20
    1dc4:	bd 01       	movw	r22, r26
    1dc6:	ef 01       	movw	r28, r30
    1dc8:	df 01       	movw	r26, r30
    1dca:	f8 01       	movw	r30, r16
    1dcc:	db cf       	rjmp	.-74     	; 0x1d84 <malloc+0x22>
    1dce:	21 15       	cp	r18, r1
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	f9 f0       	breq	.+62     	; 0x1e12 <malloc+0xb0>
    1dd4:	28 1b       	sub	r18, r24
    1dd6:	39 0b       	sbc	r19, r25
    1dd8:	24 30       	cpi	r18, 0x04	; 4
    1dda:	31 05       	cpc	r19, r1
    1ddc:	80 f4       	brcc	.+32     	; 0x1dfe <malloc+0x9c>
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	61 15       	cp	r22, r1
    1de4:	71 05       	cpc	r23, r1
    1de6:	21 f0       	breq	.+8      	; 0x1df0 <malloc+0x8e>
    1de8:	fb 01       	movw	r30, r22
    1dea:	93 83       	std	Z+3, r25	; 0x03
    1dec:	82 83       	std	Z+2, r24	; 0x02
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <malloc+0x96>
    1df0:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <__flp+0x1>
    1df4:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <__flp>
    1df8:	fe 01       	movw	r30, r28
    1dfa:	32 96       	adiw	r30, 0x02	; 2
    1dfc:	44 c0       	rjmp	.+136    	; 0x1e86 <malloc+0x124>
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e2 0f       	add	r30, r18
    1e02:	f3 1f       	adc	r31, r19
    1e04:	81 93       	st	Z+, r24
    1e06:	91 93       	st	Z+, r25
    1e08:	22 50       	subi	r18, 0x02	; 2
    1e0a:	31 09       	sbc	r19, r1
    1e0c:	39 83       	std	Y+1, r19	; 0x01
    1e0e:	28 83       	st	Y, r18
    1e10:	3a c0       	rjmp	.+116    	; 0x1e86 <malloc+0x124>
    1e12:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__brkval>
    1e16:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <__brkval+0x1>
    1e1a:	23 2b       	or	r18, r19
    1e1c:	41 f4       	brne	.+16     	; 0x1e2e <malloc+0xcc>
    1e1e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1e22:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1e26:	30 93 a9 04 	sts	0x04A9, r19	; 0x8004a9 <__brkval+0x1>
    1e2a:	20 93 a8 04 	sts	0x04A8, r18	; 0x8004a8 <__brkval>
    1e2e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1e32:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1e36:	21 15       	cp	r18, r1
    1e38:	31 05       	cpc	r19, r1
    1e3a:	41 f4       	brne	.+16     	; 0x1e4c <malloc+0xea>
    1e3c:	2d b7       	in	r18, 0x3d	; 61
    1e3e:	3e b7       	in	r19, 0x3e	; 62
    1e40:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1e44:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1e48:	24 1b       	sub	r18, r20
    1e4a:	35 0b       	sbc	r19, r21
    1e4c:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <__brkval>
    1e50:	f0 91 a9 04 	lds	r31, 0x04A9	; 0x8004a9 <__brkval+0x1>
    1e54:	e2 17       	cp	r30, r18
    1e56:	f3 07       	cpc	r31, r19
    1e58:	a0 f4       	brcc	.+40     	; 0x1e82 <malloc+0x120>
    1e5a:	2e 1b       	sub	r18, r30
    1e5c:	3f 0b       	sbc	r19, r31
    1e5e:	28 17       	cp	r18, r24
    1e60:	39 07       	cpc	r19, r25
    1e62:	78 f0       	brcs	.+30     	; 0x1e82 <malloc+0x120>
    1e64:	ac 01       	movw	r20, r24
    1e66:	4e 5f       	subi	r20, 0xFE	; 254
    1e68:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6a:	24 17       	cp	r18, r20
    1e6c:	35 07       	cpc	r19, r21
    1e6e:	48 f0       	brcs	.+18     	; 0x1e82 <malloc+0x120>
    1e70:	4e 0f       	add	r20, r30
    1e72:	5f 1f       	adc	r21, r31
    1e74:	50 93 a9 04 	sts	0x04A9, r21	; 0x8004a9 <__brkval+0x1>
    1e78:	40 93 a8 04 	sts	0x04A8, r20	; 0x8004a8 <__brkval>
    1e7c:	81 93       	st	Z+, r24
    1e7e:	91 93       	st	Z+, r25
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <malloc+0x124>
    1e82:	e0 e0       	ldi	r30, 0x00	; 0
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	cf 01       	movw	r24, r30
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	08 95       	ret

00001e92 <free>:
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <free+0xa>
    1e9a:	81 c0       	rjmp	.+258    	; 0x1f9e <free+0x10c>
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	32 97       	sbiw	r30, 0x02	; 2
    1ea0:	13 82       	std	Z+3, r1	; 0x03
    1ea2:	12 82       	std	Z+2, r1	; 0x02
    1ea4:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <__flp>
    1ea8:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <__flp+0x1>
    1eac:	10 97       	sbiw	r26, 0x00	; 0
    1eae:	81 f4       	brne	.+32     	; 0x1ed0 <free+0x3e>
    1eb0:	20 81       	ld	r18, Z
    1eb2:	31 81       	ldd	r19, Z+1	; 0x01
    1eb4:	82 0f       	add	r24, r18
    1eb6:	93 1f       	adc	r25, r19
    1eb8:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__brkval>
    1ebc:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <__brkval+0x1>
    1ec0:	28 17       	cp	r18, r24
    1ec2:	39 07       	cpc	r19, r25
    1ec4:	51 f5       	brne	.+84     	; 0x1f1a <free+0x88>
    1ec6:	f0 93 a9 04 	sts	0x04A9, r31	; 0x8004a9 <__brkval+0x1>
    1eca:	e0 93 a8 04 	sts	0x04A8, r30	; 0x8004a8 <__brkval>
    1ece:	67 c0       	rjmp	.+206    	; 0x1f9e <free+0x10c>
    1ed0:	ed 01       	movw	r28, r26
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	ce 17       	cp	r28, r30
    1ed8:	df 07       	cpc	r29, r31
    1eda:	40 f4       	brcc	.+16     	; 0x1eec <free+0x5a>
    1edc:	4a 81       	ldd	r20, Y+2	; 0x02
    1ede:	5b 81       	ldd	r21, Y+3	; 0x03
    1ee0:	9e 01       	movw	r18, r28
    1ee2:	41 15       	cp	r20, r1
    1ee4:	51 05       	cpc	r21, r1
    1ee6:	f1 f0       	breq	.+60     	; 0x1f24 <free+0x92>
    1ee8:	ea 01       	movw	r28, r20
    1eea:	f5 cf       	rjmp	.-22     	; 0x1ed6 <free+0x44>
    1eec:	d3 83       	std	Z+3, r29	; 0x03
    1eee:	c2 83       	std	Z+2, r28	; 0x02
    1ef0:	40 81       	ld	r20, Z
    1ef2:	51 81       	ldd	r21, Z+1	; 0x01
    1ef4:	84 0f       	add	r24, r20
    1ef6:	95 1f       	adc	r25, r21
    1ef8:	c8 17       	cp	r28, r24
    1efa:	d9 07       	cpc	r29, r25
    1efc:	59 f4       	brne	.+22     	; 0x1f14 <free+0x82>
    1efe:	88 81       	ld	r24, Y
    1f00:	99 81       	ldd	r25, Y+1	; 0x01
    1f02:	84 0f       	add	r24, r20
    1f04:	95 1f       	adc	r25, r21
    1f06:	02 96       	adiw	r24, 0x02	; 2
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	80 83       	st	Z, r24
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f10:	93 83       	std	Z+3, r25	; 0x03
    1f12:	82 83       	std	Z+2, r24	; 0x02
    1f14:	21 15       	cp	r18, r1
    1f16:	31 05       	cpc	r19, r1
    1f18:	29 f4       	brne	.+10     	; 0x1f24 <free+0x92>
    1f1a:	f0 93 ab 04 	sts	0x04AB, r31	; 0x8004ab <__flp+0x1>
    1f1e:	e0 93 aa 04 	sts	0x04AA, r30	; 0x8004aa <__flp>
    1f22:	3d c0       	rjmp	.+122    	; 0x1f9e <free+0x10c>
    1f24:	e9 01       	movw	r28, r18
    1f26:	fb 83       	std	Y+3, r31	; 0x03
    1f28:	ea 83       	std	Y+2, r30	; 0x02
    1f2a:	49 91       	ld	r20, Y+
    1f2c:	59 91       	ld	r21, Y+
    1f2e:	c4 0f       	add	r28, r20
    1f30:	d5 1f       	adc	r29, r21
    1f32:	ec 17       	cp	r30, r28
    1f34:	fd 07       	cpc	r31, r29
    1f36:	61 f4       	brne	.+24     	; 0x1f50 <free+0xbe>
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	84 0f       	add	r24, r20
    1f3e:	95 1f       	adc	r25, r21
    1f40:	02 96       	adiw	r24, 0x02	; 2
    1f42:	e9 01       	movw	r28, r18
    1f44:	99 83       	std	Y+1, r25	; 0x01
    1f46:	88 83       	st	Y, r24
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	9b 83       	std	Y+3, r25	; 0x03
    1f4e:	8a 83       	std	Y+2, r24	; 0x02
    1f50:	e0 e0       	ldi	r30, 0x00	; 0
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	12 96       	adiw	r26, 0x02	; 2
    1f56:	8d 91       	ld	r24, X+
    1f58:	9c 91       	ld	r25, X
    1f5a:	13 97       	sbiw	r26, 0x03	; 3
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	19 f0       	breq	.+6      	; 0x1f66 <free+0xd4>
    1f60:	fd 01       	movw	r30, r26
    1f62:	dc 01       	movw	r26, r24
    1f64:	f7 cf       	rjmp	.-18     	; 0x1f54 <free+0xc2>
    1f66:	8d 91       	ld	r24, X+
    1f68:	9c 91       	ld	r25, X
    1f6a:	11 97       	sbiw	r26, 0x01	; 1
    1f6c:	9d 01       	movw	r18, r26
    1f6e:	2e 5f       	subi	r18, 0xFE	; 254
    1f70:	3f 4f       	sbci	r19, 0xFF	; 255
    1f72:	82 0f       	add	r24, r18
    1f74:	93 1f       	adc	r25, r19
    1f76:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__brkval>
    1f7a:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <__brkval+0x1>
    1f7e:	28 17       	cp	r18, r24
    1f80:	39 07       	cpc	r19, r25
    1f82:	69 f4       	brne	.+26     	; 0x1f9e <free+0x10c>
    1f84:	30 97       	sbiw	r30, 0x00	; 0
    1f86:	29 f4       	brne	.+10     	; 0x1f92 <free+0x100>
    1f88:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <__flp+0x1>
    1f8c:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <__flp>
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <free+0x104>
    1f92:	13 82       	std	Z+3, r1	; 0x03
    1f94:	12 82       	std	Z+2, r1	; 0x02
    1f96:	b0 93 a9 04 	sts	0x04A9, r27	; 0x8004a9 <__brkval+0x1>
    1f9a:	a0 93 a8 04 	sts	0x04A8, r26	; 0x8004a8 <__brkval>
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	08 95       	ret

00001fa4 <atol>:
    1fa4:	1f 93       	push	r17
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	99 27       	eor	r25, r25
    1faa:	88 27       	eor	r24, r24
    1fac:	bc 01       	movw	r22, r24
    1fae:	e8 94       	clt
    1fb0:	11 91       	ld	r17, Z+
    1fb2:	10 32       	cpi	r17, 0x20	; 32
    1fb4:	e9 f3       	breq	.-6      	; 0x1fb0 <atol+0xc>
    1fb6:	19 30       	cpi	r17, 0x09	; 9
    1fb8:	10 f0       	brcs	.+4      	; 0x1fbe <atol+0x1a>
    1fba:	1e 30       	cpi	r17, 0x0E	; 14
    1fbc:	c8 f3       	brcs	.-14     	; 0x1fb0 <atol+0xc>
    1fbe:	1b 32       	cpi	r17, 0x2B	; 43
    1fc0:	51 f0       	breq	.+20     	; 0x1fd6 <atol+0x32>
    1fc2:	1d 32       	cpi	r17, 0x2D	; 45
    1fc4:	49 f4       	brne	.+18     	; 0x1fd8 <atol+0x34>
    1fc6:	68 94       	set
    1fc8:	06 c0       	rjmp	.+12     	; 0x1fd6 <atol+0x32>
    1fca:	0e 94 0b 10 	call	0x2016	; 0x2016 <__mulsi_const_10>
    1fce:	61 0f       	add	r22, r17
    1fd0:	71 1d       	adc	r23, r1
    1fd2:	81 1d       	adc	r24, r1
    1fd4:	91 1d       	adc	r25, r1
    1fd6:	11 91       	ld	r17, Z+
    1fd8:	10 53       	subi	r17, 0x30	; 48
    1fda:	1a 30       	cpi	r17, 0x0A	; 10
    1fdc:	b0 f3       	brcs	.-20     	; 0x1fca <atol+0x26>
    1fde:	3e f4       	brtc	.+14     	; 0x1fee <atol+0x4a>
    1fe0:	90 95       	com	r25
    1fe2:	80 95       	com	r24
    1fe4:	70 95       	com	r23
    1fe6:	61 95       	neg	r22
    1fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fea:	8f 4f       	sbci	r24, 0xFF	; 255
    1fec:	9f 4f       	sbci	r25, 0xFF	; 255
    1fee:	1f 91       	pop	r17
    1ff0:	08 95       	ret

00001ff2 <memcpy>:
    1ff2:	fb 01       	movw	r30, r22
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <memcpy+0xa>
    1ff8:	01 90       	ld	r0, Z+
    1ffa:	0d 92       	st	X+, r0
    1ffc:	41 50       	subi	r20, 0x01	; 1
    1ffe:	50 40       	sbci	r21, 0x00	; 0
    2000:	d8 f7       	brcc	.-10     	; 0x1ff8 <memcpy+0x6>
    2002:	08 95       	ret

00002004 <strcmp>:
    2004:	fb 01       	movw	r30, r22
    2006:	dc 01       	movw	r26, r24
    2008:	8d 91       	ld	r24, X+
    200a:	01 90       	ld	r0, Z+
    200c:	80 19       	sub	r24, r0
    200e:	01 10       	cpse	r0, r1
    2010:	d9 f3       	breq	.-10     	; 0x2008 <strcmp+0x4>
    2012:	99 0b       	sbc	r25, r25
    2014:	08 95       	ret

00002016 <__mulsi_const_10>:
    2016:	59 2f       	mov	r21, r25
    2018:	48 2f       	mov	r20, r24
    201a:	37 2f       	mov	r19, r23
    201c:	26 2f       	mov	r18, r22
    201e:	66 0f       	add	r22, r22
    2020:	77 1f       	adc	r23, r23
    2022:	88 1f       	adc	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	66 0f       	add	r22, r22
    2028:	77 1f       	adc	r23, r23
    202a:	88 1f       	adc	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	62 0f       	add	r22, r18
    2030:	73 1f       	adc	r23, r19
    2032:	84 1f       	adc	r24, r20
    2034:	95 1f       	adc	r25, r21
    2036:	66 0f       	add	r22, r22
    2038:	77 1f       	adc	r23, r23
    203a:	88 1f       	adc	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	08 95       	ret

00002040 <snprintf>:
    2040:	ae e0       	ldi	r26, 0x0E	; 14
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e6 e2       	ldi	r30, 0x26	; 38
    2046:	f0 e1       	ldi	r31, 0x10	; 16
    2048:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__+0x1c>
    204c:	0d 89       	ldd	r16, Y+21	; 0x15
    204e:	1e 89       	ldd	r17, Y+22	; 0x16
    2050:	8f 89       	ldd	r24, Y+23	; 0x17
    2052:	98 8d       	ldd	r25, Y+24	; 0x18
    2054:	26 e0       	ldi	r18, 0x06	; 6
    2056:	2c 83       	std	Y+4, r18	; 0x04
    2058:	1a 83       	std	Y+2, r17	; 0x02
    205a:	09 83       	std	Y+1, r16	; 0x01
    205c:	97 ff       	sbrs	r25, 7
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <snprintf+0x24>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e8       	ldi	r25, 0x80	; 128
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
    206a:	ae 01       	movw	r20, r28
    206c:	45 5e       	subi	r20, 0xE5	; 229
    206e:	5f 4f       	sbci	r21, 0xFF	; 255
    2070:	69 8d       	ldd	r22, Y+25	; 0x19
    2072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2074:	ce 01       	movw	r24, r28
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	0e 94 50 10 	call	0x20a0	; 0x20a0 <vfprintf>
    207c:	4d 81       	ldd	r20, Y+5	; 0x05
    207e:	5e 81       	ldd	r21, Y+6	; 0x06
    2080:	57 fd       	sbrc	r21, 7
    2082:	0a c0       	rjmp	.+20     	; 0x2098 <snprintf+0x58>
    2084:	2f 81       	ldd	r18, Y+7	; 0x07
    2086:	38 85       	ldd	r19, Y+8	; 0x08
    2088:	42 17       	cp	r20, r18
    208a:	53 07       	cpc	r21, r19
    208c:	0c f4       	brge	.+2      	; 0x2090 <snprintf+0x50>
    208e:	9a 01       	movw	r18, r20
    2090:	f8 01       	movw	r30, r16
    2092:	e2 0f       	add	r30, r18
    2094:	f3 1f       	adc	r31, r19
    2096:	10 82       	st	Z, r1
    2098:	2e 96       	adiw	r28, 0x0e	; 14
    209a:	e4 e0       	ldi	r30, 0x04	; 4
    209c:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__+0x1c>

000020a0 <vfprintf>:
    20a0:	ab e0       	ldi	r26, 0x0B	; 11
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e6 e5       	ldi	r30, 0x56	; 86
    20a6:	f0 e1       	ldi	r31, 0x10	; 16
    20a8:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__prologue_saves__>
    20ac:	6c 01       	movw	r12, r24
    20ae:	7b 01       	movw	r14, r22
    20b0:	8a 01       	movw	r16, r20
    20b2:	fc 01       	movw	r30, r24
    20b4:	17 82       	std	Z+7, r1	; 0x07
    20b6:	16 82       	std	Z+6, r1	; 0x06
    20b8:	83 81       	ldd	r24, Z+3	; 0x03
    20ba:	81 ff       	sbrs	r24, 1
    20bc:	cc c1       	rjmp	.+920    	; 0x2456 <vfprintf+0x3b6>
    20be:	ce 01       	movw	r24, r28
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	3c 01       	movw	r6, r24
    20c4:	f6 01       	movw	r30, r12
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	f7 01       	movw	r30, r14
    20ca:	93 fd       	sbrc	r25, 3
    20cc:	85 91       	lpm	r24, Z+
    20ce:	93 ff       	sbrs	r25, 3
    20d0:	81 91       	ld	r24, Z+
    20d2:	7f 01       	movw	r14, r30
    20d4:	88 23       	and	r24, r24
    20d6:	09 f4       	brne	.+2      	; 0x20da <vfprintf+0x3a>
    20d8:	ba c1       	rjmp	.+884    	; 0x244e <vfprintf+0x3ae>
    20da:	85 32       	cpi	r24, 0x25	; 37
    20dc:	39 f4       	brne	.+14     	; 0x20ec <vfprintf+0x4c>
    20de:	93 fd       	sbrc	r25, 3
    20e0:	85 91       	lpm	r24, Z+
    20e2:	93 ff       	sbrs	r25, 3
    20e4:	81 91       	ld	r24, Z+
    20e6:	7f 01       	movw	r14, r30
    20e8:	85 32       	cpi	r24, 0x25	; 37
    20ea:	29 f4       	brne	.+10     	; 0x20f6 <vfprintf+0x56>
    20ec:	b6 01       	movw	r22, r12
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	0e 94 47 12 	call	0x248e	; 0x248e <fputc>
    20f4:	e7 cf       	rjmp	.-50     	; 0x20c4 <vfprintf+0x24>
    20f6:	91 2c       	mov	r9, r1
    20f8:	21 2c       	mov	r2, r1
    20fa:	31 2c       	mov	r3, r1
    20fc:	ff e1       	ldi	r31, 0x1F	; 31
    20fe:	f3 15       	cp	r31, r3
    2100:	d8 f0       	brcs	.+54     	; 0x2138 <vfprintf+0x98>
    2102:	8b 32       	cpi	r24, 0x2B	; 43
    2104:	79 f0       	breq	.+30     	; 0x2124 <vfprintf+0x84>
    2106:	38 f4       	brcc	.+14     	; 0x2116 <vfprintf+0x76>
    2108:	80 32       	cpi	r24, 0x20	; 32
    210a:	79 f0       	breq	.+30     	; 0x212a <vfprintf+0x8a>
    210c:	83 32       	cpi	r24, 0x23	; 35
    210e:	a1 f4       	brne	.+40     	; 0x2138 <vfprintf+0x98>
    2110:	23 2d       	mov	r18, r3
    2112:	20 61       	ori	r18, 0x10	; 16
    2114:	1d c0       	rjmp	.+58     	; 0x2150 <vfprintf+0xb0>
    2116:	8d 32       	cpi	r24, 0x2D	; 45
    2118:	61 f0       	breq	.+24     	; 0x2132 <vfprintf+0x92>
    211a:	80 33       	cpi	r24, 0x30	; 48
    211c:	69 f4       	brne	.+26     	; 0x2138 <vfprintf+0x98>
    211e:	23 2d       	mov	r18, r3
    2120:	21 60       	ori	r18, 0x01	; 1
    2122:	16 c0       	rjmp	.+44     	; 0x2150 <vfprintf+0xb0>
    2124:	83 2d       	mov	r24, r3
    2126:	82 60       	ori	r24, 0x02	; 2
    2128:	38 2e       	mov	r3, r24
    212a:	e3 2d       	mov	r30, r3
    212c:	e4 60       	ori	r30, 0x04	; 4
    212e:	3e 2e       	mov	r3, r30
    2130:	2a c0       	rjmp	.+84     	; 0x2186 <vfprintf+0xe6>
    2132:	f3 2d       	mov	r31, r3
    2134:	f8 60       	ori	r31, 0x08	; 8
    2136:	1d c0       	rjmp	.+58     	; 0x2172 <vfprintf+0xd2>
    2138:	37 fc       	sbrc	r3, 7
    213a:	2d c0       	rjmp	.+90     	; 0x2196 <vfprintf+0xf6>
    213c:	20 ed       	ldi	r18, 0xD0	; 208
    213e:	28 0f       	add	r18, r24
    2140:	2a 30       	cpi	r18, 0x0A	; 10
    2142:	40 f0       	brcs	.+16     	; 0x2154 <vfprintf+0xb4>
    2144:	8e 32       	cpi	r24, 0x2E	; 46
    2146:	b9 f4       	brne	.+46     	; 0x2176 <vfprintf+0xd6>
    2148:	36 fc       	sbrc	r3, 6
    214a:	81 c1       	rjmp	.+770    	; 0x244e <vfprintf+0x3ae>
    214c:	23 2d       	mov	r18, r3
    214e:	20 64       	ori	r18, 0x40	; 64
    2150:	32 2e       	mov	r3, r18
    2152:	19 c0       	rjmp	.+50     	; 0x2186 <vfprintf+0xe6>
    2154:	36 fe       	sbrs	r3, 6
    2156:	06 c0       	rjmp	.+12     	; 0x2164 <vfprintf+0xc4>
    2158:	8a e0       	ldi	r24, 0x0A	; 10
    215a:	98 9e       	mul	r9, r24
    215c:	20 0d       	add	r18, r0
    215e:	11 24       	eor	r1, r1
    2160:	92 2e       	mov	r9, r18
    2162:	11 c0       	rjmp	.+34     	; 0x2186 <vfprintf+0xe6>
    2164:	ea e0       	ldi	r30, 0x0A	; 10
    2166:	2e 9e       	mul	r2, r30
    2168:	20 0d       	add	r18, r0
    216a:	11 24       	eor	r1, r1
    216c:	22 2e       	mov	r2, r18
    216e:	f3 2d       	mov	r31, r3
    2170:	f0 62       	ori	r31, 0x20	; 32
    2172:	3f 2e       	mov	r3, r31
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <vfprintf+0xe6>
    2176:	8c 36       	cpi	r24, 0x6C	; 108
    2178:	21 f4       	brne	.+8      	; 0x2182 <vfprintf+0xe2>
    217a:	83 2d       	mov	r24, r3
    217c:	80 68       	ori	r24, 0x80	; 128
    217e:	38 2e       	mov	r3, r24
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <vfprintf+0xe6>
    2182:	88 36       	cpi	r24, 0x68	; 104
    2184:	41 f4       	brne	.+16     	; 0x2196 <vfprintf+0xf6>
    2186:	f7 01       	movw	r30, r14
    2188:	93 fd       	sbrc	r25, 3
    218a:	85 91       	lpm	r24, Z+
    218c:	93 ff       	sbrs	r25, 3
    218e:	81 91       	ld	r24, Z+
    2190:	7f 01       	movw	r14, r30
    2192:	81 11       	cpse	r24, r1
    2194:	b3 cf       	rjmp	.-154    	; 0x20fc <vfprintf+0x5c>
    2196:	98 2f       	mov	r25, r24
    2198:	9f 7d       	andi	r25, 0xDF	; 223
    219a:	95 54       	subi	r25, 0x45	; 69
    219c:	93 30       	cpi	r25, 0x03	; 3
    219e:	28 f4       	brcc	.+10     	; 0x21aa <vfprintf+0x10a>
    21a0:	0c 5f       	subi	r16, 0xFC	; 252
    21a2:	1f 4f       	sbci	r17, 0xFF	; 255
    21a4:	9f e3       	ldi	r25, 0x3F	; 63
    21a6:	99 83       	std	Y+1, r25	; 0x01
    21a8:	0d c0       	rjmp	.+26     	; 0x21c4 <vfprintf+0x124>
    21aa:	83 36       	cpi	r24, 0x63	; 99
    21ac:	31 f0       	breq	.+12     	; 0x21ba <vfprintf+0x11a>
    21ae:	83 37       	cpi	r24, 0x73	; 115
    21b0:	71 f0       	breq	.+28     	; 0x21ce <vfprintf+0x12e>
    21b2:	83 35       	cpi	r24, 0x53	; 83
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <vfprintf+0x118>
    21b6:	59 c0       	rjmp	.+178    	; 0x226a <vfprintf+0x1ca>
    21b8:	21 c0       	rjmp	.+66     	; 0x21fc <vfprintf+0x15c>
    21ba:	f8 01       	movw	r30, r16
    21bc:	80 81       	ld	r24, Z
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	0e 5f       	subi	r16, 0xFE	; 254
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	88 24       	eor	r8, r8
    21c6:	83 94       	inc	r8
    21c8:	91 2c       	mov	r9, r1
    21ca:	53 01       	movw	r10, r6
    21cc:	13 c0       	rjmp	.+38     	; 0x21f4 <vfprintf+0x154>
    21ce:	28 01       	movw	r4, r16
    21d0:	f2 e0       	ldi	r31, 0x02	; 2
    21d2:	4f 0e       	add	r4, r31
    21d4:	51 1c       	adc	r5, r1
    21d6:	f8 01       	movw	r30, r16
    21d8:	a0 80       	ld	r10, Z
    21da:	b1 80       	ldd	r11, Z+1	; 0x01
    21dc:	36 fe       	sbrs	r3, 6
    21de:	03 c0       	rjmp	.+6      	; 0x21e6 <vfprintf+0x146>
    21e0:	69 2d       	mov	r22, r9
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <vfprintf+0x14a>
    21e6:	6f ef       	ldi	r22, 0xFF	; 255
    21e8:	7f ef       	ldi	r23, 0xFF	; 255
    21ea:	c5 01       	movw	r24, r10
    21ec:	0e 94 3c 12 	call	0x2478	; 0x2478 <strnlen>
    21f0:	4c 01       	movw	r8, r24
    21f2:	82 01       	movw	r16, r4
    21f4:	f3 2d       	mov	r31, r3
    21f6:	ff 77       	andi	r31, 0x7F	; 127
    21f8:	3f 2e       	mov	r3, r31
    21fa:	16 c0       	rjmp	.+44     	; 0x2228 <vfprintf+0x188>
    21fc:	28 01       	movw	r4, r16
    21fe:	22 e0       	ldi	r18, 0x02	; 2
    2200:	42 0e       	add	r4, r18
    2202:	51 1c       	adc	r5, r1
    2204:	f8 01       	movw	r30, r16
    2206:	a0 80       	ld	r10, Z
    2208:	b1 80       	ldd	r11, Z+1	; 0x01
    220a:	36 fe       	sbrs	r3, 6
    220c:	03 c0       	rjmp	.+6      	; 0x2214 <vfprintf+0x174>
    220e:	69 2d       	mov	r22, r9
    2210:	70 e0       	ldi	r23, 0x00	; 0
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <vfprintf+0x178>
    2214:	6f ef       	ldi	r22, 0xFF	; 255
    2216:	7f ef       	ldi	r23, 0xFF	; 255
    2218:	c5 01       	movw	r24, r10
    221a:	0e 94 31 12 	call	0x2462	; 0x2462 <strnlen_P>
    221e:	4c 01       	movw	r8, r24
    2220:	f3 2d       	mov	r31, r3
    2222:	f0 68       	ori	r31, 0x80	; 128
    2224:	3f 2e       	mov	r3, r31
    2226:	82 01       	movw	r16, r4
    2228:	33 fc       	sbrc	r3, 3
    222a:	1b c0       	rjmp	.+54     	; 0x2262 <vfprintf+0x1c2>
    222c:	82 2d       	mov	r24, r2
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	88 16       	cp	r8, r24
    2232:	99 06       	cpc	r9, r25
    2234:	b0 f4       	brcc	.+44     	; 0x2262 <vfprintf+0x1c2>
    2236:	b6 01       	movw	r22, r12
    2238:	80 e2       	ldi	r24, 0x20	; 32
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	0e 94 47 12 	call	0x248e	; 0x248e <fputc>
    2240:	2a 94       	dec	r2
    2242:	f4 cf       	rjmp	.-24     	; 0x222c <vfprintf+0x18c>
    2244:	f5 01       	movw	r30, r10
    2246:	37 fc       	sbrc	r3, 7
    2248:	85 91       	lpm	r24, Z+
    224a:	37 fe       	sbrs	r3, 7
    224c:	81 91       	ld	r24, Z+
    224e:	5f 01       	movw	r10, r30
    2250:	b6 01       	movw	r22, r12
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0e 94 47 12 	call	0x248e	; 0x248e <fputc>
    2258:	21 10       	cpse	r2, r1
    225a:	2a 94       	dec	r2
    225c:	21 e0       	ldi	r18, 0x01	; 1
    225e:	82 1a       	sub	r8, r18
    2260:	91 08       	sbc	r9, r1
    2262:	81 14       	cp	r8, r1
    2264:	91 04       	cpc	r9, r1
    2266:	71 f7       	brne	.-36     	; 0x2244 <vfprintf+0x1a4>
    2268:	e8 c0       	rjmp	.+464    	; 0x243a <vfprintf+0x39a>
    226a:	84 36       	cpi	r24, 0x64	; 100
    226c:	11 f0       	breq	.+4      	; 0x2272 <vfprintf+0x1d2>
    226e:	89 36       	cpi	r24, 0x69	; 105
    2270:	41 f5       	brne	.+80     	; 0x22c2 <vfprintf+0x222>
    2272:	f8 01       	movw	r30, r16
    2274:	37 fe       	sbrs	r3, 7
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <vfprintf+0x1e6>
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	0c 5f       	subi	r16, 0xFC	; 252
    2282:	1f 4f       	sbci	r17, 0xFF	; 255
    2284:	08 c0       	rjmp	.+16     	; 0x2296 <vfprintf+0x1f6>
    2286:	60 81       	ld	r22, Z
    2288:	71 81       	ldd	r23, Z+1	; 0x01
    228a:	07 2e       	mov	r0, r23
    228c:	00 0c       	add	r0, r0
    228e:	88 0b       	sbc	r24, r24
    2290:	99 0b       	sbc	r25, r25
    2292:	0e 5f       	subi	r16, 0xFE	; 254
    2294:	1f 4f       	sbci	r17, 0xFF	; 255
    2296:	f3 2d       	mov	r31, r3
    2298:	ff 76       	andi	r31, 0x6F	; 111
    229a:	3f 2e       	mov	r3, r31
    229c:	97 ff       	sbrs	r25, 7
    229e:	09 c0       	rjmp	.+18     	; 0x22b2 <vfprintf+0x212>
    22a0:	90 95       	com	r25
    22a2:	80 95       	com	r24
    22a4:	70 95       	com	r23
    22a6:	61 95       	neg	r22
    22a8:	7f 4f       	sbci	r23, 0xFF	; 255
    22aa:	8f 4f       	sbci	r24, 0xFF	; 255
    22ac:	9f 4f       	sbci	r25, 0xFF	; 255
    22ae:	f0 68       	ori	r31, 0x80	; 128
    22b0:	3f 2e       	mov	r3, r31
    22b2:	2a e0       	ldi	r18, 0x0A	; 10
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	a3 01       	movw	r20, r6
    22b8:	0e 94 83 12 	call	0x2506	; 0x2506 <__ultoa_invert>
    22bc:	88 2e       	mov	r8, r24
    22be:	86 18       	sub	r8, r6
    22c0:	45 c0       	rjmp	.+138    	; 0x234c <vfprintf+0x2ac>
    22c2:	85 37       	cpi	r24, 0x75	; 117
    22c4:	31 f4       	brne	.+12     	; 0x22d2 <vfprintf+0x232>
    22c6:	23 2d       	mov	r18, r3
    22c8:	2f 7e       	andi	r18, 0xEF	; 239
    22ca:	b2 2e       	mov	r11, r18
    22cc:	2a e0       	ldi	r18, 0x0A	; 10
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	25 c0       	rjmp	.+74     	; 0x231c <vfprintf+0x27c>
    22d2:	93 2d       	mov	r25, r3
    22d4:	99 7f       	andi	r25, 0xF9	; 249
    22d6:	b9 2e       	mov	r11, r25
    22d8:	8f 36       	cpi	r24, 0x6F	; 111
    22da:	c1 f0       	breq	.+48     	; 0x230c <vfprintf+0x26c>
    22dc:	18 f4       	brcc	.+6      	; 0x22e4 <vfprintf+0x244>
    22de:	88 35       	cpi	r24, 0x58	; 88
    22e0:	79 f0       	breq	.+30     	; 0x2300 <vfprintf+0x260>
    22e2:	b5 c0       	rjmp	.+362    	; 0x244e <vfprintf+0x3ae>
    22e4:	80 37       	cpi	r24, 0x70	; 112
    22e6:	19 f0       	breq	.+6      	; 0x22ee <vfprintf+0x24e>
    22e8:	88 37       	cpi	r24, 0x78	; 120
    22ea:	21 f0       	breq	.+8      	; 0x22f4 <vfprintf+0x254>
    22ec:	b0 c0       	rjmp	.+352    	; 0x244e <vfprintf+0x3ae>
    22ee:	e9 2f       	mov	r30, r25
    22f0:	e0 61       	ori	r30, 0x10	; 16
    22f2:	be 2e       	mov	r11, r30
    22f4:	b4 fe       	sbrs	r11, 4
    22f6:	0d c0       	rjmp	.+26     	; 0x2312 <vfprintf+0x272>
    22f8:	fb 2d       	mov	r31, r11
    22fa:	f4 60       	ori	r31, 0x04	; 4
    22fc:	bf 2e       	mov	r11, r31
    22fe:	09 c0       	rjmp	.+18     	; 0x2312 <vfprintf+0x272>
    2300:	34 fe       	sbrs	r3, 4
    2302:	0a c0       	rjmp	.+20     	; 0x2318 <vfprintf+0x278>
    2304:	29 2f       	mov	r18, r25
    2306:	26 60       	ori	r18, 0x06	; 6
    2308:	b2 2e       	mov	r11, r18
    230a:	06 c0       	rjmp	.+12     	; 0x2318 <vfprintf+0x278>
    230c:	28 e0       	ldi	r18, 0x08	; 8
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	05 c0       	rjmp	.+10     	; 0x231c <vfprintf+0x27c>
    2312:	20 e1       	ldi	r18, 0x10	; 16
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	02 c0       	rjmp	.+4      	; 0x231c <vfprintf+0x27c>
    2318:	20 e1       	ldi	r18, 0x10	; 16
    231a:	32 e0       	ldi	r19, 0x02	; 2
    231c:	f8 01       	movw	r30, r16
    231e:	b7 fe       	sbrs	r11, 7
    2320:	07 c0       	rjmp	.+14     	; 0x2330 <vfprintf+0x290>
    2322:	60 81       	ld	r22, Z
    2324:	71 81       	ldd	r23, Z+1	; 0x01
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	0c 5f       	subi	r16, 0xFC	; 252
    232c:	1f 4f       	sbci	r17, 0xFF	; 255
    232e:	06 c0       	rjmp	.+12     	; 0x233c <vfprintf+0x29c>
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	0e 5f       	subi	r16, 0xFE	; 254
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	a3 01       	movw	r20, r6
    233e:	0e 94 83 12 	call	0x2506	; 0x2506 <__ultoa_invert>
    2342:	88 2e       	mov	r8, r24
    2344:	86 18       	sub	r8, r6
    2346:	fb 2d       	mov	r31, r11
    2348:	ff 77       	andi	r31, 0x7F	; 127
    234a:	3f 2e       	mov	r3, r31
    234c:	36 fe       	sbrs	r3, 6
    234e:	0d c0       	rjmp	.+26     	; 0x236a <vfprintf+0x2ca>
    2350:	23 2d       	mov	r18, r3
    2352:	2e 7f       	andi	r18, 0xFE	; 254
    2354:	a2 2e       	mov	r10, r18
    2356:	89 14       	cp	r8, r9
    2358:	58 f4       	brcc	.+22     	; 0x2370 <vfprintf+0x2d0>
    235a:	34 fe       	sbrs	r3, 4
    235c:	0b c0       	rjmp	.+22     	; 0x2374 <vfprintf+0x2d4>
    235e:	32 fc       	sbrc	r3, 2
    2360:	09 c0       	rjmp	.+18     	; 0x2374 <vfprintf+0x2d4>
    2362:	83 2d       	mov	r24, r3
    2364:	8e 7e       	andi	r24, 0xEE	; 238
    2366:	a8 2e       	mov	r10, r24
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <vfprintf+0x2d4>
    236a:	b8 2c       	mov	r11, r8
    236c:	a3 2c       	mov	r10, r3
    236e:	03 c0       	rjmp	.+6      	; 0x2376 <vfprintf+0x2d6>
    2370:	b8 2c       	mov	r11, r8
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <vfprintf+0x2d6>
    2374:	b9 2c       	mov	r11, r9
    2376:	a4 fe       	sbrs	r10, 4
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <vfprintf+0x2f8>
    237a:	fe 01       	movw	r30, r28
    237c:	e8 0d       	add	r30, r8
    237e:	f1 1d       	adc	r31, r1
    2380:	80 81       	ld	r24, Z
    2382:	80 33       	cpi	r24, 0x30	; 48
    2384:	21 f4       	brne	.+8      	; 0x238e <vfprintf+0x2ee>
    2386:	9a 2d       	mov	r25, r10
    2388:	99 7e       	andi	r25, 0xE9	; 233
    238a:	a9 2e       	mov	r10, r25
    238c:	09 c0       	rjmp	.+18     	; 0x23a0 <vfprintf+0x300>
    238e:	a2 fe       	sbrs	r10, 2
    2390:	06 c0       	rjmp	.+12     	; 0x239e <vfprintf+0x2fe>
    2392:	b3 94       	inc	r11
    2394:	b3 94       	inc	r11
    2396:	04 c0       	rjmp	.+8      	; 0x23a0 <vfprintf+0x300>
    2398:	8a 2d       	mov	r24, r10
    239a:	86 78       	andi	r24, 0x86	; 134
    239c:	09 f0       	breq	.+2      	; 0x23a0 <vfprintf+0x300>
    239e:	b3 94       	inc	r11
    23a0:	a3 fc       	sbrc	r10, 3
    23a2:	11 c0       	rjmp	.+34     	; 0x23c6 <vfprintf+0x326>
    23a4:	a0 fe       	sbrs	r10, 0
    23a6:	06 c0       	rjmp	.+12     	; 0x23b4 <vfprintf+0x314>
    23a8:	b2 14       	cp	r11, r2
    23aa:	88 f4       	brcc	.+34     	; 0x23ce <vfprintf+0x32e>
    23ac:	28 0c       	add	r2, r8
    23ae:	92 2c       	mov	r9, r2
    23b0:	9b 18       	sub	r9, r11
    23b2:	0e c0       	rjmp	.+28     	; 0x23d0 <vfprintf+0x330>
    23b4:	b2 14       	cp	r11, r2
    23b6:	60 f4       	brcc	.+24     	; 0x23d0 <vfprintf+0x330>
    23b8:	b6 01       	movw	r22, r12
    23ba:	80 e2       	ldi	r24, 0x20	; 32
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 47 12 	call	0x248e	; 0x248e <fputc>
    23c2:	b3 94       	inc	r11
    23c4:	f7 cf       	rjmp	.-18     	; 0x23b4 <vfprintf+0x314>
    23c6:	b2 14       	cp	r11, r2
    23c8:	18 f4       	brcc	.+6      	; 0x23d0 <vfprintf+0x330>
    23ca:	2b 18       	sub	r2, r11
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <vfprintf+0x332>
    23ce:	98 2c       	mov	r9, r8
    23d0:	21 2c       	mov	r2, r1
    23d2:	a4 fe       	sbrs	r10, 4
    23d4:	10 c0       	rjmp	.+32     	; 0x23f6 <vfprintf+0x356>
    23d6:	b6 01       	movw	r22, r12
    23d8:	80 e3       	ldi	r24, 0x30	; 48
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	0e 94 47 12 	call	0x248e	; 0x248e <fputc>
    23e0:	a2 fe       	sbrs	r10, 2
    23e2:	17 c0       	rjmp	.+46     	; 0x2412 <vfprintf+0x372>
    23e4:	a1 fc       	sbrc	r10, 1
    23e6:	03 c0       	rjmp	.+6      	; 0x23ee <vfprintf+0x34e>
    23e8:	88 e7       	ldi	r24, 0x78	; 120
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <vfprintf+0x352>
    23ee:	88 e5       	ldi	r24, 0x58	; 88
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	b6 01       	movw	r22, r12
    23f4:	0c c0       	rjmp	.+24     	; 0x240e <vfprintf+0x36e>
    23f6:	8a 2d       	mov	r24, r10
    23f8:	86 78       	andi	r24, 0x86	; 134
    23fa:	59 f0       	breq	.+22     	; 0x2412 <vfprintf+0x372>
    23fc:	a1 fe       	sbrs	r10, 1
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <vfprintf+0x364>
    2400:	8b e2       	ldi	r24, 0x2B	; 43
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <vfprintf+0x366>
    2404:	80 e2       	ldi	r24, 0x20	; 32
    2406:	a7 fc       	sbrc	r10, 7
    2408:	8d e2       	ldi	r24, 0x2D	; 45
    240a:	b6 01       	movw	r22, r12
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 47 12 	call	0x248e	; 0x248e <fputc>
    2412:	89 14       	cp	r8, r9
    2414:	38 f4       	brcc	.+14     	; 0x2424 <vfprintf+0x384>
    2416:	b6 01       	movw	r22, r12
    2418:	80 e3       	ldi	r24, 0x30	; 48
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 47 12 	call	0x248e	; 0x248e <fputc>
    2420:	9a 94       	dec	r9
    2422:	f7 cf       	rjmp	.-18     	; 0x2412 <vfprintf+0x372>
    2424:	8a 94       	dec	r8
    2426:	f3 01       	movw	r30, r6
    2428:	e8 0d       	add	r30, r8
    242a:	f1 1d       	adc	r31, r1
    242c:	80 81       	ld	r24, Z
    242e:	b6 01       	movw	r22, r12
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 47 12 	call	0x248e	; 0x248e <fputc>
    2436:	81 10       	cpse	r8, r1
    2438:	f5 cf       	rjmp	.-22     	; 0x2424 <vfprintf+0x384>
    243a:	22 20       	and	r2, r2
    243c:	09 f4       	brne	.+2      	; 0x2440 <vfprintf+0x3a0>
    243e:	42 ce       	rjmp	.-892    	; 0x20c4 <vfprintf+0x24>
    2440:	b6 01       	movw	r22, r12
    2442:	80 e2       	ldi	r24, 0x20	; 32
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0e 94 47 12 	call	0x248e	; 0x248e <fputc>
    244a:	2a 94       	dec	r2
    244c:	f6 cf       	rjmp	.-20     	; 0x243a <vfprintf+0x39a>
    244e:	f6 01       	movw	r30, r12
    2450:	86 81       	ldd	r24, Z+6	; 0x06
    2452:	97 81       	ldd	r25, Z+7	; 0x07
    2454:	02 c0       	rjmp	.+4      	; 0x245a <vfprintf+0x3ba>
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	9f ef       	ldi	r25, 0xFF	; 255
    245a:	2b 96       	adiw	r28, 0x0b	; 11
    245c:	e2 e1       	ldi	r30, 0x12	; 18
    245e:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__epilogue_restores__>

00002462 <strnlen_P>:
    2462:	fc 01       	movw	r30, r24
    2464:	05 90       	lpm	r0, Z+
    2466:	61 50       	subi	r22, 0x01	; 1
    2468:	70 40       	sbci	r23, 0x00	; 0
    246a:	01 10       	cpse	r0, r1
    246c:	d8 f7       	brcc	.-10     	; 0x2464 <strnlen_P+0x2>
    246e:	80 95       	com	r24
    2470:	90 95       	com	r25
    2472:	8e 0f       	add	r24, r30
    2474:	9f 1f       	adc	r25, r31
    2476:	08 95       	ret

00002478 <strnlen>:
    2478:	fc 01       	movw	r30, r24
    247a:	61 50       	subi	r22, 0x01	; 1
    247c:	70 40       	sbci	r23, 0x00	; 0
    247e:	01 90       	ld	r0, Z+
    2480:	01 10       	cpse	r0, r1
    2482:	d8 f7       	brcc	.-10     	; 0x247a <strnlen+0x2>
    2484:	80 95       	com	r24
    2486:	90 95       	com	r25
    2488:	8e 0f       	add	r24, r30
    248a:	9f 1f       	adc	r25, r31
    248c:	08 95       	ret

0000248e <fputc>:
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	fb 01       	movw	r30, r22
    2498:	23 81       	ldd	r18, Z+3	; 0x03
    249a:	21 fd       	sbrc	r18, 1
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <fputc+0x16>
    249e:	8f ef       	ldi	r24, 0xFF	; 255
    24a0:	9f ef       	ldi	r25, 0xFF	; 255
    24a2:	2c c0       	rjmp	.+88     	; 0x24fc <fputc+0x6e>
    24a4:	22 ff       	sbrs	r18, 2
    24a6:	16 c0       	rjmp	.+44     	; 0x24d4 <fputc+0x46>
    24a8:	46 81       	ldd	r20, Z+6	; 0x06
    24aa:	57 81       	ldd	r21, Z+7	; 0x07
    24ac:	24 81       	ldd	r18, Z+4	; 0x04
    24ae:	35 81       	ldd	r19, Z+5	; 0x05
    24b0:	42 17       	cp	r20, r18
    24b2:	53 07       	cpc	r21, r19
    24b4:	44 f4       	brge	.+16     	; 0x24c6 <fputc+0x38>
    24b6:	a0 81       	ld	r26, Z
    24b8:	b1 81       	ldd	r27, Z+1	; 0x01
    24ba:	9d 01       	movw	r18, r26
    24bc:	2f 5f       	subi	r18, 0xFF	; 255
    24be:	3f 4f       	sbci	r19, 0xFF	; 255
    24c0:	31 83       	std	Z+1, r19	; 0x01
    24c2:	20 83       	st	Z, r18
    24c4:	8c 93       	st	X, r24
    24c6:	26 81       	ldd	r18, Z+6	; 0x06
    24c8:	37 81       	ldd	r19, Z+7	; 0x07
    24ca:	2f 5f       	subi	r18, 0xFF	; 255
    24cc:	3f 4f       	sbci	r19, 0xFF	; 255
    24ce:	37 83       	std	Z+7, r19	; 0x07
    24d0:	26 83       	std	Z+6, r18	; 0x06
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <fputc+0x6e>
    24d4:	8b 01       	movw	r16, r22
    24d6:	ec 01       	movw	r28, r24
    24d8:	fb 01       	movw	r30, r22
    24da:	00 84       	ldd	r0, Z+8	; 0x08
    24dc:	f1 85       	ldd	r31, Z+9	; 0x09
    24de:	e0 2d       	mov	r30, r0
    24e0:	09 95       	icall
    24e2:	89 2b       	or	r24, r25
    24e4:	e1 f6       	brne	.-72     	; 0x249e <fputc+0x10>
    24e6:	d8 01       	movw	r26, r16
    24e8:	16 96       	adiw	r26, 0x06	; 6
    24ea:	8d 91       	ld	r24, X+
    24ec:	9c 91       	ld	r25, X
    24ee:	17 97       	sbiw	r26, 0x07	; 7
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	17 96       	adiw	r26, 0x07	; 7
    24f4:	9c 93       	st	X, r25
    24f6:	8e 93       	st	-X, r24
    24f8:	16 97       	sbiw	r26, 0x06	; 6
    24fa:	ce 01       	movw	r24, r28
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	08 95       	ret

00002506 <__ultoa_invert>:
    2506:	fa 01       	movw	r30, r20
    2508:	aa 27       	eor	r26, r26
    250a:	28 30       	cpi	r18, 0x08	; 8
    250c:	51 f1       	breq	.+84     	; 0x2562 <__ultoa_invert+0x5c>
    250e:	20 31       	cpi	r18, 0x10	; 16
    2510:	81 f1       	breq	.+96     	; 0x2572 <__ultoa_invert+0x6c>
    2512:	e8 94       	clt
    2514:	6f 93       	push	r22
    2516:	6e 7f       	andi	r22, 0xFE	; 254
    2518:	6e 5f       	subi	r22, 0xFE	; 254
    251a:	7f 4f       	sbci	r23, 0xFF	; 255
    251c:	8f 4f       	sbci	r24, 0xFF	; 255
    251e:	9f 4f       	sbci	r25, 0xFF	; 255
    2520:	af 4f       	sbci	r26, 0xFF	; 255
    2522:	b1 e0       	ldi	r27, 0x01	; 1
    2524:	3e d0       	rcall	.+124    	; 0x25a2 <__ultoa_invert+0x9c>
    2526:	b4 e0       	ldi	r27, 0x04	; 4
    2528:	3c d0       	rcall	.+120    	; 0x25a2 <__ultoa_invert+0x9c>
    252a:	67 0f       	add	r22, r23
    252c:	78 1f       	adc	r23, r24
    252e:	89 1f       	adc	r24, r25
    2530:	9a 1f       	adc	r25, r26
    2532:	a1 1d       	adc	r26, r1
    2534:	68 0f       	add	r22, r24
    2536:	79 1f       	adc	r23, r25
    2538:	8a 1f       	adc	r24, r26
    253a:	91 1d       	adc	r25, r1
    253c:	a1 1d       	adc	r26, r1
    253e:	6a 0f       	add	r22, r26
    2540:	71 1d       	adc	r23, r1
    2542:	81 1d       	adc	r24, r1
    2544:	91 1d       	adc	r25, r1
    2546:	a1 1d       	adc	r26, r1
    2548:	20 d0       	rcall	.+64     	; 0x258a <__ultoa_invert+0x84>
    254a:	09 f4       	brne	.+2      	; 0x254e <__ultoa_invert+0x48>
    254c:	68 94       	set
    254e:	3f 91       	pop	r19
    2550:	2a e0       	ldi	r18, 0x0A	; 10
    2552:	26 9f       	mul	r18, r22
    2554:	11 24       	eor	r1, r1
    2556:	30 19       	sub	r19, r0
    2558:	30 5d       	subi	r19, 0xD0	; 208
    255a:	31 93       	st	Z+, r19
    255c:	de f6       	brtc	.-74     	; 0x2514 <__ultoa_invert+0xe>
    255e:	cf 01       	movw	r24, r30
    2560:	08 95       	ret
    2562:	46 2f       	mov	r20, r22
    2564:	47 70       	andi	r20, 0x07	; 7
    2566:	40 5d       	subi	r20, 0xD0	; 208
    2568:	41 93       	st	Z+, r20
    256a:	b3 e0       	ldi	r27, 0x03	; 3
    256c:	0f d0       	rcall	.+30     	; 0x258c <__ultoa_invert+0x86>
    256e:	c9 f7       	brne	.-14     	; 0x2562 <__ultoa_invert+0x5c>
    2570:	f6 cf       	rjmp	.-20     	; 0x255e <__ultoa_invert+0x58>
    2572:	46 2f       	mov	r20, r22
    2574:	4f 70       	andi	r20, 0x0F	; 15
    2576:	40 5d       	subi	r20, 0xD0	; 208
    2578:	4a 33       	cpi	r20, 0x3A	; 58
    257a:	18 f0       	brcs	.+6      	; 0x2582 <__ultoa_invert+0x7c>
    257c:	49 5d       	subi	r20, 0xD9	; 217
    257e:	31 fd       	sbrc	r19, 1
    2580:	40 52       	subi	r20, 0x20	; 32
    2582:	41 93       	st	Z+, r20
    2584:	02 d0       	rcall	.+4      	; 0x258a <__ultoa_invert+0x84>
    2586:	a9 f7       	brne	.-22     	; 0x2572 <__ultoa_invert+0x6c>
    2588:	ea cf       	rjmp	.-44     	; 0x255e <__ultoa_invert+0x58>
    258a:	b4 e0       	ldi	r27, 0x04	; 4
    258c:	a6 95       	lsr	r26
    258e:	97 95       	ror	r25
    2590:	87 95       	ror	r24
    2592:	77 95       	ror	r23
    2594:	67 95       	ror	r22
    2596:	ba 95       	dec	r27
    2598:	c9 f7       	brne	.-14     	; 0x258c <__ultoa_invert+0x86>
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	61 05       	cpc	r22, r1
    259e:	71 05       	cpc	r23, r1
    25a0:	08 95       	ret
    25a2:	9b 01       	movw	r18, r22
    25a4:	ac 01       	movw	r20, r24
    25a6:	0a 2e       	mov	r0, r26
    25a8:	06 94       	lsr	r0
    25aa:	57 95       	ror	r21
    25ac:	47 95       	ror	r20
    25ae:	37 95       	ror	r19
    25b0:	27 95       	ror	r18
    25b2:	ba 95       	dec	r27
    25b4:	c9 f7       	brne	.-14     	; 0x25a8 <__ultoa_invert+0xa2>
    25b6:	62 0f       	add	r22, r18
    25b8:	73 1f       	adc	r23, r19
    25ba:	84 1f       	adc	r24, r20
    25bc:	95 1f       	adc	r25, r21
    25be:	a0 1d       	adc	r26, r0
    25c0:	08 95       	ret

000025c2 <eeprom_read_byte>:
    25c2:	f9 99       	sbic	0x1f, 1	; 31
    25c4:	fe cf       	rjmp	.-4      	; 0x25c2 <eeprom_read_byte>
    25c6:	92 bd       	out	0x22, r25	; 34
    25c8:	81 bd       	out	0x21, r24	; 33
    25ca:	f8 9a       	sbi	0x1f, 0	; 31
    25cc:	99 27       	eor	r25, r25
    25ce:	80 b5       	in	r24, 0x20	; 32
    25d0:	08 95       	ret

000025d2 <eeprom_read_word>:
    25d2:	a8 e1       	ldi	r26, 0x18	; 24
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	42 e0       	ldi	r20, 0x02	; 2
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	0c 94 04 13 	jmp	0x2608	; 0x2608 <eeprom_read_blraw>

000025de <eeprom_write_byte>:
    25de:	26 2f       	mov	r18, r22

000025e0 <eeprom_write_r18>:
    25e0:	f9 99       	sbic	0x1f, 1	; 31
    25e2:	fe cf       	rjmp	.-4      	; 0x25e0 <eeprom_write_r18>
    25e4:	1f ba       	out	0x1f, r1	; 31
    25e6:	92 bd       	out	0x22, r25	; 34
    25e8:	81 bd       	out	0x21, r24	; 33
    25ea:	20 bd       	out	0x20, r18	; 32
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	fa 9a       	sbi	0x1f, 2	; 31
    25f2:	f9 9a       	sbi	0x1f, 1	; 31
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	08 95       	ret

000025fa <eeprom_write_word>:
    25fa:	0e 94 ef 12 	call	0x25de	; 0x25de <eeprom_write_byte>
    25fe:	27 2f       	mov	r18, r23
    2600:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <eeprom_write_r18>

00002604 <eeprom_read_block>:
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22

00002608 <eeprom_read_blraw>:
    2608:	fc 01       	movw	r30, r24
    260a:	f9 99       	sbic	0x1f, 1	; 31
    260c:	fe cf       	rjmp	.-4      	; 0x260a <eeprom_read_blraw+0x2>
    260e:	06 c0       	rjmp	.+12     	; 0x261c <eeprom_read_blraw+0x14>
    2610:	f2 bd       	out	0x22, r31	; 34
    2612:	e1 bd       	out	0x21, r30	; 33
    2614:	f8 9a       	sbi	0x1f, 0	; 31
    2616:	31 96       	adiw	r30, 0x01	; 1
    2618:	00 b4       	in	r0, 0x20	; 32
    261a:	0d 92       	st	X+, r0
    261c:	41 50       	subi	r20, 0x01	; 1
    261e:	50 40       	sbci	r21, 0x00	; 0
    2620:	b8 f7       	brcc	.-18     	; 0x2610 <eeprom_read_blraw+0x8>
    2622:	08 95       	ret

00002624 <__prologue_saves__>:
    2624:	2f 92       	push	r2
    2626:	3f 92       	push	r3
    2628:	4f 92       	push	r4
    262a:	5f 92       	push	r5
    262c:	6f 92       	push	r6
    262e:	7f 92       	push	r7
    2630:	8f 92       	push	r8
    2632:	9f 92       	push	r9
    2634:	af 92       	push	r10
    2636:	bf 92       	push	r11
    2638:	cf 92       	push	r12
    263a:	df 92       	push	r13
    263c:	ef 92       	push	r14
    263e:	ff 92       	push	r15
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	ca 1b       	sub	r28, r26
    264e:	db 0b       	sbc	r29, r27
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	09 94       	ijmp

0000265c <__epilogue_restores__>:
    265c:	2a 88       	ldd	r2, Y+18	; 0x12
    265e:	39 88       	ldd	r3, Y+17	; 0x11
    2660:	48 88       	ldd	r4, Y+16	; 0x10
    2662:	5f 84       	ldd	r5, Y+15	; 0x0f
    2664:	6e 84       	ldd	r6, Y+14	; 0x0e
    2666:	7d 84       	ldd	r7, Y+13	; 0x0d
    2668:	8c 84       	ldd	r8, Y+12	; 0x0c
    266a:	9b 84       	ldd	r9, Y+11	; 0x0b
    266c:	aa 84       	ldd	r10, Y+10	; 0x0a
    266e:	b9 84       	ldd	r11, Y+9	; 0x09
    2670:	c8 84       	ldd	r12, Y+8	; 0x08
    2672:	df 80       	ldd	r13, Y+7	; 0x07
    2674:	ee 80       	ldd	r14, Y+6	; 0x06
    2676:	fd 80       	ldd	r15, Y+5	; 0x05
    2678:	0c 81       	ldd	r16, Y+4	; 0x04
    267a:	1b 81       	ldd	r17, Y+3	; 0x03
    267c:	aa 81       	ldd	r26, Y+2	; 0x02
    267e:	b9 81       	ldd	r27, Y+1	; 0x01
    2680:	ce 0f       	add	r28, r30
    2682:	d1 1d       	adc	r29, r1
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	ed 01       	movw	r28, r26
    2690:	08 95       	ret

00002692 <__do_global_dtors>:
    2692:	10 e0       	ldi	r17, 0x00	; 0
    2694:	c8 e3       	ldi	r28, 0x38	; 56
    2696:	d0 e0       	ldi	r29, 0x00	; 0
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <__do_global_dtors+0x10>
    269a:	fe 01       	movw	r30, r28
    269c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__tablejump2__>
    26a0:	21 96       	adiw	r28, 0x01	; 1
    26a2:	c9 33       	cpi	r28, 0x39	; 57
    26a4:	d1 07       	cpc	r29, r17
    26a6:	c9 f7       	brne	.-14     	; 0x269a <__do_global_dtors+0x8>
    26a8:	f8 94       	cli

000026aa <__stop_program>:
    26aa:	ff cf       	rjmp	.-2      	; 0x26aa <__stop_program>
