
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001be  00800100  00002054  00002108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002054  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  008002be  008002be  000022c6  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000022c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000024  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000001e  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000005c  00000000  00000000  0000230e  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000236c  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000558  00000000  00000000  000023b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008529  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a7b  00000000  00000000  0000ae31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000278d  00000000  00000000  0000d8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c70  00000000  00000000  0001003c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027dd  00000000  00000000  00010cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000036e2  00000000  00000000  00013489  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00016b6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__dtors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__vector_14>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__vector_18>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	13 05       	cpc	r17, r3
      6a:	14 06       	cpc	r1, r20
      6c:	72 06       	cpc	r7, r18
      6e:	8b 0b       	sbc	r24, r27

00000070 <__ctors_end>:
      70:	83 06       	cpc	r8, r19

00000072 <__dtors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf ef       	ldi	r28, 0xFF	; 255
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	12 e0       	ldi	r17, 0x02	; 2
      80:	a0 e0       	ldi	r26, 0x00	; 0
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	e4 e5       	ldi	r30, 0x54	; 84
      86:	f0 e2       	ldi	r31, 0x20	; 32
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	ae 3b       	cpi	r26, 0xBE	; 190
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	23 e0       	ldi	r18, 0x03	; 3
      96:	ae eb       	ldi	r26, 0xBE	; 190
      98:	b2 e0       	ldi	r27, 0x02	; 2
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a4 3f       	cpi	r26, 0xF4	; 244
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>

000000a4 <__do_global_ctors>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	c8 e3       	ldi	r28, 0x38	; 56
      a8:	d0 e0       	ldi	r29, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_global_ctors+0x10>
      ac:	21 97       	sbiw	r28, 0x01	; 1
      ae:	fe 01       	movw	r30, r28
      b0:	0e 94 96 0b 	call	0x172c	; 0x172c <__tablejump2__>
      b4:	c4 33       	cpi	r28, 0x34	; 52
      b6:	d1 07       	cpc	r29, r17
      b8:	c9 f7       	brne	.-14     	; 0xac <__do_global_ctors+0x8>
      ba:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
      be:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__do_global_dtors>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <i2c_delay_T2>:
	...
nop
nop
nop
nop
nop
nop
     10a:	00 00       	nop
	ret          ; 3   "
     10c:	08 95       	ret

0000010e <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     10e:	3d 98       	cbi	0x07, 5	; 7
	cbi SCL_DDR,SCL		;release SCL
     110:	3c 98       	cbi	0x07, 4	; 7
	cbi SDA_OUT,SDA
     112:	45 98       	cbi	0x08, 5	; 8
	cbi SCL_OUT,SCL
     114:	44 98       	cbi	0x08, 4	; 8
	ret
     116:	08 95       	ret

00000118 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     118:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     11a:	d5 df       	rcall	.-86     	; 0xc6 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     11c:	1d d0       	rcall	.+58     	; 0x158 <i2c_write>
	ret
     11e:	08 95       	ret

00000120 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     120:	3c 9a       	sbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     122:	d1 df       	rcall	.-94     	; 0xc6 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     124:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     126:	cf df       	rcall	.-98     	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     128:	3c 98       	cbi	0x07, 4	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     12a:	cd df       	rcall	.-102    	; 0xc6 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     12c:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay	T/2
     12e:	cb df       	rcall	.-106    	; 0xc6 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     130:	13 d0       	rcall	.+38     	; 0x158 <i2c_write>
	ret
     132:	08 95       	ret

00000134 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     134:	08 2e       	mov	r0, r24

00000136 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     136:	3d 9a       	sbi	0x07, 5	; 7
	rcall 	i2c_delay_T2	;delay T/2
     138:	c6 df       	rcall	.-116    	; 0xc6 <i2c_delay_T2>
	mov	r24,__tmp_reg__
     13a:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     13c:	0d d0       	rcall	.+26     	; 0x158 <i2c_write>
	tst	r24		;if device not busy -> done
     13e:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     140:	11 f0       	breq	.+4      	; 0x146 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     142:	02 d0       	rcall	.+4      	; 0x148 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     144:	f8 cf       	rjmp	.-16     	; 0x136 <i2c_start_wait1>

00000146 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     146:	08 95       	ret

00000148 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     148:	3c 9a       	sbi	0x07, 4	; 7
	sbi	SDA_DDR,SDA	;force SDA low
     14a:	3d 9a       	sbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     14c:	bc df       	rcall	.-136    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     14e:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     150:	ba df       	rcall	.-140    	; 0xc6 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     152:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     154:	b8 df       	rcall	.-144    	; 0xc6 <i2c_delay_T2>
	ret
     156:	08 95       	ret

00000158 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     158:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     15a:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     15c:	01 c0       	rjmp	.+2      	; 0x160 <i2c_write_first>

0000015e <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     15e:	88 0f       	add	r24, r24

00000160 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     160:	59 f0       	breq	.+22     	; 0x178 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     162:	3c 9a       	sbi	0x07, 4	; 7
	brcc	i2c_write_low
     164:	18 f4       	brcc	.+6      	; 0x16c <i2c_write_low>
	nop
     166:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     168:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16a:	02 c0       	rjmp	.+4      	; 0x170 <i2c_write_high>

0000016c <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     16c:	3d 9a       	sbi	0x07, 5	; 7
	rjmp	i2c_write_high
     16e:	00 c0       	rjmp	.+0      	; 0x170 <i2c_write_high>

00000170 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     170:	aa df       	rcall	.-172    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     172:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     174:	a8 df       	rcall	.-176    	; 0xc6 <i2c_delay_T2>
	rjmp	i2c_write_bit
     176:	f3 cf       	rjmp	.-26     	; 0x15e <i2c_write_bit>

00000178 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     178:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA
     17a:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     17c:	a4 df       	rcall	.-184    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     17e:	3c 98       	cbi	0x07, 4	; 7

00000180 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     180:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_ack_wait
     182:	fe cf       	rjmp	.-4      	; 0x180 <i2c_ack_wait>
	
	clr	r24		;return 0
     184:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     186:	35 99       	sbic	0x06, 5	; 6
	ldi	r24,1
     188:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     18a:	9d df       	rcall	.-198    	; 0xc6 <i2c_delay_T2>
	clr	r25
     18c:	99 27       	eor	r25, r25
	ret
     18e:	08 95       	ret

00000190 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     190:	88 27       	eor	r24, r24
	rjmp	i2c_read
     192:	01 c0       	rjmp	.+2      	; 0x196 <i2c_read>

00000194 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     194:	81 e0       	ldi	r24, 0x01	; 1

00000196 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     196:	71 e0       	ldi	r23, 0x01	; 1

00000198 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     198:	3c 9a       	sbi	0x07, 4	; 7
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     19a:	3d 98       	cbi	0x07, 5	; 7
	rcall	i2c_delay_T2	;delay T/2
     19c:	94 df       	rcall	.-216    	; 0xc6 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     19e:	3c 98       	cbi	0x07, 4	; 7
	rcall	i2c_delay_T2	;delay T/2
     1a0:	92 df       	rcall	.-220    	; 0xc6 <i2c_delay_T2>

000001a2 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     1a2:	34 9b       	sbis	0x06, 4	; 6
    rjmp	i2c_read_stretch
     1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <i2c_read_stretch>
    	
	clc			;clear carry flag
     1a6:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     1a8:	35 99       	sbic	0x06, 5	; 6
	sec			;  set carry flag
     1aa:	08 94       	sec
	
	rol	r23		;store bit
     1ac:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     1ae:	a0 f7       	brcc	.-24     	; 0x198 <i2c_read_bit>

000001b0 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     1b0:	3c 9a       	sbi	0x07, 4	; 7
	cpi	r24,1
     1b2:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     1b4:	11 f0       	breq	.+4      	; 0x1ba <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     1b6:	3d 98       	cbi	0x07, 5	; 7
	rjmp	i2c_put_ack_high
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <i2c_put_ack_high>

000001ba <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     1ba:	3d 9a       	sbi	0x07, 5	; 7

000001bc <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     1bc:	84 df       	rcall	.-248    	; 0xc6 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     1be:	3c 98       	cbi	0x07, 4	; 7

000001c0 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     1c0:	34 9b       	sbis	0x06, 4	; 6
	rjmp	i2c_put_ack_wait
     1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     1c4:	80 df       	rcall	.-256    	; 0xc6 <i2c_delay_T2>
	mov	r24,r23
     1c6:	87 2f       	mov	r24, r23
	clr	r25
     1c8:	99 27       	eor	r25, r25
	ret
     1ca:	08 95       	ret

000001cc <main>:
#include "i2cmaster.h"
#include "TC654.h"
#include "Fans.h"
using namespace std;
int main(void)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
     1d4:	ad 97       	sbiw	r28, 0x2d	; 45
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	f8 94       	cli
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	cd bf       	out	0x3d, r28	; 61
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	a8 95       	wdr
     1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1ea:	88 61       	ori	r24, 0x18	; 24
     1ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1f4:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	i2c_init();
     1f6:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_init>
	Outputs::Initialize();
     1fa:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7Outputs10InitializeEv>
	//Stopwatch stopWatch = Stopwatch();
	UART& uart = UART::GetInstance();
     1fe:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN4UART11GetInstanceEv>
     202:	3c 01       	movw	r6, r24
	Settings& settings=Settings::GetInstance();
     204:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN8Settings11GetInstanceEv>
     208:	8c 01       	movw	r16, r24
	TC654 tc654 = TC654(0x01, 0x01);
     20a:	41 e0       	ldi	r20, 0x01	; 1
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	ce 01       	movw	r24, r28
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN5TC654C1Ecc>
	IGetFanInfo* iGetFanInfos[]={tc654.GetIGetFan1Info(), tc654.GetIGetFan2Info()};
     216:	ce 01       	movw	r24, r28
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	0e 94 a3 05 	call	0xb46	; 0xb46 <_ZN5TC65415GetIGetFan1InfoEv>
     21e:	9f a3       	std	Y+39, r25	; 0x27
     220:	8e a3       	std	Y+38, r24	; 0x26
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN5TC65415GetIGetFan2InfoEv>
     22a:	99 a7       	std	Y+41, r25	; 0x29
     22c:	88 a7       	std	Y+40, r24	; 0x28
	Fans& fans = Fans::GetInstance();
     22e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN4Fans11GetInstanceEv>
	fans.SetInterfaces(iGetFanInfos, 0x02, &settings);
     232:	98 01       	movw	r18, r16
     234:	28 5f       	subi	r18, 0xF8	; 248
     236:	3f 4f       	sbci	r19, 0xFF	; 255
     238:	42 e0       	ldi	r20, 0x02	; 2
     23a:	be 01       	movw	r22, r28
     23c:	6a 5d       	subi	r22, 0xDA	; 218
     23e:	7f 4f       	sbci	r23, 0xFF	; 255
     240:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>
	LM75* lm75_7= new LM75(0x07, "lm75_7");
     244:	8c e0       	ldi	r24, 0x0C	; 12
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Znwj>
     24c:	4c 01       	movw	r8, r24
     24e:	46 e0       	ldi	r20, 0x06	; 6
     250:	51 e0       	ldi	r21, 0x01	; 1
     252:	67 e0       	ldi	r22, 0x07	; 7
     254:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN4LM75C1EcPc>
	LM75* lm75_6= new LM75(0x06, "lm75_6");
     258:	8c e0       	ldi	r24, 0x0C	; 12
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Znwj>
     260:	5c 01       	movw	r10, r24
     262:	4d e0       	ldi	r20, 0x0D	; 13
     264:	51 e0       	ldi	r21, 0x01	; 1
     266:	66 e0       	ldi	r22, 0x06	; 6
     268:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN4LM75C1EcPc>
	IGetTemperatureInfo* lm75s[] = {lm75_7, lm75_6};
     26c:	9b a6       	std	Y+43, r9	; 0x2b
     26e:	8a a6       	std	Y+42, r8	; 0x2a
     270:	bd a6       	std	Y+45, r11	; 0x2d
     272:	ac a6       	std	Y+44, r10	; 0x2c
	Temperatures& temperatures=Temperatures::GetInstance();
     274:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN12Temperatures11GetInstanceEv>
     278:	5c 01       	movw	r10, r24
	temperatures.SetInterfaces(lm75s, 0x2);
     27a:	42 e0       	ldi	r20, 0x02	; 2
     27c:	be 01       	movw	r22, r28
     27e:	66 5d       	subi	r22, 0xD6	; 214
     280:	7f 4f       	sbci	r23, 0xFF	; 255
     282:	0e 94 0f 06 	call	0xc1e	; 0xc1e <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>
	Leds::Main::SetGreen();		
     286:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN4Leds4Main8SetGreenEv>
	Endpoint* endpoint = new Endpoint(&uart, &uart, &settings, &settings, &settings, &settings, &temperatures);
     28a:	80 e1       	ldi	r24, 0x10	; 16
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Znwj>
     292:	4c 01       	movw	r8, r24
     294:	68 01       	movw	r12, r16
     296:	84 e0       	ldi	r24, 0x04	; 4
     298:	c8 0e       	add	r12, r24
     29a:	d1 1c       	adc	r13, r1
     29c:	78 01       	movw	r14, r16
     29e:	86 e0       	ldi	r24, 0x06	; 6
     2a0:	e8 0e       	add	r14, r24
     2a2:	f1 1c       	adc	r15, r1
     2a4:	98 01       	movw	r18, r16
     2a6:	2e 5f       	subi	r18, 0xFE	; 254
     2a8:	3f 4f       	sbci	r19, 0xFF	; 255
     2aa:	b3 01       	movw	r22, r6
     2ac:	6e 5f       	subi	r22, 0xFE	; 254
     2ae:	7f 4f       	sbci	r23, 0xFF	; 255
     2b0:	a3 01       	movw	r20, r6
     2b2:	c4 01       	movw	r24, r8
     2b4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperatures>
	while(1)
	{
	    endpoint->Run();
     2b8:	c4 01       	movw	r24, r8
     2ba:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_ZN8Endpoint3RunEv>
     2be:	fc cf       	rjmp	.-8      	; 0x2b8 <main+0xec>

000002c0 <_ZN8EndpointC1EP12IGetMessagesP12ISendMessageP18ISetTemperatureMaxP18IGetTemperatureMaxP9ISetPowerP9IGetPowerP13ITemperatures>:
#include "Leds.h"
#include "Endpoint.h"
#include "UART.h"
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures){
     2c0:	af 92       	push	r10
     2c2:	bf 92       	push	r11
     2c4:	cf 92       	push	r12
     2c6:	df 92       	push	r13
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	fc 01       	movw	r30, r24
     2d2:	71 83       	std	Z+1, r23	; 0x01
     2d4:	60 83       	st	Z, r22
     2d6:	53 83       	std	Z+3, r21	; 0x03
     2d8:	42 83       	std	Z+2, r20	; 0x02
     2da:	35 83       	std	Z+5, r19	; 0x05
     2dc:	24 83       	std	Z+4, r18	; 0x04
     2de:	17 83       	std	Z+7, r17	; 0x07
     2e0:	06 83       	std	Z+6, r16	; 0x06
     2e2:	f1 86       	std	Z+9, r15	; 0x09
     2e4:	e0 86       	std	Z+8, r14	; 0x08
     2e6:	d3 86       	std	Z+11, r13	; 0x0b
     2e8:	c2 86       	std	Z+10, r12	; 0x0a
     2ea:	b5 86       	std	Z+13, r11	; 0x0d
     2ec:	a4 86       	std	Z+12, r10	; 0x0c
	
}
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	08 95       	ret

00000300 <_ZN8Endpoint8GetPowerEv>:
		}
		delete messages;
	}
}

void Endpoint::GetPower(){
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	6e 97       	sbiw	r28, 0x1e	; 30
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	7c 01       	movw	r14, r24
	uint16_t power = iGetPower->GetPower();
     31e:	dc 01       	movw	r26, r24
     320:	1a 96       	adiw	r26, 0x0a	; 10
     322:	8d 91       	ld	r24, X+
     324:	9c 91       	ld	r25, X
     326:	1b 97       	sbiw	r26, 0x0b	; 11
     328:	dc 01       	movw	r26, r24
     32a:	ed 91       	ld	r30, X+
     32c:	fc 91       	ld	r31, X
     32e:	01 90       	ld	r0, Z+
     330:	f0 81       	ld	r31, Z
     332:	e0 2d       	mov	r30, r0
     334:	09 95       	icall
	char buf[30];
	sprintf(buf,"{\"type\":\"power\",\"power\":%04d}",power);
     336:	9f 93       	push	r25
     338:	8f 93       	push	r24
     33a:	84 e1       	ldi	r24, 0x14	; 20
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	8e 01       	movw	r16, r28
     344:	0f 5f       	subi	r16, 0xFF	; 255
     346:	1f 4f       	sbci	r17, 0xFF	; 255
     348:	1f 93       	push	r17
     34a:	0f 93       	push	r16
     34c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <sprintf>
	iSendMessage->SendMessage(buf, 29);
     350:	f7 01       	movw	r30, r14
     352:	82 81       	ldd	r24, Z+2	; 0x02
     354:	93 81       	ldd	r25, Z+3	; 0x03
     356:	dc 01       	movw	r26, r24
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	01 90       	ld	r0, Z+
     35e:	f0 81       	ld	r31, Z
     360:	e0 2d       	mov	r30, r0
     362:	4d e1       	ldi	r20, 0x1D	; 29
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	b8 01       	movw	r22, r16
     368:	09 95       	icall
}
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	6e 96       	adiw	r28, 0x1e	; 30
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	08 95       	ret

00000390 <_ZN8Endpoint17GetTemperatureMaxEv>:
void Endpoint::GetTemperatureMax(){
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	e1 97       	sbiw	r28, 0x31	; 49
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	7c 01       	movw	r14, r24
	uint8_t temperatureMax = iGetTemperatureMax->GetTemperatureMax();
     3ae:	dc 01       	movw	r26, r24
     3b0:	16 96       	adiw	r26, 0x06	; 6
     3b2:	8d 91       	ld	r24, X+
     3b4:	9c 91       	ld	r25, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	dc 01       	movw	r26, r24
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	01 90       	ld	r0, Z+
     3c0:	f0 81       	ld	r31, Z
     3c2:	e0 2d       	mov	r30, r0
     3c4:	09 95       	icall
	char buf[49];
	sprintf(buf,"{\"type\":\"temperature_max\",\"temperature_max\":%03d}",temperatureMax);
     3c6:	1f 92       	push	r1
     3c8:	8f 93       	push	r24
     3ca:	82 e3       	ldi	r24, 0x32	; 50
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	9f 93       	push	r25
     3d0:	8f 93       	push	r24
     3d2:	8e 01       	movw	r16, r28
     3d4:	0f 5f       	subi	r16, 0xFF	; 255
     3d6:	1f 4f       	sbci	r17, 0xFF	; 255
     3d8:	1f 93       	push	r17
     3da:	0f 93       	push	r16
     3dc:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <sprintf>
iSendMessage->SendMessage(buf, 48);}
     3e0:	f7 01       	movw	r30, r14
     3e2:	82 81       	ldd	r24, Z+2	; 0x02
     3e4:	93 81       	ldd	r25, Z+3	; 0x03
     3e6:	dc 01       	movw	r26, r24
     3e8:	ed 91       	ld	r30, X+
     3ea:	fc 91       	ld	r31, X
     3ec:	01 90       	ld	r0, Z+
     3ee:	f0 81       	ld	r31, Z
     3f0:	e0 2d       	mov	r30, r0
     3f2:	40 e3       	ldi	r20, 0x30	; 48
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	b8 01       	movw	r22, r16
     3f8:	09 95       	icall
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	e1 96       	adiw	r28, 0x31	; 49
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	08 95       	ret

00000420 <_ZN8Endpoint17GetMaxTemperatureEv>:

void Endpoint::GetMaxTemperature(){
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	ae 97       	sbiw	r28, 0x2e	; 46
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	8c 01       	movw	r16, r24
	bool successful=true;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	89 83       	std	Y+1, r24	; 0x01
	uint8_t temperature = iTemperatures->GetMaxTemperature(successful);
     442:	d8 01       	movw	r26, r16
     444:	1c 96       	adiw	r26, 0x0c	; 12
     446:	8d 91       	ld	r24, X+
     448:	9c 91       	ld	r25, X
     44a:	1d 97       	sbiw	r26, 0x0d	; 13
     44c:	dc 01       	movw	r26, r24
     44e:	ed 91       	ld	r30, X+
     450:	fc 91       	ld	r31, X
     452:	01 90       	ld	r0, Z+
     454:	f0 81       	ld	r31, Z
     456:	e0 2d       	mov	r30, r0
     458:	be 01       	movw	r22, r28
     45a:	6f 5f       	subi	r22, 0xFF	; 255
     45c:	7f 4f       	sbci	r23, 0xFF	; 255
     45e:	09 95       	icall
     460:	f8 2e       	mov	r15, r24
	if(successful){
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	88 23       	and	r24, r24
     466:	19 f1       	breq	.+70     	; 0x4ae <_ZN8Endpoint17GetMaxTemperatureEv+0x8e>
		Leds::Main::SetRed();
     468:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN4Leds4Main6SetRedEv>
		char buf[45];
		sprintf(buf,"{\"type\":\"max_temperature\",\"temperature\":%03d}",temperature);
     46c:	1f 92       	push	r1
     46e:	ff 92       	push	r15
     470:	84 e6       	ldi	r24, 0x64	; 100
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	9f 93       	push	r25
     476:	8f 93       	push	r24
     478:	7e 01       	movw	r14, r28
     47a:	b2 e0       	ldi	r27, 0x02	; 2
     47c:	eb 0e       	add	r14, r27
     47e:	f1 1c       	adc	r15, r1
     480:	ff 92       	push	r15
     482:	ef 92       	push	r14
     484:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <sprintf>
     488:	f8 01       	movw	r30, r16
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	93 81       	ldd	r25, Z+3	; 0x03
     48e:	dc 01       	movw	r26, r24
     490:	ed 91       	ld	r30, X+
     492:	fc 91       	ld	r31, X
     494:	01 90       	ld	r0, Z+
     496:	f0 81       	ld	r31, Z
     498:	e0 2d       	mov	r30, r0
     49a:	4c e2       	ldi	r20, 0x2C	; 44
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	b7 01       	movw	r22, r14
     4a0:	09 95       	icall
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	ae 96       	adiw	r28, 0x2e	; 46
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	08 95       	ret

000004c8 <_ZN8Endpoint3RunEv>:
#include "LM75.h"
#include <string.h>
Endpoint::Endpoint(IGetMessages* iGetMessages, ISendMessage* iSendMessage, ISetTemperatureMax*iSetTemperatureMax, IGetTemperatureMax* iGetTemperatureMax, ISetPower* iSetPower, IGetPower* iGetPower, ITemperatures* iTemperatures):iGetMessages(iGetMessages), iSendMessage(iSendMessage), iSetTemperatureMax(iSetTemperatureMax), iGetTemperatureMax(iGetTemperatureMax), iSetPower(iSetPower), iGetPower(iGetPower), iTemperatures(iTemperatures){
	
}
void Endpoint::Run(){
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	c0 5c       	subi	r28, 0xC0	; 192
     4e6:	d1 40       	sbci	r29, 0x01	; 1
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	6c 01       	movw	r12, r24
	Messages* messages = iGetMessages->GetMessages();
     4f4:	dc 01       	movw	r26, r24
     4f6:	8d 91       	ld	r24, X+
     4f8:	9c 91       	ld	r25, X
     4fa:	dc 01       	movw	r26, r24
     4fc:	ed 91       	ld	r30, X+
     4fe:	fc 91       	ld	r31, X
     500:	01 90       	ld	r0, Z+
     502:	f0 81       	ld	r31, Z
     504:	e0 2d       	mov	r30, r0
     506:	09 95       	icall
     508:	7c 01       	movw	r14, r24
	if(messages!=NULL){
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	09 f4       	brne	.+2      	; 0x510 <_ZN8Endpoint3RunEv+0x48>
     50e:	e2 c0       	rjmp	.+452    	; 0x6d4 <_ZN8Endpoint3RunEv+0x20c>
		if(messages->length>0)
     510:	fc 01       	movw	r30, r24
     512:	82 81       	ldd	r24, Z+2	; 0x02
     514:	93 81       	ldd	r25, Z+3	; 0x03
     516:	18 16       	cp	r1, r24
     518:	19 06       	cpc	r1, r25
     51a:	0c f0       	brlt	.+2      	; 0x51e <_ZN8Endpoint3RunEv+0x56>
     51c:	d5 c0       	rjmp	.+426    	; 0x6c8 <_ZN8Endpoint3RunEv+0x200>
		{
			Leds::Main::SetBlue();
     51e:	0e 94 94 03 	call	0x728	; 0x728 <_ZN4Leds4Main7SetBlueEv>
			for(int i=0; i<messages->length; i++){
     522:	d7 01       	movw	r26, r14
     524:	12 96       	adiw	r26, 0x02	; 2
     526:	8d 91       	ld	r24, X+
     528:	9c 91       	ld	r25, X
     52a:	13 97       	sbiw	r26, 0x03	; 3
     52c:	18 16       	cp	r1, r24
     52e:	19 06       	cpc	r1, r25
     530:	0c f0       	brlt	.+2      	; 0x534 <_ZN8Endpoint3RunEv+0x6c>
     532:	ca c0       	rjmp	.+404    	; 0x6c8 <_ZN8Endpoint3RunEv+0x200>
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	10 e0       	ldi	r17, 0x00	; 0
				Message* message = messages->messages[i];
     538:	d7 01       	movw	r26, r14
     53a:	ed 91       	ld	r30, X+
     53c:	fc 91       	ld	r31, X
     53e:	c8 01       	movw	r24, r16
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	e8 0f       	add	r30, r24
     546:	f9 1f       	adc	r31, r25
     548:	01 90       	ld	r0, Z+
     54a:	f0 81       	ld	r31, Z
     54c:	e0 2d       	mov	r30, r0
				json_t pool[64];
				json_t const* root = json_create( (char*)message->buffer, pool, message->length );
     54e:	42 81       	ldd	r20, Z+2	; 0x02
     550:	53 81       	ldd	r21, Z+3	; 0x03
     552:	be 01       	movw	r22, r28
     554:	6f 5f       	subi	r22, 0xFF	; 255
     556:	7f 4f       	sbci	r23, 0xFF	; 255
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	0e 94 b1 07 	call	0xf62	; 0xf62 <json_create>
     560:	5c 01       	movw	r10, r24
				json_t const* jObjectType = json_getProperty( root, "type" );
     562:	62 e9       	ldi	r22, 0x92	; 146
     564:	71 e0       	ldi	r23, 0x01	; 1
     566:	0e 94 8c 07 	call	0xf18	; 0xf18 <json_getProperty>
				if ( jObjectType && JSON_TEXT == json_getType(  jObjectType ) ) {
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	09 f4       	brne	.+2      	; 0x570 <_ZN8Endpoint3RunEv+0xa8>
     56e:	a1 c0       	rjmp	.+322    	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
     570:	fc 01       	movw	r30, r24
     572:	26 81       	ldd	r18, Z+6	; 0x06
     574:	22 30       	cpi	r18, 0x02	; 2
     576:	09 f0       	breq	.+2      	; 0x57a <_ZN8Endpoint3RunEv+0xb2>
     578:	9c c0       	rjmp	.+312    	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
/** Get the value of a json property.
  * The type of property cannot be JSON_OBJ or JSON_ARRAY.
  * @param json A valid handler of a json property.
  * @return Pointer to null-terminated string with the value. */
static inline char const* json_getValue( json_t const* property ) {
    return property->u.value;
     57a:	84 80       	ldd	r8, Z+4	; 0x04
     57c:	95 80       	ldd	r9, Z+5	; 0x05
					
					
					const char* type = json_getValue(jObjectType);
					UART::GetInstance().SendMessage(type, strlen(type));
     57e:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN4UART11GetInstanceEv>
     582:	f4 01       	movw	r30, r8
     584:	01 90       	ld	r0, Z+
     586:	00 20       	and	r0, r0
     588:	e9 f7       	brne	.-6      	; 0x584 <_ZN8Endpoint3RunEv+0xbc>
     58a:	31 97       	sbiw	r30, 0x01	; 1
     58c:	af 01       	movw	r20, r30
     58e:	48 19       	sub	r20, r8
     590:	59 09       	sbc	r21, r9
     592:	dc 01       	movw	r26, r24
     594:	ed 91       	ld	r30, X+
     596:	fc 91       	ld	r31, X
     598:	01 90       	ld	r0, Z+
     59a:	f0 81       	ld	r31, Z
     59c:	e0 2d       	mov	r30, r0
     59e:	b4 01       	movw	r22, r8
     5a0:	09 95       	icall
					if(strcmp(type, "system_check")==0){
     5a2:	67 e9       	ldi	r22, 0x97	; 151
     5a4:	71 e0       	ldi	r23, 0x01	; 1
     5a6:	c4 01       	movw	r24, r8
     5a8:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
     5ac:	89 2b       	or	r24, r25
     5ae:	59 f4       	brne	.+22     	; 0x5c6 <_ZN8Endpoint3RunEv+0xfe>
						iSystemCheck->Check();
     5b0:	f6 01       	movw	r30, r12
     5b2:	86 85       	ldd	r24, Z+14	; 0x0e
     5b4:	97 85       	ldd	r25, Z+15	; 0x0f
     5b6:	dc 01       	movw	r26, r24
     5b8:	ed 91       	ld	r30, X+
     5ba:	fc 91       	ld	r31, X
     5bc:	01 90       	ld	r0, Z+
     5be:	f0 81       	ld	r31, Z
     5c0:	e0 2d       	mov	r30, r0
     5c2:	09 95       	icall
     5c4:	76 c0       	rjmp	.+236    	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
						}else{
						if(strcmp(type,"run")==0){
     5c6:	64 ea       	ldi	r22, 0xA4	; 164
     5c8:	71 e0       	ldi	r23, 0x01	; 1
     5ca:	c4 01       	movw	r24, r8
     5cc:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
     5d0:	89 2b       	or	r24, r25
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <_ZN8Endpoint3RunEv+0x10e>
     5d4:	6e c0       	rjmp	.+220    	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
							
							}else{
							if(strcmp(type,"set_temperature_max")==0){
     5d6:	68 ea       	ldi	r22, 0xA8	; 168
     5d8:	71 e0       	ldi	r23, 0x01	; 1
     5da:	c4 01       	movw	r24, r8
     5dc:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
     5e0:	89 2b       	or	r24, r25
     5e2:	f1 f4       	brne	.+60     	; 0x620 <_ZN8Endpoint3RunEv+0x158>
								json_t const* jObjectTemperatureMax = json_getProperty( root, "temperature_max" );
     5e4:	60 ec       	ldi	r22, 0xC0	; 192
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	c5 01       	movw	r24, r10
     5ea:	0e 94 8c 07 	call	0xf18	; 0xf18 <json_getProperty>
								if ( jObjectTemperatureMax!=NULL && JSON_INTEGER == json_getType(  jObjectTemperatureMax ) ) {
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <_ZN8Endpoint3RunEv+0x12c>
     5f2:	5f c0       	rjmp	.+190    	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
     5f4:	fc 01       	movw	r30, r24
     5f6:	26 81       	ldd	r18, Z+6	; 0x06
     5f8:	24 30       	cpi	r18, 0x04	; 4
     5fa:	09 f0       	breq	.+2      	; 0x5fe <_ZN8Endpoint3RunEv+0x136>
     5fc:	5a c0       	rjmp	.+180    	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
    return (int64_t)atol( property->u.value );
     5fe:	84 81       	ldd	r24, Z+4	; 0x04
     600:	95 81       	ldd	r25, Z+5	; 0x05
     602:	0e 94 bd 0c 	call	0x197a	; 0x197a <atol>
									int temperatureMax = json_getInteger(jObjectTemperatureMax);
									iSetTemperatureMax->SetTemperatureMax(temperatureMax);
     606:	d6 01       	movw	r26, r12
     608:	14 96       	adiw	r26, 0x04	; 4
     60a:	8d 91       	ld	r24, X+
     60c:	9c 91       	ld	r25, X
     60e:	15 97       	sbiw	r26, 0x05	; 5
     610:	dc 01       	movw	r26, r24
     612:	ed 91       	ld	r30, X+
     614:	fc 91       	ld	r31, X
     616:	01 90       	ld	r0, Z+
     618:	f0 81       	ld	r31, Z
     61a:	e0 2d       	mov	r30, r0
     61c:	09 95       	icall
     61e:	49 c0       	rjmp	.+146    	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
								}
								}else{
								if(strcmp(type,"get_temperature_max")==0){
     620:	6c eb       	ldi	r22, 0xBC	; 188
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	c4 01       	movw	r24, r8
     626:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
     62a:	89 2b       	or	r24, r25
     62c:	21 f4       	brne	.+8      	; 0x636 <_ZN8Endpoint3RunEv+0x16e>
									GetTemperatureMax();
     62e:	c6 01       	movw	r24, r12
     630:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN8Endpoint17GetTemperatureMaxEv>
     634:	3e c0       	rjmp	.+124    	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
									}else{
									if(strcmp(type,"set_power"  )==0){
     636:	60 ed       	ldi	r22, 0xD0	; 208
     638:	71 e0       	ldi	r23, 0x01	; 1
     63a:	c4 01       	movw	r24, r8
     63c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
     640:	89 2b       	or	r24, r25
     642:	d9 f4       	brne	.+54     	; 0x67a <_ZN8Endpoint3RunEv+0x1b2>
										json_t const* jObjectPower = json_getProperty( root, "power" );
     644:	6e ed       	ldi	r22, 0xDE	; 222
     646:	71 e0       	ldi	r23, 0x01	; 1
     648:	c5 01       	movw	r24, r10
     64a:	0e 94 8c 07 	call	0xf18	; 0xf18 <json_getProperty>
										if ( jObjectPower && JSON_INTEGER == json_getType(  jObjectPower ) ) {
     64e:	00 97       	sbiw	r24, 0x00	; 0
     650:	81 f1       	breq	.+96     	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
     652:	fc 01       	movw	r30, r24
     654:	26 81       	ldd	r18, Z+6	; 0x06
     656:	24 30       	cpi	r18, 0x04	; 4
     658:	61 f5       	brne	.+88     	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
     65a:	84 81       	ldd	r24, Z+4	; 0x04
     65c:	95 81       	ldd	r25, Z+5	; 0x05
     65e:	0e 94 bd 0c 	call	0x197a	; 0x197a <atol>
											int Power = json_getInteger(jObjectPower);
											iSetPower->SetPower(Power);
     662:	f6 01       	movw	r30, r12
     664:	a0 85       	ldd	r26, Z+8	; 0x08
     666:	b1 85       	ldd	r27, Z+9	; 0x09
     668:	ed 91       	ld	r30, X+
     66a:	fc 91       	ld	r31, X
     66c:	11 97       	sbiw	r26, 0x01	; 1
     66e:	01 90       	ld	r0, Z+
     670:	f0 81       	ld	r31, Z
     672:	e0 2d       	mov	r30, r0
     674:	cd 01       	movw	r24, r26
     676:	09 95       	icall
     678:	1c c0       	rjmp	.+56     	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
										}
										}else{
										if(strcmp(type,"get_power")==0){
     67a:	6a ed       	ldi	r22, 0xDA	; 218
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	c4 01       	movw	r24, r8
     680:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
     684:	89 2b       	or	r24, r25
     686:	21 f4       	brne	.+8      	; 0x690 <_ZN8Endpoint3RunEv+0x1c8>
											GetPower();
     688:	c6 01       	movw	r24, r12
     68a:	0e 94 80 01 	call	0x300	; 0x300 <_ZN8Endpoint8GetPowerEv>
     68e:	11 c0       	rjmp	.+34     	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
											}else{
											if(strcmp(type,"set_info_rate")==0){
     690:	64 ee       	ldi	r22, 0xE4	; 228
     692:	71 e0       	ldi	r23, 0x01	; 1
     694:	c4 01       	movw	r24, r8
     696:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
     69a:	89 2b       	or	r24, r25
     69c:	51 f0       	breq	.+20     	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>

												}else{
												if(strcmp(type, "get_max_temperature")==0 ){
     69e:	62 ef       	ldi	r22, 0xF2	; 242
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	c4 01       	movw	r24, r8
     6a4:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
     6a8:	89 2b       	or	r24, r25
     6aa:	19 f4       	brne	.+6      	; 0x6b2 <_ZN8Endpoint3RunEv+0x1ea>
													GetMaxTemperature();
     6ac:	c6 01       	movw	r24, r12
     6ae:	0e 94 10 02 	call	0x420	; 0x420 <_ZN8Endpoint17GetMaxTemperatureEv>
	Messages* messages = iGetMessages->GetMessages();
	if(messages!=NULL){
		if(messages->length>0)
		{
			Leds::Main::SetBlue();
			for(int i=0; i<messages->length; i++){
     6b2:	0f 5f       	subi	r16, 0xFF	; 255
     6b4:	1f 4f       	sbci	r17, 0xFF	; 255
     6b6:	d7 01       	movw	r26, r14
     6b8:	12 96       	adiw	r26, 0x02	; 2
     6ba:	8d 91       	ld	r24, X+
     6bc:	9c 91       	ld	r25, X
     6be:	13 97       	sbiw	r26, 0x03	; 3
     6c0:	08 17       	cp	r16, r24
     6c2:	19 07       	cpc	r17, r25
     6c4:	0c f4       	brge	.+2      	; 0x6c8 <_ZN8Endpoint3RunEv+0x200>
     6c6:	38 cf       	rjmp	.-400    	; 0x538 <_ZN8Endpoint3RunEv+0x70>
						}
					}
				}
			}
		}
		delete messages;
     6c8:	c7 01       	movw	r24, r14
     6ca:	0e 94 21 04 	call	0x842	; 0x842 <_ZN8MessagesD1Ev>
     6ce:	c7 01       	movw	r24, r14
     6d0:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZdlPv>
	}
}
     6d4:	c0 54       	subi	r28, 0x40	; 64
     6d6:	de 4f       	sbci	r29, 0xFE	; 254
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	8f 90       	pop	r8
     6fa:	08 95       	ret

000006fc <_ZN4Fans11GetInstanceEv>:
#include "FanSpeedException.h"
#include "CommunicationException.h"

Fans& Fans::GetInstance(){
	
}void Fans::SetInterfaces(IGetFanInfo** iGetFanInfos, unsigned char nIGetFanInfos, IGetFanSpeedMin*iGetFanSpeedMin)
     6fc:	08 95       	ret

000006fe <_ZN4Fans13SetInterfacesEPP11IGetFanInfohP15IGetFanSpeedMin>:
{
     6fe:	fc 01       	movw	r30, r24
this->iGetFanInfos=iGetFanInfos;
     700:	75 83       	std	Z+5, r23	; 0x05
     702:	64 83       	std	Z+4, r22	; 0x04
this->nIGetFanInfos=nIGetFanInfos;
     704:	46 83       	std	Z+6, r20	; 0x06
this->iGetFanSpeedMin = iGetFanSpeedMin;
     706:	30 87       	std	Z+8, r19	; 0x08
     708:	27 83       	std	Z+7, r18	; 0x07
     70a:	08 95       	ret

0000070c <_ZN4Leds4Main6SetRedEv>:
#include "Outputs.h"



void Leds::Main::SetRed(){
	Outputs::PD::_2::SetLow();
     70c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetLow();
     710:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetHigh();
     714:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN7Outputs2PD2_47SetHighEv>
     718:	08 95       	ret

0000071a <_ZN4Leds4Main8SetGreenEv>:
}
void Leds::Main::SetGreen(){
	Outputs::PD::_2::SetLow();
     71a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN7Outputs2PD2_26SetLowEv>
	Outputs::PD::_3::SetHigh();
     71e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <_ZN7Outputs2PD2_37SetHighEv>
	Outputs::PD::_4::SetLow();
     722:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZN7Outputs2PD2_46SetLowEv>
     726:	08 95       	ret

00000728 <_ZN4Leds4Main7SetBlueEv>:
}
void Leds::Main::SetBlue(){
	Outputs::PD::_2::SetHigh();
     728:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN7Outputs2PD2_27SetHighEv>
	Outputs::PD::_3::SetLow();
     72c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN7Outputs2PD2_36SetLowEv>
	Outputs::PD::_4::SetLow();
     730:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_ZN7Outputs2PD2_46SetLowEv>
     734:	08 95       	ret

00000736 <_ZN4LM757GetNameEv>:
	addressWrite =0x90|(shifted&0x0e);
	addressRead =0x91|(shifted&0x0e);
} //LM75
const char* LM75::GetName(){
	return name;
}
     736:	fc 01       	movw	r30, r24
     738:	80 85       	ldd	r24, Z+8	; 0x08
     73a:	91 85       	ldd	r25, Z+9	; 0x09
     73c:	08 95       	ret

0000073e <_ZN4LM7514GetTemperatureERb>:
int8_t LM75::GetTemperature(bool& successful){
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	ec 01       	movw	r28, r24
     74a:	7b 01       	movw	r14, r22
	i2c_start_wait(addressWrite);
     74c:	8b 85       	ldd	r24, Y+11	; 0x0b
     74e:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
	char r=i2c_write(TEMPERATURE_ADDRESS);
     752:	8c 81       	ldd	r24, Y+4	; 0x04
     754:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_write>
     758:	18 2f       	mov	r17, r24
	i2c_stop();
     75a:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_stop>
	if(r!=0){
     75e:	11 23       	and	r17, r17
     760:	11 f0       	breq	.+4      	; 0x766 <_ZN4LM7514GetTemperatureERb+0x28>
		successful=false;
     762:	f7 01       	movw	r30, r14
     764:	10 82       	st	Z, r1
	}

	i2c_start_wait(addressRead);
     766:	8a 85       	ldd	r24, Y+10	; 0x0a
     768:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
	char most = i2c_readAck();
     76c:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readAck>
     770:	c8 2f       	mov	r28, r24
	char least = i2c_readAck();
     772:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_readAck>
	sei();
     776:	78 94       	sei
	return static_cast<int8_t>(most);
	i2c_stop();
	return 0;
}
     778:	8c 2f       	mov	r24, r28
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	08 95       	ret

00000786 <_ZThn2_N4LM757GetNameEv>:
     786:	fc 01       	movw	r30, r24
     788:	86 81       	ldd	r24, Z+6	; 0x06
     78a:	97 81       	ldd	r25, Z+7	; 0x07
     78c:	08 95       	ret

0000078e <_ZN4LM75C1EcPc>:
*/
#include "i2cmaster.h"
#include "LM75.h"
#include <avr/interrupt.h>
// default constructor
LM75::LM75(char address, char* name):name(name)
     78e:	fc 01       	movw	r30, r24
     790:	8a e0       	ldi	r24, 0x0A	; 10
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	91 83       	std	Z+1, r25	; 0x01
     796:	80 83       	st	Z, r24
     798:	82 e1       	ldi	r24, 0x12	; 18
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	93 83       	std	Z+3, r25	; 0x03
     79e:	82 83       	std	Z+2, r24	; 0x02
     7a0:	14 82       	std	Z+4, r1	; 0x04
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	85 83       	std	Z+5, r24	; 0x05
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	86 83       	std	Z+6, r24	; 0x06
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	87 83       	std	Z+7, r24	; 0x07
     7ae:	51 87       	std	Z+9, r21	; 0x09
     7b0:	40 87       	std	Z+8, r20	; 0x08
{
	char shifted = (address<<1);
	addressWrite =0x90|(shifted&0x0e);
     7b2:	66 0f       	add	r22, r22
     7b4:	6e 70       	andi	r22, 0x0E	; 14
     7b6:	86 2f       	mov	r24, r22
     7b8:	80 69       	ori	r24, 0x90	; 144
     7ba:	83 87       	std	Z+11, r24	; 0x0b
	addressRead =0x91|(shifted&0x0e);
     7bc:	61 69       	ori	r22, 0x91	; 145
     7be:	62 87       	std	Z+10, r22	; 0x0a
     7c0:	08 95       	ret

000007c2 <_ZN7MessageC1EPKcj>:
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include <stdlib.h>
#include "Message.h"
Message::Message(const char* bufferIn, unsigned int lengthIn):length(lengthIn), buffer(bufferIn){
     7c2:	fc 01       	movw	r30, r24
     7c4:	71 83       	std	Z+1, r23	; 0x01
     7c6:	60 83       	st	Z, r22
     7c8:	53 83       	std	Z+3, r21	; 0x03
     7ca:	42 83       	std	Z+2, r20	; 0x02
     7cc:	08 95       	ret

000007ce <_ZN7MessageD1Ev>:
	
}
Message::~Message(){
	delete[] this->buffer;
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	91 81       	ldd	r25, Z+1	; 0x01
     7d4:	00 97       	sbiw	r24, 0x00	; 0
     7d6:	11 f0       	breq	.+4      	; 0x7dc <_ZN7MessageD1Ev+0xe>
     7d8:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZdaPv>
     7dc:	08 95       	ret

000007de <_ZN8MessagesC1EPP7Messagec>:
*
* Created: 09/10/2017 13:01:34
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	ec 01       	movw	r28, r24
     7ea:	f6 2e       	mov	r15, r22
     7ec:	07 2f       	mov	r16, r23
     7ee:	14 2f       	mov	r17, r20
     7f0:	84 2f       	mov	r24, r20
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	9b 83       	std	Y+3, r25	; 0x03
     7f6:	8a 83       	std	Y+2, r24	; 0x02
	messages = new Message*[lengthIn];
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_Znaj>
     800:	99 83       	std	Y+1, r25	; 0x01
     802:	88 83       	st	Y, r24
	for(char i=0; i<lengthIn; i++)
     804:	11 23       	and	r17, r17
     806:	b9 f0       	breq	.+46     	; 0x836 <_ZN8MessagesC1EPP7Messagec+0x58>
     808:	af 2d       	mov	r26, r15
     80a:	b0 2f       	mov	r27, r16
     80c:	11 50       	subi	r17, 0x01	; 1
     80e:	21 2f       	mov	r18, r17
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	2f 5f       	subi	r18, 0xFF	; 255
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	22 0f       	add	r18, r18
     818:	33 1f       	adc	r19, r19
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
	messages[i]= messagesIn[i];
     81e:	4d 91       	ld	r20, X+
     820:	5d 91       	ld	r21, X+
     822:	e8 81       	ld	r30, Y
     824:	f9 81       	ldd	r31, Y+1	; 0x01
     826:	e8 0f       	add	r30, r24
     828:	f9 1f       	adc	r31, r25
     82a:	51 83       	std	Z+1, r21	; 0x01
     82c:	40 83       	st	Z, r20
     82e:	02 96       	adiw	r24, 0x02	; 2
* Author: SoftwareEngineer
*/
#include "Messages.h"
Messages::Messages(Message* messagesIn[], char lengthIn): length(lengthIn){
	messages = new Message*[lengthIn];
	for(char i=0; i<lengthIn; i++)
     830:	82 17       	cp	r24, r18
     832:	93 07       	cpc	r25, r19
     834:	a1 f7       	brne	.-24     	; 0x81e <_ZN8MessagesC1EPP7Messagec+0x40>
	messages[i]= messagesIn[i];
}
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	08 95       	ret

00000842 <_ZN8MessagesD1Ev>:
Messages::~Messages(){
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	7c 01       	movw	r14, r24

	for(char i=0; i<length; i++)
     84e:	dc 01       	movw	r26, r24
     850:	12 96       	adiw	r26, 0x02	; 2
     852:	8d 91       	ld	r24, X+
     854:	9c 91       	ld	r25, X
     856:	13 97       	sbiw	r26, 0x03	; 3
     858:	18 16       	cp	r1, r24
     85a:	19 06       	cpc	r1, r25
     85c:	f4 f4       	brge	.+60     	; 0x89a <_ZN8MessagesD1Ev+0x58>
     85e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		delete messages[i];
     860:	ec 2f       	mov	r30, r28
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	ee 0f       	add	r30, r30
     866:	ff 1f       	adc	r31, r31
     868:	d7 01       	movw	r26, r14
     86a:	8d 91       	ld	r24, X+
     86c:	9c 91       	ld	r25, X
     86e:	e8 0f       	add	r30, r24
     870:	f9 1f       	adc	r31, r25
     872:	00 81       	ld	r16, Z
     874:	11 81       	ldd	r17, Z+1	; 0x01
     876:	01 15       	cp	r16, r1
     878:	11 05       	cpc	r17, r1
     87a:	31 f0       	breq	.+12     	; 0x888 <_ZN8MessagesD1Ev+0x46>
     87c:	c8 01       	movw	r24, r16
     87e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_ZN7MessageD1Ev>
     882:	c8 01       	movw	r24, r16
     884:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZdlPv>
	for(char i=0; i<lengthIn; i++)
	messages[i]= messagesIn[i];
}
Messages::~Messages(){

	for(char i=0; i<length; i++)
     888:	cf 5f       	subi	r28, 0xFF	; 255
     88a:	2c 2f       	mov	r18, r28
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	f7 01       	movw	r30, r14
     890:	82 81       	ldd	r24, Z+2	; 0x02
     892:	93 81       	ldd	r25, Z+3	; 0x03
     894:	28 17       	cp	r18, r24
     896:	39 07       	cpc	r19, r25
     898:	1c f3       	brlt	.-58     	; 0x860 <_ZN8MessagesD1Ev+0x1e>
	{
		delete messages[i];
	}
	delete[] messages;
     89a:	d7 01       	movw	r26, r14
     89c:	8d 91       	ld	r24, X+
     89e:	9c 91       	ld	r25, X
     8a0:	00 97       	sbiw	r24, 0x00	; 0
     8a2:	11 f0       	breq	.+4      	; 0x8a8 <_ZN8MessagesD1Ev+0x66>
     8a4:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZdaPv>
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	08 95       	ret

000008b4 <_ZN7Outputs10InitializeEv>:
}
void Outputs::PB::_5::SetHigh(){
	PORTB = PORTB|0x20;
}
void Outputs::PB::_5::SetLow(){
	PORTB= PORTB&0xFB;
     8b4:	8a b1       	in	r24, 0x0a	; 10
     8b6:	8c 61       	ori	r24, 0x1C	; 28
     8b8:	8a b9       	out	0x0a, r24	; 10
     8ba:	08 95       	ret

000008bc <_ZN7Outputs2PD2_27SetHighEv>:
}
void Outputs::PD::_2::SetHigh(){
	PORTD = PORTD|0x04;
     8bc:	5a 9a       	sbi	0x0b, 2	; 11
     8be:	08 95       	ret

000008c0 <_ZN7Outputs2PD2_26SetLowEv>:
}
void Outputs::PD::_2::SetLow(){
	PORTD= PORTD&0xFB;
     8c0:	5a 98       	cbi	0x0b, 2	; 11
     8c2:	08 95       	ret

000008c4 <_ZN7Outputs2PD2_37SetHighEv>:
}
void Outputs::PD::_3::SetHigh(){
	PORTD = PORTD|0x08;
     8c4:	5b 9a       	sbi	0x0b, 3	; 11
     8c6:	08 95       	ret

000008c8 <_ZN7Outputs2PD2_36SetLowEv>:
}
void Outputs::PD::_3::SetLow(){
	PORTD= PORTD&0xF7;
     8c8:	5b 98       	cbi	0x0b, 3	; 11
     8ca:	08 95       	ret

000008cc <_ZN7Outputs2PD2_47SetHighEv>:
}
void Outputs::PD::_4::SetHigh(){
	PORTD = PORTD|0x10;
     8cc:	5c 9a       	sbi	0x0b, 4	; 11
     8ce:	08 95       	ret

000008d0 <_ZN7Outputs2PD2_46SetLowEv>:
}
void Outputs::PD::_4::SetLow(){
	PORTD= PORTD&0xEF;
     8d0:	5c 98       	cbi	0x0b, 4	; 11
     8d2:	08 95       	ret

000008d4 <_ZN8Settings17GetTemperatureMaxEv>:
		if(a<POWER_MIN)
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
     8d4:	fc 01       	movw	r30, r24
     8d6:	82 85       	ldd	r24, Z+10	; 0x0a
     8d8:	08 95       	ret

000008da <_ZN8Settings8GetPowerEv>:
	temperatureMax=a;
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
}
uint16_t Settings::GetPower(){
	return power;
}
     8da:	fc 01       	movw	r30, r24
     8dc:	83 85       	ldd	r24, Z+11	; 0x0b
     8de:	94 85       	ldd	r25, Z+12	; 0x0c
     8e0:	08 95       	ret

000008e2 <_ZN8Settings14GetFanSpeedMinEv>:
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
     8e2:	fc 01       	movw	r30, r24
     8e4:	85 85       	ldd	r24, Z+13	; 0x0d
     8e6:	96 85       	ldd	r25, Z+14	; 0x0e
     8e8:	08 95       	ret

000008ea <_ZThn8_N8Settings14GetFanSpeedMinEv>:
     8ea:	fc 01       	movw	r30, r24
     8ec:	85 81       	ldd	r24, Z+5	; 0x05
     8ee:	96 81       	ldd	r25, Z+6	; 0x06
     8f0:	08 95       	ret

000008f2 <_ZThn4_N8Settings8GetPowerEv>:
     8f2:	fc 01       	movw	r30, r24
     8f4:	87 81       	ldd	r24, Z+7	; 0x07
     8f6:	90 85       	ldd	r25, Z+8	; 0x08
     8f8:	08 95       	ret

000008fa <_ZN8Settings17CapTemperatureMaxERh>:
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
	CapPower(a);
	power=a;
}
void Settings::CapTemperatureMax(uint8_t& a){
	if(a>TEMPERATURE_MAX_MAX)
     8fa:	fb 01       	movw	r30, r22
     8fc:	80 81       	ld	r24, Z
     8fe:	8e 37       	cpi	r24, 0x7E	; 126
     900:	18 f0       	brcs	.+6      	; 0x908 <__stack+0x9>
		a=TEMPERATURE_MAX_MAX;
     902:	8d e7       	ldi	r24, 0x7D	; 125
     904:	80 83       	st	Z, r24
     906:	08 95       	ret
	else
		if(a<TEMPERTURE_MAX_MIN)
     908:	88 32       	cpi	r24, 0x28	; 40
     90a:	18 f4       	brcc	.+6      	; 0x912 <__stack+0x13>
			a=TEMPERTURE_MAX_MIN;
     90c:	88 e2       	ldi	r24, 0x28	; 40
     90e:	fb 01       	movw	r30, r22
     910:	80 83       	st	Z, r24
     912:	08 95       	ret

00000914 <_ZN8Settings17SetTemperatureMaxEh>:
			a=POWER_MIN;
}
uint8_t Settings::GetTemperatureMax(){
	return temperatureMax;
}
void Settings::SetTemperatureMax(uint8_t a){
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	1f 92       	push	r1
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	8c 01       	movw	r16, r24
     924:	69 83       	std	Y+1, r22	; 0x01
	CapTemperatureMax(a);
     926:	be 01       	movw	r22, r28
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_ZN8Settings17CapTemperatureMaxERh>
	temperatureMax=a;
     930:	69 81       	ldd	r22, Y+1	; 0x01
     932:	f8 01       	movw	r30, r16
     934:	62 87       	std	Z+10, r22	; 0x0a
	eeprom_write_byte(&ADDRESS_TEMPERATURE_MAX, a);
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <eeprom_write_byte>
}
     93e:	0f 90       	pop	r0
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	08 95       	ret

0000094a <_ZThn2_N8Settings17SetTemperatureMaxEh>:
     94a:	02 97       	sbiw	r24, 0x02	; 2
     94c:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN8Settings17SetTemperatureMaxEh>
     950:	08 95       	ret

00000952 <_ZN8Settings8CapPowerERj>:
		if(a<TEMPERTURE_MAX_MIN)
			a=TEMPERTURE_MAX_MIN;
}	
void Settings::CapPower(uint16_t& a){
	
	if(a>POWER_MAX)
     952:	fb 01       	movw	r30, r22
     954:	80 81       	ld	r24, Z
     956:	91 81       	ldd	r25, Z+1	; 0x01
     958:	8d 3d       	cpi	r24, 0xDD	; 221
     95a:	f5 e0       	ldi	r31, 0x05	; 5
     95c:	9f 07       	cpc	r25, r31
     95e:	30 f0       	brcs	.+12     	; 0x96c <_ZN8Settings8CapPowerERj+0x1a>
		a=POWER_MAX;
     960:	8c ed       	ldi	r24, 0xDC	; 220
     962:	95 e0       	ldi	r25, 0x05	; 5
     964:	fb 01       	movw	r30, r22
     966:	91 83       	std	Z+1, r25	; 0x01
     968:	80 83       	st	Z, r24
     96a:	08 95       	ret
	else
		if(a<POWER_MIN)
     96c:	4e 97       	sbiw	r24, 0x1e	; 30
     96e:	28 f4       	brcc	.+10     	; 0x97a <_ZN8Settings8CapPowerERj+0x28>
			a=POWER_MIN;
     970:	8e e1       	ldi	r24, 0x1E	; 30
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	fb 01       	movw	r30, r22
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	80 83       	st	Z, r24
     97a:	08 95       	ret

0000097c <_ZN8Settings10InitializeEv>:
		_Singleton.Initialize();
		initialized=true;
	}
	return _Singleton;
}
void Settings::Initialize(){
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	00 d0       	rcall	.+0      	; 0x986 <_ZN8Settings10InitializeEv+0xa>
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	8c 01       	movw	r16, r24
	temperatureMax= eeprom_read_byte(&ADDRESS_TEMPERATURE_MAX);
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <eeprom_read_byte>
     994:	f8 01       	movw	r30, r16
     996:	82 87       	std	Z+10, r24	; 0x0a
	CapTemperatureMax(temperatureMax);
     998:	b8 01       	movw	r22, r16
     99a:	66 5f       	subi	r22, 0xF6	; 246
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	c8 01       	movw	r24, r16
     9a0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_ZN8Settings17CapTemperatureMaxERh>
	
	uint16_t a= eeprom_read_word(&ADDRESS_POWER);
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <eeprom_read_word>
     9ac:	9a 83       	std	Y+2, r25	; 0x02
     9ae:	89 83       	std	Y+1, r24	; 0x01
	CapPower(a);
     9b0:	be 01       	movw	r22, r28
     9b2:	6f 5f       	subi	r22, 0xFF	; 255
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	c8 01       	movw	r24, r16
     9b8:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN8Settings8CapPowerERj>
	power=a;
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	f8 01       	movw	r30, r16
     9c2:	94 87       	std	Z+12, r25	; 0x0c
     9c4:	83 87       	std	Z+11, r24	; 0x0b
}
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	08 95       	ret

000009d4 <_ZN8Settings11GetInstanceEv>:
uint8_t EEMEM  ADDRESS_TEMPERATURE_MAX;
uint16_t EEMEM  ADDRESS_POWER;
Settings Settings:: _Singleton;
Settings& Settings::GetInstance(){
	static bool initialized=false;
	if(!initialized)
     9d4:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__data_end>
     9d8:	81 11       	cpse	r24, r1
     9da:	07 c0       	rjmp	.+14     	; 0x9ea <_ZN8Settings11GetInstanceEv+0x16>
	{
		_Singleton.Initialize();
     9dc:	8f eb       	ldi	r24, 0xBF	; 191
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN8Settings10InitializeEv>
		initialized=true;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <__data_end>
	}
	return _Singleton;
}
     9ea:	8f eb       	ldi	r24, 0xBF	; 191
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	08 95       	ret

000009f0 <_ZN8Settings8SetPowerEj>:
	return power;
}
uint16_t Settings::GetFanSpeedMin(){
	return fanSpeedMin;
}
void Settings::SetPower(uint16_t a){
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <_ZN8Settings8SetPowerEj+0x6>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	7a 83       	std	Y+2, r23	; 0x02
     9fc:	69 83       	std	Y+1, r22	; 0x01
	CapPower(a);
     9fe:	be 01       	movw	r22, r28
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	0e 94 a9 04 	call	0x952	; 0x952 <_ZN8Settings8CapPowerERj>
	eeprom_write_word(&ADDRESS_POWER, a);
     a08:	69 81       	ldd	r22, Y+1	; 0x01
     a0a:	7a 81       	ldd	r23, Y+2	; 0x02
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <eeprom_write_word>
}
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <_ZThn6_N8Settings8SetPowerEj>:
     a1e:	06 97       	sbiw	r24, 0x06	; 6
     a20:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN8Settings8SetPowerEj>
     a24:	08 95       	ret

00000a26 <_GLOBAL__sub_I_ADDRESS_TEMPERATURE_MAX>:
#include "IGetFanSpeedMin.h"
#define TEMPERATURE_MAX_MAX 125
#define TEMPERTURE_MAX_MIN 40
#define POWER_MIN 30
#define POWER_MAX 1500
class Settings:public  IGetTemperatureMax, public  ISetTemperatureMax, public  IGetPower, public  ISetPower, public IGetFanSpeedMin
     a26:	ef eb       	ldi	r30, 0xBF	; 191
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	88 e1       	ldi	r24, 0x18	; 24
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	80 83       	st	Z, r24
     a32:	86 e2       	ldi	r24, 0x26	; 38
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	93 83       	std	Z+3, r25	; 0x03
     a38:	82 83       	std	Z+2, r24	; 0x02
     a3a:	8c e2       	ldi	r24, 0x2C	; 44
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	95 83       	std	Z+5, r25	; 0x05
     a40:	84 83       	std	Z+4, r24	; 0x04
     a42:	82 e3       	ldi	r24, 0x32	; 50
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	97 83       	std	Z+7, r25	; 0x07
     a48:	86 83       	std	Z+6, r24	; 0x06
     a4a:	88 e3       	ldi	r24, 0x38	; 56
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	91 87       	std	Z+9, r25	; 0x09
     a50:	80 87       	std	Z+8, r24	; 0x08
     a52:	87 e7       	ldi	r24, 0x77	; 119
     a54:	82 87       	std	Z+10, r24	; 0x0a
     a56:	8a e0       	ldi	r24, 0x0A	; 10
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	94 87       	std	Z+12, r25	; 0x0c
     a5c:	83 87       	std	Z+11, r24	; 0x0b
     a5e:	88 ee       	ldi	r24, 0xE8	; 232
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	96 87       	std	Z+14, r25	; 0x0e
     a64:	85 87       	std	Z+13, r24	; 0x0d
     a66:	08 95       	ret

00000a68 <_ZN5TC6543Fan7GetNameEv>:
void TC654::SetDutyCycle(bool& successful, unsigned char value){
	WriteRegister(successful, DUTY_CYCLE_ADDRESS, value);
}
TC654::Status TC654::GetStatus(bool& successful){
	return Status(ReadRegister(successful, STATUS_ADDRESS));
}
     a68:	fc 01       	movw	r30, r24
     a6a:	84 81       	ldd	r24, Z+4	; 0x04
     a6c:	95 81       	ldd	r25, Z+5	; 0x05
     a6e:	08 95       	ret

00000a70 <_ZN5TC6543Fan11GetFanSpeedERb>:
     a70:	dc 01       	movw	r26, r24
     a72:	1a 96       	adiw	r26, 0x0a	; 10
     a74:	2d 91       	ld	r18, X+
     a76:	3c 91       	ld	r19, X
     a78:	1b 97       	sbiw	r26, 0x0b	; 11
     a7a:	20 fd       	sbrc	r18, 0
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <_ZN5TC6543Fan11GetFanSpeedERb+0x18>
     a7e:	18 96       	adiw	r26, 0x08	; 8
     a80:	ed 91       	ld	r30, X+
     a82:	fc 91       	ld	r31, X
     a84:	19 97       	sbiw	r26, 0x09	; 9
     a86:	15 c0       	rjmp	.+42     	; 0xab2 <_ZN5TC6543Fan11GetFanSpeedERb+0x42>
     a88:	16 96       	adiw	r26, 0x06	; 6
     a8a:	ed 91       	ld	r30, X+
     a8c:	fc 91       	ld	r31, X
     a8e:	17 97       	sbiw	r26, 0x07	; 7
     a90:	c9 01       	movw	r24, r18
     a92:	95 95       	asr	r25
     a94:	87 95       	ror	r24
     a96:	e8 0f       	add	r30, r24
     a98:	f9 1f       	adc	r31, r25
     a9a:	01 90       	ld	r0, Z+
     a9c:	f0 81       	ld	r31, Z
     a9e:	e0 2d       	mov	r30, r0
     aa0:	18 96       	adiw	r26, 0x08	; 8
     aa2:	8d 91       	ld	r24, X+
     aa4:	9c 91       	ld	r25, X
     aa6:	19 97       	sbiw	r26, 0x09	; 9
     aa8:	e8 0f       	add	r30, r24
     aaa:	f9 1f       	adc	r31, r25
     aac:	01 90       	ld	r0, Z+
     aae:	f0 81       	ld	r31, Z
     ab0:	e0 2d       	mov	r30, r0
     ab2:	35 95       	asr	r19
     ab4:	27 95       	ror	r18
     ab6:	16 96       	adiw	r26, 0x06	; 6
     ab8:	8d 91       	ld	r24, X+
     aba:	9c 91       	ld	r25, X
     abc:	17 97       	sbiw	r26, 0x07	; 7
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	09 95       	icall
     ac4:	22 e3       	ldi	r18, 0x32	; 50
     ac6:	82 9f       	mul	r24, r18
     ac8:	c0 01       	movw	r24, r0
     aca:	11 24       	eor	r1, r1
     acc:	08 95       	ret

00000ace <_ZThn2_N5TC6543Fan7GetNameEv>:
     ace:	fc 01       	movw	r30, r24
     ad0:	82 81       	ldd	r24, Z+2	; 0x02
     ad2:	93 81       	ldd	r25, Z+3	; 0x03
     ad4:	08 95       	ret

00000ad6 <_ZN5TC654C1Ecc>:
     ad6:	fc 01       	movw	r30, r24
     ad8:	86 e3       	ldi	r24, 0x36	; 54
     ada:	80 83       	st	Z, r24
     adc:	87 e3       	ldi	r24, 0x37	; 55
     ade:	81 83       	std	Z+1, r24	; 0x01
     ae0:	12 82       	std	Z+2, r1	; 0x02
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	83 83       	std	Z+3, r24	; 0x03
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	84 83       	std	Z+4, r24	; 0x04
     aea:	83 e0       	ldi	r24, 0x03	; 3
     aec:	85 83       	std	Z+5, r24	; 0x05
     aee:	84 e0       	ldi	r24, 0x04	; 4
     af0:	86 83       	std	Z+6, r24	; 0x06
     af2:	85 e0       	ldi	r24, 0x05	; 5
     af4:	87 83       	std	Z+7, r24	; 0x07
     af6:	86 e0       	ldi	r24, 0x06	; 6
     af8:	80 87       	std	Z+8, r24	; 0x08
     afa:	87 e0       	ldi	r24, 0x07	; 7
     afc:	81 87       	std	Z+9, r24	; 0x09
     afe:	88 e0       	ldi	r24, 0x08	; 8
     b00:	82 87       	std	Z+10, r24	; 0x0a
     b02:	2e e4       	ldi	r18, 0x4E	; 78
     b04:	32 e0       	ldi	r19, 0x02	; 2
     b06:	36 87       	std	Z+14, r19	; 0x0e
     b08:	25 87       	std	Z+13, r18	; 0x0d
     b0a:	86 e5       	ldi	r24, 0x56	; 86
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	90 8b       	std	Z+16, r25	; 0x10
     b10:	87 87       	std	Z+15, r24	; 0x0f
     b12:	aa e3       	ldi	r26, 0x3A	; 58
     b14:	b2 e0       	ldi	r27, 0x02	; 2
     b16:	b2 8b       	std	Z+18, r27	; 0x12
     b18:	a1 8b       	std	Z+17, r26	; 0x11
     b1a:	f4 8b       	std	Z+20, r31	; 0x14
     b1c:	e3 8b       	std	Z+19, r30	; 0x13
     b1e:	32 8f       	std	Z+26, r19	; 0x1a
     b20:	21 8f       	std	Z+25, r18	; 0x19
     b22:	94 8f       	std	Z+28, r25	; 0x1c
     b24:	83 8f       	std	Z+27, r24	; 0x1b
     b26:	82 e4       	ldi	r24, 0x42	; 66
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	96 8f       	std	Z+30, r25	; 0x1e
     b2c:	85 8f       	std	Z+29, r24	; 0x1d
     b2e:	f0 a3       	std	Z+32, r31	; 0x20
     b30:	e7 8f       	std	Z+31, r30	; 0x1f
     b32:	6f 70       	andi	r22, 0x0F	; 15
     b34:	66 0f       	add	r22, r22
     b36:	66 0f       	add	r22, r22
     b38:	63 87       	std	Z+11, r22	; 0x0b
     b3a:	42 95       	swap	r20
     b3c:	44 0f       	add	r20, r20
     b3e:	44 0f       	add	r20, r20
     b40:	40 7c       	andi	r20, 0xC0	; 192
     b42:	44 87       	std	Z+12, r20	; 0x0c
     b44:	08 95       	ret

00000b46 <_ZN5TC65415GetIGetFan1InfoEv>:
IGetFanInfo* TC654::GetIGetFan1Info(){
	return &fan1;	
}
     b46:	0d 96       	adiw	r24, 0x0d	; 13
     b48:	08 95       	ret

00000b4a <_ZN5TC65415GetIGetFan2InfoEv>:
IGetFanInfo* TC654::GetIGetFan2Info(){
	return &fan2;
}
     b4a:	49 96       	adiw	r24, 0x19	; 25
     b4c:	08 95       	ret

00000b4e <_ZN12Temperatures17GetMaxTemperatureERb>:
}
void Temperatures::SetInterfaces(IGetTemperatureInfo** iGetTemperatureInfos, unsigned char  nIGetTemperatureInfos){
	this->iGetTemperatureInfos=iGetTemperatureInfos;
	this->nIGetTemperatureInfos=nIGetTemperatureInfos;
}
void Temperatures::Initialize(){
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	dc 01       	movw	r26, r24
     b5e:	14 96       	adiw	r26, 0x04	; 4
     b60:	2c 91       	ld	r18, X
     b62:	14 97       	sbiw	r26, 0x04	; 4
     b64:	22 23       	and	r18, r18
     b66:	09 f4       	brne	.+2      	; 0xb6a <_ZN12Temperatures17GetMaxTemperatureERb+0x1c>
     b68:	41 c0       	rjmp	.+130    	; 0xbec <_ZN12Temperatures17GetMaxTemperatureERb+0x9e>
     b6a:	7b 01       	movw	r14, r22
     b6c:	8c 01       	movw	r16, r24
     b6e:	12 96       	adiw	r26, 0x02	; 2
     b70:	ed 91       	ld	r30, X+
     b72:	fc 91       	ld	r31, X
     b74:	13 97       	sbiw	r26, 0x03	; 3
     b76:	80 81       	ld	r24, Z
     b78:	91 81       	ldd	r25, Z+1	; 0x01
     b7a:	dc 01       	movw	r26, r24
     b7c:	ed 91       	ld	r30, X+
     b7e:	fc 91       	ld	r31, X
     b80:	01 90       	ld	r0, Z+
     b82:	f0 81       	ld	r31, Z
     b84:	e0 2d       	mov	r30, r0
     b86:	09 95       	icall
     b88:	d8 2e       	mov	r13, r24
     b8a:	f7 01       	movw	r30, r14
     b8c:	80 81       	ld	r24, Z
     b8e:	88 23       	and	r24, r24
     b90:	79 f1       	breq	.+94     	; 0xbf0 <_ZN12Temperatures17GetMaxTemperatureERb+0xa2>
     b92:	d8 01       	movw	r26, r16
     b94:	14 96       	adiw	r26, 0x04	; 4
     b96:	8c 91       	ld	r24, X
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 97       	sbiw	r24, 0x02	; 2
     b9c:	5c f1       	brlt	.+86     	; 0xbf4 <_ZN12Temperatures17GetMaxTemperatureERb+0xa6>
     b9e:	c1 e0       	ldi	r28, 0x01	; 1
     ba0:	d0 e0       	ldi	r29, 0x00	; 0
     ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <_ZN12Temperatures17GetMaxTemperatureERb+0x62>
     ba4:	f8 01       	movw	r30, r16
     ba6:	24 81       	ldd	r18, Z+4	; 0x04
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	c2 17       	cp	r28, r18
     bac:	d3 07       	cpc	r29, r19
     bae:	24 f5       	brge	.+72     	; 0xbf8 <_ZN12Temperatures17GetMaxTemperatureERb+0xaa>
     bb0:	d8 01       	movw	r26, r16
     bb2:	12 96       	adiw	r26, 0x02	; 2
     bb4:	ed 91       	ld	r30, X+
     bb6:	fc 91       	ld	r31, X
     bb8:	13 97       	sbiw	r26, 0x03	; 3
     bba:	9e 01       	movw	r18, r28
     bbc:	22 0f       	add	r18, r18
     bbe:	33 1f       	adc	r19, r19
     bc0:	e2 0f       	add	r30, r18
     bc2:	f3 1f       	adc	r31, r19
     bc4:	80 81       	ld	r24, Z
     bc6:	91 81       	ldd	r25, Z+1	; 0x01
     bc8:	dc 01       	movw	r26, r24
     bca:	ed 91       	ld	r30, X+
     bcc:	fc 91       	ld	r31, X
     bce:	01 90       	ld	r0, Z+
     bd0:	f0 81       	ld	r31, Z
     bd2:	e0 2d       	mov	r30, r0
     bd4:	b7 01       	movw	r22, r14
     bd6:	09 95       	icall
     bd8:	d8 16       	cp	r13, r24
     bda:	0c f4       	brge	.+2      	; 0xbde <_ZN12Temperatures17GetMaxTemperatureERb+0x90>
     bdc:	d8 2e       	mov	r13, r24
     bde:	21 96       	adiw	r28, 0x01	; 1
     be0:	f7 01       	movw	r30, r14
     be2:	80 81       	ld	r24, Z
     be4:	81 11       	cpse	r24, r1
     be6:	de cf       	rjmp	.-68     	; 0xba4 <_ZN12Temperatures17GetMaxTemperatureERb+0x56>
     be8:	8d 2d       	mov	r24, r13
     bea:	07 c0       	rjmp	.+14     	; 0xbfa <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
     bec:	8b e0       	ldi	r24, 0x0B	; 11
     bee:	05 c0       	rjmp	.+10     	; 0xbfa <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
     bf0:	8d 2d       	mov	r24, r13
     bf2:	03 c0       	rjmp	.+6      	; 0xbfa <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
     bf4:	8d 2d       	mov	r24, r13
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <_ZN12Temperatures17GetMaxTemperatureERb+0xac>
     bf8:	8d 2d       	mov	r24, r13
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	08 95       	ret

00000c0a <_ZN12Temperatures11GetInstanceEv>:
     c0a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <_ZZN12Temperatures11GetInstanceEvE11initialized>
     c0e:	81 11       	cpse	r24, r1
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <_ZN12Temperatures11GetInstanceEv+0xe>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <_ZZN12Temperatures11GetInstanceEvE11initialized>
     c18:	8f ec       	ldi	r24, 0xCF	; 207
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	08 95       	ret

00000c1e <_ZN12Temperatures13SetInterfacesEPP19IGetTemperatureInfoh>:
     c1e:	fc 01       	movw	r30, r24
     c20:	73 83       	std	Z+3, r23	; 0x03
     c22:	62 83       	std	Z+2, r22	; 0x02
     c24:	44 83       	std	Z+4, r20	; 0x04
     c26:	08 95       	ret

00000c28 <_GLOBAL__sub_I__ZN12Temperatures10_SingletonE>:
#ifndef __Temperatures_H__
#define __Temperatures_H__
#include "IGetTemperatureInfo.h"
#include "ITemperatures.h"

class Temperatures:
     c28:	8c e5       	ldi	r24, 0x5C	; 92
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <_ZN12Temperatures10_SingletonE+0x1>
     c30:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <_ZN12Temperatures10_SingletonE>
     c34:	08 95       	ret

00000c36 <_Znwj>:
		if(!Ticker::tickerCallbacksMilliseconds.contains(callback)){
		Ticker::tickerCallbacksMilliseconds.push_back(callback);}
	}
	else
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
     c36:	0e 94 9c 0b 	call	0x1738	; 0x1738 <malloc>
     c3a:	08 95       	ret

00000c3c <_Znaj>:
     c3c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <malloc>
     c40:	08 95       	ret

00000c42 <_ZdlPv>:
     c42:	0e 94 34 0c 	call	0x1868	; 0x1868 <free>
     c46:	08 95       	ret

00000c48 <_ZdaPv>:
     c48:	0e 94 34 0c 	call	0x1868	; 0x1868 <free>
     c4c:	08 95       	ret

00000c4e <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
     c4e:	1f 92       	push	r1
     c50:	0f 92       	push	r0
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	0f 92       	push	r0
     c56:	11 24       	eor	r1, r1
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ef 93       	push	r30
     c76:	ff 93       	push	r31
	cli();
     c78:	f8 94       	cli
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
     c7a:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_ZN6Ticker27tickerCallbacksMillisecondsE>
     c7e:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <_ZN6Ticker27tickerCallbacksMillisecondsE+0x1>
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
     c82:	89 2b       	or	r24, r25
     c84:	c9 f0       	breq	.+50     	; 0xcb8 <__vector_14+0x6a>
     c86:	c0 e0       	ldi	r28, 0x00	; 0
     c88:	d0 e0       	ldi	r29, 0x00	; 0
	Data const &operator[](size_t idx)volatile const { return d_data[idx]; }; // Const getter
	Data &operator[](size_t idx)volatile { return d_data[idx]; }; // Changeable getter
     c8a:	0a ed       	ldi	r16, 0xDA	; 218
     c8c:	12 e0       	ldi	r17, 0x02	; 2
     c8e:	d8 01       	movw	r26, r16
     c90:	14 96       	adiw	r26, 0x04	; 4
     c92:	ed 91       	ld	r30, X+
     c94:	fc 91       	ld	r31, X
     c96:	15 97       	sbiw	r26, 0x05	; 5
	{
		Ticker::tickerCallbacksMilliseconds[i]();
     c98:	ce 01       	movw	r24, r28
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	e8 0f       	add	r30, r24
     ca0:	f9 1f       	adc	r31, r25
     ca2:	01 90       	ld	r0, Z+
     ca4:	f0 81       	ld	r31, Z
     ca6:	e0 2d       	mov	r30, r0
     ca8:	09 95       	icall
	if(!Ticker::tickerCallbacksSeconds.contains(callback))tickerCallbacksSeconds.push_back(callback);
}
ISR(TIMER0_COMPA_vect)
{
	cli();
	for(int i=0; i<Ticker::tickerCallbacksMilliseconds.size(); i++)
     caa:	21 96       	adiw	r28, 0x01	; 1
	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
	volatile_vector &operator=(volatile_vector const &other) { free(d_data); d_size = other.d_size; d_capacity = other.d_capacity; d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); return *this; }; // Needed for memory management
	void push_back(Data const &x) volatile { if (d_capacity == d_size) resize(); d_data[d_size++] = x; }; // Adds new value. If needed, allocates more space
	size_t size() volatile const { return d_size; }; // Size getter
     cac:	f8 01       	movw	r30, r16
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	c8 17       	cp	r28, r24
     cb4:	d9 07       	cpc	r29, r25
     cb6:	58 f3       	brcs	.-42     	; 0xc8e <__vector_14+0x40>
	{
		Ticker::tickerCallbacksMilliseconds[i]();
	}
	sei();
     cb8:	78 94       	sei
}
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	bf 91       	pop	r27
     cc4:	af 91       	pop	r26
     cc6:	9f 91       	pop	r25
     cc8:	8f 91       	pop	r24
     cca:	7f 91       	pop	r23
     ccc:	6f 91       	pop	r22
     cce:	5f 91       	pop	r21
     cd0:	4f 91       	pop	r20
     cd2:	3f 91       	pop	r19
     cd4:	2f 91       	pop	r18
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <_GLOBAL__sub_I__Znwj>:
 for(size_t i=0; i<d_size; i++){
	if(d==d_data[i])return true;
 }
 return false;
	}
	volatile_vector() : d_size(0), d_capacity(0), d_data(0) {
     ce4:	ea ed       	ldi	r30, 0xDA	; 218
     ce6:	f2 e0       	ldi	r31, 0x02	; 2
     ce8:	11 82       	std	Z+1, r1	; 0x01
     cea:	10 82       	st	Z, r1
     cec:	13 82       	std	Z+3, r1	; 0x03
     cee:	12 82       	std	Z+2, r1	; 0x02
     cf0:	15 82       	std	Z+5, r1	; 0x05
     cf2:	14 82       	std	Z+4, r1	; 0x04
     cf4:	e4 ed       	ldi	r30, 0xD4	; 212
     cf6:	f2 e0       	ldi	r31, 0x02	; 2
     cf8:	11 82       	std	Z+1, r1	; 0x01
     cfa:	10 82       	st	Z, r1
     cfc:	13 82       	std	Z+3, r1	; 0x03
     cfe:	12 82       	std	Z+2, r1	; 0x02
     d00:	15 82       	std	Z+5, r1	; 0x05
     d02:	14 82       	std	Z+4, r1	; 0x04
     d04:	08 95       	ret

00000d06 <_GLOBAL__sub_D__Znwj>:

	}; // Default constructor
	volatile_vector(volatile_vector const &other) : d_size(other.d_size), d_capacity(other.d_capacity), d_data(0) { d_data = (Data *)malloc(d_capacity*sizeof(Data)); memcpy(d_data, other.d_data, d_size*sizeof(Data)); }; // Copy constuctor
	~volatile_vector() { free(d_data); }; // Destructor
     d06:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <_ZN6Ticker22tickerCallbacksSecondsE+0x4>
     d0a:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <_ZN6Ticker22tickerCallbacksSecondsE+0x5>
     d0e:	0e 94 34 0c 	call	0x1868	; 0x1868 <free>
     d12:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <_ZN6Ticker27tickerCallbacksMillisecondsE+0x4>
     d16:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <_ZN6Ticker27tickerCallbacksMillisecondsE+0x5>
     d1a:	0e 94 34 0c 	call	0x1868	; 0x1868 <free>
     d1e:	08 95       	ret

00000d20 <_ZL11parseStringPc>:
	json_t const* field = json_getProperty( obj, property );
	if ( !field ) return 0;
        jsonType_t type = json_getType( field );
        if ( JSON_ARRAY >= type ) return 0;
	return json_getValue( field );
}
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	ec 01       	movw	r28, r24
     d26:	98 81       	ld	r25, Y
     d28:	90 32       	cpi	r25, 0x20	; 32
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <_ZL11parseStringPc+0xe>
     d2c:	57 c0       	rjmp	.+174    	; 0xddc <_ZL11parseStringPc+0xbc>
     d2e:	92 32       	cpi	r25, 0x22	; 34
     d30:	31 f0       	breq	.+12     	; 0xd3e <_ZL11parseStringPc+0x1e>
     d32:	de 01       	movw	r26, r28
     d34:	4f e3       	ldi	r20, 0x3F	; 63
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <_ZL11parseStringPc+0x28>
     d38:	92 32       	cpi	r25, 0x22	; 34
     d3a:	31 f4       	brne	.+12     	; 0xd48 <_ZL11parseStringPc+0x28>
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <_ZL11parseStringPc+0x20>
     d3e:	de 01       	movw	r26, r28
     d40:	1c 92       	st	X, r1
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	5b c0       	rjmp	.+182    	; 0xdfe <_ZL11parseStringPc+0xde>
     d48:	9c 35       	cpi	r25, 0x5C	; 92
     d4a:	e1 f5       	brne	.+120    	; 0xdc4 <_ZL11parseStringPc+0xa4>
     d4c:	99 81       	ldd	r25, Y+1	; 0x01
     d4e:	95 37       	cpi	r25, 0x75	; 117
     d50:	19 f0       	breq	.+6      	; 0xd58 <_ZL11parseStringPc+0x38>
     d52:	92 32       	cpi	r25, 0x22	; 34
     d54:	c9 f4       	brne	.+50     	; 0xd88 <_ZL11parseStringPc+0x68>
     d56:	20 c0       	rjmp	.+64     	; 0xd98 <_ZL11parseStringPc+0x78>
     d58:	fe 01       	movw	r30, r28
     d5a:	32 96       	adiw	r30, 0x02	; 2
     d5c:	9e 01       	movw	r18, r28
     d5e:	2a 5f       	subi	r18, 0xFA	; 250
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	81 91       	ld	r24, Z+
     d64:	80 33       	cpi	r24, 0x30	; 48
     d66:	e8 f1       	brcs	.+122    	; 0xde2 <_ZL11parseStringPc+0xc2>
     d68:	8a 33       	cpi	r24, 0x3A	; 58
     d6a:	38 f0       	brcs	.+14     	; 0xd7a <_ZL11parseStringPc+0x5a>
     d6c:	81 34       	cpi	r24, 0x41	; 65
     d6e:	e0 f1       	brcs	.+120    	; 0xde8 <_ZL11parseStringPc+0xc8>
     d70:	87 34       	cpi	r24, 0x47	; 71
     d72:	18 f0       	brcs	.+6      	; 0xd7a <_ZL11parseStringPc+0x5a>
     d74:	81 56       	subi	r24, 0x61	; 97
     d76:	86 30       	cpi	r24, 0x06	; 6
     d78:	d0 f5       	brcc	.+116    	; 0xdee <_ZL11parseStringPc+0xce>
     d7a:	e2 17       	cp	r30, r18
     d7c:	f3 07       	cpc	r31, r19
     d7e:	89 f7       	brne	.-30     	; 0xd62 <_ZL11parseStringPc+0x42>
     d80:	4c 93       	st	X, r20
     d82:	fe 01       	movw	r30, r28
     d84:	35 96       	adiw	r30, 0x05	; 5
     d86:	20 c0       	rjmp	.+64     	; 0xdc8 <_ZL11parseStringPc+0xa8>
     d88:	e0 ea       	ldi	r30, 0xA0	; 160
     d8a:	f2 e0       	ldi	r31, 0x02	; 2
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	98 13       	cpse	r25, r24
     d94:	0c c0       	rjmp	.+24     	; 0xdae <_ZL11parseStringPc+0x8e>
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <_ZL11parseStringPc+0x7c>
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	f9 01       	movw	r30, r18
     da2:	e0 56       	subi	r30, 0x60	; 96
     da4:	fd 4f       	sbci	r31, 0xFD	; 253
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	81 11       	cpse	r24, r1
     daa:	08 c0       	rjmp	.+16     	; 0xdbc <_ZL11parseStringPc+0x9c>
     dac:	23 c0       	rjmp	.+70     	; 0xdf4 <_ZL11parseStringPc+0xd4>
     dae:	2f 5f       	subi	r18, 0xFF	; 255
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
     db2:	32 96       	adiw	r30, 0x02	; 2
     db4:	28 30       	cpi	r18, 0x08	; 8
     db6:	31 05       	cpc	r19, r1
     db8:	59 f7       	brne	.-42     	; 0xd90 <_ZL11parseStringPc+0x70>
     dba:	1f c0       	rjmp	.+62     	; 0xdfa <_ZL11parseStringPc+0xda>
     dbc:	fe 01       	movw	r30, r28
     dbe:	31 96       	adiw	r30, 0x01	; 1
     dc0:	8c 93       	st	X, r24
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <_ZL11parseStringPc+0xa8>
     dc4:	9c 93       	st	X, r25
     dc6:	fe 01       	movw	r30, r28
     dc8:	ef 01       	movw	r28, r30
     dca:	21 96       	adiw	r28, 0x01	; 1
     dcc:	11 96       	adiw	r26, 0x01	; 1
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	90 32       	cpi	r25, 0x20	; 32
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <_ZL11parseStringPc+0xb6>
     dd4:	b1 cf       	rjmp	.-158    	; 0xd38 <_ZL11parseStringPc+0x18>
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	11 c0       	rjmp	.+34     	; 0xdfe <_ZL11parseStringPc+0xde>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e c0       	rjmp	.+28     	; 0xdfe <_ZL11parseStringPc+0xde>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <_ZL11parseStringPc+0xde>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	08 c0       	rjmp	.+16     	; 0xdfe <_ZL11parseStringPc+0xde>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <_ZL11parseStringPc+0xde>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <_ZL11parseStringPc+0xde>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <_ZL11isOneOfThemcPKc>:
     e04:	fb 01       	movw	r30, r22
     e06:	91 91       	ld	r25, Z+
     e08:	99 23       	and	r25, r25
     e0a:	21 f0       	breq	.+8      	; 0xe14 <_ZL11isOneOfThemcPKc+0x10>
     e0c:	98 13       	cpse	r25, r24
     e0e:	fb cf       	rjmp	.-10     	; 0xe06 <_ZL11isOneOfThemcPKc+0x2>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	08 95       	ret
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	08 95       	ret

00000e18 <_ZL7goWhilePcPKc>:
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
     e22:	8b 01       	movw	r16, r22
     e24:	88 81       	ld	r24, Y
     e26:	88 23       	and	r24, r24
     e28:	59 f0       	breq	.+22     	; 0xe40 <_ZL7goWhilePcPKc+0x28>
     e2a:	b8 01       	movw	r22, r16
     e2c:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZL11isOneOfThemcPKc>
     e30:	88 23       	and	r24, r24
     e32:	49 f0       	breq	.+18     	; 0xe46 <_ZL7goWhilePcPKc+0x2e>
     e34:	21 96       	adiw	r28, 0x01	; 1
     e36:	88 81       	ld	r24, Y
     e38:	81 11       	cpse	r24, r1
     e3a:	f7 cf       	rjmp	.-18     	; 0xe2a <_ZL7goWhilePcPKc+0x12>
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <_ZL7goWhilePcPKc+0x32>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <_ZL7goWhilePcPKc+0x32>
     e46:	8c 2f       	mov	r24, r28
     e48:	9d 2f       	mov	r25, r29
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <_ZL5goNumPc>:
     e54:	fc 01       	movw	r30, r24
     e56:	80 81       	ld	r24, Z
     e58:	88 23       	and	r24, r24
     e5a:	81 f0       	breq	.+32     	; 0xe7c <_ZL5goNumPc+0x28>
     e5c:	80 53       	subi	r24, 0x30	; 48
     e5e:	8a 30       	cpi	r24, 0x0A	; 10
     e60:	80 f4       	brcc	.+32     	; 0xe82 <_ZL5goNumPc+0x2e>
     e62:	31 96       	adiw	r30, 0x01	; 1
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <_ZL5goNumPc+0x18>
     e66:	20 53       	subi	r18, 0x30	; 48
     e68:	2a 30       	cpi	r18, 0x0A	; 10
     e6a:	68 f4       	brcc	.+26     	; 0xe86 <_ZL5goNumPc+0x32>
     e6c:	8e 2f       	mov	r24, r30
     e6e:	9f 2f       	mov	r25, r31
     e70:	21 91       	ld	r18, Z+
     e72:	21 11       	cpse	r18, r1
     e74:	f8 cf       	rjmp	.-16     	; 0xe66 <_ZL5goNumPc+0x12>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	08 95       	ret
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	08 95       	ret
     e82:	8e 2f       	mov	r24, r30
     e84:	9f 2f       	mov	r25, r31
     e86:	08 95       	ret

00000e88 <_ZL16isEndOfPrimitivec>:
     e88:	cf 93       	push	r28
     e8a:	8c 32       	cpi	r24, 0x2C	; 44
     e8c:	69 f0       	breq	.+26     	; 0xea8 <_ZL16isEndOfPrimitivec+0x20>
     e8e:	c8 2f       	mov	r28, r24
     e90:	6e e5       	ldi	r22, 0x5E	; 94
     e92:	72 e0       	ldi	r23, 0x02	; 2
     e94:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZL11isOneOfThemcPKc>
     e98:	81 11       	cpse	r24, r1
     e9a:	07 c0       	rjmp	.+14     	; 0xeaa <_ZL16isEndOfPrimitivec+0x22>
     e9c:	64 e6       	ldi	r22, 0x64	; 100
     e9e:	72 e0       	ldi	r23, 0x02	; 2
     ea0:	8c 2f       	mov	r24, r28
     ea2:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZL11isOneOfThemcPKc>
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <_ZL16isEndOfPrimitivec+0x22>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>:
     eae:	ff 92       	push	r15
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	8b 01       	movw	r16, r22
     eba:	f2 2e       	mov	r15, r18
     ebc:	e4 2f       	mov	r30, r20
     ebe:	f5 2f       	mov	r31, r21
     ec0:	ec 01       	movw	r28, r24
     ec2:	21 91       	ld	r18, Z+
     ec4:	22 23       	and	r18, r18
     ec6:	29 f0       	breq	.+10     	; 0xed2 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x24>
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	38 81       	ld	r19, Y
     ecc:	23 17       	cp	r18, r19
     ece:	c1 f3       	breq	.-16     	; 0xec0 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x12>
     ed0:	15 c0       	rjmp	.+42     	; 0xefc <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x4e>
     ed2:	89 2b       	or	r24, r25
     ed4:	b1 f0       	breq	.+44     	; 0xf02 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x54>
     ed6:	88 81       	ld	r24, Y
     ed8:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZL16isEndOfPrimitivec>
     edc:	88 23       	and	r24, r24
     ede:	a1 f0       	breq	.+40     	; 0xf08 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5a>
     ee0:	64 e6       	ldi	r22, 0x64	; 100
     ee2:	72 e0       	ldi	r23, 0x02	; 2
     ee4:	88 81       	ld	r24, Y
     ee6:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZL11isOneOfThemcPKc>
     eea:	81 11       	cpse	r24, r1
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x44>
     eee:	18 82       	st	Y, r1
     ef0:	21 96       	adiw	r28, 0x01	; 1
     ef2:	f8 01       	movw	r30, r16
     ef4:	f6 82       	std	Z+6, r15	; 0x06
     ef6:	8c 2f       	mov	r24, r28
     ef8:	9d 2f       	mov	r25, r29
     efa:	08 c0       	rjmp	.+16     	; 0xf0c <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <_ZL14primitiveValuePcP6json_sPKc10jsonType_t+0x5e>
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	08 95       	ret

00000f18 <json_getProperty>:
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	8b 01       	movw	r16, r22
     f22:	fc 01       	movw	r30, r24
     f24:	c4 81       	ldd	r28, Z+4	; 0x04
     f26:	d5 81       	ldd	r29, Z+5	; 0x05
     f28:	20 97       	sbiw	r28, 0x00	; 0
     f2a:	89 f0       	breq	.+34     	; 0xf4e <json_getProperty+0x36>
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	29 f0       	breq	.+10     	; 0xf3e <json_getProperty+0x26>
     f34:	b8 01       	movw	r22, r16
     f36:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
     f3a:	89 2b       	or	r24, r25
     f3c:	59 f0       	breq	.+22     	; 0xf54 <json_getProperty+0x3c>
     f3e:	09 90       	ld	r0, Y+
     f40:	d8 81       	ld	r29, Y
     f42:	c0 2d       	mov	r28, r0
     f44:	20 97       	sbiw	r28, 0x00	; 0
     f46:	91 f7       	brne	.-28     	; 0xf2c <json_getProperty+0x14>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <json_getProperty+0x40>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <json_getProperty+0x40>
     f54:	8c 2f       	mov	r24, r28
     f56:	9d 2f       	mov	r25, r29
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <json_create>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
     f62:	2f 92       	push	r2
     f64:	3f 92       	push	r3
     f66:	4f 92       	push	r4
     f68:	5f 92       	push	r5
     f6a:	6f 92       	push	r6
     f6c:	7f 92       	push	r7
     f6e:	8f 92       	push	r8
     f70:	9f 92       	push	r9
     f72:	af 92       	push	r10
     f74:	bf 92       	push	r11
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	00 d0       	rcall	.+0      	; 0xf88 <json_create+0x26>
     f88:	1f 92       	push	r1
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	5b 01       	movw	r10, r22
     f90:	3a 01       	movw	r6, r20

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
     f92:	6e e5       	ldi	r22, 0x5E	; 94
     f94:	72 e0       	ldi	r23, 0x02	; 2
     f96:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL7goWhilePcPKc>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <json_create+0x3e>
     f9e:	bb c1       	rjmp	.+886    	; 0x1316 <json_create+0x3b4>
     fa0:	dc 01       	movw	r26, r24
     fa2:	2c 91       	ld	r18, X
     fa4:	2b 37       	cpi	r18, 0x7B	; 123
     fa6:	09 f0       	breq	.+2      	; 0xfaa <json_create+0x48>
     fa8:	b9 c1       	rjmp	.+882    	; 0x131c <json_create+0x3ba>
    jsonPool_t pool = { .mem = mem, .qty = qty };
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
     faa:	f5 01       	movw	r30, r10
     fac:	13 82       	std	Z+3, r1	; 0x03
     fae:	12 82       	std	Z+2, r1	; 0x02
    obj->sibling = 0;
     fb0:	11 82       	std	Z+1, r1	; 0x01
     fb2:	10 82       	st	Z, r1
    obj->u.child = 0;
     fb4:	15 82       	std	Z+5, r1	; 0x05
     fb6:	14 82       	std	Z+4, r1	; 0x04
  * @param str Pointer to first character.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
    obj->type    = JSON_OBJ;
     fb8:	16 82       	std	Z+6, r1	; 0x06
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
     fba:	8c 01       	movw	r16, r24
     fbc:	0f 5f       	subi	r16, 0xFF	; 255
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	75 01       	movw	r14, r10

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
    pool->nextFree = 1;
     fc2:	cc 24       	eor	r12, r12
     fc4:	c3 94       	inc	r12
     fc6:	d1 2c       	mov	r13, r1
    if ( *ptr != '0' ) {
        ptr = goNum( ptr );
        if ( !ptr ) return 0;
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
     fc8:	68 94       	set
     fca:	22 24       	eor	r2, r2
     fcc:	22 f8       	bld	r2, 2
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    ptr = parseString( ++ptr );
    if ( !ptr ) return 0;
    property->type = JSON_TEXT;
     fce:	68 94       	set
     fd0:	44 24       	eor	r4, r4
     fd2:	41 f8       	bld	r4, 1
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
     fd4:	33 24       	eor	r3, r3
     fd6:	33 94       	inc	r3
        if ( !ptr ) return 0;
        if ( *ptr == ',' ) {
            ++ptr;
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
     fd8:	0f 2e       	mov	r0, r31
     fda:	fd e7       	ldi	r31, 0x7D	; 125
     fdc:	5f 2e       	mov	r5, r31
     fde:	f0 2d       	mov	r31, r0

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
     fe0:	6e e5       	ldi	r22, 0x5E	; 94
     fe2:	72 e0       	ldi	r23, 0x02	; 2
     fe4:	c8 01       	movw	r24, r16
     fe6:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL7goWhilePcPKc>
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    for(;;) {
        ptr = goBlank( ptr );
        if ( !ptr ) return 0;
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	09 f4       	brne	.+2      	; 0xff4 <json_create+0x92>
     ff2:	9a c1       	rjmp	.+820    	; 0x1328 <json_create+0x3c6>
        if ( *ptr == ',' ) {
     ff4:	dc 01       	movw	r26, r24
     ff6:	8c 91       	ld	r24, X
     ff8:	8c 32       	cpi	r24, 0x2C	; 44
     ffa:	21 f4       	brne	.+8      	; 0x1004 <json_create+0xa2>
            ++ptr;
     ffc:	8d 01       	movw	r16, r26
     ffe:	0f 5f       	subi	r16, 0xFF	; 255
    1000:	1f 4f       	sbci	r17, 0xFF	; 255
    1002:	ee cf       	rjmp	.-36     	; 0xfe0 <json_create+0x7e>
            continue;
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
    1004:	f7 01       	movw	r30, r14
    1006:	96 81       	ldd	r25, Z+6	; 0x06
    1008:	99 23       	and	r25, r25
    100a:	11 f0       	breq	.+4      	; 0x1010 <json_create+0xae>
    100c:	2d e5       	ldi	r18, 0x5D	; 93
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <json_create+0xb0>
    1010:	25 2d       	mov	r18, r5
        if ( *ptr == endchar ) {
    1012:	82 13       	cpse	r24, r18
    1014:	16 c0       	rjmp	.+44     	; 0x1042 <json_create+0xe0>
            *ptr = '\0';
    1016:	aa 81       	ldd	r26, Y+2	; 0x02
    1018:	bb 81       	ldd	r27, Y+3	; 0x03
    101a:	1c 92       	st	X, r1
            json_t* parentObj = obj->sibling;
    101c:	f7 01       	movw	r30, r14
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
            if ( !parentObj ) return ++ptr;
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	31 f4       	brne	.+12     	; 0x1032 <json_create+0xd0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    1026:	11 96       	adiw	r26, 0x01	; 1
    1028:	09 f4       	brne	.+2      	; 0x102c <json_create+0xca>
    102a:	7b c1       	rjmp	.+758    	; 0x1322 <json_create+0x3c0>
    return obj;
    102c:	8a 2d       	mov	r24, r10
    102e:	9b 2d       	mov	r25, r11
    1030:	80 c1       	rjmp	.+768    	; 0x1332 <json_create+0x3d0>
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
    1032:	11 82       	std	Z+1, r1	; 0x01
    1034:	10 82       	st	Z, r1
            obj = parentObj;
            ++ptr;
    1036:	0a 81       	ldd	r16, Y+2	; 0x02
    1038:	1b 81       	ldd	r17, Y+3	; 0x03
    103a:	0f 5f       	subi	r16, 0xFF	; 255
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
        if ( *ptr == endchar ) {
            *ptr = '\0';
            json_t* parentObj = obj->sibling;
            if ( !parentObj ) return ++ptr;
            obj->sibling = 0;
            obj = parentObj;
    103e:	7c 01       	movw	r14, r24
    1040:	cf cf       	rjmp	.-98     	; 0xfe0 <json_create+0x7e>
/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    1042:	c6 14       	cp	r12, r6
    1044:	d7 04       	cpc	r13, r7
    1046:	08 f0       	brcs	.+2      	; 0x104a <json_create+0xe8>
    1048:	72 c1       	rjmp	.+740    	; 0x132e <json_create+0x3cc>
    return &pool->mem[pool->nextFree++];
    104a:	46 01       	movw	r8, r12
    104c:	bf ef       	ldi	r27, 0xFF	; 255
    104e:	8b 1a       	sub	r8, r27
    1050:	9b 0a       	sbc	r9, r27
    1052:	96 01       	movw	r18, r12
    1054:	22 0f       	add	r18, r18
    1056:	33 1f       	adc	r19, r19
    1058:	22 0f       	add	r18, r18
    105a:	33 1f       	adc	r19, r19
    105c:	22 0f       	add	r18, r18
    105e:	33 1f       	adc	r19, r19
    1060:	f9 01       	movw	r30, r18
    1062:	ec 19       	sub	r30, r12
    1064:	fd 09       	sbc	r31, r13
    1066:	6f 01       	movw	r12, r30
    1068:	ca 0c       	add	r12, r10
    106a:	db 1c       	adc	r13, r11
            obj = parentObj;
            ++ptr;
            continue;
        }
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
    106c:	c1 14       	cp	r12, r1
    106e:	d1 04       	cpc	r13, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <json_create+0x112>
    1072:	5a c1       	rjmp	.+692    	; 0x1328 <json_create+0x3c6>
        if( obj->type != JSON_ARRAY ) {
    1074:	91 30       	cpi	r25, 0x01	; 1
    1076:	31 f1       	breq	.+76     	; 0x10c4 <json_create+0x162>
            if ( *ptr != '\"' ) return 0;
    1078:	82 32       	cpi	r24, 0x22	; 34
    107a:	09 f0       	breq	.+2      	; 0x107e <json_create+0x11c>
    107c:	55 c1       	rjmp	.+682    	; 0x1328 <json_create+0x3c6>
  * @param str Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	d6 01       	movw	r26, r12
    1086:	13 96       	adiw	r26, 0x03	; 3
    1088:	9c 93       	st	X, r25
    108a:	8e 93       	st	-X, r24
    108c:	12 97       	sbiw	r26, 0x02	; 2
    ptr = parseString( ptr );
    108e:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZL11parseStringPc>
    if ( !ptr ) return 0;
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	09 f4       	brne	.+2      	; 0x1098 <json_create+0x136>
    1096:	4b c1       	rjmp	.+662    	; 0x132e <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    1098:	6e e5       	ldi	r22, 0x5E	; 94
    109a:	72 e0       	ldi	r23, 0x02	; 2
    109c:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL7goWhilePcPKc>
static char* propertyName( char* ptr, json_t* property ) {
    property->name = ++ptr;
    ptr = parseString( ptr );
    if ( !ptr ) return 0;
    ptr = goBlank( ptr );
    if ( !ptr ) return 0;
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <json_create+0x144>
    10a4:	44 c1       	rjmp	.+648    	; 0x132e <json_create+0x3cc>
    if ( *ptr++ != ':' ) return 0;
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 81       	ld	r18, Z
    10aa:	2a 33       	cpi	r18, 0x3A	; 58
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <json_create+0x14e>
    10ae:	3f c1       	rjmp	.+638    	; 0x132e <json_create+0x3cc>

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    return goWhile( str, blank );
    10b0:	6e e5       	ldi	r22, 0x5E	; 94
    10b2:	72 e0       	ldi	r23, 0x02	; 2
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL7goWhilePcPKc>
    10ba:	9b 83       	std	Y+3, r25	; 0x03
    10bc:	8a 83       	std	Y+2, r24	; 0x02
        json_t* property = poolNew( pool );
        if ( !property ) return 0;
        if( obj->type != JSON_ARRAY ) {
            if ( *ptr != '\"' ) return 0;
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
    10be:	89 2b       	or	r24, r25
    10c0:	31 f4       	brne	.+12     	; 0x10ce <json_create+0x16c>
    10c2:	32 c1       	rjmp	.+612    	; 0x1328 <json_create+0x3c6>
        }
        else property->name = 0;
    10c4:	d6 01       	movw	r26, r12
    10c6:	13 96       	adiw	r26, 0x03	; 3
    10c8:	1c 92       	st	X, r1
    10ca:	1e 92       	st	-X, r1
    10cc:	12 97       	sbiw	r26, 0x02	; 2

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
    property->sibling = 0;
    10ce:	f6 01       	movw	r30, r12
    10d0:	11 82       	std	Z+1, r1	; 0x01
    10d2:	10 82       	st	Z, r1
    if ( !obj->u.child ) obj->u.child = property;
    10d4:	d7 01       	movw	r26, r14
    10d6:	14 96       	adiw	r26, 0x04	; 4
    10d8:	ed 91       	ld	r30, X+
    10da:	fc 91       	ld	r31, X
    10dc:	15 97       	sbiw	r26, 0x05	; 5
    10de:	30 97       	sbiw	r30, 0x00	; 0
    10e0:	39 f4       	brne	.+14     	; 0x10f0 <json_create+0x18e>
    10e2:	15 96       	adiw	r26, 0x05	; 5
    10e4:	dc 92       	st	X, r13
    10e6:	ce 92       	st	-X, r12
    10e8:	14 97       	sbiw	r26, 0x04	; 4
    10ea:	08 c0       	rjmp	.+16     	; 0x10fc <json_create+0x19a>
    else {
        json_t* iter;
        for( iter = obj->u.child; iter->sibling; iter = iter->sibling );
    10ec:	fc 01       	movw	r30, r24
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <json_create+0x18e>
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	d1 f7       	brne	.-12     	; 0x10ec <json_create+0x18a>
        iter->sibling = property;
    10f8:	d1 82       	std	Z+1, r13	; 0x01
    10fa:	c0 82       	st	Z, r12
            ptr = propertyName( ptr, property );
            if ( !ptr ) return 0;
        }
        else property->name = 0;
        add( obj, property );
        property->u.value = ptr;
    10fc:	ea 81       	ldd	r30, Y+2	; 0x02
    10fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1100:	d6 01       	movw	r26, r12
    1102:	15 96       	adiw	r26, 0x05	; 5
    1104:	fc 93       	st	X, r31
    1106:	ee 93       	st	-X, r30
    1108:	14 97       	sbiw	r26, 0x04	; 4
        switch( *ptr ) {
    110a:	80 81       	ld	r24, Z
    110c:	86 36       	cpi	r24, 0x66	; 102
    110e:	09 f4       	brne	.+2      	; 0x1112 <json_create+0x1b0>
    1110:	46 c0       	rjmp	.+140    	; 0x119e <json_create+0x23c>
    1112:	28 f4       	brcc	.+10     	; 0x111e <json_create+0x1bc>
    1114:	82 32       	cpi	r24, 0x22	; 34
    1116:	39 f1       	breq	.+78     	; 0x1166 <json_create+0x204>
    1118:	8b 35       	cpi	r24, 0x5B	; 91
    111a:	c9 f0       	breq	.+50     	; 0x114e <json_create+0x1ec>
    111c:	54 c0       	rjmp	.+168    	; 0x11c6 <json_create+0x264>
    111e:	84 37       	cpi	r24, 0x74	; 116
    1120:	a1 f1       	breq	.+104    	; 0x118a <json_create+0x228>
    1122:	8b 37       	cpi	r24, 0x7B	; 123
    1124:	21 f0       	breq	.+8      	; 0x112e <json_create+0x1cc>
    1126:	8e 36       	cpi	r24, 0x6E	; 110
    1128:	09 f0       	breq	.+2      	; 0x112c <json_create+0x1ca>
    112a:	4d c0       	rjmp	.+154    	; 0x11c6 <json_create+0x264>
    112c:	42 c0       	rjmp	.+132    	; 0x11b2 <json_create+0x250>
            case '{':
                property->type    = JSON_OBJ;
    112e:	d6 01       	movw	r26, r12
    1130:	16 96       	adiw	r26, 0x06	; 6
    1132:	1c 92       	st	X, r1
    1134:	16 97       	sbiw	r26, 0x06	; 6
                property->u.child = 0;
    1136:	15 96       	adiw	r26, 0x05	; 5
    1138:	1c 92       	st	X, r1
    113a:	1e 92       	st	-X, r1
    113c:	14 97       	sbiw	r26, 0x04	; 4
                property->sibling = obj;
    113e:	ed 92       	st	X+, r14
    1140:	fc 92       	st	X, r15
                obj = property;
                ++ptr;
    1142:	0a 81       	ldd	r16, Y+2	; 0x02
    1144:	1b 81       	ldd	r17, Y+3	; 0x03
    1146:	0f 5f       	subi	r16, 0xFF	; 255
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    114a:	76 01       	movw	r14, r12
    114c:	df c0       	rjmp	.+446    	; 0x130c <json_create+0x3aa>
                property->sibling = obj;
                obj = property;
                ++ptr;
                break;
            case '[':
                property->type    = JSON_ARRAY;
    114e:	f6 01       	movw	r30, r12
    1150:	36 82       	std	Z+6, r3	; 0x06
                property->u.child = 0;
    1152:	15 82       	std	Z+5, r1	; 0x05
    1154:	14 82       	std	Z+4, r1	; 0x04
                property->sibling = obj;
    1156:	f1 82       	std	Z+1, r15	; 0x01
    1158:	e0 82       	st	Z, r14
                obj = property;
                ++ptr;
    115a:	0a 81       	ldd	r16, Y+2	; 0x02
    115c:	1b 81       	ldd	r17, Y+3	; 0x03
    115e:	0f 5f       	subi	r16, 0xFF	; 255
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1162:	76 01       	movw	r14, r12
    1164:	d3 c0       	rjmp	.+422    	; 0x130c <json_create+0x3aa>
  * @param str Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
    ++property->u.value;
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	9b 81       	ldd	r25, Y+3	; 0x03
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	d6 01       	movw	r26, r12
    116e:	15 96       	adiw	r26, 0x05	; 5
    1170:	9c 93       	st	X, r25
    1172:	8e 93       	st	-X, r24
    1174:	14 97       	sbiw	r26, 0x04	; 4
    ptr = parseString( ++ptr );
    1176:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZL11parseStringPc>
    117a:	8c 01       	movw	r16, r24
    if ( !ptr ) return 0;
    117c:	89 2b       	or	r24, r25
    117e:	09 f4       	brne	.+2      	; 0x1182 <json_create+0x220>
    1180:	d6 c0       	rjmp	.+428    	; 0x132e <json_create+0x3cc>
    property->type = JSON_TEXT;
    1182:	f6 01       	movw	r30, r12
    1184:	46 82       	std	Z+6, r4	; 0x06
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1186:	64 01       	movw	r12, r8
    1188:	2b cf       	rjmp	.-426    	; 0xfe0 <json_create+0x7e>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
    118a:	23 e0       	ldi	r18, 0x03	; 3
    118c:	47 e6       	ldi	r20, 0x67	; 103
    118e:	52 e0       	ldi	r21, 0x02	; 2
    1190:	b6 01       	movw	r22, r12
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	9b 81       	ldd	r25, Y+3	; 0x03
    1196:	0e 94 57 07 	call	0xeae	; 0xeae <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    119a:	8c 01       	movw	r16, r24
    119c:	b7 c0       	rjmp	.+366    	; 0x130c <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
    119e:	23 e0       	ldi	r18, 0x03	; 3
    11a0:	4c e6       	ldi	r20, 0x6C	; 108
    11a2:	52 e0       	ldi	r21, 0x02	; 2
    11a4:	b6 01       	movw	r22, r12
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	9b 81       	ldd	r25, Y+3	; 0x03
    11aa:	0e 94 57 07 	call	0xeae	; 0xeae <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    11ae:	8c 01       	movw	r16, r24
    11b0:	ad c0       	rjmp	.+346    	; 0x130c <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
    return primitiveValue( ptr, property, "null", JSON_NULL );
    11b2:	26 e0       	ldi	r18, 0x06	; 6
    11b4:	42 e7       	ldi	r20, 0x72	; 114
    11b6:	52 e0       	ldi	r21, 0x02	; 2
    11b8:	b6 01       	movw	r22, r12
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	9b 81       	ldd	r25, Y+3	; 0x03
    11be:	0e 94 57 07 	call	0xeae	; 0xeae <_ZL14primitiveValuePcP6json_sPKc10jsonType_t>
    11c2:	8c 01       	movw	r16, r24
    11c4:	a3 c0       	rjmp	.+326    	; 0x130c <json_create+0x3aa>
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
    if ( *ptr == '-' ) ++ptr;
    11c6:	8d 32       	cpi	r24, 0x2D	; 45
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <json_create+0x270>
    11ca:	ea 81       	ldd	r30, Y+2	; 0x02
    11cc:	fb 81       	ldd	r31, Y+3	; 0x03
    11ce:	31 96       	adiw	r30, 0x01	; 1
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <json_create+0x274>
    11d2:	ea 81       	ldd	r30, Y+2	; 0x02
    11d4:	fb 81       	ldd	r31, Y+3	; 0x03
    if ( !isNum( *ptr ) ) return 0;
    11d6:	80 81       	ld	r24, Z
    11d8:	90 ed       	ldi	r25, 0xD0	; 208
    11da:	98 0f       	add	r25, r24
    11dc:	9a 30       	cpi	r25, 0x0A	; 10
    11de:	08 f0       	brcs	.+2      	; 0x11e2 <json_create+0x280>
    11e0:	a6 c0       	rjmp	.+332    	; 0x132e <json_create+0x3cc>
    if ( *ptr != '0' ) {
    11e2:	80 33       	cpi	r24, 0x30	; 48
    11e4:	39 f0       	breq	.+14     	; 0x11f4 <json_create+0x292>
        ptr = goNum( ptr );
    11e6:	cf 01       	movw	r24, r30
    11e8:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZL5goNumPc>
    11ec:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
    11ee:	89 2b       	or	r24, r25
    11f0:	49 f4       	brne	.+18     	; 0x1204 <json_create+0x2a2>
    11f2:	9d c0       	rjmp	.+314    	; 0x132e <json_create+0x3cc>
    }
    else if ( isNum( *++ptr ) ) return 0;
    11f4:	8f 01       	movw	r16, r30
    11f6:	0f 5f       	subi	r16, 0xFF	; 255
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	81 81       	ldd	r24, Z+1	; 0x01
    11fc:	80 53       	subi	r24, 0x30	; 48
    11fe:	8a 30       	cpi	r24, 0x0A	; 10
    1200:	08 f4       	brcc	.+2      	; 0x1204 <json_create+0x2a2>
    1202:	95 c0       	rjmp	.+298    	; 0x132e <json_create+0x3cc>
    property->type = JSON_INTEGER;
    1204:	d6 01       	movw	r26, r12
    1206:	16 96       	adiw	r26, 0x06	; 6
    1208:	2c 92       	st	X, r2
    if ( *ptr == '.' ) {
    120a:	f8 01       	movw	r30, r16
    120c:	80 81       	ld	r24, Z
    120e:	8e 32       	cpi	r24, 0x2E	; 46
    1210:	89 f4       	brne	.+34     	; 0x1234 <json_create+0x2d2>
/** Analyze the decimal part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
    if ( !isNum( *ptr ) ) return 0;
    1212:	81 81       	ldd	r24, Z+1	; 0x01
    1214:	80 53       	subi	r24, 0x30	; 48
    1216:	8a 30       	cpi	r24, 0x0A	; 10
    1218:	08 f0       	brcs	.+2      	; 0x121c <json_create+0x2ba>
    121a:	86 c0       	rjmp	.+268    	; 0x1328 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    121c:	c8 01       	movw	r24, r16
    121e:	02 96       	adiw	r24, 0x02	; 2
    1220:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZL5goNumPc>
    1224:	8c 01       	movw	r16, r24
    }
    else if ( isNum( *++ptr ) ) return 0;
    property->type = JSON_INTEGER;
    if ( *ptr == '.' ) {
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
    1226:	89 2b       	or	r24, r25
    1228:	09 f4       	brne	.+2      	; 0x122c <json_create+0x2ca>
    122a:	81 c0       	rjmp	.+258    	; 0x132e <json_create+0x3cc>
        property->type = JSON_REAL;
    122c:	e5 e0       	ldi	r30, 0x05	; 5
    122e:	d6 01       	movw	r26, r12
    1230:	16 96       	adiw	r26, 0x06	; 6
    1232:	ec 93       	st	X, r30
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
    1234:	d8 01       	movw	r26, r16
    1236:	8c 91       	ld	r24, X
    1238:	8f 7d       	andi	r24, 0xDF	; 223
    123a:	85 34       	cpi	r24, 0x45	; 69
    123c:	11 f5       	brne	.+68     	; 0x1282 <json_create+0x320>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    123e:	11 96       	adiw	r26, 0x01	; 1
    1240:	8c 91       	ld	r24, X
    1242:	8d 32       	cpi	r24, 0x2D	; 45
    1244:	29 f0       	breq	.+10     	; 0x1250 <json_create+0x2ee>
    1246:	8b 32       	cpi	r24, 0x2B	; 43
    1248:	19 f0       	breq	.+6      	; 0x1250 <json_create+0x2ee>
        ptr = fraqValue( ++ptr );
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
    124a:	f8 01       	movw	r30, r16
    124c:	31 96       	adiw	r30, 0x01	; 1
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <json_create+0x2f2>
/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
    1250:	f8 01       	movw	r30, r16
    1252:	32 96       	adiw	r30, 0x02	; 2
    if ( !isNum( *ptr ) ) return 0;
    1254:	90 81       	ld	r25, Z
    1256:	90 53       	subi	r25, 0x30	; 48
    1258:	9a 30       	cpi	r25, 0x0A	; 10
    125a:	08 f0       	brcs	.+2      	; 0x125e <json_create+0x2fc>
    125c:	65 c0       	rjmp	.+202    	; 0x1328 <json_create+0x3c6>
    ptr = goNum( ++ptr );
    125e:	cf 01       	movw	r24, r30
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZL5goNumPc>
    1266:	8c 01       	movw	r16, r24
        if ( !ptr ) return 0;
        property->type = JSON_REAL;
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
        ptr = expValue( ++ptr );
        if ( !ptr ) return 0;
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	09 f4       	brne	.+2      	; 0x126e <json_create+0x30c>
    126c:	60 c0       	rjmp	.+192    	; 0x132e <json_create+0x3cc>
        property->type = JSON_REAL;
    126e:	25 e0       	ldi	r18, 0x05	; 5
    1270:	f6 01       	movw	r30, r12
    1272:	26 83       	std	Z+6, r18	; 0x06
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
    1274:	dc 01       	movw	r26, r24
    1276:	8c 91       	ld	r24, X
    1278:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZL16isEndOfPrimitivec>
    127c:	81 11       	cpse	r24, r1
    127e:	3a c0       	rjmp	.+116    	; 0x12f4 <json_create+0x392>
    1280:	56 c0       	rjmp	.+172    	; 0x132e <json_create+0x3cc>
    1282:	f8 01       	movw	r30, r16
    1284:	f0 81       	ld	r31, Z
    1286:	f9 83       	std	Y+1, r31	; 0x01
    1288:	8f 2f       	mov	r24, r31
    128a:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZL16isEndOfPrimitivec>
    128e:	88 23       	and	r24, r24
    1290:	09 f4       	brne	.+2      	; 0x1294 <json_create+0x332>
    1292:	4d c0       	rjmp	.+154    	; 0x132e <json_create+0x3cc>
    if ( JSON_INTEGER == property->type ) {
    1294:	d6 01       	movw	r26, r12
    1296:	16 96       	adiw	r26, 0x06	; 6
    1298:	8c 91       	ld	r24, X
    129a:	84 30       	cpi	r24, 0x04	; 4
    129c:	59 f5       	brne	.+86     	; 0x12f4 <json_create+0x392>
        char const* value = property->u.value;
        bool const negative = *value == '-';
    129e:	ea 81       	ldd	r30, Y+2	; 0x02
    12a0:	fb 81       	ldd	r31, Y+3	; 0x03
    12a2:	40 81       	ld	r20, Z
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
    12a4:	4d 32       	cpi	r20, 0x2D	; 45
    12a6:	19 f0       	breq	.+6      	; 0x12ae <json_create+0x34c>
    12a8:	83 e1       	ldi	r24, 0x13	; 19
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <json_create+0x350>
    12ae:	84 e1       	ldi	r24, 0x14	; 20
    12b0:	90 e0       	ldi	r25, 0x00	; 0
        unsigned int const len = ptr - value;
    12b2:	98 01       	movw	r18, r16
    12b4:	6a 81       	ldd	r22, Y+2	; 0x02
    12b6:	7b 81       	ldd	r23, Y+3	; 0x03
    12b8:	26 1b       	sub	r18, r22
    12ba:	37 0b       	sbc	r19, r23
        if ( len > maxdigits ) return 0;
    12bc:	82 17       	cp	r24, r18
    12be:	93 07       	cpc	r25, r19
    12c0:	b0 f1       	brcs	.+108    	; 0x132e <json_create+0x3cc>
        if ( len == maxdigits ) {
    12c2:	28 17       	cp	r18, r24
    12c4:	39 07       	cpc	r19, r25
    12c6:	b1 f4       	brne	.+44     	; 0x12f4 <json_create+0x392>
            char const tmp = *ptr;
            *ptr = '\0';
    12c8:	d8 01       	movw	r26, r16
    12ca:	1c 92       	st	X, r1
            char const* const threshold = negative ? min: max;
    12cc:	4d 32       	cpi	r20, 0x2D	; 45
    12ce:	29 f0       	breq	.+10     	; 0x12da <json_create+0x378>
    12d0:	e7 e7       	ldi	r30, 0x77	; 119
    12d2:	f2 e0       	ldi	r31, 0x02	; 2
    12d4:	8e 2f       	mov	r24, r30
    12d6:	9f 2f       	mov	r25, r31
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <json_create+0x380>
    12da:	2b e8       	ldi	r18, 0x8B	; 139
    12dc:	32 e0       	ldi	r19, 0x02	; 2
    12de:	82 2f       	mov	r24, r18
    12e0:	93 2f       	mov	r25, r19
            if ( 0 > strcmp( threshold, value ) ) return 0;
    12e2:	6a 81       	ldd	r22, Y+2	; 0x02
    12e4:	7b 81       	ldd	r23, Y+3	; 0x03
    12e6:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <strcmp>
    12ea:	99 23       	and	r25, r25
    12ec:	04 f1       	brlt	.+64     	; 0x132e <json_create+0x3cc>
            *ptr = tmp;
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	d8 01       	movw	r26, r16
    12f2:	ec 93       	st	X, r30

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
    12f4:	64 e6       	ldi	r22, 0x64	; 100
    12f6:	72 e0       	ldi	r23, 0x02	; 2
    12f8:	d8 01       	movw	r26, r16
    12fa:	8c 91       	ld	r24, X
    12fc:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZL11isOneOfThemcPKc>
    1300:	81 11       	cpse	r24, r1
    1302:	04 c0       	rjmp	.+8      	; 0x130c <json_create+0x3aa>
    1304:	f8 01       	movw	r30, r16
    1306:	10 82       	st	Z, r1
    1308:	0f 5f       	subi	r16, 0xFF	; 255
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
            case 't':  ptr = trueValue( ptr, property );  break;
            case 'f':  ptr = falseValue( ptr, property ); break;
            case 'n':  ptr = nullValue( ptr, property );  break;
            default:   ptr = numValue( ptr, property );   break;
        }
        if ( !ptr ) return 0;
    130c:	01 15       	cp	r16, r1
    130e:	11 05       	cpc	r17, r1
    1310:	59 f0       	breq	.+22     	; 0x1328 <json_create+0x3c6>
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
    if ( pool->nextFree >= pool->qty ) return 0;
    return &pool->mem[pool->nextFree++];
    1312:	64 01       	movw	r12, r8
    1314:	65 ce       	rjmp	.-822    	; 0xfe0 <json_create+0x7e>
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
    char* ptr = goBlank( str );
    if ( !ptr || *ptr != '{' ) return 0;
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0b c0       	rjmp	.+22     	; 0x1332 <json_create+0x3d0>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <json_create+0x3d0>
    json_t* obj = poolInit( &pool );
    obj->name    = 0;
    obj->sibling = 0;
    obj->u.child = 0;
    ptr = objValue( ptr, obj, &pool );
    if ( !ptr ) return 0;
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <json_create+0x3d0>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <json_create+0x3d0>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    return obj;
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	df 90       	pop	r13
    1346:	cf 90       	pop	r12
    1348:	bf 90       	pop	r11
    134a:	af 90       	pop	r10
    134c:	9f 90       	pop	r9
    134e:	8f 90       	pop	r8
    1350:	7f 90       	pop	r7
    1352:	6f 90       	pop	r6
    1354:	5f 90       	pop	r5
    1356:	4f 90       	pop	r4
    1358:	3f 90       	pop	r3
    135a:	2f 90       	pop	r2
    135c:	08 95       	ret

0000135e <_ZN4UART11GetMessagesEv>:
					bufferIndexes[nBuffer]=bufferIndex+1;
				}
			}
		}
	}
	Messages* UART::GetMessages(){
    135e:	3f 92       	push	r3
    1360:	4f 92       	push	r4
    1362:	5f 92       	push	r5
    1364:	6f 92       	push	r6
    1366:	7f 92       	push	r7
    1368:	8f 92       	push	r8
    136a:	9f 92       	push	r9
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	2a 97       	sbiw	r28, 0x0a	; 10
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	5c 01       	movw	r10, r24
    1392:	e1 2c       	mov	r14, r1
    1394:	f1 2c       	mov	r15, r1
		char tempMessagesIndex=0;
    1396:	31 2c       	mov	r3, r1
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    1398:	2c 01       	movw	r4, r24
    139a:	84 ef       	ldi	r24, 0xF4	; 244
    139c:	48 1a       	sub	r4, r24
    139e:	8e ef       	ldi	r24, 0xFE	; 254
    13a0:	58 0a       	sbc	r5, r24
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
					tempMessages[tempMessagesIndex]=new Message(buf, length);
					tempMessagesIndex++;
					bufferIndexes[i]=0;
					overflowedBuffers=false;
    13a2:	f5 01       	movw	r30, r10
    13a4:	e2 5f       	subi	r30, 0xF2	; 242
    13a6:	fe 4f       	sbci	r31, 0xFE	; 254
    13a8:	fa 87       	std	Y+10, r31	; 0x0a
    13aa:	e9 87       	std	Y+9, r30	; 0x09
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
		{
			if(i!=nBuffer){
    13ac:	f2 01       	movw	r30, r4
    13ae:	80 81       	ld	r24, Z
    13b0:	8e 15       	cp	r24, r14
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <_ZN4UART11GetMessagesEv+0x58>
    13b4:	4f c0       	rjmp	.+158    	; 0x1454 <_ZN4UART11GetMessagesEv+0xf6>
				if(bufferIndexes[i]>0){
    13b6:	47 01       	movw	r8, r14
    13b8:	67 01       	movw	r12, r14
    13ba:	cc 0c       	add	r12, r12
    13bc:	dd 1c       	adc	r13, r13
    13be:	ca 0c       	add	r12, r10
    13c0:	db 1c       	adc	r13, r11
    13c2:	f6 01       	movw	r30, r12
    13c4:	84 81       	ldd	r24, Z+4	; 0x04
    13c6:	95 81       	ldd	r25, Z+5	; 0x05
    13c8:	18 16       	cp	r1, r24
    13ca:	19 06       	cpc	r1, r25
    13cc:	0c f0       	brlt	.+2      	; 0x13d0 <_ZN4UART11GetMessagesEv+0x72>
    13ce:	42 c0       	rjmp	.+132    	; 0x1454 <_ZN4UART11GetMessagesEv+0xf6>

				unsigned int length = bufferIndexes[i];
    13d0:	04 81       	ldd	r16, Z+4	; 0x04
    13d2:	15 81       	ldd	r17, Z+5	; 0x05
					char* buf = new char[ length+1];
    13d4:	c8 01       	movw	r24, r16
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_Znaj>
    13dc:	3c 01       	movw	r6, r24
					for (int j = 0; j < length; j++)
    13de:	01 15       	cp	r16, r1
    13e0:	11 05       	cpc	r17, r1
    13e2:	c1 f0       	breq	.+48     	; 0x1414 <_ZN4UART11GetMessagesEv+0xb6>
    13e4:	fc 01       	movw	r30, r24
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
					buf[j] = (char)buffer[i][j];
    13ea:	00 24       	eor	r0, r0
    13ec:	96 94       	lsr	r9
    13ee:	87 94       	ror	r8
    13f0:	07 94       	ror	r0
    13f2:	96 94       	lsr	r9
    13f4:	87 94       	ror	r8
    13f6:	07 94       	ror	r0
    13f8:	98 2c       	mov	r9, r8
    13fa:	80 2c       	mov	r8, r0
    13fc:	8a 0c       	add	r8, r10
    13fe:	9b 1c       	adc	r9, r11
    1400:	d4 01       	movw	r26, r8
    1402:	a8 0f       	add	r26, r24
    1404:	b9 1f       	adc	r27, r25
    1406:	1c 96       	adiw	r26, 0x0c	; 12
    1408:	2c 91       	ld	r18, X
    140a:	21 93       	st	Z+, r18
			if(i!=nBuffer){
				if(bufferIndexes[i]>0){

				unsigned int length = bufferIndexes[i];
					char* buf = new char[ length+1];
					for (int j = 0; j < length; j++)
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	08 17       	cp	r16, r24
    1410:	19 07       	cpc	r17, r25
    1412:	b1 f7       	brne	.-20     	; 0x1400 <_ZN4UART11GetMessagesEv+0xa2>
					buf[j] = (char)buffer[i][j];
					buf[length]='\0';
    1414:	f3 01       	movw	r30, r6
    1416:	e0 0f       	add	r30, r16
    1418:	f1 1f       	adc	r31, r17
    141a:	10 82       	st	Z, r1
					tempMessages[tempMessagesIndex]=new Message(buf, length);
    141c:	84 e0       	ldi	r24, 0x04	; 4
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Znwj>
    1424:	4c 01       	movw	r8, r24
    1426:	a8 01       	movw	r20, r16
    1428:	b3 01       	movw	r22, r6
    142a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN7MessageC1EPKcj>
    142e:	e3 2d       	mov	r30, r3
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	8c 0f       	add	r24, r28
    143c:	9d 1f       	adc	r25, r29
    143e:	e8 0f       	add	r30, r24
    1440:	f9 1f       	adc	r31, r25
    1442:	91 82       	std	Z+1, r9	; 0x01
    1444:	80 82       	st	Z, r8
					tempMessagesIndex++;
    1446:	33 94       	inc	r3
					bufferIndexes[i]=0;
    1448:	f6 01       	movw	r30, r12
    144a:	15 82       	std	Z+5, r1	; 0x05
    144c:	14 82       	std	Z+4, r1	; 0x04
					overflowedBuffers=false;
    144e:	e9 85       	ldd	r30, Y+9	; 0x09
    1450:	fa 85       	ldd	r31, Y+10	; 0x0a
    1452:	10 82       	st	Z, r1
    1454:	ff ef       	ldi	r31, 0xFF	; 255
    1456:	ef 1a       	sub	r14, r31
    1458:	ff 0a       	sbc	r15, r31
		}
	}
	Messages* UART::GetMessages(){
		char tempMessagesIndex=0;
		Message* tempMessages [UART_N_BUFFERS];
		for(char i=0; i<UART_N_BUFFERS; i++)
    145a:	84 e0       	ldi	r24, 0x04	; 4
    145c:	e8 16       	cp	r14, r24
    145e:	f1 04       	cpc	r15, r1
    1460:	09 f0       	breq	.+2      	; 0x1464 <_ZN4UART11GetMessagesEv+0x106>
    1462:	a4 cf       	rjmp	.-184    	; 0x13ac <_ZN4UART11GetMessagesEv+0x4e>
					bufferIndexes[i]=0;
					overflowedBuffers=false;
				}
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
    1464:	33 20       	and	r3, r3
    1466:	61 f0       	breq	.+24     	; 0x1480 <_ZN4UART11GetMessagesEv+0x122>
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Znwj>
    1470:	8c 01       	movw	r16, r24
    1472:	43 2d       	mov	r20, r3
    1474:	be 01       	movw	r22, r28
    1476:	6f 5f       	subi	r22, 0xFF	; 255
    1478:	7f 4f       	sbci	r23, 0xFF	; 255
    147a:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN8MessagesC1EPP7Messagec>
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <_ZN4UART11GetMessagesEv+0x126>
    1480:	00 e0       	ldi	r16, 0x00	; 0
    1482:	10 e0       	ldi	r17, 0x00	; 0
		return m;
}
    1484:	c8 01       	movw	r24, r16
    1486:	2a 96       	adiw	r28, 0x0a	; 10
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	df 90       	pop	r13
    14a0:	cf 90       	pop	r12
    14a2:	bf 90       	pop	r11
    14a4:	af 90       	pop	r10
    14a6:	9f 90       	pop	r9
    14a8:	8f 90       	pop	r8
    14aa:	7f 90       	pop	r7
    14ac:	6f 90       	pop	r6
    14ae:	5f 90       	pop	r5
    14b0:	4f 90       	pop	r4
    14b2:	3f 90       	pop	r3
    14b4:	08 95       	ret

000014b6 <_ZThn2_N4UART11GetMessagesEv>:
    14b6:	02 97       	sbiw	r24, 0x02	; 2
    14b8:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN4UART11GetMessagesEv>
    14bc:	08 95       	ret

000014be <_ZN4UART10InitializeEv>:
 initialized=true;
 }
	return _Singleton;
}
 void UART::Initialize ()
{
    14be:	fc 01       	movw	r30, r24
	//volatile int bufferIndexes[UART_N_BUFFERS];
	//volatile char buffer[UART_N_BUFFERS][UART_BUFFER_SIZE] ;
	
	nBuffer=0;
    14c0:	dc 01       	movw	r26, r24
    14c2:	a4 5f       	subi	r26, 0xF4	; 244
    14c4:	be 4f       	sbci	r27, 0xFE	; 254
    14c6:	1c 92       	st	X, r1
	overflowedCurrentBuffer=false;
    14c8:	11 96       	adiw	r26, 0x01	; 1
    14ca:	1c 92       	st	X, r1
	overflowedBuffers=false;
    14cc:	11 96       	adiw	r26, 0x01	; 1
    14ce:	1c 92       	st	X, r1
	DDRD =DDRD&0xFE;
    14d0:	50 98       	cbi	0x0a, 0	; 10
	DDRD = DDRD | 0x2;
    14d2:	51 9a       	sbi	0x0a, 1	; 10
//PORTD=PORTD&0x1;
	for(char i=0; i<UART_N_BUFFERS; i++)
	{
		bufferIndexes[i]=0;
    14d4:	15 82       	std	Z+5, r1	; 0x05
    14d6:	14 82       	std	Z+4, r1	; 0x04
    14d8:	17 82       	std	Z+7, r1	; 0x07
    14da:	16 82       	std	Z+6, r1	; 0x06
    14dc:	11 86       	std	Z+9, r1	; 0x09
    14de:	10 86       	std	Z+8, r1	; 0x08
    14e0:	13 86       	std	Z+11, r1	; 0x0b
    14e2:	12 86       	std	Z+10, r1	; 0x0a
	}
	UBRR0H = UBRRH_VALUE;
    14e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    14e8:	83 e3       	ldi	r24, 0x33	; 51
    14ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#if USE_U2X
	UCSR0A |= (1<<U2X0);
	#else
	UCSR0A &= ~(1<<U2X0);
    14ee:	e0 ec       	ldi	r30, 0xC0	; 192
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8d 7f       	andi	r24, 0xFD	; 253
    14f6:	80 83       	st	Z, r24
	#endif
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|( 1<<RXCIE0);
    14f8:	88 e9       	ldi	r24, 0x98	; 152
    14fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    14fe:	e2 ec       	ldi	r30, 0xC2	; 194
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	86 60       	ori	r24, 0x06	; 6
    1506:	80 83       	st	Z, r24

	sei();
    1508:	78 94       	sei
    150a:	08 95       	ret

0000150c <_ZN4UART11GetInstanceEv>:
#include <util/setbaud.h>

 UART UART:: _Singleton;
  UART& UART::GetInstance(){
 static bool initialized=false;
 if(!initialized)
    150c:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <_ZZN4UART11GetInstanceEvE11initialized>
    1510:	81 11       	cpse	r24, r1
    1512:	07 c0       	rjmp	.+14     	; 0x1522 <_ZN4UART11GetInstanceEv+0x16>
 {
 _Singleton.Initialize();
    1514:	81 ee       	ldi	r24, 0xE1	; 225
    1516:	92 e0       	ldi	r25, 0x02	; 2
    1518:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN4UART10InitializeEv>
 initialized=true;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <_ZZN4UART11GetInstanceEvE11initialized>
 }
	return _Singleton;
}
    1522:	81 ee       	ldi	r24, 0xE1	; 225
    1524:	92 e0       	ldi	r25, 0x02	; 2
    1526:	08 95       	ret

00001528 <_ZN4UART8IncomingEv>:

	sei();
}

void UART::Incoming(){
	unsigned char data = UDR0;
    1528:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(    data==13||data==10   )
    152c:	2d 30       	cpi	r18, 0x0D	; 13
    152e:	19 f0       	breq	.+6      	; 0x1536 <_ZN4UART8IncomingEv+0xe>
    1530:	2a 30       	cpi	r18, 0x0A	; 10
    1532:	09 f0       	breq	.+2      	; 0x1536 <_ZN4UART8IncomingEv+0xe>
    1534:	67 c0       	rjmp	.+206    	; 0x1604 <_ZN4UART8IncomingEv+0xdc>
	{
		if(bufferIndexes[nBuffer]!=0)
    1536:	fc 01       	movw	r30, r24
    1538:	e4 5f       	subi	r30, 0xF4	; 244
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	e0 81       	ld	r30, Z
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	32 96       	adiw	r30, 0x02	; 2
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	e8 0f       	add	r30, r24
    1548:	f9 1f       	adc	r31, r25
    154a:	20 81       	ld	r18, Z
    154c:	31 81       	ldd	r19, Z+1	; 0x01
    154e:	23 2b       	or	r18, r19
    1550:	09 f4       	brne	.+2      	; 0x1554 <_ZN4UART8IncomingEv+0x2c>
    1552:	94 c0       	rjmp	.+296    	; 0x167c <_ZN4UART8IncomingEv+0x154>
		{
			if(!overflowedCurrentBuffer)
    1554:	fc 01       	movw	r30, r24
    1556:	e3 5f       	subi	r30, 0xF3	; 243
    1558:	fe 4f       	sbci	r31, 0xFE	; 254
    155a:	20 81       	ld	r18, Z
    155c:	21 11       	cpse	r18, r1
    155e:	41 c0       	rjmp	.+130    	; 0x15e2 <_ZN4UART8IncomingEv+0xba>
			{
				if(nBuffer<UART_N_BUFFERS-1)
    1560:	31 97       	sbiw	r30, 0x01	; 1
    1562:	20 81       	ld	r18, Z
    1564:	23 30       	cpi	r18, 0x03	; 3
    1566:	30 f0       	brcs	.+12     	; 0x1574 <_ZN4UART8IncomingEv+0x4c>
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    1568:	fc 01       	movw	r30, r24
    156a:	24 81       	ldd	r18, Z+4	; 0x04
    156c:	35 81       	ldd	r19, Z+5	; 0x05
    156e:	23 2b       	or	r18, r19
    1570:	a9 f4       	brne	.+42     	; 0x159c <_ZN4UART8IncomingEv+0x74>
    1572:	27 c0       	rjmp	.+78     	; 0x15c2 <_ZN4UART8IncomingEv+0x9a>
		{
			if(!overflowedCurrentBuffer)
			{
				if(nBuffer<UART_N_BUFFERS-1)
				{
					nBuffer++;
    1574:	fc 01       	movw	r30, r24
    1576:	e4 5f       	subi	r30, 0xF4	; 244
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	20 81       	ld	r18, Z
    157c:	2f 5f       	subi	r18, 0xFF	; 255
    157e:	20 83       	st	Z, r18
					bufferIndexes[nBuffer]=0;
    1580:	e0 81       	ld	r30, Z
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	32 96       	adiw	r30, 0x02	; 2
    1586:	ee 0f       	add	r30, r30
    1588:	ff 1f       	adc	r31, r31
    158a:	e8 0f       	add	r30, r24
    158c:	f9 1f       	adc	r31, r25
    158e:	11 82       	std	Z+1, r1	; 0x01
    1590:	10 82       	st	Z, r1
					overflowedCurrentBuffer=false;
    1592:	fc 01       	movw	r30, r24
    1594:	e3 5f       	subi	r30, 0xF3	; 243
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	10 82       	st	Z, r1
    159a:	08 95       	ret
				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
					{
						if(bufferIndexes[i]==0)
    159c:	fc 01       	movw	r30, r24
    159e:	26 81       	ldd	r18, Z+6	; 0x06
    15a0:	37 81       	ldd	r19, Z+7	; 0x07
    15a2:	23 2b       	or	r18, r19
    15a4:	51 f0       	breq	.+20     	; 0x15ba <_ZN4UART8IncomingEv+0x92>
    15a6:	20 85       	ldd	r18, Z+8	; 0x08
    15a8:	31 85       	ldd	r19, Z+9	; 0x09
    15aa:	23 2b       	or	r18, r19
    15ac:	41 f0       	breq	.+16     	; 0x15be <_ZN4UART8IncomingEv+0x96>
    15ae:	22 85       	ldd	r18, Z+10	; 0x0a
    15b0:	33 85       	ldd	r19, Z+11	; 0x0b
    15b2:	23 2b       	or	r18, r19
    15b4:	81 f4       	brne	.+32     	; 0x15d6 <_ZN4UART8IncomingEv+0xae>
					overflowedCurrentBuffer=false;

				}
				else
				{
					for(char i=0; i<UART_N_BUFFERS; i++)
    15b6:	23 e0       	ldi	r18, 0x03	; 3
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <_ZN4UART8IncomingEv+0x9c>
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	03 c0       	rjmp	.+6      	; 0x15c4 <_ZN4UART8IncomingEv+0x9c>
    15be:	22 e0       	ldi	r18, 0x02	; 2
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <_ZN4UART8IncomingEv+0x9c>
					{
						if(bufferIndexes[i]==0)
    15c2:	20 e0       	ldi	r18, 0x00	; 0
						{
							nBuffer=i;
    15c4:	fc 01       	movw	r30, r24
    15c6:	e4 5f       	subi	r30, 0xF4	; 244
    15c8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ca:	20 83       	st	Z, r18
							overflowedCurrentBuffer=false;
    15cc:	31 96       	adiw	r30, 0x01	; 1
    15ce:	10 82       	st	Z, r1
							overflowedBuffers=false;
    15d0:	31 96       	adiw	r30, 0x01	; 1
    15d2:	10 82       	st	Z, r1
							return;
    15d4:	08 95       	ret
						}
					}
					overflowedBuffers=true;
    15d6:	fc 01       	movw	r30, r24
    15d8:	e2 5f       	subi	r30, 0xF2	; 242
    15da:	fe 4f       	sbci	r31, 0xFE	; 254
    15dc:	21 e0       	ldi	r18, 0x01	; 1
    15de:	20 83       	st	Z, r18
    15e0:	08 95       	ret
				}
			}
			else
			{
				overflowedCurrentBuffer=false;
    15e2:	fc 01       	movw	r30, r24
    15e4:	e3 5f       	subi	r30, 0xF3	; 243
    15e6:	fe 4f       	sbci	r31, 0xFE	; 254
    15e8:	10 82       	st	Z, r1
				bufferIndexes[nBuffer]=0;
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	20 81       	ld	r18, Z
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	2e 5f       	subi	r18, 0xFE	; 254
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	22 0f       	add	r18, r18
    15f6:	33 1f       	adc	r19, r19
    15f8:	fc 01       	movw	r30, r24
    15fa:	e2 0f       	add	r30, r18
    15fc:	f3 1f       	adc	r31, r19
    15fe:	11 82       	std	Z+1, r1	; 0x01
    1600:	10 82       	st	Z, r1
    1602:	08 95       	ret
			}
		}
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
    1604:	fc 01       	movw	r30, r24
    1606:	e3 5f       	subi	r30, 0xF3	; 243
    1608:	fe 4f       	sbci	r31, 0xFE	; 254
    160a:	30 81       	ld	r19, Z
    160c:	31 11       	cpse	r19, r1
    160e:	36 c0       	rjmp	.+108    	; 0x167c <_ZN4UART8IncomingEv+0x154>
    1610:	31 96       	adiw	r30, 0x01	; 1
    1612:	30 81       	ld	r19, Z
    1614:	31 11       	cpse	r19, r1
    1616:	32 c0       	rjmp	.+100    	; 0x167c <_ZN4UART8IncomingEv+0x154>
    1618:	21 c0       	rjmp	.+66     	; 0x165c <_ZN4UART8IncomingEv+0x134>
		{
			int bufferIndex=bufferIndexes[nBuffer];
			if(bufferIndex>=UART_BUFFER_SIZE)
			{
				overflowedCurrentBuffer=true;
    161a:	fc 01       	movw	r30, r24
    161c:	e3 5f       	subi	r30, 0xF3	; 243
    161e:	fe 4f       	sbci	r31, 0xFE	; 254
    1620:	21 e0       	ldi	r18, 0x01	; 1
    1622:	20 83       	st	Z, r18
    1624:	08 95       	ret
			}
			else{
					buffer[nBuffer][bufferIndex]=data;
    1626:	dc 01       	movw	r26, r24
    1628:	a4 5f       	subi	r26, 0xF4	; 244
    162a:	be 4f       	sbci	r27, 0xFE	; 254
    162c:	3c 91       	ld	r19, X
    162e:	fc 01       	movw	r30, r24
    1630:	60 e4       	ldi	r22, 0x40	; 64
    1632:	36 9f       	mul	r19, r22
    1634:	e0 0d       	add	r30, r0
    1636:	f1 1d       	adc	r31, r1
    1638:	11 24       	eor	r1, r1
    163a:	e4 0f       	add	r30, r20
    163c:	f5 1f       	adc	r31, r21
    163e:	24 87       	std	Z+12, r18	; 0x0c
					bufferIndexes[nBuffer]=bufferIndex+1;
    1640:	2c 91       	ld	r18, X
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4f 5f       	subi	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	2e 5f       	subi	r18, 0xFE	; 254
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	22 0f       	add	r18, r18
    164e:	33 1f       	adc	r19, r19
    1650:	fc 01       	movw	r30, r24
    1652:	e2 0f       	add	r30, r18
    1654:	f3 1f       	adc	r31, r19
    1656:	51 83       	std	Z+1, r21	; 0x01
    1658:	40 83       	st	Z, r20
    165a:	08 95       	ret
	}
	else
	{
		if(!overflowedCurrentBuffer&&!overflowedBuffers)
		{
			int bufferIndex=bufferIndexes[nBuffer];
    165c:	fc 01       	movw	r30, r24
    165e:	e4 5f       	subi	r30, 0xF4	; 244
    1660:	fe 4f       	sbci	r31, 0xFE	; 254
    1662:	e0 81       	ld	r30, Z
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	32 96       	adiw	r30, 0x02	; 2
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	e8 0f       	add	r30, r24
    166e:	f9 1f       	adc	r31, r25
    1670:	40 81       	ld	r20, Z
    1672:	51 81       	ldd	r21, Z+1	; 0x01
			if(bufferIndex>=UART_BUFFER_SIZE)
    1674:	40 34       	cpi	r20, 0x40	; 64
    1676:	51 05       	cpc	r21, r1
    1678:	b4 f2       	brlt	.-84     	; 0x1626 <_ZN4UART8IncomingEv+0xfe>
    167a:	cf cf       	rjmp	.-98     	; 0x161a <_ZN4UART8IncomingEv+0xf2>
    167c:	08 95       	ret

0000167e <__vector_18>:
			}
		}
		Messages* m = (tempMessagesIndex>0)? new Messages(tempMessages, tempMessagesIndex):NULL;
		return m;
}
	ISR(USART_RX_vect){
    167e:	1f 92       	push	r1
    1680:	0f 92       	push	r0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	0f 92       	push	r0
    1686:	11 24       	eor	r1, r1
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
		cli();
    16a0:	f8 94       	cli
		UART::GetInstance().Incoming();
    16a2:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN4UART11GetInstanceEv>
    16a6:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4UART8IncomingEv>
		sei();
    16aa:	78 94       	sei
	}
    16ac:	ff 91       	pop	r31
    16ae:	ef 91       	pop	r30
    16b0:	bf 91       	pop	r27
    16b2:	af 91       	pop	r26
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	7f 91       	pop	r23
    16ba:	6f 91       	pop	r22
    16bc:	5f 91       	pop	r21
    16be:	4f 91       	pop	r20
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <_ZN4UART4SendEc>:
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
    16ce:	e0 ec       	ldi	r30, 0xC0	; 192
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	85 ff       	sbrs	r24, 5
    16d6:	fd cf       	rjmp	.-6      	; 0x16d2 <_ZN4UART4SendEc+0x4>
		UDR0=message;
    16d8:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    16dc:	08 95       	ret

000016de <_ZN4UART11SendMessageEPKcj>:
	}
	void UART::SendMessage(const char* message, unsigned int length){
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
		for(unsigned int i=0; i<length; i++)
    16ea:	41 15       	cp	r20, r1
    16ec:	51 05       	cpc	r21, r1
    16ee:	61 f0       	breq	.+24     	; 0x1708 <_ZN4UART11SendMessageEPKcj+0x2a>
    16f0:	8b 01       	movw	r16, r22
    16f2:	7c 01       	movw	r14, r24
    16f4:	eb 01       	movw	r28, r22
    16f6:	04 0f       	add	r16, r20
    16f8:	15 1f       	adc	r17, r21
		Send(*(message+i));
    16fa:	69 91       	ld	r22, Y+
    16fc:	c7 01       	movw	r24, r14
    16fe:	0e 94 67 0b 	call	0x16ce	; 0x16ce <_ZN4UART4SendEc>
	void UART::Send(char message){
		while((UCSR0A & 0X20)!=0X20); 		/* wait till data register is empty*/
		UDR0=message;
	}
	void UART::SendMessage(const char* message, unsigned int length){
		for(unsigned int i=0; i<length; i++)
    1702:	c0 17       	cp	r28, r16
    1704:	d1 07       	cpc	r29, r17
    1706:	c9 f7       	brne	.-14     	; 0x16fa <_ZN4UART11SendMessageEPKcj+0x1c>
		Send(*(message+i));
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	08 95       	ret

00001716 <_GLOBAL__sub_I__ZN4UART10_SingletonE>:
void operator=(UART const&) = delete; // Don't implement
protected:
public:

private:
UART(){}
    1716:	e1 ee       	ldi	r30, 0xE1	; 225
    1718:	f2 e0       	ldi	r31, 0x02	; 2
    171a:	84 eb       	ldi	r24, 0xB4	; 180
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	80 83       	st	Z, r24
    1722:	8c eb       	ldi	r24, 0xBC	; 188
    1724:	92 e0       	ldi	r25, 0x02	; 2
    1726:	93 83       	std	Z+3, r25	; 0x03
    1728:	82 83       	std	Z+2, r24	; 0x02
    172a:	08 95       	ret

0000172c <__tablejump2__>:
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	05 90       	lpm	r0, Z+
    1732:	f4 91       	lpm	r31, Z
    1734:	e0 2d       	mov	r30, r0
    1736:	09 94       	ijmp

00001738 <malloc>:
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	91 05       	cpc	r25, r1
    1744:	10 f4       	brcc	.+4      	; 0x174a <malloc+0x12>
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <__flp>
    174e:	f0 91 f3 03 	lds	r31, 0x03F3	; 0x8003f3 <__flp+0x1>
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	30 97       	sbiw	r30, 0x00	; 0
    175c:	19 f1       	breq	.+70     	; 0x17a4 <malloc+0x6c>
    175e:	40 81       	ld	r20, Z
    1760:	51 81       	ldd	r21, Z+1	; 0x01
    1762:	02 81       	ldd	r16, Z+2	; 0x02
    1764:	13 81       	ldd	r17, Z+3	; 0x03
    1766:	48 17       	cp	r20, r24
    1768:	59 07       	cpc	r21, r25
    176a:	c8 f0       	brcs	.+50     	; 0x179e <malloc+0x66>
    176c:	84 17       	cp	r24, r20
    176e:	95 07       	cpc	r25, r21
    1770:	69 f4       	brne	.+26     	; 0x178c <malloc+0x54>
    1772:	10 97       	sbiw	r26, 0x00	; 0
    1774:	31 f0       	breq	.+12     	; 0x1782 <malloc+0x4a>
    1776:	12 96       	adiw	r26, 0x02	; 2
    1778:	0c 93       	st	X, r16
    177a:	12 97       	sbiw	r26, 0x02	; 2
    177c:	13 96       	adiw	r26, 0x03	; 3
    177e:	1c 93       	st	X, r17
    1780:	27 c0       	rjmp	.+78     	; 0x17d0 <malloc+0x98>
    1782:	00 93 f2 03 	sts	0x03F2, r16	; 0x8003f2 <__flp>
    1786:	10 93 f3 03 	sts	0x03F3, r17	; 0x8003f3 <__flp+0x1>
    178a:	22 c0       	rjmp	.+68     	; 0x17d0 <malloc+0x98>
    178c:	21 15       	cp	r18, r1
    178e:	31 05       	cpc	r19, r1
    1790:	19 f0       	breq	.+6      	; 0x1798 <malloc+0x60>
    1792:	42 17       	cp	r20, r18
    1794:	53 07       	cpc	r21, r19
    1796:	18 f4       	brcc	.+6      	; 0x179e <malloc+0x66>
    1798:	9a 01       	movw	r18, r20
    179a:	bd 01       	movw	r22, r26
    179c:	ef 01       	movw	r28, r30
    179e:	df 01       	movw	r26, r30
    17a0:	f8 01       	movw	r30, r16
    17a2:	db cf       	rjmp	.-74     	; 0x175a <malloc+0x22>
    17a4:	21 15       	cp	r18, r1
    17a6:	31 05       	cpc	r19, r1
    17a8:	f9 f0       	breq	.+62     	; 0x17e8 <malloc+0xb0>
    17aa:	28 1b       	sub	r18, r24
    17ac:	39 0b       	sbc	r19, r25
    17ae:	24 30       	cpi	r18, 0x04	; 4
    17b0:	31 05       	cpc	r19, r1
    17b2:	80 f4       	brcc	.+32     	; 0x17d4 <malloc+0x9c>
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	9b 81       	ldd	r25, Y+3	; 0x03
    17b8:	61 15       	cp	r22, r1
    17ba:	71 05       	cpc	r23, r1
    17bc:	21 f0       	breq	.+8      	; 0x17c6 <malloc+0x8e>
    17be:	fb 01       	movw	r30, r22
    17c0:	93 83       	std	Z+3, r25	; 0x03
    17c2:	82 83       	std	Z+2, r24	; 0x02
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <malloc+0x96>
    17c6:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <__flp+0x1>
    17ca:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <__flp>
    17ce:	fe 01       	movw	r30, r28
    17d0:	32 96       	adiw	r30, 0x02	; 2
    17d2:	44 c0       	rjmp	.+136    	; 0x185c <malloc+0x124>
    17d4:	fe 01       	movw	r30, r28
    17d6:	e2 0f       	add	r30, r18
    17d8:	f3 1f       	adc	r31, r19
    17da:	81 93       	st	Z+, r24
    17dc:	91 93       	st	Z+, r25
    17de:	22 50       	subi	r18, 0x02	; 2
    17e0:	31 09       	sbc	r19, r1
    17e2:	39 83       	std	Y+1, r19	; 0x01
    17e4:	28 83       	st	Y, r18
    17e6:	3a c0       	rjmp	.+116    	; 0x185c <malloc+0x124>
    17e8:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <__brkval>
    17ec:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <__brkval+0x1>
    17f0:	23 2b       	or	r18, r19
    17f2:	41 f4       	brne	.+16     	; 0x1804 <malloc+0xcc>
    17f4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    17f8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    17fc:	30 93 f1 03 	sts	0x03F1, r19	; 0x8003f1 <__brkval+0x1>
    1800:	20 93 f0 03 	sts	0x03F0, r18	; 0x8003f0 <__brkval>
    1804:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1808:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    180c:	21 15       	cp	r18, r1
    180e:	31 05       	cpc	r19, r1
    1810:	41 f4       	brne	.+16     	; 0x1822 <malloc+0xea>
    1812:	2d b7       	in	r18, 0x3d	; 61
    1814:	3e b7       	in	r19, 0x3e	; 62
    1816:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    181a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    181e:	24 1b       	sub	r18, r20
    1820:	35 0b       	sbc	r19, r21
    1822:	e0 91 f0 03 	lds	r30, 0x03F0	; 0x8003f0 <__brkval>
    1826:	f0 91 f1 03 	lds	r31, 0x03F1	; 0x8003f1 <__brkval+0x1>
    182a:	e2 17       	cp	r30, r18
    182c:	f3 07       	cpc	r31, r19
    182e:	a0 f4       	brcc	.+40     	; 0x1858 <malloc+0x120>
    1830:	2e 1b       	sub	r18, r30
    1832:	3f 0b       	sbc	r19, r31
    1834:	28 17       	cp	r18, r24
    1836:	39 07       	cpc	r19, r25
    1838:	78 f0       	brcs	.+30     	; 0x1858 <malloc+0x120>
    183a:	ac 01       	movw	r20, r24
    183c:	4e 5f       	subi	r20, 0xFE	; 254
    183e:	5f 4f       	sbci	r21, 0xFF	; 255
    1840:	24 17       	cp	r18, r20
    1842:	35 07       	cpc	r19, r21
    1844:	48 f0       	brcs	.+18     	; 0x1858 <malloc+0x120>
    1846:	4e 0f       	add	r20, r30
    1848:	5f 1f       	adc	r21, r31
    184a:	50 93 f1 03 	sts	0x03F1, r21	; 0x8003f1 <__brkval+0x1>
    184e:	40 93 f0 03 	sts	0x03F0, r20	; 0x8003f0 <__brkval>
    1852:	81 93       	st	Z+, r24
    1854:	91 93       	st	Z+, r25
    1856:	02 c0       	rjmp	.+4      	; 0x185c <malloc+0x124>
    1858:	e0 e0       	ldi	r30, 0x00	; 0
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	cf 01       	movw	r24, r30
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	08 95       	ret

00001868 <free>:
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	09 f4       	brne	.+2      	; 0x1872 <free+0xa>
    1870:	81 c0       	rjmp	.+258    	; 0x1974 <free+0x10c>
    1872:	fc 01       	movw	r30, r24
    1874:	32 97       	sbiw	r30, 0x02	; 2
    1876:	13 82       	std	Z+3, r1	; 0x03
    1878:	12 82       	std	Z+2, r1	; 0x02
    187a:	a0 91 f2 03 	lds	r26, 0x03F2	; 0x8003f2 <__flp>
    187e:	b0 91 f3 03 	lds	r27, 0x03F3	; 0x8003f3 <__flp+0x1>
    1882:	10 97       	sbiw	r26, 0x00	; 0
    1884:	81 f4       	brne	.+32     	; 0x18a6 <free+0x3e>
    1886:	20 81       	ld	r18, Z
    1888:	31 81       	ldd	r19, Z+1	; 0x01
    188a:	82 0f       	add	r24, r18
    188c:	93 1f       	adc	r25, r19
    188e:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <__brkval>
    1892:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <__brkval+0x1>
    1896:	28 17       	cp	r18, r24
    1898:	39 07       	cpc	r19, r25
    189a:	51 f5       	brne	.+84     	; 0x18f0 <free+0x88>
    189c:	f0 93 f1 03 	sts	0x03F1, r31	; 0x8003f1 <__brkval+0x1>
    18a0:	e0 93 f0 03 	sts	0x03F0, r30	; 0x8003f0 <__brkval>
    18a4:	67 c0       	rjmp	.+206    	; 0x1974 <free+0x10c>
    18a6:	ed 01       	movw	r28, r26
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	ce 17       	cp	r28, r30
    18ae:	df 07       	cpc	r29, r31
    18b0:	40 f4       	brcc	.+16     	; 0x18c2 <free+0x5a>
    18b2:	4a 81       	ldd	r20, Y+2	; 0x02
    18b4:	5b 81       	ldd	r21, Y+3	; 0x03
    18b6:	9e 01       	movw	r18, r28
    18b8:	41 15       	cp	r20, r1
    18ba:	51 05       	cpc	r21, r1
    18bc:	f1 f0       	breq	.+60     	; 0x18fa <free+0x92>
    18be:	ea 01       	movw	r28, r20
    18c0:	f5 cf       	rjmp	.-22     	; 0x18ac <free+0x44>
    18c2:	d3 83       	std	Z+3, r29	; 0x03
    18c4:	c2 83       	std	Z+2, r28	; 0x02
    18c6:	40 81       	ld	r20, Z
    18c8:	51 81       	ldd	r21, Z+1	; 0x01
    18ca:	84 0f       	add	r24, r20
    18cc:	95 1f       	adc	r25, r21
    18ce:	c8 17       	cp	r28, r24
    18d0:	d9 07       	cpc	r29, r25
    18d2:	59 f4       	brne	.+22     	; 0x18ea <free+0x82>
    18d4:	88 81       	ld	r24, Y
    18d6:	99 81       	ldd	r25, Y+1	; 0x01
    18d8:	84 0f       	add	r24, r20
    18da:	95 1f       	adc	r25, r21
    18dc:	02 96       	adiw	r24, 0x02	; 2
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	9b 81       	ldd	r25, Y+3	; 0x03
    18e6:	93 83       	std	Z+3, r25	; 0x03
    18e8:	82 83       	std	Z+2, r24	; 0x02
    18ea:	21 15       	cp	r18, r1
    18ec:	31 05       	cpc	r19, r1
    18ee:	29 f4       	brne	.+10     	; 0x18fa <free+0x92>
    18f0:	f0 93 f3 03 	sts	0x03F3, r31	; 0x8003f3 <__flp+0x1>
    18f4:	e0 93 f2 03 	sts	0x03F2, r30	; 0x8003f2 <__flp>
    18f8:	3d c0       	rjmp	.+122    	; 0x1974 <free+0x10c>
    18fa:	e9 01       	movw	r28, r18
    18fc:	fb 83       	std	Y+3, r31	; 0x03
    18fe:	ea 83       	std	Y+2, r30	; 0x02
    1900:	49 91       	ld	r20, Y+
    1902:	59 91       	ld	r21, Y+
    1904:	c4 0f       	add	r28, r20
    1906:	d5 1f       	adc	r29, r21
    1908:	ec 17       	cp	r30, r28
    190a:	fd 07       	cpc	r31, r29
    190c:	61 f4       	brne	.+24     	; 0x1926 <free+0xbe>
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	84 0f       	add	r24, r20
    1914:	95 1f       	adc	r25, r21
    1916:	02 96       	adiw	r24, 0x02	; 2
    1918:	e9 01       	movw	r28, r18
    191a:	99 83       	std	Y+1, r25	; 0x01
    191c:	88 83       	st	Y, r24
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	9b 83       	std	Y+3, r25	; 0x03
    1924:	8a 83       	std	Y+2, r24	; 0x02
    1926:	e0 e0       	ldi	r30, 0x00	; 0
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	12 96       	adiw	r26, 0x02	; 2
    192c:	8d 91       	ld	r24, X+
    192e:	9c 91       	ld	r25, X
    1930:	13 97       	sbiw	r26, 0x03	; 3
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	19 f0       	breq	.+6      	; 0x193c <free+0xd4>
    1936:	fd 01       	movw	r30, r26
    1938:	dc 01       	movw	r26, r24
    193a:	f7 cf       	rjmp	.-18     	; 0x192a <free+0xc2>
    193c:	8d 91       	ld	r24, X+
    193e:	9c 91       	ld	r25, X
    1940:	11 97       	sbiw	r26, 0x01	; 1
    1942:	9d 01       	movw	r18, r26
    1944:	2e 5f       	subi	r18, 0xFE	; 254
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	82 0f       	add	r24, r18
    194a:	93 1f       	adc	r25, r19
    194c:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <__brkval>
    1950:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <__brkval+0x1>
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	69 f4       	brne	.+26     	; 0x1974 <free+0x10c>
    195a:	30 97       	sbiw	r30, 0x00	; 0
    195c:	29 f4       	brne	.+10     	; 0x1968 <free+0x100>
    195e:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <__flp+0x1>
    1962:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <__flp>
    1966:	02 c0       	rjmp	.+4      	; 0x196c <free+0x104>
    1968:	13 82       	std	Z+3, r1	; 0x03
    196a:	12 82       	std	Z+2, r1	; 0x02
    196c:	b0 93 f1 03 	sts	0x03F1, r27	; 0x8003f1 <__brkval+0x1>
    1970:	a0 93 f0 03 	sts	0x03F0, r26	; 0x8003f0 <__brkval>
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <atol>:
    197a:	1f 93       	push	r17
    197c:	fc 01       	movw	r30, r24
    197e:	99 27       	eor	r25, r25
    1980:	88 27       	eor	r24, r24
    1982:	bc 01       	movw	r22, r24
    1984:	e8 94       	clt
    1986:	11 91       	ld	r17, Z+
    1988:	10 32       	cpi	r17, 0x20	; 32
    198a:	e9 f3       	breq	.-6      	; 0x1986 <atol+0xc>
    198c:	19 30       	cpi	r17, 0x09	; 9
    198e:	10 f0       	brcs	.+4      	; 0x1994 <atol+0x1a>
    1990:	1e 30       	cpi	r17, 0x0E	; 14
    1992:	c8 f3       	brcs	.-14     	; 0x1986 <atol+0xc>
    1994:	1b 32       	cpi	r17, 0x2B	; 43
    1996:	51 f0       	breq	.+20     	; 0x19ac <atol+0x32>
    1998:	1d 32       	cpi	r17, 0x2D	; 45
    199a:	49 f4       	brne	.+18     	; 0x19ae <atol+0x34>
    199c:	68 94       	set
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <atol+0x32>
    19a0:	0e 94 ed 0c 	call	0x19da	; 0x19da <__mulsi_const_10>
    19a4:	61 0f       	add	r22, r17
    19a6:	71 1d       	adc	r23, r1
    19a8:	81 1d       	adc	r24, r1
    19aa:	91 1d       	adc	r25, r1
    19ac:	11 91       	ld	r17, Z+
    19ae:	10 53       	subi	r17, 0x30	; 48
    19b0:	1a 30       	cpi	r17, 0x0A	; 10
    19b2:	b0 f3       	brcs	.-20     	; 0x19a0 <atol+0x26>
    19b4:	3e f4       	brtc	.+14     	; 0x19c4 <atol+0x4a>
    19b6:	90 95       	com	r25
    19b8:	80 95       	com	r24
    19ba:	70 95       	com	r23
    19bc:	61 95       	neg	r22
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	8f 4f       	sbci	r24, 0xFF	; 255
    19c2:	9f 4f       	sbci	r25, 0xFF	; 255
    19c4:	1f 91       	pop	r17
    19c6:	08 95       	ret

000019c8 <strcmp>:
    19c8:	fb 01       	movw	r30, r22
    19ca:	dc 01       	movw	r26, r24
    19cc:	8d 91       	ld	r24, X+
    19ce:	01 90       	ld	r0, Z+
    19d0:	80 19       	sub	r24, r0
    19d2:	01 10       	cpse	r0, r1
    19d4:	d9 f3       	breq	.-10     	; 0x19cc <strcmp+0x4>
    19d6:	99 0b       	sbc	r25, r25
    19d8:	08 95       	ret

000019da <__mulsi_const_10>:
    19da:	59 2f       	mov	r21, r25
    19dc:	48 2f       	mov	r20, r24
    19de:	37 2f       	mov	r19, r23
    19e0:	26 2f       	mov	r18, r22
    19e2:	66 0f       	add	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	88 1f       	adc	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	66 0f       	add	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	62 0f       	add	r22, r18
    19f4:	73 1f       	adc	r23, r19
    19f6:	84 1f       	adc	r24, r20
    19f8:	95 1f       	adc	r25, r21
    19fa:	66 0f       	add	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	08 95       	ret

00001a04 <sprintf>:
    1a04:	ae e0       	ldi	r26, 0x0E	; 14
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e0       	ldi	r30, 0x08	; 8
    1a0a:	fd e0       	ldi	r31, 0x0D	; 13
    1a0c:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__prologue_saves__+0x1c>
    1a10:	0d 89       	ldd	r16, Y+21	; 0x15
    1a12:	1e 89       	ldd	r17, Y+22	; 0x16
    1a14:	86 e0       	ldi	r24, 0x06	; 6
    1a16:	8c 83       	std	Y+4, r24	; 0x04
    1a18:	1a 83       	std	Y+2, r17	; 0x02
    1a1a:	09 83       	std	Y+1, r16	; 0x01
    1a1c:	8f ef       	ldi	r24, 0xFF	; 255
    1a1e:	9f e7       	ldi	r25, 0x7F	; 127
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
    1a24:	ae 01       	movw	r20, r28
    1a26:	47 5e       	subi	r20, 0xE7	; 231
    1a28:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2a:	6f 89       	ldd	r22, Y+23	; 0x17
    1a2c:	78 8d       	ldd	r23, Y+24	; 0x18
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <vfprintf>
    1a36:	ef 81       	ldd	r30, Y+7	; 0x07
    1a38:	f8 85       	ldd	r31, Y+8	; 0x08
    1a3a:	e0 0f       	add	r30, r16
    1a3c:	f1 1f       	adc	r31, r17
    1a3e:	10 82       	st	Z, r1
    1a40:	2e 96       	adiw	r28, 0x0e	; 14
    1a42:	e4 e0       	ldi	r30, 0x04	; 4
    1a44:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__epilogue_restores__+0x1c>

00001a48 <vfprintf>:
    1a48:	ab e0       	ldi	r26, 0x0B	; 11
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ea e2       	ldi	r30, 0x2A	; 42
    1a4e:	fd e0       	ldi	r31, 0x0D	; 13
    1a50:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__prologue_saves__>
    1a54:	6c 01       	movw	r12, r24
    1a56:	7b 01       	movw	r14, r22
    1a58:	8a 01       	movw	r16, r20
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	17 82       	std	Z+7, r1	; 0x07
    1a5e:	16 82       	std	Z+6, r1	; 0x06
    1a60:	83 81       	ldd	r24, Z+3	; 0x03
    1a62:	81 ff       	sbrs	r24, 1
    1a64:	cc c1       	rjmp	.+920    	; 0x1dfe <vfprintf+0x3b6>
    1a66:	ce 01       	movw	r24, r28
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	3c 01       	movw	r6, r24
    1a6c:	f6 01       	movw	r30, r12
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	f7 01       	movw	r30, r14
    1a72:	93 fd       	sbrc	r25, 3
    1a74:	85 91       	lpm	r24, Z+
    1a76:	93 ff       	sbrs	r25, 3
    1a78:	81 91       	ld	r24, Z+
    1a7a:	7f 01       	movw	r14, r30
    1a7c:	88 23       	and	r24, r24
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <vfprintf+0x3a>
    1a80:	ba c1       	rjmp	.+884    	; 0x1df6 <vfprintf+0x3ae>
    1a82:	85 32       	cpi	r24, 0x25	; 37
    1a84:	39 f4       	brne	.+14     	; 0x1a94 <vfprintf+0x4c>
    1a86:	93 fd       	sbrc	r25, 3
    1a88:	85 91       	lpm	r24, Z+
    1a8a:	93 ff       	sbrs	r25, 3
    1a8c:	81 91       	ld	r24, Z+
    1a8e:	7f 01       	movw	r14, r30
    1a90:	85 32       	cpi	r24, 0x25	; 37
    1a92:	29 f4       	brne	.+10     	; 0x1a9e <vfprintf+0x56>
    1a94:	b6 01       	movw	r22, r12
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <fputc>
    1a9c:	e7 cf       	rjmp	.-50     	; 0x1a6c <vfprintf+0x24>
    1a9e:	91 2c       	mov	r9, r1
    1aa0:	21 2c       	mov	r2, r1
    1aa2:	31 2c       	mov	r3, r1
    1aa4:	ff e1       	ldi	r31, 0x1F	; 31
    1aa6:	f3 15       	cp	r31, r3
    1aa8:	d8 f0       	brcs	.+54     	; 0x1ae0 <vfprintf+0x98>
    1aaa:	8b 32       	cpi	r24, 0x2B	; 43
    1aac:	79 f0       	breq	.+30     	; 0x1acc <vfprintf+0x84>
    1aae:	38 f4       	brcc	.+14     	; 0x1abe <vfprintf+0x76>
    1ab0:	80 32       	cpi	r24, 0x20	; 32
    1ab2:	79 f0       	breq	.+30     	; 0x1ad2 <vfprintf+0x8a>
    1ab4:	83 32       	cpi	r24, 0x23	; 35
    1ab6:	a1 f4       	brne	.+40     	; 0x1ae0 <vfprintf+0x98>
    1ab8:	23 2d       	mov	r18, r3
    1aba:	20 61       	ori	r18, 0x10	; 16
    1abc:	1d c0       	rjmp	.+58     	; 0x1af8 <vfprintf+0xb0>
    1abe:	8d 32       	cpi	r24, 0x2D	; 45
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <vfprintf+0x92>
    1ac2:	80 33       	cpi	r24, 0x30	; 48
    1ac4:	69 f4       	brne	.+26     	; 0x1ae0 <vfprintf+0x98>
    1ac6:	23 2d       	mov	r18, r3
    1ac8:	21 60       	ori	r18, 0x01	; 1
    1aca:	16 c0       	rjmp	.+44     	; 0x1af8 <vfprintf+0xb0>
    1acc:	83 2d       	mov	r24, r3
    1ace:	82 60       	ori	r24, 0x02	; 2
    1ad0:	38 2e       	mov	r3, r24
    1ad2:	e3 2d       	mov	r30, r3
    1ad4:	e4 60       	ori	r30, 0x04	; 4
    1ad6:	3e 2e       	mov	r3, r30
    1ad8:	2a c0       	rjmp	.+84     	; 0x1b2e <vfprintf+0xe6>
    1ada:	f3 2d       	mov	r31, r3
    1adc:	f8 60       	ori	r31, 0x08	; 8
    1ade:	1d c0       	rjmp	.+58     	; 0x1b1a <vfprintf+0xd2>
    1ae0:	37 fc       	sbrc	r3, 7
    1ae2:	2d c0       	rjmp	.+90     	; 0x1b3e <vfprintf+0xf6>
    1ae4:	20 ed       	ldi	r18, 0xD0	; 208
    1ae6:	28 0f       	add	r18, r24
    1ae8:	2a 30       	cpi	r18, 0x0A	; 10
    1aea:	40 f0       	brcs	.+16     	; 0x1afc <vfprintf+0xb4>
    1aec:	8e 32       	cpi	r24, 0x2E	; 46
    1aee:	b9 f4       	brne	.+46     	; 0x1b1e <vfprintf+0xd6>
    1af0:	36 fc       	sbrc	r3, 6
    1af2:	81 c1       	rjmp	.+770    	; 0x1df6 <vfprintf+0x3ae>
    1af4:	23 2d       	mov	r18, r3
    1af6:	20 64       	ori	r18, 0x40	; 64
    1af8:	32 2e       	mov	r3, r18
    1afa:	19 c0       	rjmp	.+50     	; 0x1b2e <vfprintf+0xe6>
    1afc:	36 fe       	sbrs	r3, 6
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <vfprintf+0xc4>
    1b00:	8a e0       	ldi	r24, 0x0A	; 10
    1b02:	98 9e       	mul	r9, r24
    1b04:	20 0d       	add	r18, r0
    1b06:	11 24       	eor	r1, r1
    1b08:	92 2e       	mov	r9, r18
    1b0a:	11 c0       	rjmp	.+34     	; 0x1b2e <vfprintf+0xe6>
    1b0c:	ea e0       	ldi	r30, 0x0A	; 10
    1b0e:	2e 9e       	mul	r2, r30
    1b10:	20 0d       	add	r18, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	22 2e       	mov	r2, r18
    1b16:	f3 2d       	mov	r31, r3
    1b18:	f0 62       	ori	r31, 0x20	; 32
    1b1a:	3f 2e       	mov	r3, r31
    1b1c:	08 c0       	rjmp	.+16     	; 0x1b2e <vfprintf+0xe6>
    1b1e:	8c 36       	cpi	r24, 0x6C	; 108
    1b20:	21 f4       	brne	.+8      	; 0x1b2a <vfprintf+0xe2>
    1b22:	83 2d       	mov	r24, r3
    1b24:	80 68       	ori	r24, 0x80	; 128
    1b26:	38 2e       	mov	r3, r24
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <vfprintf+0xe6>
    1b2a:	88 36       	cpi	r24, 0x68	; 104
    1b2c:	41 f4       	brne	.+16     	; 0x1b3e <vfprintf+0xf6>
    1b2e:	f7 01       	movw	r30, r14
    1b30:	93 fd       	sbrc	r25, 3
    1b32:	85 91       	lpm	r24, Z+
    1b34:	93 ff       	sbrs	r25, 3
    1b36:	81 91       	ld	r24, Z+
    1b38:	7f 01       	movw	r14, r30
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	b3 cf       	rjmp	.-154    	; 0x1aa4 <vfprintf+0x5c>
    1b3e:	98 2f       	mov	r25, r24
    1b40:	9f 7d       	andi	r25, 0xDF	; 223
    1b42:	95 54       	subi	r25, 0x45	; 69
    1b44:	93 30       	cpi	r25, 0x03	; 3
    1b46:	28 f4       	brcc	.+10     	; 0x1b52 <vfprintf+0x10a>
    1b48:	0c 5f       	subi	r16, 0xFC	; 252
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4c:	9f e3       	ldi	r25, 0x3F	; 63
    1b4e:	99 83       	std	Y+1, r25	; 0x01
    1b50:	0d c0       	rjmp	.+26     	; 0x1b6c <vfprintf+0x124>
    1b52:	83 36       	cpi	r24, 0x63	; 99
    1b54:	31 f0       	breq	.+12     	; 0x1b62 <vfprintf+0x11a>
    1b56:	83 37       	cpi	r24, 0x73	; 115
    1b58:	71 f0       	breq	.+28     	; 0x1b76 <vfprintf+0x12e>
    1b5a:	83 35       	cpi	r24, 0x53	; 83
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <vfprintf+0x118>
    1b5e:	59 c0       	rjmp	.+178    	; 0x1c12 <vfprintf+0x1ca>
    1b60:	21 c0       	rjmp	.+66     	; 0x1ba4 <vfprintf+0x15c>
    1b62:	f8 01       	movw	r30, r16
    1b64:	80 81       	ld	r24, Z
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	0e 5f       	subi	r16, 0xFE	; 254
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6c:	88 24       	eor	r8, r8
    1b6e:	83 94       	inc	r8
    1b70:	91 2c       	mov	r9, r1
    1b72:	53 01       	movw	r10, r6
    1b74:	13 c0       	rjmp	.+38     	; 0x1b9c <vfprintf+0x154>
    1b76:	28 01       	movw	r4, r16
    1b78:	f2 e0       	ldi	r31, 0x02	; 2
    1b7a:	4f 0e       	add	r4, r31
    1b7c:	51 1c       	adc	r5, r1
    1b7e:	f8 01       	movw	r30, r16
    1b80:	a0 80       	ld	r10, Z
    1b82:	b1 80       	ldd	r11, Z+1	; 0x01
    1b84:	36 fe       	sbrs	r3, 6
    1b86:	03 c0       	rjmp	.+6      	; 0x1b8e <vfprintf+0x146>
    1b88:	69 2d       	mov	r22, r9
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <vfprintf+0x14a>
    1b8e:	6f ef       	ldi	r22, 0xFF	; 255
    1b90:	7f ef       	ldi	r23, 0xFF	; 255
    1b92:	c5 01       	movw	r24, r10
    1b94:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <strnlen>
    1b98:	4c 01       	movw	r8, r24
    1b9a:	82 01       	movw	r16, r4
    1b9c:	f3 2d       	mov	r31, r3
    1b9e:	ff 77       	andi	r31, 0x7F	; 127
    1ba0:	3f 2e       	mov	r3, r31
    1ba2:	16 c0       	rjmp	.+44     	; 0x1bd0 <vfprintf+0x188>
    1ba4:	28 01       	movw	r4, r16
    1ba6:	22 e0       	ldi	r18, 0x02	; 2
    1ba8:	42 0e       	add	r4, r18
    1baa:	51 1c       	adc	r5, r1
    1bac:	f8 01       	movw	r30, r16
    1bae:	a0 80       	ld	r10, Z
    1bb0:	b1 80       	ldd	r11, Z+1	; 0x01
    1bb2:	36 fe       	sbrs	r3, 6
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <vfprintf+0x174>
    1bb6:	69 2d       	mov	r22, r9
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <vfprintf+0x178>
    1bbc:	6f ef       	ldi	r22, 0xFF	; 255
    1bbe:	7f ef       	ldi	r23, 0xFF	; 255
    1bc0:	c5 01       	movw	r24, r10
    1bc2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <strnlen_P>
    1bc6:	4c 01       	movw	r8, r24
    1bc8:	f3 2d       	mov	r31, r3
    1bca:	f0 68       	ori	r31, 0x80	; 128
    1bcc:	3f 2e       	mov	r3, r31
    1bce:	82 01       	movw	r16, r4
    1bd0:	33 fc       	sbrc	r3, 3
    1bd2:	1b c0       	rjmp	.+54     	; 0x1c0a <vfprintf+0x1c2>
    1bd4:	82 2d       	mov	r24, r2
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	88 16       	cp	r8, r24
    1bda:	99 06       	cpc	r9, r25
    1bdc:	b0 f4       	brcc	.+44     	; 0x1c0a <vfprintf+0x1c2>
    1bde:	b6 01       	movw	r22, r12
    1be0:	80 e2       	ldi	r24, 0x20	; 32
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <fputc>
    1be8:	2a 94       	dec	r2
    1bea:	f4 cf       	rjmp	.-24     	; 0x1bd4 <vfprintf+0x18c>
    1bec:	f5 01       	movw	r30, r10
    1bee:	37 fc       	sbrc	r3, 7
    1bf0:	85 91       	lpm	r24, Z+
    1bf2:	37 fe       	sbrs	r3, 7
    1bf4:	81 91       	ld	r24, Z+
    1bf6:	5f 01       	movw	r10, r30
    1bf8:	b6 01       	movw	r22, r12
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <fputc>
    1c00:	21 10       	cpse	r2, r1
    1c02:	2a 94       	dec	r2
    1c04:	21 e0       	ldi	r18, 0x01	; 1
    1c06:	82 1a       	sub	r8, r18
    1c08:	91 08       	sbc	r9, r1
    1c0a:	81 14       	cp	r8, r1
    1c0c:	91 04       	cpc	r9, r1
    1c0e:	71 f7       	brne	.-36     	; 0x1bec <vfprintf+0x1a4>
    1c10:	e8 c0       	rjmp	.+464    	; 0x1de2 <vfprintf+0x39a>
    1c12:	84 36       	cpi	r24, 0x64	; 100
    1c14:	11 f0       	breq	.+4      	; 0x1c1a <vfprintf+0x1d2>
    1c16:	89 36       	cpi	r24, 0x69	; 105
    1c18:	41 f5       	brne	.+80     	; 0x1c6a <vfprintf+0x222>
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	37 fe       	sbrs	r3, 7
    1c1e:	07 c0       	rjmp	.+14     	; 0x1c2e <vfprintf+0x1e6>
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	0c 5f       	subi	r16, 0xFC	; 252
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	08 c0       	rjmp	.+16     	; 0x1c3e <vfprintf+0x1f6>
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	07 2e       	mov	r0, r23
    1c34:	00 0c       	add	r0, r0
    1c36:	88 0b       	sbc	r24, r24
    1c38:	99 0b       	sbc	r25, r25
    1c3a:	0e 5f       	subi	r16, 0xFE	; 254
    1c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3e:	f3 2d       	mov	r31, r3
    1c40:	ff 76       	andi	r31, 0x6F	; 111
    1c42:	3f 2e       	mov	r3, r31
    1c44:	97 ff       	sbrs	r25, 7
    1c46:	09 c0       	rjmp	.+18     	; 0x1c5a <vfprintf+0x212>
    1c48:	90 95       	com	r25
    1c4a:	80 95       	com	r24
    1c4c:	70 95       	com	r23
    1c4e:	61 95       	neg	r22
    1c50:	7f 4f       	sbci	r23, 0xFF	; 255
    1c52:	8f 4f       	sbci	r24, 0xFF	; 255
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	f0 68       	ori	r31, 0x80	; 128
    1c58:	3f 2e       	mov	r3, r31
    1c5a:	2a e0       	ldi	r18, 0x0A	; 10
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	a3 01       	movw	r20, r6
    1c60:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__ultoa_invert>
    1c64:	88 2e       	mov	r8, r24
    1c66:	86 18       	sub	r8, r6
    1c68:	45 c0       	rjmp	.+138    	; 0x1cf4 <vfprintf+0x2ac>
    1c6a:	85 37       	cpi	r24, 0x75	; 117
    1c6c:	31 f4       	brne	.+12     	; 0x1c7a <vfprintf+0x232>
    1c6e:	23 2d       	mov	r18, r3
    1c70:	2f 7e       	andi	r18, 0xEF	; 239
    1c72:	b2 2e       	mov	r11, r18
    1c74:	2a e0       	ldi	r18, 0x0A	; 10
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	25 c0       	rjmp	.+74     	; 0x1cc4 <vfprintf+0x27c>
    1c7a:	93 2d       	mov	r25, r3
    1c7c:	99 7f       	andi	r25, 0xF9	; 249
    1c7e:	b9 2e       	mov	r11, r25
    1c80:	8f 36       	cpi	r24, 0x6F	; 111
    1c82:	c1 f0       	breq	.+48     	; 0x1cb4 <vfprintf+0x26c>
    1c84:	18 f4       	brcc	.+6      	; 0x1c8c <vfprintf+0x244>
    1c86:	88 35       	cpi	r24, 0x58	; 88
    1c88:	79 f0       	breq	.+30     	; 0x1ca8 <vfprintf+0x260>
    1c8a:	b5 c0       	rjmp	.+362    	; 0x1df6 <vfprintf+0x3ae>
    1c8c:	80 37       	cpi	r24, 0x70	; 112
    1c8e:	19 f0       	breq	.+6      	; 0x1c96 <vfprintf+0x24e>
    1c90:	88 37       	cpi	r24, 0x78	; 120
    1c92:	21 f0       	breq	.+8      	; 0x1c9c <vfprintf+0x254>
    1c94:	b0 c0       	rjmp	.+352    	; 0x1df6 <vfprintf+0x3ae>
    1c96:	e9 2f       	mov	r30, r25
    1c98:	e0 61       	ori	r30, 0x10	; 16
    1c9a:	be 2e       	mov	r11, r30
    1c9c:	b4 fe       	sbrs	r11, 4
    1c9e:	0d c0       	rjmp	.+26     	; 0x1cba <vfprintf+0x272>
    1ca0:	fb 2d       	mov	r31, r11
    1ca2:	f4 60       	ori	r31, 0x04	; 4
    1ca4:	bf 2e       	mov	r11, r31
    1ca6:	09 c0       	rjmp	.+18     	; 0x1cba <vfprintf+0x272>
    1ca8:	34 fe       	sbrs	r3, 4
    1caa:	0a c0       	rjmp	.+20     	; 0x1cc0 <vfprintf+0x278>
    1cac:	29 2f       	mov	r18, r25
    1cae:	26 60       	ori	r18, 0x06	; 6
    1cb0:	b2 2e       	mov	r11, r18
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <vfprintf+0x278>
    1cb4:	28 e0       	ldi	r18, 0x08	; 8
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	05 c0       	rjmp	.+10     	; 0x1cc4 <vfprintf+0x27c>
    1cba:	20 e1       	ldi	r18, 0x10	; 16
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <vfprintf+0x27c>
    1cc0:	20 e1       	ldi	r18, 0x10	; 16
    1cc2:	32 e0       	ldi	r19, 0x02	; 2
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	b7 fe       	sbrs	r11, 7
    1cc8:	07 c0       	rjmp	.+14     	; 0x1cd8 <vfprintf+0x290>
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	0c 5f       	subi	r16, 0xFC	; 252
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	06 c0       	rjmp	.+12     	; 0x1ce4 <vfprintf+0x29c>
    1cd8:	60 81       	ld	r22, Z
    1cda:	71 81       	ldd	r23, Z+1	; 0x01
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 5f       	subi	r16, 0xFE	; 254
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	a3 01       	movw	r20, r6
    1ce6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__ultoa_invert>
    1cea:	88 2e       	mov	r8, r24
    1cec:	86 18       	sub	r8, r6
    1cee:	fb 2d       	mov	r31, r11
    1cf0:	ff 77       	andi	r31, 0x7F	; 127
    1cf2:	3f 2e       	mov	r3, r31
    1cf4:	36 fe       	sbrs	r3, 6
    1cf6:	0d c0       	rjmp	.+26     	; 0x1d12 <vfprintf+0x2ca>
    1cf8:	23 2d       	mov	r18, r3
    1cfa:	2e 7f       	andi	r18, 0xFE	; 254
    1cfc:	a2 2e       	mov	r10, r18
    1cfe:	89 14       	cp	r8, r9
    1d00:	58 f4       	brcc	.+22     	; 0x1d18 <vfprintf+0x2d0>
    1d02:	34 fe       	sbrs	r3, 4
    1d04:	0b c0       	rjmp	.+22     	; 0x1d1c <vfprintf+0x2d4>
    1d06:	32 fc       	sbrc	r3, 2
    1d08:	09 c0       	rjmp	.+18     	; 0x1d1c <vfprintf+0x2d4>
    1d0a:	83 2d       	mov	r24, r3
    1d0c:	8e 7e       	andi	r24, 0xEE	; 238
    1d0e:	a8 2e       	mov	r10, r24
    1d10:	05 c0       	rjmp	.+10     	; 0x1d1c <vfprintf+0x2d4>
    1d12:	b8 2c       	mov	r11, r8
    1d14:	a3 2c       	mov	r10, r3
    1d16:	03 c0       	rjmp	.+6      	; 0x1d1e <vfprintf+0x2d6>
    1d18:	b8 2c       	mov	r11, r8
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <vfprintf+0x2d6>
    1d1c:	b9 2c       	mov	r11, r9
    1d1e:	a4 fe       	sbrs	r10, 4
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <vfprintf+0x2f8>
    1d22:	fe 01       	movw	r30, r28
    1d24:	e8 0d       	add	r30, r8
    1d26:	f1 1d       	adc	r31, r1
    1d28:	80 81       	ld	r24, Z
    1d2a:	80 33       	cpi	r24, 0x30	; 48
    1d2c:	21 f4       	brne	.+8      	; 0x1d36 <vfprintf+0x2ee>
    1d2e:	9a 2d       	mov	r25, r10
    1d30:	99 7e       	andi	r25, 0xE9	; 233
    1d32:	a9 2e       	mov	r10, r25
    1d34:	09 c0       	rjmp	.+18     	; 0x1d48 <vfprintf+0x300>
    1d36:	a2 fe       	sbrs	r10, 2
    1d38:	06 c0       	rjmp	.+12     	; 0x1d46 <vfprintf+0x2fe>
    1d3a:	b3 94       	inc	r11
    1d3c:	b3 94       	inc	r11
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <vfprintf+0x300>
    1d40:	8a 2d       	mov	r24, r10
    1d42:	86 78       	andi	r24, 0x86	; 134
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <vfprintf+0x300>
    1d46:	b3 94       	inc	r11
    1d48:	a3 fc       	sbrc	r10, 3
    1d4a:	11 c0       	rjmp	.+34     	; 0x1d6e <vfprintf+0x326>
    1d4c:	a0 fe       	sbrs	r10, 0
    1d4e:	06 c0       	rjmp	.+12     	; 0x1d5c <vfprintf+0x314>
    1d50:	b2 14       	cp	r11, r2
    1d52:	88 f4       	brcc	.+34     	; 0x1d76 <vfprintf+0x32e>
    1d54:	28 0c       	add	r2, r8
    1d56:	92 2c       	mov	r9, r2
    1d58:	9b 18       	sub	r9, r11
    1d5a:	0e c0       	rjmp	.+28     	; 0x1d78 <vfprintf+0x330>
    1d5c:	b2 14       	cp	r11, r2
    1d5e:	60 f4       	brcc	.+24     	; 0x1d78 <vfprintf+0x330>
    1d60:	b6 01       	movw	r22, r12
    1d62:	80 e2       	ldi	r24, 0x20	; 32
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <fputc>
    1d6a:	b3 94       	inc	r11
    1d6c:	f7 cf       	rjmp	.-18     	; 0x1d5c <vfprintf+0x314>
    1d6e:	b2 14       	cp	r11, r2
    1d70:	18 f4       	brcc	.+6      	; 0x1d78 <vfprintf+0x330>
    1d72:	2b 18       	sub	r2, r11
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <vfprintf+0x332>
    1d76:	98 2c       	mov	r9, r8
    1d78:	21 2c       	mov	r2, r1
    1d7a:	a4 fe       	sbrs	r10, 4
    1d7c:	10 c0       	rjmp	.+32     	; 0x1d9e <vfprintf+0x356>
    1d7e:	b6 01       	movw	r22, r12
    1d80:	80 e3       	ldi	r24, 0x30	; 48
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <fputc>
    1d88:	a2 fe       	sbrs	r10, 2
    1d8a:	17 c0       	rjmp	.+46     	; 0x1dba <vfprintf+0x372>
    1d8c:	a1 fc       	sbrc	r10, 1
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <vfprintf+0x34e>
    1d90:	88 e7       	ldi	r24, 0x78	; 120
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <vfprintf+0x352>
    1d96:	88 e5       	ldi	r24, 0x58	; 88
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	b6 01       	movw	r22, r12
    1d9c:	0c c0       	rjmp	.+24     	; 0x1db6 <vfprintf+0x36e>
    1d9e:	8a 2d       	mov	r24, r10
    1da0:	86 78       	andi	r24, 0x86	; 134
    1da2:	59 f0       	breq	.+22     	; 0x1dba <vfprintf+0x372>
    1da4:	a1 fe       	sbrs	r10, 1
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <vfprintf+0x364>
    1da8:	8b e2       	ldi	r24, 0x2B	; 43
    1daa:	01 c0       	rjmp	.+2      	; 0x1dae <vfprintf+0x366>
    1dac:	80 e2       	ldi	r24, 0x20	; 32
    1dae:	a7 fc       	sbrc	r10, 7
    1db0:	8d e2       	ldi	r24, 0x2D	; 45
    1db2:	b6 01       	movw	r22, r12
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <fputc>
    1dba:	89 14       	cp	r8, r9
    1dbc:	38 f4       	brcc	.+14     	; 0x1dcc <vfprintf+0x384>
    1dbe:	b6 01       	movw	r22, r12
    1dc0:	80 e3       	ldi	r24, 0x30	; 48
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <fputc>
    1dc8:	9a 94       	dec	r9
    1dca:	f7 cf       	rjmp	.-18     	; 0x1dba <vfprintf+0x372>
    1dcc:	8a 94       	dec	r8
    1dce:	f3 01       	movw	r30, r6
    1dd0:	e8 0d       	add	r30, r8
    1dd2:	f1 1d       	adc	r31, r1
    1dd4:	80 81       	ld	r24, Z
    1dd6:	b6 01       	movw	r22, r12
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <fputc>
    1dde:	81 10       	cpse	r8, r1
    1de0:	f5 cf       	rjmp	.-22     	; 0x1dcc <vfprintf+0x384>
    1de2:	22 20       	and	r2, r2
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <vfprintf+0x3a0>
    1de6:	42 ce       	rjmp	.-892    	; 0x1a6c <vfprintf+0x24>
    1de8:	b6 01       	movw	r22, r12
    1dea:	80 e2       	ldi	r24, 0x20	; 32
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <fputc>
    1df2:	2a 94       	dec	r2
    1df4:	f6 cf       	rjmp	.-20     	; 0x1de2 <vfprintf+0x39a>
    1df6:	f6 01       	movw	r30, r12
    1df8:	86 81       	ldd	r24, Z+6	; 0x06
    1dfa:	97 81       	ldd	r25, Z+7	; 0x07
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <vfprintf+0x3ba>
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	9f ef       	ldi	r25, 0xFF	; 255
    1e02:	2b 96       	adiw	r28, 0x0b	; 11
    1e04:	e2 e1       	ldi	r30, 0x12	; 18
    1e06:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__epilogue_restores__>

00001e0a <strnlen_P>:
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	05 90       	lpm	r0, Z+
    1e0e:	61 50       	subi	r22, 0x01	; 1
    1e10:	70 40       	sbci	r23, 0x00	; 0
    1e12:	01 10       	cpse	r0, r1
    1e14:	d8 f7       	brcc	.-10     	; 0x1e0c <strnlen_P+0x2>
    1e16:	80 95       	com	r24
    1e18:	90 95       	com	r25
    1e1a:	8e 0f       	add	r24, r30
    1e1c:	9f 1f       	adc	r25, r31
    1e1e:	08 95       	ret

00001e20 <strnlen>:
    1e20:	fc 01       	movw	r30, r24
    1e22:	61 50       	subi	r22, 0x01	; 1
    1e24:	70 40       	sbci	r23, 0x00	; 0
    1e26:	01 90       	ld	r0, Z+
    1e28:	01 10       	cpse	r0, r1
    1e2a:	d8 f7       	brcc	.-10     	; 0x1e22 <strnlen+0x2>
    1e2c:	80 95       	com	r24
    1e2e:	90 95       	com	r25
    1e30:	8e 0f       	add	r24, r30
    1e32:	9f 1f       	adc	r25, r31
    1e34:	08 95       	ret

00001e36 <fputc>:
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	fb 01       	movw	r30, r22
    1e40:	23 81       	ldd	r18, Z+3	; 0x03
    1e42:	21 fd       	sbrc	r18, 1
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <fputc+0x16>
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	9f ef       	ldi	r25, 0xFF	; 255
    1e4a:	2c c0       	rjmp	.+88     	; 0x1ea4 <fputc+0x6e>
    1e4c:	22 ff       	sbrs	r18, 2
    1e4e:	16 c0       	rjmp	.+44     	; 0x1e7c <fputc+0x46>
    1e50:	46 81       	ldd	r20, Z+6	; 0x06
    1e52:	57 81       	ldd	r21, Z+7	; 0x07
    1e54:	24 81       	ldd	r18, Z+4	; 0x04
    1e56:	35 81       	ldd	r19, Z+5	; 0x05
    1e58:	42 17       	cp	r20, r18
    1e5a:	53 07       	cpc	r21, r19
    1e5c:	44 f4       	brge	.+16     	; 0x1e6e <fputc+0x38>
    1e5e:	a0 81       	ld	r26, Z
    1e60:	b1 81       	ldd	r27, Z+1	; 0x01
    1e62:	9d 01       	movw	r18, r26
    1e64:	2f 5f       	subi	r18, 0xFF	; 255
    1e66:	3f 4f       	sbci	r19, 0xFF	; 255
    1e68:	31 83       	std	Z+1, r19	; 0x01
    1e6a:	20 83       	st	Z, r18
    1e6c:	8c 93       	st	X, r24
    1e6e:	26 81       	ldd	r18, Z+6	; 0x06
    1e70:	37 81       	ldd	r19, Z+7	; 0x07
    1e72:	2f 5f       	subi	r18, 0xFF	; 255
    1e74:	3f 4f       	sbci	r19, 0xFF	; 255
    1e76:	37 83       	std	Z+7, r19	; 0x07
    1e78:	26 83       	std	Z+6, r18	; 0x06
    1e7a:	14 c0       	rjmp	.+40     	; 0x1ea4 <fputc+0x6e>
    1e7c:	8b 01       	movw	r16, r22
    1e7e:	ec 01       	movw	r28, r24
    1e80:	fb 01       	movw	r30, r22
    1e82:	00 84       	ldd	r0, Z+8	; 0x08
    1e84:	f1 85       	ldd	r31, Z+9	; 0x09
    1e86:	e0 2d       	mov	r30, r0
    1e88:	09 95       	icall
    1e8a:	89 2b       	or	r24, r25
    1e8c:	e1 f6       	brne	.-72     	; 0x1e46 <fputc+0x10>
    1e8e:	d8 01       	movw	r26, r16
    1e90:	16 96       	adiw	r26, 0x06	; 6
    1e92:	8d 91       	ld	r24, X+
    1e94:	9c 91       	ld	r25, X
    1e96:	17 97       	sbiw	r26, 0x07	; 7
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	17 96       	adiw	r26, 0x07	; 7
    1e9c:	9c 93       	st	X, r25
    1e9e:	8e 93       	st	-X, r24
    1ea0:	16 97       	sbiw	r26, 0x06	; 6
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	08 95       	ret

00001eae <__ultoa_invert>:
    1eae:	fa 01       	movw	r30, r20
    1eb0:	aa 27       	eor	r26, r26
    1eb2:	28 30       	cpi	r18, 0x08	; 8
    1eb4:	51 f1       	breq	.+84     	; 0x1f0a <__ultoa_invert+0x5c>
    1eb6:	20 31       	cpi	r18, 0x10	; 16
    1eb8:	81 f1       	breq	.+96     	; 0x1f1a <__ultoa_invert+0x6c>
    1eba:	e8 94       	clt
    1ebc:	6f 93       	push	r22
    1ebe:	6e 7f       	andi	r22, 0xFE	; 254
    1ec0:	6e 5f       	subi	r22, 0xFE	; 254
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec8:	af 4f       	sbci	r26, 0xFF	; 255
    1eca:	b1 e0       	ldi	r27, 0x01	; 1
    1ecc:	3e d0       	rcall	.+124    	; 0x1f4a <__ultoa_invert+0x9c>
    1ece:	b4 e0       	ldi	r27, 0x04	; 4
    1ed0:	3c d0       	rcall	.+120    	; 0x1f4a <__ultoa_invert+0x9c>
    1ed2:	67 0f       	add	r22, r23
    1ed4:	78 1f       	adc	r23, r24
    1ed6:	89 1f       	adc	r24, r25
    1ed8:	9a 1f       	adc	r25, r26
    1eda:	a1 1d       	adc	r26, r1
    1edc:	68 0f       	add	r22, r24
    1ede:	79 1f       	adc	r23, r25
    1ee0:	8a 1f       	adc	r24, r26
    1ee2:	91 1d       	adc	r25, r1
    1ee4:	a1 1d       	adc	r26, r1
    1ee6:	6a 0f       	add	r22, r26
    1ee8:	71 1d       	adc	r23, r1
    1eea:	81 1d       	adc	r24, r1
    1eec:	91 1d       	adc	r25, r1
    1eee:	a1 1d       	adc	r26, r1
    1ef0:	20 d0       	rcall	.+64     	; 0x1f32 <__ultoa_invert+0x84>
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <__ultoa_invert+0x48>
    1ef4:	68 94       	set
    1ef6:	3f 91       	pop	r19
    1ef8:	2a e0       	ldi	r18, 0x0A	; 10
    1efa:	26 9f       	mul	r18, r22
    1efc:	11 24       	eor	r1, r1
    1efe:	30 19       	sub	r19, r0
    1f00:	30 5d       	subi	r19, 0xD0	; 208
    1f02:	31 93       	st	Z+, r19
    1f04:	de f6       	brtc	.-74     	; 0x1ebc <__ultoa_invert+0xe>
    1f06:	cf 01       	movw	r24, r30
    1f08:	08 95       	ret
    1f0a:	46 2f       	mov	r20, r22
    1f0c:	47 70       	andi	r20, 0x07	; 7
    1f0e:	40 5d       	subi	r20, 0xD0	; 208
    1f10:	41 93       	st	Z+, r20
    1f12:	b3 e0       	ldi	r27, 0x03	; 3
    1f14:	0f d0       	rcall	.+30     	; 0x1f34 <__ultoa_invert+0x86>
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__ultoa_invert+0x5c>
    1f18:	f6 cf       	rjmp	.-20     	; 0x1f06 <__ultoa_invert+0x58>
    1f1a:	46 2f       	mov	r20, r22
    1f1c:	4f 70       	andi	r20, 0x0F	; 15
    1f1e:	40 5d       	subi	r20, 0xD0	; 208
    1f20:	4a 33       	cpi	r20, 0x3A	; 58
    1f22:	18 f0       	brcs	.+6      	; 0x1f2a <__ultoa_invert+0x7c>
    1f24:	49 5d       	subi	r20, 0xD9	; 217
    1f26:	31 fd       	sbrc	r19, 1
    1f28:	40 52       	subi	r20, 0x20	; 32
    1f2a:	41 93       	st	Z+, r20
    1f2c:	02 d0       	rcall	.+4      	; 0x1f32 <__ultoa_invert+0x84>
    1f2e:	a9 f7       	brne	.-22     	; 0x1f1a <__ultoa_invert+0x6c>
    1f30:	ea cf       	rjmp	.-44     	; 0x1f06 <__ultoa_invert+0x58>
    1f32:	b4 e0       	ldi	r27, 0x04	; 4
    1f34:	a6 95       	lsr	r26
    1f36:	97 95       	ror	r25
    1f38:	87 95       	ror	r24
    1f3a:	77 95       	ror	r23
    1f3c:	67 95       	ror	r22
    1f3e:	ba 95       	dec	r27
    1f40:	c9 f7       	brne	.-14     	; 0x1f34 <__ultoa_invert+0x86>
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	61 05       	cpc	r22, r1
    1f46:	71 05       	cpc	r23, r1
    1f48:	08 95       	ret
    1f4a:	9b 01       	movw	r18, r22
    1f4c:	ac 01       	movw	r20, r24
    1f4e:	0a 2e       	mov	r0, r26
    1f50:	06 94       	lsr	r0
    1f52:	57 95       	ror	r21
    1f54:	47 95       	ror	r20
    1f56:	37 95       	ror	r19
    1f58:	27 95       	ror	r18
    1f5a:	ba 95       	dec	r27
    1f5c:	c9 f7       	brne	.-14     	; 0x1f50 <__ultoa_invert+0xa2>
    1f5e:	62 0f       	add	r22, r18
    1f60:	73 1f       	adc	r23, r19
    1f62:	84 1f       	adc	r24, r20
    1f64:	95 1f       	adc	r25, r21
    1f66:	a0 1d       	adc	r26, r0
    1f68:	08 95       	ret

00001f6a <eeprom_read_byte>:
    1f6a:	f9 99       	sbic	0x1f, 1	; 31
    1f6c:	fe cf       	rjmp	.-4      	; 0x1f6a <eeprom_read_byte>
    1f6e:	92 bd       	out	0x22, r25	; 34
    1f70:	81 bd       	out	0x21, r24	; 33
    1f72:	f8 9a       	sbi	0x1f, 0	; 31
    1f74:	99 27       	eor	r25, r25
    1f76:	80 b5       	in	r24, 0x20	; 32
    1f78:	08 95       	ret

00001f7a <eeprom_read_word>:
    1f7a:	a8 e1       	ldi	r26, 0x18	; 24
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	42 e0       	ldi	r20, 0x02	; 2
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <eeprom_read_blraw>

00001f86 <eeprom_write_byte>:
    1f86:	26 2f       	mov	r18, r22

00001f88 <eeprom_write_r18>:
    1f88:	f9 99       	sbic	0x1f, 1	; 31
    1f8a:	fe cf       	rjmp	.-4      	; 0x1f88 <eeprom_write_r18>
    1f8c:	1f ba       	out	0x1f, r1	; 31
    1f8e:	92 bd       	out	0x22, r25	; 34
    1f90:	81 bd       	out	0x21, r24	; 33
    1f92:	20 bd       	out	0x20, r18	; 32
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	fa 9a       	sbi	0x1f, 2	; 31
    1f9a:	f9 9a       	sbi	0x1f, 1	; 31
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	08 95       	ret

00001fa2 <eeprom_write_word>:
    1fa2:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <eeprom_write_byte>
    1fa6:	27 2f       	mov	r18, r23
    1fa8:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <eeprom_write_r18>

00001fac <eeprom_read_block>:
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22

00001fb0 <eeprom_read_blraw>:
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	f9 99       	sbic	0x1f, 1	; 31
    1fb4:	fe cf       	rjmp	.-4      	; 0x1fb2 <eeprom_read_blraw+0x2>
    1fb6:	06 c0       	rjmp	.+12     	; 0x1fc4 <eeprom_read_blraw+0x14>
    1fb8:	f2 bd       	out	0x22, r31	; 34
    1fba:	e1 bd       	out	0x21, r30	; 33
    1fbc:	f8 9a       	sbi	0x1f, 0	; 31
    1fbe:	31 96       	adiw	r30, 0x01	; 1
    1fc0:	00 b4       	in	r0, 0x20	; 32
    1fc2:	0d 92       	st	X+, r0
    1fc4:	41 50       	subi	r20, 0x01	; 1
    1fc6:	50 40       	sbci	r21, 0x00	; 0
    1fc8:	b8 f7       	brcc	.-18     	; 0x1fb8 <eeprom_read_blraw+0x8>
    1fca:	08 95       	ret

00001fcc <__prologue_saves__>:
    1fcc:	2f 92       	push	r2
    1fce:	3f 92       	push	r3
    1fd0:	4f 92       	push	r4
    1fd2:	5f 92       	push	r5
    1fd4:	6f 92       	push	r6
    1fd6:	7f 92       	push	r7
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	ca 1b       	sub	r28, r26
    1ff6:	db 0b       	sbc	r29, r27
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	09 94       	ijmp

00002004 <__epilogue_restores__>:
    2004:	2a 88       	ldd	r2, Y+18	; 0x12
    2006:	39 88       	ldd	r3, Y+17	; 0x11
    2008:	48 88       	ldd	r4, Y+16	; 0x10
    200a:	5f 84       	ldd	r5, Y+15	; 0x0f
    200c:	6e 84       	ldd	r6, Y+14	; 0x0e
    200e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2010:	8c 84       	ldd	r8, Y+12	; 0x0c
    2012:	9b 84       	ldd	r9, Y+11	; 0x0b
    2014:	aa 84       	ldd	r10, Y+10	; 0x0a
    2016:	b9 84       	ldd	r11, Y+9	; 0x09
    2018:	c8 84       	ldd	r12, Y+8	; 0x08
    201a:	df 80       	ldd	r13, Y+7	; 0x07
    201c:	ee 80       	ldd	r14, Y+6	; 0x06
    201e:	fd 80       	ldd	r15, Y+5	; 0x05
    2020:	0c 81       	ldd	r16, Y+4	; 0x04
    2022:	1b 81       	ldd	r17, Y+3	; 0x03
    2024:	aa 81       	ldd	r26, Y+2	; 0x02
    2026:	b9 81       	ldd	r27, Y+1	; 0x01
    2028:	ce 0f       	add	r28, r30
    202a:	d1 1d       	adc	r29, r1
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	ed 01       	movw	r28, r26
    2038:	08 95       	ret

0000203a <__do_global_dtors>:
    203a:	10 e0       	ldi	r17, 0x00	; 0
    203c:	c8 e3       	ldi	r28, 0x38	; 56
    203e:	d0 e0       	ldi	r29, 0x00	; 0
    2040:	04 c0       	rjmp	.+8      	; 0x204a <__do_global_dtors+0x10>
    2042:	fe 01       	movw	r30, r28
    2044:	0e 94 96 0b 	call	0x172c	; 0x172c <__tablejump2__>
    2048:	21 96       	adiw	r28, 0x01	; 1
    204a:	c9 33       	cpi	r28, 0x39	; 57
    204c:	d1 07       	cpc	r29, r17
    204e:	c9 f7       	brne	.-14     	; 0x2042 <__do_global_dtors+0x8>
    2050:	f8 94       	cli

00002052 <__stop_program>:
    2052:	ff cf       	rjmp	.-2      	; 0x2052 <__stop_program>
